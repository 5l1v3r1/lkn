<chapter id="LKN-recipie">


<!--

  AO: Most of the commands you show should be run as root, right? We
  should show the root prompt as #, not $. This is a subtle little
  convention, but one a lot of readers will recognize. It's also being
  a little more realistic, since those are default prompts.

  gkh: No, you can run lspci and lsusb just fine as a user.  The only
       thing that is needed to be done as root is install the kernel,
       nothing else.
-->

<!--
AO: Some general notes to remember:

I think it could get tiresome to keep saying "Then..." or "Also..."
I think you can just list steps. Readers will assume the steps are
done in order. Sometimes, readers may even want to skip around, so
order is not that important (for xconfig and menuconfig builds). I
did keep one "Also" below because it seemed to fit in well.

Avoid future tense; talk about what the kernel does in the present
(even though it will happen in the future, after building and
booting).

Refer to options such as "SCSI disk support" without any "the." You
can also say 'the "SCSI disk support" option' but there's no need to
add that extra text.
-->
<!--

  AO: A couple more general notes:

About "which" and "that."  You should use "which" for an extra clause
that isn't strictly needed for the sentence to make sense.  If the
clause could be removed and the sentence would still work, use
"which." Also use commas around the clause, as shown here:

        I can't stand being outside when my neighber uses a
        gas-powered lawn mower, which runs at about 110 decibels.

When the clause is required, use "that" and no commas:

        I can't stand being outside when my neighber uses a
        gas-powered lawn mower that runs at about 110 decibels.

(In other words, I can tolerate other kinds of gas-powered lawn mowers.)

To use English-teacher jargon, one uses "that" for descriptive clauses and "which" for restrictive ones.

The British tend to use "which" a lot where American usage is "that."

...

Using "such as" and "like": this is not very important, but our style
guide distinguishes between these. If you are citing EXAMPLES of
something, use "such as." For instance:

	Large companies such as IBM and Hewlett Packard promote
	Linux...

Reserve "like" for more metaphorical situations; these are NOT
examples.

	People treat the claims of these large companies like
	politicians.

...

The word "only." Very important and valuable, but I like to use it in
the right place as defined by English experts. Most writers aren't
sticklers as much as I am, but I think doing it right really makes
things clear for the reader.  The rule is: "Use 'only' before the word
that it modifies." Here are two sentences that show how the location
of "only" makes a difference:

	This network layer only reads the headers on the packets.
	This network layer reads only the headers on the packets.

The first sentence implies, "The layer reads the headers but does not
create or write them." The second sentence implies, "The layer reads
headers but not the contents of the data (for the purposes of
check-summing, etc.)." Probably the writer in this case wants the
latter meaning. But many writers would write the first sentence, which
is formally incorrect and could confuse the reader.

-->


<title>
Kernel Configuration Recipes
</title>


<sect1>
<title>Disks</title>

<!--

  AO: We should have a little text between sect1 and sect2, although
  it's not absolutely required in a reference work. I just put in some
  junk that I thought might set a context; you can change it.

-->
<para>
The Linux kernel supports a wide range of different disk types.
This section shows how to make sure the kernel can
support a few of the more common types of disk controllers.
</para>

<sect2 id="lkn_usb_storage">
<title>USB storage</title>

<para>
To use a USB storage device (commonly referred to as USB "flash"
devices) USB support must be first working properly.  Refer to the recipe
in <xref linkend="lkn_usb" /> for how to do this.
</para>

<para>
A USB storage device can be identified by using the
<literal>lsusb</literal> program.  If the following command sequence
produces the expected result, a USB storage device is present on the
system:
</para>

<!-- gkh -
	What is the proper formatting for typing things on the command
	line and the result?
-->
<screen>
$ <userinput>/usr/sbin/lsusb -v | grep Storage</userinput>
      bInterfaceClass         8 Mass Storage
</screen>

<!--

  AO: I don't want to add a lot of extra work for you, but it occurred
  to me when looking at the HTML output that a lot of instructions
  might look better as numbered lists. Try it out. Would it be a lot
  of work to use numbered lists as I've done in this one example?

-->

<para>
Enable it as follows.
</para>

<orderedlist>

<listitem>
<para>
A USB Storage device is in reality a USB SCSI device that talks over a
USB connection.  Because of this, the SCSI subsystem must be enabled:
<screen>
Device Drivers
    SCSI Device Support
        [*] SCSI Device Support
</screen>
</para>
</listitem>

<listitem>
<para>
Also in the SCSI system, the "SCSI disk support" must be enabled in
order for the device to be mounted properly:
<screen>
Device Drivers
	SCSI Device Support
		[*] SCSI disk support
</screen>
</para>
</listitem>

<listitem><para>
Enable USB Storage support:
<screen>
Device Drivers
	USB Support
	[M] USB Mass Storage support
</screen>
</para></listitem>

</orderedlist>

<para>
A number of specific USB storage devices are listed as separate
configuration items, as they do not follow the standard USB
specification and require special code.  If you have one of these
devices, please enable support for them.
</para>
</sect2>

<sect2 id="lkn_ide">
<title>IDE Disks</title>

<para>
IDE disks are the most common type of PC disk controllers.
To determine if you have a IDE disk controller on the system, run the
following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep IDE</userinput>
00:1f.1 IDE interface: Intel Corporation 82801EB/ER (ICH5/ICH5R) IDE Controller (rev 02)
00:1f.2 IDE interface: Intel Corporation 82801EB (ICH5) SATA Controller (rev 02)
</screen>
Note that your response will probably not be identical; all that is
important is that the command shows some an IDE Controller (the first
<!--

  AO: Is plural "controllers" accurate here?

  gkh: yes, that's fine.
-->
device in the previous example.)  If you find only SATA controllers, please
see <xref linkend="lkn_sata" />.
</para>

<para>
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
    [*] PCI Support
</screen>

Enable the IDE subsystem, and IDE support:
<screen>
Device Drivers
    [*] ATA/ATAPI/MFM/RLL support
    [*]   Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support
</screen>

In the ATA system, the specific type of IDE controller that you have must
be enabled in order for it to work properly.  To provide a good backup
in case you choose the wrong type, select the "generic" IDE controller:
<screen>
Device Drivers
    ATA/ATAPI/MFM/RLL support
        [*]     generic/default IDE chipset support
</screen>

Enable the different PCI IDE controllers:
<screen>
Device Drivers
    ATA/ATAPI/MFM/RLL support
        [*]     PCI IDE chipset support
</screen>

This opens up a lengthy submenu of the different IDE controller types.
Select the proper one based on the name of the device you found in the
original step.
</para>

</sect2>

<sect2 id="lkn_sata">
<title>Serial ATA (SATA)</title>

<para>
SATA is a type of disk controller that is the successor to the IDE bus.
To determine if you have a SATA disk controller on the system, run the
following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep SATA</userinput>
00:1f.2 IDE interface: Intel Corporation 82801EB (ICH5) SATA Controller (rev 02)
</screen>
Note that your response will probably not be identical; all that is
important is that the command shows some SATA devices.
</para>

<para>
SATA disks use a kernel library called <emphasis>libata</emphasis> that handles most of the
SATA specific functionality.  That library uses the SCSI layer to talk
to the block layer, so many different kernel options need to be enabled
in order for SATA disks to work properly.
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
</screen>

Enable the SCSI subsystem:
<screen>
Device Drivers
	SCSI Device Support
		[*] SCSI Device Support
</screen>

Also in the SCSI system, the "SCSI disk support" option must be enabled in
order for the device to be mounted properly:
<screen>
Device Drivers
	SCSI Device Support
		[*] SCSI disk support
</screen>

The SATA options are under the "SCSI low-level drivers" section:
<screen>
Device Drivers
	SCSI Device Support
		SCSI low-level drivers
			[*] Serial ATA (SATA) support
</screen>

In that section, enable the specific SATA controller type that you have.
Look at the output of the previously mentioned <literal>lspci</literal>
command for a list of the types of SATA controllers that are present on
your system.  For example, most motherboards from Intel require the PIIX/ICH
SATA driver (as the previous example showed.)
<screen>
Device Drivers
	SCSI Device Support
		SCSI low-level drivers
			[*] Serial ATA (SATA) support
			[*]   Intel PIIX/ICH SATA support
</screen>


</para>
</sect2>

<sect2 id="lkn_burn_cdrom">
<title>Burning a CD-ROM</title>

<para>
Burning a CD-ROM is very simple on Linux.  If your kernel can support
reading from a CD-ROM, it can also support burning a CD-ROM.  There are
two ways to enable CD-ROM support in Linux, one for IDE drives and one for
SCSI and SATA drives.
</para>

<sect3>
<title>IDE CD-ROM drives</title>

<para>
IDE CD-ROM drives are controlled by the same IDE controller as your main IDE
disk drives.  Make sure the IDE controller is properly supported as
described in <xref linkend="lkn_ide" />.  If that is properly supported,
the IDE CD-ROM drive can be used without any further kernel configuration.
</para>

</sect3>

<sect3>
<title>SCSI and SATA CD-ROM drives</title>

<para>
SATA and SCSI CD-ROM drives are controlled by the same controller as your
main disk drives.  Make sure the SATA or SCSI controller is properly
supported.  For SATA disks, see <xref linkend="lkn_sata" />.
</para>

<para>
To support SATA or SCSI CD-ROM drives, the SCSI CD-ROM driver must be
enabled:
<screen>
Device Drivers
	SCSI Device Support
		[*] SCSI CDROM support
</screen>

Once that is enabled, the SATA or SCSI CD-ROM drive will work properly.
</para>

</sect3>
</sect2>
</sect1>

<sect1>
<title>Devices</title>

<para>
Linux supports a vast range of different types of devices (more than any
other operating system ever has).  This section shows how to enable
some of the more common types.
</para>

<sect2 id="lkn_usb">
<title>USB</title>

<para>
Linux supports many different types of USB devices.  To enable USB
support, you must first enable support for a USB controller, which
drives the USB connection on the machine.
</para>

<para>
To determine if your machine has a USB controller, and which type
it is, run the following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep USB</userinput>
00:1d.0 USB Controller: Intel Corporation 82801EB/ER (ICH5/ICH5R) USB UHCI Controller #1 (rev 02)
00:1d.1 USB Controller: Intel Corporation 82801EB/ER (ICH5/ICH5R) USB UHCI Controller #2 (rev 02)
00:1d.2 USB Controller: Intel Corporation 82801EB/ER (ICH5/ICH5R) USB UHCI Controller #3 (rev 02)
00:1d.3 USB Controller: Intel Corporation 82801EB/ER (ICH5/ICH5R) USB UHCI Controller #4 (rev 02)
00:1d.7 USB Controller: Intel Corporation 82801EB/ER (ICH5/ICH5R) USB2 EHCI Controller (rev 02)
</screen>
Note that your response will probably not be identical; all that is
important is that the command shows some USB controllers.
</para>

<para>
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
</screen>

Enable USB support for the kernel:
<screen>
Device Drivers
	USB Support
		[M] Support for Host-side USB
</screen>

Enable the specific USB Host controllers for your machine (it is safe to
enable them all if you do not know which you have):
<screen>
Device Drivers
	USB Support
	---   USB Host Controller Drivers
	[M]   EHCI HCD (USB 2.0) support
	[M]   OHCI HCD support
	[M]   UHCI HCD (most Intel and VIA) support
</screen>

Individual USB devices also need their drivers to be enabled.  A large
majority of them are under the main USB driver section:
<screen>
Device Drivers
	USB Support
</screen>
<!--

  AO: I think it's a good idea to put names of menu items in <literal>
  tags. That's because some names may be long phrases that look odd
  when dropped in a sentence; they need a font change. On the other
  hand, something such "main USB driver section" is a generic
  reference to USB; it's safe to leave that in plain font. Use what
  feels right in each case.

-->

But some, such as USB video and DVB and sound devices are listed in the
section controlling all of these types of devices.  For example, the USB
sound driver can be found under the <literal>Sound</literal> menu:
<screen>
Device drivers
	Sound
		[*] Sound card support
			[*] Advanced Linux Sound Architecture
				USB Devices
					[M] USB Audio/MIDI driver
</screen>
</para>

<!--

  AO: I thought it would be nice to point readers to the next step,
  should they need it. Would it load the book down too much to put
  "next step" paragraphs like this in?

-->

<para>

If you want to insert USB storage devices (USB flash), look now at
<xref linkend="lkn_usb_storage" />.

</para>

</sect2>

<sect2 id="lkn_firewire">
<title>IEEE 1394 (FireWire)</title>

<para>
IEEE 1394 is commonly known by the name FireWire, the name by which Apple
Computer publicized it. IEEE 1394 is a
high-speed bus that connects external devices, much as USB does.
</para>

<para>
<!--

  AO: Notice how I use "whether" instead of "if" when you're trying to
  determine whether something is true. A minor nit.

-->
To determine whether your machine has a FireWire controller, and which type
is is, run the following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep FireWire</userinput>
06:0c.0 FireWire (IEEE 1394): Texas Instruments TSB43AB22/A IEEE-1394a-2000 Controller (PHY/Link)
06:0d.2 FireWire (IEEE 1394): Creative Labs SB Audigy FireWire Port (rev 04)
</screen>
Note that your response will probably not be identical; all that's
important is that the command shows some FireWire controllers.
</para>

<para>
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
</screen>

Enable IEEE 1394 support for the kernel:
<screen>
Device Drivers
	IEEE 1394 (FireWire) support
		[*] IEEE 1394 (FireWire) support
</screen>

Enable the specific type of Firewire host controller you have:
<screen>
Device Drivers
	IEEE 1394 (FireWire) support
		[*] IEEE 1394 (FireWire) support
		---   Device Drivers
		[M]   Texas Instruments PCILynx support
		[M]   OHCI-1394 support

</screen>

And enable the specific type of Firewire devices you have:
<screen>
Device Drivers
	IEEE 1394 (FireWire) support
		[*] IEEE 1394 (FireWire) support
		---   Protocol Drivers
		[M]   OHCI-1394 Video support
		[M]   SBP-2 support (Harddisks etc.)
		[ ]     Enable Phys DMA support for SBP2 (Debug)
		[M]   Ethernet over 1394
		[M]   OHCI-DV I/O support
		[M]   Raw IEEE1394 I/O support
</screen>
</para>
</sect2>

<sect2 id="lkn_pci_hotplug">
<title>PCI hotplug</title>

<para>
PCI hotplug systems are becoming more popular with the use of
ExpressCard and laptop docking stations.
</para>

<para>
To determine whether your machine has an ExpressCard controller, look
at the hardware to see whether an ExpressCard card can be plugged into it.
</para>

<para>
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
</screen>
Enable PCI Hotplug support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
	PCI Hotplug Support
		[M] Support for PCI Hotplug (EXPERIMENTAL)
</screen>

There is a wide range of different types of PCI Hotplug controllers.
For most laptops and for ExpressCard support, enable the ACPI
controller:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
	PCI Hotplug Support
		[M] Support for PCI Hotplug (EXPERIMENTAL)
		[M]   ACPI PCI Hotplug driver
</screen>

as well as the PCI Express controller:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
	[*] PCI Express Support
	[M]   PCI Express Hotplug driver
</screen>
</para>
</sect2>

<sect2 id="lkn_pcmcia">
<title>PCMCIA / CardBus</title>

<!--

  AO: Let's make sure to do cross-references in a way that will
  translate during conversion; see what I did with xref.

-->
<para>
PCMCIA and CardBus device support is in almost every laptop manufactured.  Newer
laptops, however, are switching to the ExpressCard format (see the PCI Hotplug
recipe in <xref linkend="lkn_pci_hotplug" />).
</para>

<para>
To determine whether your machine has a PCMCIA controller, look at
the hardware to see whether a PCMCIA card can be plugged into it.
</para>

<para>
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	[*] PCI Support
</screen>

Enable PCCARD support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	PCCARD (PCMCIA/CardBus) support
		[M] PCCard (PCMCIA/CardBus) support
</screen>

Enable both PCMCIA and CardBus support to cover the widest range of
devices:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	PCCARD (PCMCIA/CardBus) support
		[M] PCCard (PCMCIA/CardBus) support
		[M]   16-bit PCMCIA support
		[*]   32-bit CardBus support
</screen>

Enable the card bridge type for your laptop.  The most common one is the
"yenta-like" controller:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
	PCCARD (PCMCIA/CardBus) support
		[M] PCCard (PCMCIA/CardBus) support
		[M]   CardBus yenta-compatible bridge support
		[ ]   Cirrus PD6729 compatible bridge support
		[ ]   i82092 compatible bridge support
		[ ]   i82365 compatible bridge support
		[ ]   Databook TCIC host bridge support
</screen>
</para>
</sect2>

<sect2 id="sound">
<title>Sound (ALSA)</title>

<para>
ALSA (Advanced Linux Sound Architecture) is the current sound
system for the Linux kernel.  An earlier sound system (OSS) has
been deprecated, and almost all of the older drivers have been removed
from the kernel source tree.
</para>

<para>
To determine which type of sound controller is present in your machine,
and what type it is, run the following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep -i audio</userinput>
00:1f.5 Multimedia audio controller: Intel Corporation 82801EB/ER (ICH5/ICH5R) AC'97 Audio Controller (rev 02)
06:0d.0 Multimedia audio controller: Creative Labs SB Audigy (rev 04)
</screen>
Note that your response will probably not be identical; all that's
important is that the command shows some Audio controllers.
</para>

<para>
Enable basic sound support:
<screen>
Device Drivers
    Sound
        [M] Sound Card Support
</screen>
Enable ALSA:
<screen>
Device Drivers
    Sound
        [M] Sound Card Support
            [M] Advanced Linux Sound Architecture
</screen>
There are a number of different base ALSA options, such as support for
the older <literal>OSS</literal> sound protocol.  If you have older
applications, you should enable the related options:
<screen>
Device Drivers
    Sound
        [M] Sound Card Support
            [M] Advanced Linux Sound Architecture
            [M]   OSS Mixer API
            [M]   OSS PCM (digital audio) API
            [ ]     OSS PCM (digital audio) API - Include plugin system
</screen>

Enable the specific type of sound device that you have.  PCI sound cards
are under the PCI submenu:
<screen>
Device Drivers
    Sound
        [M] Sound Card Support
            [M] Advanced Linux Sound Architecture
                PCI Devices
</screen>


</para>
</sect2>

</sect1>

<sect1>
<title>CPU</title>

<para>
If you wish to have the Linux kernel run as fast as possible for your specific
processor and hardware type, there are a few options that you can
set to get the last bit of performance out of the hardware.  This section
will show some of the different processor-specific options that you can
tune for your processor.
<!--

  AO: One option, concerning SMP, seems particularly important. It
  sounds like if you don't enable it, you could waste half or more of
  your computer. Is that worth saying?

  gkh: yes, is a section down below.

-->
</para>

<sect2 id="processor">
<title>Processor Types</title>

<para>
A wide range of specific processor options are available to
be changed in the Linux kernel.  The most important one for our
purpose specifies  the
exact type of CPU you are using this kernel for.  To determine the type of
processor you are using, run the following command:
<screen>
$ <userinput>cat /proc/cpuinfo  | grep "model name"</userinput>
model name      : Intel(R) Xeon(TM) CPU 3.20GHz
</screen>
Note that your response will probably not be identical; all that is
important is that the command shows the model name of the processor present
on the system.
</para>
<!--

  AO: The following paragraph seems to apply to Intel chips. Because
  this book might have a following among people using other chips,
  maybe you should say something about what PC-compatible means. Does
  it assume Intel/AMD?

  gkh:  Yes it does, but all of these processors are compatible with the
  Intel/AMD ones.  I don't think it's necessary to go into the different
  types of processors here, do you?

-->

<para>
Select the subarchitecture type of the processor:
<screen>
Processor type and features
    Subarchitecture Type
        (X) PC-compatible
        ( ) AMD Elan
        ( ) Voyager (NCR)
        ( ) NUMAQ (IBM/Sequent)
        ( ) Summit/EXA (IBM x440)
        ( ) Support for other sub-arch SMP systems with more than 8 CPUs
        ( ) SGI 320/540 (Visual Workstation)
        ( ) Generic architecture (Summit, bigsmp, ES7000, default)
        ( ) Support for Unisys ES7000 IA32 series
</screen>
Only if your machine is one of the other types in the preceding list should you
select anything other than the <literal>PC-compatible</literal> option.
However, if you wish to create a single kernel that will run on all of the
types of machines shown, select the <literal>Generic architecture</literal>
option.
</para>

<para>
Select the processor family type.  The <literal>PC-compatible</literal>
option needs to be selected from the previous options for this submenu
to be made available to you:
<screen>
Processor type and features
    Processor family
        ( ) 386
        ( ) 486
        ( ) 586/K5/5x86/6x86/6x86MX
        ( ) Pentium-Classic
        ( ) Pentium-MMX
        ( ) Pentium-Pro
        ( ) Pentium-II/Celeron(pre-Coppermine)
        ( ) Pentium-III/Celeron(Coppermine)/Pentium-III Xeon
        ( ) Pentium M
        (X) Pentium-4/Celeron(P4-based)/Pentium-4 M/Xeon
        ( ) K6/K6-II/K6-III
        ( ) Athlon/Duron/K7
        ( ) Opteron/Athlon64/Hammer/K8
        ( ) Crusoe
        ( ) Efficeon
        ( ) Winchip-C6
        ( ) Winchip-2
        ( ) Winchip-2A/Winchip-3
        ( ) GeodeGX1
        ( ) Geode GX/LX
        ( ) CyrixIII/VIA-C3
        ( ) VIA C3-2 (Nehemiah)
        ( ) Generic x86 support
</screen>
For more details on this configuration item, please refer to
<xref linkend="CONFIG_M386" /> for a full description of how to pick
the proper processor type depending on what processor you have, and what
range of machines you wish the kernel to run on.
</para>

</sect2>

<sect2 id="smp">
<title>SMP</title>

<para>
If the machine you are using for Linux contains more than one CPU, or a
Hyperthreaded or Dual Core CPU, you should select the multiprocessor
option for the Linux kernel in order to take advantage of the additional
processors.  If you do not select this option, you will be wasting the other
processors by not using them at all.
</para>

<para>
Enable multiprocessing:
<screen>
Processor type and features
    [*] Symmetric multi-processing support
</screen>
</para>

</sect2>

<sect2 id="preempt">
<title>Preemption</title>

<para>
Systems running as a server have very different workload requirements from
those being used as a desktop for video and audio applicatons.  The kernel
allows different modes of "preemption" in order to handle these different
workloads.  Preemption is the ability of the kernel to interrupt itself
while it is doing something else, in order to work on something with a
higher priority, such as updating a sound or video program.
</para>

<para>
To change to a different preemption model, use this menu:
<screen>
Processor type and features
    Preemption Model
        (X) No Forced Preemption (Server)
	( ) Voluntary Kernel Preemption (Desktop)
	( ) Preemptible Kernel (Low-Latency Desktop)
</screen>
</para>

<para>
If you wish to make the kernel even more responsive to higher priority
tasks than the general preemption option provides, you can also allow
interruptions to
one of the main internal kernel locks:
<screen>
Processor type and features
    [*] Preempt The Big Kernel Lock
</screen>
This option is able to be selected only if you have already selected
either the <literal>Preemptible Kernel</literal> or <literal>Symmetric
multi-processing support</literal> options.
</para>


</sect2>

<sect2 id="suspend">
<title>Suspend</title>

<para>
The Linux kernel has the ability to suspend itself to disk, allowing you to
disconnect the power, and then at a later time, power up and resume exactly
where the machine was when it was suspended.  This functionality is very
useful on laptops that run Linux.
</para>

<para>
Enable this by selecting:
<screen>
Power management options (ACPI, APM)
    [*] Software Suspend
</screen>

The kernel needs to know where to save the suspended kernel image to, and
then later where to resume it from.  This location is usually a kernel swap
partition on the disk.  To specify which partition this should be:
<screen>
Power management options (ACPI, APM)
    (/dev/hda3) Default resume partition
</screen>
</para>

<note>
<para>
Make sure you specify the proper partition to suspend the machine to,
and do not use a partition that is being used by the system for data.
The proper
partition name can be found by running the following command:
<screen>
$ <userinput>/sbin/swapon -s | grep dev | cut -f 1 -d ' '</userinput>
/dev/hda3
</screen>
Use the output of the preceding command in this kernel configuration option,
and on the kernel boot line where it specifies where the kernel should be resumed
from.  After the machine has been suspended, to resume it proper, pass the
<literal>resume=/dev/swappartition</literal> argument to the kernel command
line to have it use the proper image.  If you do not want to have the
suspended image restored, use the <literal>noresume</literal> kernel
command line argument.
</para>
</note>

</sect2>


<sect2 id="cpufreq">
<title>CPU Frequency Scaling</title>

<para>
Most modern processors can slow down the internal clock of the
processor in order to conserve power and battery life.  Linux supports this
ability and offers a variety of power "governors."
Different governors implement different heuristics in order to determine how
to vary the processor speed depending on the system load and
other variables.
</para>

<para>
Enable the basic frequency scaling functionality:
<screen>
Power management options (ACPI, APM)
    [*] CPU Frequency scaling
</screen>

Select the different type of frequency governors you wish to use:
<screen>
Power management options (ACPI, APM)
    [*] CPU Frequency scaling
    [*]   'performance' governor
    [*]   'powersave' governor
    [*]   'userspace' governor for userspace frequency scaling
    [*]   'ondemand' cpufreq policy governor
    [*]   'conservative' cpufreq governor
</screen>

Select the default governor you wish to have running when the maching
boots:
<screen>
Power management options (ACPI, APM)
    [*] CPU Frequency scaling
          Default CPUFreq governor (performance)
</screen>

Select the specific processor type on the machine.  For details on how to
determine the processor type of the machine, see
<xref linkend="processor" />.

<screen>
Power management options (ACPI, APM)
    [*] CPU Frequency scaling
    ---   CPUFreq processor drivers
    [ ]   ACPI Processor P-States driver
    [ ]   AMD Mobile K6-2/K6-3 PowerNow!
    [ ]   AMD Mobile Athlon/Duron PowerNow!
    [ ]   AMD Opteron/Athlon64 PowerNow!
    [ ]   Cyrix MediaGX/NatSemi Geode Suspend Modulation
    [*]   Intel Enhanced SpeedStep
    [*]     Use ACPI tables to decode valid frequency/voltage pairs
    [*]     Built-in tables for Banias CPUs
    [ ]   Intel Speedstep on ICH-M chipsets (ioport interface)
    [ ]   Intel SpeedStep on 440BX/ZX/MX chipsets (SMI interface)
    [ ]   Intel Pentium 4 clock modulation
    [ ]   nVidia nForce2 FSB changing
    [ ]   Transmeta LongRun
</screen>
</para>

</sect2>

<sect2 id="mm">
<title>Different Memory Models</title>

<para>
Linux on Intel 32bit hardware can access up to 64 Gigabytes
of memory, but the address space of the 32bit processor is only 4
Gigabytes.  To work around this limitation, Linux can map the
additional memory into another area and then switch to it when other
tasks need it.  But if your machine has a smaller amount of memory, it is
easier for Linux not to have to worry about handling the bigger areas, so
it is beneficial to tell the kernel how much memory you want it to
support.  For a more detailed description of this option, please see
<xref linkend="CONFIG_NOHIGHMEM" />.
</para>

<para>
Linux supports three different memory models for 32bit Intel processors,
depending on the memory available:

<itemizedlist>
<listitem><para>Under 1 Gigabyte of physical memory</para></listitem>
<listitem><para>Between 1 and 4 Gigabytes of physical memory.</para></listitem>
<listitem><para>Greater than 4 Gigabytes of physical memory.</para></listitem>
</itemizedlist>

To select the amount of memory:
<screen>
Processor type and features
    High Memory Support
        (X) off
        ( ) 4GB
        ( ) 64GB
</screen>
</para>

</sect2>

<sect2 id="acpi">
<title>ACPI</title>
<para>
On almost all modern Intel based systems, ACPI is required in order for the
machine to work properly.  ACPI is a standard that allows the BIOS of the
computer to work with the operating system in order to access the hardware
in an indirect manner, in the hope of  handling a wide range of
devices with relatively little code specific to each operating system.  ACPI also
provides a facility to help suspend and resume a machine and
control the speed of the processor and fans. If you have a laptop, it is
recommended that you enable this option.
</para>

<para>
To enable ACPI:
<screen>
Power management options (ACPI, APM)
    ACPI (Advanced Configuration and Power Interface) Support
        [*] ACPI Support
</screen>

There are a wide range of different ACPI "drivers" that control different
types of ACPI devices.  You should enable the specific ones that you have
on your machine:
<screen>
Power management options (ACPI, APM)
    ACPI (Advanced Configuration and Power Interface) Support
        [*] ACPI Support
        [*]   AC Adapter
        [*]   Battery
        [*]   Button
        [*]   Video
        [*]   Generic Hotkey (EXPERIMENTAL)
        [*]   Fan
        [*]   Processor
        [*]     Thermal Zone
        [ ]   ASUS/Medion Laptop Extras
        [ ]   IBM ThinkPad Laptop Extras
        [ ]   Toshiba Laptop Extras
</screen>
</para>

</sect2>

</sect1>

<sect1 id="lkn_network">
<title>Networking</title>

<para>
Networking is required for almost all machines today, and Linux supports
almost every networking option availble.  Here we are going to
show only a few of the wide variety that are present.
</para>

<para>
For all networking options, including different drivers, the main network
configuration option must be enabled:
<screen>
Networking
    [*] Networking support
</screen>
</para>

<para>
The TCP/IP option should also be selected so that the machine can talk to
other machines on the Internet:
<screen>
Networking
    [*] Networking support
          Networking options
              [*] TCP/IP networking
</screen>
</para>

<sect2 id="netfilter">
<title>Netfilter</title>

<para>
The netfilter portion of the Linux kernel is a framework for filtering and
manipulating all network packets that pass through the machine.  It is
commonly used if you wish to enable a firewall on the machine to protect it
from different systems on the Internet, or if you wish to use the machine
to act as a proxy for other machines on the network.  For more details on
what netfilter is good for, please see <xref linkend="CONFIG_NETFILTER" />.
</para>

<para>
To enable the main netfilter option:
<screen>
Networking
    [*] Networking support
          Networking options
              [*] Network packet filtering (replaces ipchains)
</screen>
</para>

<para>
<!-- one reviewer wanted more details here as to why we "recommend" this.  -->
It is recommended that you enable the netfilter netlink interface and the
Xtables support when using netlink:
<screen>
Networking
    [*] Networking support
          Networking options
              [*] Network packet filtering (replaces ipchains)
                    Core Netfilter Configuration
                        [*] Netfilter netlink interface
                        [*] Netfilter Xtables support (required for ip_tables)
</screen>
</para>

<para>
The different protocols that you wish to filter should also be selected:
<screen>
Networking
    [*] Networking support
          Networking options
              [*] Network packet filtering (replaces ipchains)
                    IP: Netfilter Configuration
                        [M] Connection tracking (required for masq/NAT)
                        [ ]   Connection tracking flow accounting
                        [ ]   Connection mark tracking support
                        [ ]   Connection tracking events (EXPERIMENTAL)
                        [ ]   SCTP protocol connection tracking support (EXPERIMENTAL)
                        [M]   FTP protocol support
                        [ ]   IRC protocol support
                        [ ]   NetBIOS name service protocol support (EXPERIMENTAL)
                        [M]   TFTP protocol support
                        [ ]   Amanda backup protocol support
                        [ ]   PPTP protocol support
                        [ ]   H.323 protocol support (EXPERIMENTAL)
</screen>
</para>
</sect2>

<sect2 id="netdrv">
<title>Network Drivers</title>

<para>
Linux supports a wide array of different network devices.  The
most common one is a PCI network device, into which an Ethernet cable can be
plugged.
To determine whether you have a PCI network device on the system, and what type
it is, run the following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep Ethernet</userinput>
03:0c.0 Ethernet controller: D-Link System Inc RTL8139 Ethernet (rev 10)
03:0e.0 Ethernet controller: Intel Corporation 82545GM Gigabit Ethernet Controller (rev 04)
</screen>
Note that your response will probably not be identical; all that is
important is that the command shows some PCI Ethernet devices.
</para>

<para>
Enable PCI support for the kernel:
<screen>
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
    [*] PCI Support
</screen>
</para>

<para>
Enable basic network device support:
<screen>
Device Drivers
    Network device support
        [*] Network device support
</screen>
</para>

<para>
Then comes the fun task of finding the specific device drivers for your
hardware.  The most common place to find Ethernet devices for modern
hardware is in the gigabit section of the driver selection:
<screen>
Device Drivers
    Network device support
        [*] Network device support
            Ethernet (1000 Mbit)
</screen>
Some older ethernet devices will be found in the 10 and 100 Mbit section:
<screen>
Device Drivers
    Network device support
        [*] Network device support
            Ethernet (10 or 100Mbit)
</screen>
Look through those sections to find the proper driver for your specific
devices.
</para>

</sect2>

<sect2 id="irda">
<title>IrDA</title>

<para>
IrDA is an infrared protocol used by a number of laptops and PDAs to
communicate over very short distances.  It is prevalent on older hardware,
with newer hardware using Bluetooth to communicate instead
<xref linkend="bluetooth" />.
</para>

<para>
IrDA is a network protocol, so it can be found under the networking main
menu:
<screen>
Networking
    [*] Networking support
    [*]   IrDA (infrared) subsystem support
</screen>
</para>

<para>
A number of different IrDA protocols can be selected,
depending on the type of device you wish to communicate with and the
program used to do the communication:
<screen>
Networking
    [*] Networking support
        --- IrDA (infrared) subsystem support
        ---   IrDA protocols
        [*]   IrLAN protocol (NEW)
        [*]   IrCOMM protocol (NEW)
        [*]   Ultra (connectionless) protocol (NEW)
</screen>
</para>

<para>
There are a wide range of different types of IrDA devices, some serial,
some PCI, and others based on USB.  To select the specific type of IrDA
device you have, choose it under the driver submenu for IrDA:
<screen>
Networking
    [*] Networking support
        --- IrDA (infrared) subsystem support
              Infrared-port device drivers
              --- SIR device drivers
              [ ] IrTTY (uses Linux serial driver)
              --- Dongle support
              --- Old SIR device drivers
              --- Old Serial dongle support
              --- FIR device drivers
              [ ] IrDA USB dongles
              [ ] SigmaTel STIr4200 bridge (EXPERIMENTAL)
              [ ] NSC PC87108/PC87338
              [ ] Winbond W83977AF (IR)
              [ ] Toshiba Type-O IR Port
              [ ] SMSC IrCC (EXPERIMENTAL)
              [ ] ALi M5123 FIR (EXPERIMENTAL)
              [ ] VLSI 82C147 SIR/MIR/FIR (EXPERIMENTAL)
              [ ] VIA VT8231/VT1211 SIR/MIR/FIR
</screen>
</para>


</sect2>

<sect2 id="bluetooth">
<title>Bluetooth</title>

<para>
Bluetooth is a wireless technology that was created to replace IrDA to talk
between devices over a very short distance.  It is a shortrange wireless
technology that was designed as a replacement for cables.  It operates
within a 10 meter radius and is commonly used in mobile phones.
</para>

<para>
Bluetooth is a network protocol, so it can be found under the networking
main menu:
<screen>
Networking
    [*] Networking support
    [*]   Bluetooth subsystem support
</screen>
</para>

<para>
There are two main protocol selections for Bluetooth.  Both of these should
be enabled in order to work with all types of Bluetooth devices:
<screen>
Networking
    [*] Networking support
        --- Bluetooth subsystem support
        [*]   L2CAP protocol support
        [*]   SCO links support
</screen>
</para>

<para>
There are relativly few individual Bluetooth devices drivers available, because
almost all of these devices follow the Bluetooth specification detailing
how devices should operate.  The drivers marked in the following list must be selected in order for
Bluetooth to work with the device:
<screen>
Networking
    [*] Networking support
        --- Bluetooth subsystem support
            Bluetooth device drivers
                [M] HCI USB driver
                [*]   SCO (voice) support
                [ ] HCI UART driver
                [M] HCI BCM203x USB driver
                [M] HCI BPA10x USB driver
                [ ] HCI BlueFRITZ! USB driver
                [ ] HCI DTL1 (PC Card) driver
                [ ] HCI BT3C (PC Card) driver
                [ ] HCI BlueCard (PC Card) driver
                [ ] HCI UART (PC Card) device driver
                [ ] HCI VHCI (Virtual HCI device) driver
</screen>
</para>

</sect2>

<sect2 id="wireless">
<title>Wireless</title>

<para>
Wireless networking is very popular, with almost all modern laptops having a
built-in wireless network device.  Linux supports a wide range of wireless
drivers, with more being added every week.
To determine whether you have a PCI wireless device on the system, and what type
it is, run the following command:
<screen>
$ <userinput>/usr/sbin/lspci | grep -i wireless</userinput>
06:05.0 Network controller: Intel Corporation PRO/Wireless 2915ABG MiniPCI Adapter (rev 05)
</screen>
Note that your response will probably not be identical; all that is
important is that the command shows some PCI Wireless devices.
</para>

<para>
To enable wireless support in Linux, the IEEE 802.11 network configuration
option must be enabled (802.11 is the number of the wireless specification
that all these devices follow.)
<screen>
Networking
    [*] Networking support
    [*]   Generic IEEE 802.11 Networking Stack
</screen>
</para>

<para>
Also enable the different 802.11 protocol options, and the "Software MAC"
option to provide full support for all different types of wireless devices
in Linux:
<screen>
Networking
    [*] Networking support
    [*]   Generic IEEE 802.11 Networking Stack
    [*]     IEEE 802.11 WEP encryption (802.1x)
    [M]     IEEE 802.11i CCMP support
    [M]     IEEE 802.11i TKIP encryption
    [M]     Software MAC add-on to the IEEE 802.11 networking stack
</screen>
</para>

<para>
Support for the different PCI types of wireless network devices are found
under the Network driver section of the configuration:
<screen>
Device Drivers
    Network device support
        Wireless LAN (non-hamradio)
            [*] Wireless LAN drivers (non-hamradio) &amp; Wireless Extensions
            [*]   Wireless Extension API over RtNetlink
</screen>
There is a wide range of different PCI drivers in this section. Select the
proper one depending on the device you have.
</para>

<para>
The USB wireless networking device drivers are in a different section of
the configuration:
<screen>
Device Drivers
    USB Support
        USB Network Adapters
</screen>
</para>

</sect2>

</sect1>

<sect1>
<title>Filesystems</title>

<para>
Linux supports a wide range of traditional file system types and a number
of different types of filesystems (volume managers, clustered filesystems,
etc.)  The traditional file system types (normal or journaled) can be
selected from the main File System configuration menu:
<screen>
File Systems
    [*] Second extended fs support
    [*] Ext3 journalling file system support
    [ ] Reiserfs support
    [ ] JFS filesystem support
    [ ] XFS filesystem support
</screen>
</para>

<para>
This section will show a few of the non-traditional file system types that
Linux supports, and how to enable them.
</para>

<sect2 id="raid">
<title>RAID</title>

<para>
RAID offers the option of combining numerous disks together so that they
look like one logical disk.  This can help in providing ways of providing
redundancy, or speed by spreading the data across different disk platters.
Linux supports both hardware and software RAID.  Hardware raid is handled
by the disk controller, without any help needed from the kernel.
</para>

<para>
Software RAID is controlled by the kernel, and can be selected as a build
option:
<screen>
Device Drivers
    Multi-device support (RAID and LVM)
        [*] Multiple devices driver support (RAID and LVM)
        [*]   RAID support
</screen>
</para>

<para>
There are many different types of RAID configurations.  At least one 
needs to be selected in order for RAID to work properly:
<screen>
Device Drivers
    Multi-device support (RAID and LVM)
        [*] Multiple devices driver support (RAID and LVM)
        [*]   RAID support
        [*]     Linear (append) mode
        [*]     RAID-0 (striping) mode
        [*]     RAID-1 (mirroring) mode
        [*]     RAID-10 (mirrored striping) mode (EXPERIMENTAL)
        [*]     RAID-4/RAID-5 mode
        [*]     RAID-6 mode
</screen>
</para>

</sect2>

<sect2 id="lvm">
<title>Logical Volume Manager and Device Mapper</title>

<para>
Much like RAID, LVM (Logical Volume Manager) allows the user to combine
different block devices to look like one logical device.  However it does
<!--

  AO: I'm not sure changing "on" to "through" is correct below, but it
  sounds better.

-->
not work on a device level like RAID, but through a block and sector mapping.
It allows different portions of different disks to be combined together to
look like one large block device to the user.  To do this, the kernel uses
something called Device Mapper (DM).
</para>

<para>
To enable Device Mapper support in the kernel:
<screen>
Device Drivers
    Multi-device support (RAID and LVM)
        [*] Multiple devices driver support (RAID and LVM)
        [*]   Device mapper support
</screen>
</para>

<para>
There are a number of helper modules that work with Device Mapper to
provide additional functionality.  You should enable them if you wish to
encrypt your devices, or allow snapshot functionality:
<screen>
Device Drivers
    Multi-device support (RAID and LVM)
        [*] Multiple devices driver support (RAID and LVM)
        [*]   Device mapper support
        [*]     Crypt target support
        [*]     Snapshot target (EXPERIMENTAL)
        [*]     Mirror target (EXPERIMENTAL)
        [*]     Zero target (EXPERIMENTAL)
        [*]     Multipath target (EXPERIMENTAL)
</screen>
</para>

</sect2>


<sect2 id="samba">
<title>Filesharing with Windows</title>
<!--

  AO: Is this section really about Samba? It's not about the Samba
  servers. My understanding is that the Samba servers can run on Linux
  without the SMB or CIFS filesystem, just serving Linux shares to
  remote systems. And by the same token, a Linux system can support a
  SMB or CIFS filesystem without running Samba so that the Linux
  system can access files on a Windows domain. (I've done that.) I
  might be wrong, but I'd title the section "File-sharing with Windows
  domains".

  gkh: ok, title changed.

-->

<para>
Samba is a program that allows Linux users to access Windows machines
natively across the network, providing a way to share drives and devices in
a transparent manner.  It also allows Linux to work as a Windows server,
allowing Windows clients to connect to it thinking that it is a real
Windows machine.
</para>

<para>
<!--

  AO: CIFS is an evolution of SMB; I think that should be briefly
  stated somehow.

  gkh:  Why?  does that really need to be known?  There's a long history
  behind CIFS that I probably do not want to get into trying to describe
  accurately :)

-->
Two different filesystems that allow a Linux machine to connect
with a Windows machine: the SMB filesystem and the CIFS filesystem.  For
the ability to connect to older Windows for Workgroups or Windows 95 or 98
machines, select the SMB filesystem:
<screen>
File systems
    Network File Systems
        [*] SMB file system support (to mount Windows shares etc.)
</screen>
</para>

<para>
For the ability to connect to newer Windows machines, the CIFS filesystem
is recommended instead:
<screen>
File systems
    Network File Systems
        [*] CIFS support
</screen>
</para>

<para>
For more details on the differences between these two filesystems, and when
one should be used instead of the other, please see
<xref linkend="CONFIG_SMB_FS" /> and
<xref linkend="CONFIG_CIFS" />.
</para>

</sect2>

<sect2 id="ocfs2">
<title>OCFS2</title>

<para>
OCFS2 is a cluster filesystem from Oracle that works for large network
installations and small local systems at the same time.
This filesystem is recommended when using large databases, such as Oracle or DB2, because
it can be moved over time to different backing disks across the network
quite easily as more storage is needed.
</para>

<para>
To enable the filesystem:
<screen>
File Systems
    [*] OCFS2 file system support
</screen>
</para>

</sect2>

</sect1>

<sect1>
<title>Security</title>

<para>
The Linux kernel provides support for different
security models by providing hooks and letting you build in your
choice of model.  Right now, only a few
models come with the default kernel source tree, but developers of new
models are working on getting more accepted.
</para>

<sect2 id="capabilities">
<title>Default Linux Capabilities</title>

<para>
The standard type of security model for Linux is the "capability" model.
You should always select this option unless you really want to run an
insecure kernel for some reason.
</para>

<para>
To enable it:
<screen>
Security options
    [*] Enable different security models
    [*]   Default Linux Capabilities
</screen>
</para>
</sect2>

<sect2 id="selinux">
<title>SELinux</title>

<para>
A very popular security model is called SELinux.  This model is supported
by a number of different Linux distributions.
</para>

<para>
SELinux requires that the networking option be enabled.  See
<xref linkend="lkn_network" /> to enable this.
</para>

<para>
SELinux also requires that audit be enabled in the kernel configuration.
To do this:
<screen>
General setup
    [*] Auditing support
</screen>
</para>

<para>
Also, the networking security option must be enabled:
<screen>
Security options
    [*] Enable different security models
    [*]   Socket and Networking Security Hooks
</screen>
</para>

<para>
Now it is possible to select the SELinux option:
<screen>
Security options
    [*] Enable different security models
    [*] NSA SELinux Support
</screen>
</para>

<para>
There are also a number of individual SELinux options that you might wish
to enable.  Please see the help for the individual different items for more
descriptions on what they do in.
<screen>
Security options
    [*] Enable different security models
    [*] NSA SELinux Support
    [ ]   NSA SELinux boot parameter
    [ ]   NSA SELinux runtime disable
    [*]   NSA SELinux Development Support
    [*]   NSA SELinux AVC Statistics
    (1)   NSA SELinux checkreqprot default value
</screen>
</para>

</sect2>

<!--  If this makes it into the kernel tree, uncomment this section...
<sect2 id="apparmor">
<title>AppArmor</title>
-->

</sect1>

<sect1>
<title>Kernel debugging</title>

<para>
A wide range of different kernel options can help in
debugging what is going on within the kernel.  Following is a list of some
of the more common one that can be useful for discovering new things
about how the kernel works, or help find potential problems within the
current kernel source code.
</para>

<sect2 id="debug_printk">
<title>Kernel log timestamps</title>

<para>
The kernel outputs a wide range of messages to its log file.  These
messages can be seen by looking at the system log file (usually located
in <filename>/var/log/messages</filename>, or by running the
<command>dmesg</command> command.
</para>

<para>
Sometimes it is useful to see exactly when those messages were created.
<command>dmesg</command>, however, does not put any timestamps on the
events it shows, and the time resolution of
<literal>/var/log/messages</literal> is only to the nearest
second.  You can configure the kernel to assign each message a timestamp
that is accurate down to the smallest measurable kernel time value (usually
in the microsecond range.)
</para>

<para>
To enable timestamp options on kernel messages:
<screen>
Kernel hacking
    [*] Show timing information on printks
</screen>
</para>

</sect2>

<sect2 id="sysrq">
<title>Magic SysRq keys</title>

<para>
The <literal>SysRq</literal> key on the keyboard can be used to control
the kernel in a wide range of different ways while the kernel is
running, or if it has crashed.
</para>

<para>
To enable this option:
<screen>
Kernel hacking
    [*] Magic SysRq key
</screen>
</para>

<para>
For a full description of the different actions that can be triggered by
this option, please see the file
<filename>Documentation/sysrq.txt</filename> in the kernel source tree.
</para>
</sect2>

<sect2 id="debugfs">
<title>Debug Filesystem</title>

<para>
A RAM-based filesystem can be used to output a lot of
different debugging information.  This filesystem is called
<literal>debugfs</literal> and can be enabled by:
<screen>
Kernel hacking
    [*] Debug filesystem
</screen>
</para>

<para>
After you enable this option and boot the rebuilt kernel, it
creates the directory
<filename>/sys/kernel/debug</filename> as a location for the user to mount
the <literal>debugfs</literal> filesystem. Do this manually by:
<screen>
$ <userinput>mount -t debugfs none /sys/kernel/debug</userinput>
</screen>
or have the filesystem mounted automatically at boot time by adding the
following line to the <filename>/etc/fstab</filename> file:
<screen>
debugfs /sys/kernel/debug debugfs 0 0
</screen>
</para>

<para>
After you mount <literal>debugfs</literal>, a large number of
different directories and files will turn up in the <literal>/sys/kernel/debug/</literal>
directory. These are all virtual and dynamically generated by the
kernel, like the files in <literal>procfs</literal> or
<literal>sysfs</literal>. The files can be used to help debug different kernel
subsystems, or just perused to see what is happening to the system as it
runs.
</para>
</sect2>

<sect2 id="debug">
<title>General Kernel Debugging</title>

<para>
Here are a range of other good kernel configuration options that you might
wish to enable if you want to help kernel developers debug different
problems, or just learn more about how the kernel works by looking at the
messages that these options print out.  Note that if you enable almost any
of these options, the kernel will slow down a small amount, so if you
notice any decrease in performance, you might wish to disable the
options.
<screen>
Kernel hacking
    [*] Kernel debugging
    [*]   Detect Soft Lockups
    [ ]   Collect scheduler statistics
    [*]   Debug slab memory allocations
    [*]     Memory leak debugging
    [*]   Mutex debugging, deadlock detection
    [*]   Spinlock debugging
    [*]   Sleep-inside-spinlock checking
    [ ]   kobject debugging
    [ ]   Highmem debugging
    [ ]   Compile the kernel with debug info
</screen>
</para>

</sect2>

</sect1>


</chapter>
<!-- vim: set ai tw=72 : -->
