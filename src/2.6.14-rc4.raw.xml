<nutentry>
	<term>X86</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is Linux's home port.  Linux was originally native to the Intel
386, and runs on all the later x86 processors including the Intel
486, 586, Pentiums, and various instruction-set-compatible chips by
AMD, Cyrix, and others.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SEMAPHORE_SLEEPERS</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMU</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SBUS</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UID16</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GENERIC_ISA_DMA</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GENERIC_IOMAP</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCH_MAY_HAVE_PC_FDC</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

menu "Code maturity level options"

<nutentry>
	<term>EXPERIMENTAL</term>
<nutsynopsis>
	"Prompt for development and/or incomplete code/drivers"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some of the various things that Linux supports (such as network
drivers, file systems, network protocols, etc.) can be in a state
of development where the functionality, stability, or the level of
testing is not yet high enough for general use. This is usually
known as the "alpha-test" phase among developers. If a feature is
currently in alpha-test, then the developers usually discourage
uninformed widespread use of this feature by the general public to
avoid "Why doesn't this work?" type mail messages. However, active
testing and use of these systems is welcomed. Just be aware that it
may not meet the normal level of reliability or it may fail to work
in some special cases. Detailed bug reports from people familiar
with the kernel internals are usually welcomed by the developers
(before submitting bug reports, please read the documents
<file:README>, <file:MAINTAINERS>, <file:REPORTING-BUGS>,
<file:Documentation/BUG-HUNTING>, and
<file:Documentation/oops-tracing.txt> in the kernel source).

This option will also make obsoleted drivers available. These are
drivers that have been replaced by something else, and/or are
scheduled to be removed in a future kernel release.

Unless you intend to help test and develop a feature or driver that
falls into this category, or you have a situation that requires
using these features, you should probably say N here, which will
cause the configurator to present you with fewer choices. If
you say Y here, you will be offered the choice of using features or
drivers that are currently considered to be in the alpha-test phase.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CLEAN_COMPILE</term>
<nutsynopsis>
	"Select only drivers expected to compile cleanly"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this option if you don't even want to see the option
to configure known-broken drivers.

If unsure, say Y
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BROKEN</term>
	<para>
	default value
	<literal>y if !CLEAN_COMPILE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BROKEN_ON_SMP</term>
	<para>
	default value
	<literal>y if BROKEN || !SMP</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOCK_KERNEL</term>
	<para>
	default value
	<literal>y if SMP || PREEMPT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INIT_ENV_ARG_LIMIT</term>
	<para>
	default value
	<literal>32 if !USERMODE</literal>
	</para>


	<para>
	default value
	<literal>128 if USERMODE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the value of the two limits on the number of argument and of
env.var passed to init from the kernel command line.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "General setup"

<nutentry>
	<term>LOCALVERSION</term>
<nutsynopsis>
	"Local version - append to kernel release"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>string</literal>
	</para>

	<para>
Append an extra string to the end of your kernel version.
This will show up when you type uname, for example.
The string you set here will be appended after the contents of
any files with a filename matching localversion* in your
object and source tree, in that order.  Your total string can
be a maximum of 64 characters.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOCALVERSION_AUTO</term>
<nutsynopsis>
	"Automatically append version information to the version string"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will try to automatically determine if the current tree is a
release tree by looking for git tags that
belong to the current top of tree revision.

A string of the format -gxxxxxxxx will be added to the localversion
if a git based tree is found.  The string generated by this will be
appended after any matching localversion* files, and after the value
set in CONFIG_LOCALVERSION

Note: This requires Perl, and a git repository, but not necessarily
the git or cogito tools to be installed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SWAP</term>
<nutsynopsis>
	"Support for paging of anonymous memory (swap)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMU</literal>
	</para>

	<para>
	default value
	<literal>y if MMU</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to choose whether you want to have support
for socalled swap devices or swap files in your kernel that are
used to provide more virtual memory than the actual RAM present
in your computer.  If unsure say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYSVIPC</term>
<nutsynopsis>
	"System V IPC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMU</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Inter Process Communication is a suite of library functions and
system calls which let processes (running programs) synchronize and
exchange information. It is generally considered to be a good thing,
and some programs won't run unless you say Y here. In particular, if
you want to run the DOS emulator dosemu under Linux (read the
DOSEMU-HOWTO, available from <http://www.tldp.org/docs.html#howto>),
you'll need to say Y here.

You can find documentation about IPC with "info ipc" and also in
section 6.4 of the Linux Programmer's Guide, available from
<http://www.tldp.org/guides.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>POSIX_MQUEUE</term>
<nutsynopsis>
	"POSIX Message Queues"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
POSIX variant of message queues is a part of IPC. In POSIX message
queues every message has a priority which decides about succession
of receiving it by a process. If you want to compile and run
programs written e.g. for Solaris with use of its POSIX message
queues (functions mq_*) say Y here. To use this feature you will
also need mqueue library, available from
<http://www.mat.uni.torun.pl/~wrona/posix_ipc/>

POSIX message queues are visible as a filesystem called 'mqueue'
and can be mounted somewhere if you want to do filesystem
operations on message queues.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BSD_PROCESS_ACCT</term>
<nutsynopsis>
	"BSD Process Accounting"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, a user level program will be able to instruct the
kernel (via a special system call) to write process accounting
information to a file: whenever a process exits, information about
that process will be appended to the file by the kernel.  The
information includes things such as creation time, owning user,
command name, memory usage, controlling terminal etc. (the complete
list is in the struct acct in <file:include/linux/acct.h>).  It is
up to the user level program to do useful things with this
information.  This is generally a good idea, so say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BSD_PROCESS_ACCT_V3</term>
<nutsynopsis>
	"BSD Process Accounting version 3 file format"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BSD_PROCESS_ACCT</literal>
	</para>

	<para>
	default value
	<literal>n if BSD_PROCESS_ACCT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the process accounting information is written
in a new file format that also logs the process IDs of each
process and it's parent. Note that this file format is incompatible
with previous v0/v1/v2 file formats, so you will need updated tools
for processing it. A preliminary version of these tools is available
at <http://www.physik3.uni-rostock.de/tim/kernel/utils/acct/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYSCTL</term>
<nutsynopsis>
	"Sysctl support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The sysctl interface provides a means of dynamically changing
certain kernel parameters and variables on the fly without requiring
a recompile of the kernel or reboot of the system.  The primary
interface consists of a system call, but if you say Y to "/proc
file system support", a tree of modifiable sysctl entries will be
generated beneath the /proc/sys directory. They are explained in the
files in <file:Documentation/sysctl/>.  Note that enabling this
option will enlarge the kernel by at least 8 KB.

As it is generally a good thing, you should say Y here unless
building a kernel for install/rescue disks or your system is very
limited in memory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AUDIT</term>
<nutsynopsis>
	"Auditing support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	default value
	<literal>y if NET && SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable auditing infrastructure that can be used with another
kernel subsystem, such as SELinux (which requires this for
logging of avc messages output).  Does not do system-call
auditing without CONFIG_AUDITSYSCALL.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AUDITSYSCALL</term>
<nutsynopsis>
	"Enable system-call auditing support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AUDIT && (X86 || PPC || PPC64 || ARCH_S390 || IA64 || UML || SPARC64)</literal>
	</para>

	<para>
	default value
	<literal>y if AUDIT && (X86 || PPC || PPC64 || ARCH_S390 || IA64 || UML || SPARC64) && SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable low-overhead system-call auditing infrastructure that
can be used independently or with another kernel subsystem,
such as SELinux.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG</term>
<nutsynopsis>
	"Support for hot-pluggable devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!ARCH_S390</literal>
	</para>

	<para>
	default value
	<literal>ARCH_S390</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option is provided for the case where no in-kernel-tree
modules require HOTPLUG functionality, but a module built
outside the kernel tree does. Such modules require Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KOBJECT_UEVENT</term>
<nutsynopsis>
	"Kernel Userspace Events"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	default value
	<literal>y if NET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables the kernel userspace event layer, which is a
simple mechanism for kernel-to-user communication over a netlink
socket.
The goal of the kernel userspace events layer is to provide a simple
and efficient events system, that notifies userspace about kobject
state changes. This will enable applications to just listen for
events instead of polling system devices and files.
Hotplug events (kobject addition and removal) are also available on
the netlink socket in addition to the execution of /sbin/hotplug if
CONFIG_HOTPLUG is enabled.

Say Y, unless you are building a system requiring minimal memory
consumption.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IKCONFIG</term>
<nutsynopsis>
	"Kernel .config support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables the complete Linux kernel ".config" file
contents to be saved in the kernel. It provides documentation
of which kernel options are used in a running kernel or in an
on-disk kernel.  This information can be extracted from the kernel
image file with the script scripts/extract-ikconfig and used as
input to rebuild the current kernel or to build another kernel.
It can also be extracted from a running kernel by reading
/proc/config.gz if enabled (below).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IKCONFIG_PROC</term>
<nutsynopsis>
	"Enable access to .config through /proc/config.gz"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IKCONFIG && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables access to the kernel configuration file
through /proc/config.gz.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPUSETS</term>
<nutsynopsis>
	"Cpuset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will let you create and manage CPUSETs which
allow dynamically partitioning a system into sets of CPUs and
Memory Nodes and assigning tasks to run only within those sets.
This is primarily useful on large SMP or NUMA systems.

Say N if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INITRAMFS_SOURCE</term>
<nutsynopsis>
	"Initramfs source file(s)"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal></literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
This can be either a single cpio archive with a .cpio suffix or a
space-separated list of directories and files for building the
initramfs image.  A cpio archive should contain a filesystem archive
to be used as an initramfs image.  Directories should contain a
filesystem layout to be included in the initramfs image.  Files
should contain entries according to the format described by the
"usr/gen_init_cpio" program in the kernel tree.

When multiple directories and files are specified then the
initramfs image will be the aggregate of all of them.

See <file:Documentation/early-userspace/README for more details.

If you are not sure, leave it blank.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INITRAMFS_ROOT_UID</term>
<nutsynopsis>
	"User ID to map to 0 (user root)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INITRAMFS_SOURCE!=</literal>
	</para>

	<para>
	default value
	<literal>0 if INITRAMFS_SOURCE!=</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This setting is only meaningful if the INITRAMFS_SOURCE is
contains a directory.  Setting this user ID (UID) to something
other than "0" will cause all files owned by that UID to be
owned by user root in the initial ramdisk image.

If you are not sure, leave it set to "0".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INITRAMFS_ROOT_GID</term>
<nutsynopsis>
	"Group ID to map to 0 (group root)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INITRAMFS_SOURCE!=</literal>
	</para>

	<para>
	default value
	<literal>0 if INITRAMFS_SOURCE!=</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This setting is only meaningful if the INITRAMFS_SOURCE is
contains a directory.  Setting this group ID (GID) to something
other than "0" will cause all files owned by that GID to be
owned by group root in the initial ramdisk image.

If you are not sure, leave it set to "0".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EMBEDDED</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows certain base kernel options and settings
to be disabled or tweaked. This is for specialized
environments which can tolerate a "non-standard" kernel.
Only use this if you really know what you are doing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KALLSYMS</term>
<nutsynopsis>
	"Load all symbols for debugging/kksymoops"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to let the kernel print out symbolic crash information and
symbolic stack backtraces. This increases the size of the kernel
somewhat, as all symbols have to be loaded into the kernel image.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KALLSYMS_ALL</term>
<nutsynopsis>
	"Include all symbols in kallsyms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && KALLSYMS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally kallsyms only contains the symbols of functions, for nicer
OOPS messages.  Some debuggers can use kallsyms for other
symbols too: say Y here to include all symbols, if you need them 
and you don't care about adding 300k to the size of your kernel.

Say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KALLSYMS_EXTRA_PASS</term>
<nutsynopsis>
	"Do an extra kallsyms pass"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>KALLSYMS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If kallsyms is not working correctly, the build will fail with
inconsistent kallsyms data.  If that occurs, log a bug report and
turn on KALLSYMS_EXTRA_PASS which should result in a stable build.
Always say N here unless you find a bug in kallsyms, which must be
reported.  KALLSYMS_EXTRA_PASS is only a temporary workaround while
you wait for kallsyms to be fixed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PRINTK</term>
	<para>
	default value
	<literal>y</literal>
	</para>


<nutsynopsis>
	"Enable support for printk"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables normal printk support. Removing it
eliminates most of the message strings from the kernel image
and makes the kernel more or less silent. As this makes it
very difficult to diagnose system problems, saying N here is
strongly discouraged.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BUG</term>
<nutsynopsis>
	"BUG() support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Disabling this option eliminates support for BUG and WARN, reducing
the size of your kernel image and potentially quietly ignoring
numerous fatal conditions. You should only consider disabling this
option for embedded systems with no facilities for reporting errors.
Just say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BASE_FULL</term>
	<para>
	default value
	<literal>y</literal>
	</para>


<nutsynopsis>
	"Enable full-sized data structures for core"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Disabling this option reduces the size of miscellaneous core
kernel data structures. This saves memory on small machines,
but may reduce performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUTEX</term>
<nutsynopsis>
	"Enable futex support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Disabling this option will cause the kernel to be built without
support for "fast userspace mutexes".  The resulting kernel may not
run glibc-based applications correctly.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EPOLL</term>
<nutsynopsis>
	"Enable eventpoll support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Disabling this option will cause the kernel to be built without
support for epoll family of system calls.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CC_OPTIMIZE_FOR_SIZE</term>
<nutsynopsis>
	"Optimize for size"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y if ARM || H8300</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will pass "-Os" instead of "-O2" to gcc
resulting in a smaller kernel.

WARNING: some versions of gcc may generate incorrect code with this
option.  If problems are observed, a gcc upgrade may be needed.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SHMEM</term>
<nutsynopsis>
	"Use full shmem filesystem"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMU && EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y if MMU</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The shmem is an internal filesystem used to manage shared memory.
It is backed by swap and manages resource limits. It is also exported
to userspace as tmpfs if TMPFS is enabled. Disabling this
option replaces shmem and tmpfs with the much simpler ramfs code,
which may be appropriate on small systems without swap.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CC_ALIGN_FUNCTIONS</term>
<nutsynopsis>
	"Function alignment"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>0</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Align the start of functions to the next power-of-two greater than n,
skipping up to n bytes.  For instance, 32 aligns functions
to the next 32-byte boundary, but 24 would align to the next
32-byte boundary only if this can be done by skipping 23 bytes or less.
Zero means use compiler's default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CC_ALIGN_LABELS</term>
<nutsynopsis>
	"Label alignment"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>0</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Align all branch targets to a power-of-two boundary, skipping
up to n bytes like ALIGN_FUNCTIONS.  This option can easily
make code slower, because it must insert dummy operations for
when the branch target is reached in the usual flow of the code.
Zero means use compiler's default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CC_ALIGN_LOOPS</term>
<nutsynopsis>
	"Loop alignment"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>0</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Align loops to a power-of-two boundary, skipping up to n bytes.
Zero means use compiler's default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CC_ALIGN_JUMPS</term>
<nutsynopsis>
	"Jump alignment"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>0</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Align branch targets to a power-of-two boundary, for branch
targets where the targets can only be reached by jumping,
skipping up to n bytes like ALIGN_FUNCTIONS.  In this case,
no dummy operations need be executed.
Zero means use compiler's default.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu
<nutentry>
	<term>TINY_SHMEM</term>
	<para>
	default value
	<literal>!SHMEM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BASE_SMALL</term>
	<para>
	default value
	<literal>0 if BASE_FULL</literal>
	</para>


	<para>
	default value
	<literal>1 if !BASE_FULL</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>

menu "Loadable module support"

<nutentry>
	<term>MODULES</term>
<nutsynopsis>
	"Enable loadable module support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Kernel modules are small pieces of compiled code which can
be inserted in the running kernel, rather than being
permanently built into the kernel.  You use the "modprobe"
tool to add (and sometimes remove) them.  If you say Y here,
many parts of the kernel can be built as modules (by
answering M instead of Y where indicated): this is most
useful for infrequently used options which are not required
for booting.  For more information, see the man pages for
modprobe, lsmod, modinfo, insmod and rmmod.

If you say Y here, you will need to run "make
modules_install" to put the modules under /lib/modules/
where modprobe can find them (you may need to be root to do
this).

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MODULE_UNLOAD</term>
<nutsynopsis>
	"Module unloading"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MODULES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Without this option you will not be able to unload any
modules (note that some modules may not be unloadable
anyway), which makes your kernel slightly smaller and
simpler.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MODULE_FORCE_UNLOAD</term>
<nutsynopsis>
	"Forced module unloading"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MODULE_UNLOAD && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to force a module to unload, even if the
kernel believes it is unsafe: the kernel will remove the module
without waiting for anyone to stop using it (using the -f option to
rmmod).  This is mainly for kernel developers and desperate users.
If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OBSOLETE_MODPARM</term>
	<para>
	default value
	<literal>y if MODULES</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
You need this option to use module parameters on modules which
have not been converted to the new module parameter system yet.
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MODVERSIONS</term>
<nutsynopsis>
	"Module versioning support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MODULES && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Usually, you have to use modules compiled with your kernel.
Saying Y here makes it sometimes possible to use modules
compiled for different kernels, by adding enough information
to the modules to (hopefully) spot any changes which would
make them incompatible with the kernel you are running.  If
unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MODULE_SRCVERSION_ALL</term>
<nutsynopsis>
	"Source checksum for all modules"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MODULES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Modules which contain a MODULE_VERSION get an extra "srcversion"
field inserted into their modinfo section, which contains a
sum of the source files which made it.  This helps maintainers
see exactly which source was used to build a module (since
others sometimes change the module source without updating
the version).  With this option, such a "srcversion" field
will be created for all modules.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KMOD</term>
<nutsynopsis>
	"Automatic kernel module loading"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MODULES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally when you have selected some parts of the kernel to
be created as kernel modules, you must load them (using the
"modprobe" command) before you can use them. If you say Y
here, some parts of the kernel will be able to load modules
automatically: when a part of the kernel needs a module, it
runs modprobe with the appropriate arguments, thereby
loading the module if it is available.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>STOP_MACHINE</term>
	<para>
	default value
	<literal>y if SMP && MODULE_UNLOAD || HOTPLUG_CPU</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Need stop_machine() primitive.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Processor type and features"

<nutentry>
choice
  #choice value
<nutsynopsis>
	"Subarchitecture Type"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>X86_PC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_PC</term>
<nutsynopsis>
	"PC-compatible"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choose this option if your computer is a standard PC or compatible.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_ELAN</term>
<nutsynopsis>
	"AMD Elan"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an AMD Elan processor.

Do not use this option for K6/Athlon/Opteron processors!

If unsure, choose "PC-compatible" instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_VOYAGER</term>
<nutsynopsis>
	"Voyager (NCR)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Voyager is an MCA-based 32-way capable SMP architecture proprietary
to NCR Corp.  Machine classes 345x/35xx/4100/51xx are Voyager-based.

*** WARNING ***

If you do not specifically know you have a Voyager based machine,
say N here, otherwise the kernel you build will not be bootable.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_NUMAQ</term>
<nutsynopsis>
	"NUMAQ (IBM/Sequent)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  unknown prop 6!
  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option is used for getting Linux to run on a (IBM/Sequent) NUMA
multiquad box. This changes the way that processors are bootstrapped,
and uses Clustered Logical APIC addressing mode instead of Flat Logical.
You will need a new lynxer.elf file to flash your firmware with - send
email to <Martin.Bligh@us.ibm.com>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SUMMIT</term>
<nutsynopsis>
	"Summit/EXA (IBM x440)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && SMP</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option is needed for IBM systems that use the Summit/EXA chipset.
In particular, it is needed for the x440.

If you don't have one of these computers, you should say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_BIGSMP</term>
<nutsynopsis>
	"Support for other sub-arch SMP systems with more than 8 CPUs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && SMP</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option is needed for the systems that have more than 8 CPUs
and if the system is not of any sub-arch type above.

If you don't have such a system, you should say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_VISWS</term>
<nutsynopsis>
	"SGI 320/540 (Visual Workstation)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The SGI Visual Workstation series is an IA32-based workstation
based on SGI systems chips with some legacy PC hardware attached.

Say Y here to create a kernel to run on the SGI 320 or 540.

A kernel compiled for the Visual Workstation will not run on PCs
and vice versa. See <file:Documentation/sgi-visws.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_GENERICARCH</term>
<nutsynopsis>
	"Generic architecture (Summit, bigsmp, ES7000, default)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && SMP</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option compiles in the Summit, bigsmp, ES7000, default subarchitectures.
It is intended for a generic binary kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_ES7000</term>
<nutsynopsis>
	"Support for Unisys ES7000 IA32 series"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && SMP</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for Unisys ES7000 systems.  Say 'Y' here if this kernel is
supposed to run on an IA32-based Unisys ES7000 system.
Only choose this option if you have such a system, otherwise you
should say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_SRAT</term>
	<para>
	default value
	<literal>y if NUMA && (X86_SUMMIT || X86_GENERICARCH)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SUMMIT_NUMA</term>
	<para>
	default value
	<literal>y if NUMA && (X86_SUMMIT || X86_GENERICARCH)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_CYCLONE_TIMER</term>
	<para>
	default value
	<literal>y if X86_SUMMIT || X86_GENERICARCH</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ES7000_CLUSTERED_APIC</term>
	<para>
	default value
	<literal>y if SMP && X86_ES7000 && MPENTIUMIII</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Processor family"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_ELAN</literal>
	</para>

	<para>
	default value
	<literal>M686 if !X86_ELAN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M386</term>
<nutsynopsis>
	"386"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the processor type of your CPU. This information is used for
optimizing purposes. In order to compile a kernel that can run on
all x86 CPU types (albeit not optimally fast), you can specify
"386" here.

The kernel will not necessarily run on earlier architectures than
the one you have chosen, e.g. a Pentium optimized kernel will run on
a PPro, but not necessarily on a i486.

Here are the settings recommended for greatest speed:
- "386" for the AMD/Cyrix/Intel 386DX/DXL/SL/SLC/SX, Cyrix/TI
486DLC/DLC2, UMC 486SX-S and NexGen Nx586.  Only "386" kernels
will run on a 386 class machine.
- "486" for the AMD/Cyrix/IBM/Intel 486DX/DX2/DX4 or
SL/SLC/SLC2/SLC3/SX/SX2 and UMC U5D or U5S.
- "586" for generic Pentium CPUs lacking the TSC
(time stamp counter) register.
- "Pentium-Classic" for the Intel Pentium.
- "Pentium-MMX" for the Intel Pentium MMX.
- "Pentium-Pro" for the Intel Pentium Pro.
- "Pentium-II" for the Intel Pentium II or pre-Coppermine Celeron.
- "Pentium-III" for the Intel Pentium III or Coppermine Celeron.
- "Pentium-4" for the Intel Pentium 4 or P4-based Celeron.
- "K6" for the AMD K6, K6-II and K6-III (aka K6-3D).
- "Athlon" for the AMD K7 family (Athlon/Duron/Thunderbird).
- "Crusoe" for the Transmeta Crusoe series.
- "Efficeon" for the Transmeta Efficeon series.
- "Winchip-C6" for original IDT Winchip.
- "Winchip-2" for IDT Winchip 2.
- "Winchip-2A" for IDT Winchips with 3dNow! capabilities.
- "GeodeGX1" for Geode GX1 (Cyrix MediaGX).
- "CyrixIII/VIA C3" for VIA Cyrix III or VIA C3.
- "VIA C3-2 for VIA C3-2 "Nehemiah" (model 9 and above).

If you don't know what to do, choose "386".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M486</term>
<nutsynopsis>
	"486"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a 486 series processor, either Intel or one of the
compatible processors from AMD, Cyrix, IBM, or Intel.  Includes DX,
DX2, and DX4 variants; also SL/SLC/SLC2/SLC3/SX/SX2 and UMC U5D or
U5S.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M586</term>
<nutsynopsis>
	"586/K5/5x86/6x86/6x86MX"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an 586 or 686 series processor such as the AMD K5,
the Cyrix 5x86, 6x86 and 6x86MX.  This choice does not
assume the RDTSC (Read Time Stamp Counter) instruction.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M586TSC</term>
<nutsynopsis>
	"Pentium-Classic"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a Pentium Classic processor with the RDTSC (Read
Time Stamp Counter) instruction for benchmarking.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M586MMX</term>
<nutsynopsis>
	"Pentium-MMX"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a Pentium with the MMX graphics/multimedia
extended instructions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M686</term>
<nutsynopsis>
	"Pentium-Pro"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for Intel Pentium Pro chips.  This enables the use of
Pentium Pro extended instructions, and disables the init-time guard
against the f00f bug found in earlier Pentiums.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MPENTIUMII</term>
<nutsynopsis>
	"Pentium-II/Celeron(pre-Coppermine)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for Intel chips based on the Pentium-II and
pre-Coppermine Celeron core.  This option enables an unaligned
copy optimization, compiles the kernel with optimization flags
tailored for the chip, and applies any applicable Pentium Pro
optimizations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MPENTIUMIII</term>
<nutsynopsis>
	"Pentium-III/Celeron(Coppermine)/Pentium-III Xeon"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for Intel chips based on the Pentium-III and
Celeron-Coppermine core.  This option enables use of some
extended prefetch instructions in addition to the Pentium II
extensions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MPENTIUMM</term>
<nutsynopsis>
	"Pentium M"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for Intel Pentium M (not Pentium-4 M)
notebook chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MPENTIUM4</term>
<nutsynopsis>
	"Pentium-4/Celeron(P4-based)/Pentium-4 M/Xeon"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for Intel Pentium 4 chips.  This includes the
Pentium 4, P4-based Celeron and Xeon, and Pentium-4 M
(not Pentium M) chips.  This option enables compile flags
optimized for the chip, uses the correct cache shift, and
applies any applicable Pentium III optimizations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MK6</term>
<nutsynopsis>
	"K6/K6-II/K6-III"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an AMD K6-family processor.  Enables use of
some extended instructions, and passes appropriate optimization
flags to GCC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MK7</term>
<nutsynopsis>
	"Athlon/Duron/K7"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an AMD Athlon K7-family processor.  Enables use of
some extended instructions, and passes appropriate optimization
flags to GCC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MK8</term>
<nutsynopsis>
	"Opteron/Athlon64/Hammer/K8"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an AMD Opteron or Athlon64 Hammer-family processor.  Enables
use of some extended instructions, and passes appropriate optimization
flags to GCC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCRUSOE</term>
<nutsynopsis>
	"Crusoe"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a Transmeta Crusoe processor.  Treats the processor
like a 586 with TSC, and sets some GCC optimization flags (like a
Pentium Pro with no alignment requirements).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MEFFICEON</term>
<nutsynopsis>
	"Efficeon"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a Transmeta Efficeon processor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MWINCHIPC6</term>
<nutsynopsis>
	"Winchip-C6"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an IDT Winchip C6 chip.  Linux and GCC
treat this chip as a 586TSC with some extended instructions
and alignment requirements.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MWINCHIP2</term>
<nutsynopsis>
	"Winchip-2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an IDT Winchip-2.  Linux and GCC
treat this chip as a 586TSC with some extended instructions
and alignment requirements.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MWINCHIP3D</term>
<nutsynopsis>
	"Winchip-2A/Winchip-3"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for an IDT Winchip-2A or 3.  Linux and GCC
treat this chip as a 586TSC with some extended instructions
and alignment reqirements.  Also enable out of order memory
stores for this CPU, which can increase performance of some
operations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MGEODEGX1</term>
<nutsynopsis>
	"GeodeGX1"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a Geode GX1 (Cyrix MediaGX) chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCYRIXIII</term>
<nutsynopsis>
	"CyrixIII/VIA-C3"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a Cyrix III or C3 chip.  Presently Linux and GCC
treat this chip as a generic 586. Whilst the CPU is 686 class,
it lacks the cmov extension which gcc assumes is present when
generating 686 code.
Note that Nehemiah (Model 9) and above will not boot with this
kernel due to them lacking the 3DNow! instructions used in earlier
incarnations of the CPU.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MVIAC3_2</term>
<nutsynopsis>
	"VIA C3-2 (Nehemiah)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this for a VIA C3 "Nehemiah". Selecting this enables usage
of SSE and tells gcc to treat the CPU as a 686.
Note, this kernel will not boot on older (pre model 9) C3s.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_GENERIC</term>
<nutsynopsis>
	"Generic x86 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_ELAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Instead of just including optimizations for the selected
x86 variant (e.g. PII, Crusoe or Athlon), include some more
generic optimizations as well. This will make the kernel
perform better on x86 CPUs other than that selected.

This is really intended for distributors who need more
generic optimizations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_CMPXCHG</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_XADD</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_L1_CACHE_SHIFT</term>
	<para>
	default value
	<literal>7 if MPENTIUM4 || X86_GENERIC</literal>
	</para>


	<para>
	default value
	<literal>4 if X86_ELAN || M486 || M386</literal>
	</para>


	<para>
	default value
	<literal>5 if MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCRUSOE || MEFFICEON || MCYRIXIII || MK6 || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || M586 || MVIAC3_2 || MGEODEGX1</literal>
	</para>


	<para>
	default value
	<literal>6 if MK7 || MK8 || MPENTIUMM</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RWSEM_GENERIC_SPINLOCK</term>
	<para>
	default value
	<literal>y if M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RWSEM_XCHGADD_ALGORITHM</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GENERIC_CALIBRATE_DELAY</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_PPRO_FENCE</term>
	<para>
	default value
	<literal>y if M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_F00F_BUG</term>
	<para>
	default value
	<literal>y if M586MMX || M586TSC || M586 || M486 || M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_WP_WORKS_OK</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_INVLPG</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_BSWAP</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_POPAD_OK</term>
	<para>
	default value
	<literal>y if !M386</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_ALIGNMENT_16</term>
	<para>
	default value
	<literal>y if MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_GOOD_APIC</term>
	<para>
	default value
	<literal>y if MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_INTEL_USERCOPY</term>
	<para>
	default value
	<literal>y if MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_USE_PPRO_CHECKSUM</term>
	<para>
	default value
	<literal>y if MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_USE_3DNOW</term>
	<para>
	default value
	<literal>y if MCYRIXIII || MK7</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_OOSTORE</term>
	<para>
	default value
	<literal>y if (MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPET_TIMER</term>
<nutsynopsis>
	"HPET Timer Support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the use of the HPET for the kernel's internal timer.
HPET is the next generation timer replacing legacy 8254s.
You can safely choose Y here.  However, HPET will only be
activated if the platform and the BIOS support this feature.
Otherwise the 8254 will be used for timing services.

Choose N to continue using the legacy 8254 timer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPET_EMULATE_RTC</term>
	<para>
	default value
	<literal>y if HPET_TIMER && RTC=y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMP</term>
<nutsynopsis>
	"Symmetric multi-processing support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for systems with more than one CPU. If you have
a system with only one CPU, like most personal computers, say N. If
you have a system with more than one CPU, say Y.

If you say N here, the kernel will run on single and multiprocessor
machines, but will use only one CPU of a multiprocessor machine. If
you say Y here, the kernel will run on many, but not all,
singleprocessor machines. On a singleprocessor machine, the kernel
will run faster if you say N here.

Note that if you say Y here and choose architecture "586" or
"Pentium" under "Processor family", the kernel will not work on 486
architectures. Similarly, multiprocessor kernels for the "PPro"
architecture may not work on all Pentium based boards.

People using multiprocessor machines who say Y here should also say
Y to "Enhanced Real Time Clock Support", below. The "Advanced Power
Management" code will be disabled if you say Y here.

See also the <file:Documentation/smp.txt>,
<file:Documentation/i386/IO-APIC.txt>,
<file:Documentation/nmi_watchdog.txt> and the SMP-HOWTO available at
<http://www.tldp.org/docs.html#howto>.

If you don't know what to do here, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NR_CPUS</term>
<nutsynopsis>
	"Maximum number of CPUs (2-255)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP</literal>
	</para>

  unknown prop 7!
	<para>
	default value
	<literal>32 if SMP && (X86_NUMAQ || X86_SUMMIT || X86_BIGSMP || X86_ES7000)</literal>
	</para>


	<para>
	default value
	<literal>8 if SMP</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This allows you to specify the maximum number of CPUs which this
kernel will support.  The maximum supported value is 255 and the
minimum value which makes sense is 2.

This is purely to save memory - each supported CPU adds
approximately eight kilobytes to the kernel image.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCHED_SMT</term>
<nutsynopsis>
	"SMT (Hyperthreading) scheduler support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP</literal>
	</para>

	<para>
	default value
	<literal>off if SMP</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
SMT scheduler support improves the CPU scheduler's decision making
when dealing with Intel Pentium 4 chips with HyperThreading at a
cost of slightly increased overhead in some places. If unsure say
N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Preemption Model"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>PREEMPT_NONE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PREEMPT_NONE</term>
<nutsynopsis>
	"No Forced Preemption (Server)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the traditional Linux preemption model, geared towards
throughput. It will still provide good latencies most of the
time, but there are no guarantees and occasional longer delays
are possible.

Select this option if you are building a kernel for a server or
scientific/computation system, or if you want to maximize the
raw processing power of the kernel, irrespective of scheduling
latencies.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PREEMPT_VOLUNTARY</term>
<nutsynopsis>
	"Voluntary Kernel Preemption (Desktop)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option reduces the latency of the kernel by adding more
"explicit preemption points" to the kernel code. These new
preemption points have been selected to reduce the maximum
latency of rescheduling, providing faster application reactions,
at the cost of slighly lower throughput.

This allows reaction to interactive events by allowing a
low priority process to voluntarily preempt itself even if it
is in kernel mode executing a system call. This allows
applications to run more 'smoothly' even when the system is
under load.

Select this if you are building a kernel for a desktop system.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PREEMPT</term>
<nutsynopsis>
	"Preemptible Kernel (Low-Latency Desktop)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option reduces the latency of the kernel by making
all kernel code (that is not executing in a critical section)
preemptible.  This allows reaction to interactive events by
permitting a low priority process to be preempted involuntarily
even if it is in kernel mode executing a system call and would
otherwise not be about to reach a natural preemption point.
This allows applications to run more 'smoothly' even when the
system is under load, at the cost of slighly lower throughput
and a slight runtime overhead to kernel code.

Select this if you are building a kernel for a desktop or
embedded system with latency requirements in the milliseconds
range.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PREEMPT_BKL</term>
<nutsynopsis>
	"Preempt The Big Kernel Lock"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP || PREEMPT</literal>
	</para>

	<para>
	default value
	<literal>y if SMP || PREEMPT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option reduces the latency of the kernel by making the
big kernel lock preemptible.

Say Y here if you are building a kernel for a desktop system.
Say N if you are unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_UP_APIC</term>
<nutsynopsis>
	"Local APIC support on uniprocessors"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!SMP && !X86_VISWS && !X86_VOYAGER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
A local APIC (Advanced Programmable Interrupt Controller) is an
integrated interrupt controller in the CPU. If you have a single-CPU
system which has a processor with a local APIC, you can say Y here to
enable and use it. If you say Y here even though your machine doesn't
have a local APIC, then the kernel will still run with no slowdown at
all. The local APIC supports CPU-generated self-interrupts (timer,
performance counters), and the NMI watchdog which detects hard
lockups.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_UP_IOAPIC</term>
<nutsynopsis>
	"IO-APIC support on uniprocessors"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86_UP_APIC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
An IO-APIC (I/O Advanced Programmable Interrupt Controller) is an
SMP-capable replacement for PC-style interrupt controllers. Most
SMP systems and many recent uniprocessor systems have one.

If you have a single-CPU system with an IO-APIC, you can say Y here
to use it. If you say Y here even though your machine doesn't have
an IO-APIC, then the kernel will still run with no slowdown at all.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_LOCAL_APIC</term>
	<para>
	default value
	<literal>y if X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_IO_APIC</term>
	<para>
	default value
	<literal>y if X86_UP_IOAPIC || SMP && !X86_VISWS && !X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_VISWS_APIC</term>
	<para>
	default value
	<literal>y if X86_VISWS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_TSC</term>
	<para>
	default value
	<literal>y if (MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MGEODEGX1) && !X86_NUMAQ</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_MCE</term>
<nutsynopsis>
	"Machine Check Exception"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Machine Check Exception support allows the processor to notify the
kernel if it detects a problem (e.g. overheating, component failure).
The action the kernel takes depends on the severity of the problem,
ranging from a warning message on the console, to halting the machine.
Your processor must be a Pentium or newer to support this - check the
flags in /proc/cpuinfo for mce.  Note that some older Pentium systems
have a design flaw which leads to false MCE events - hence MCE is
disabled on all P5 processors, unless explicitly enabled with "mce"
as a boot argument.  Similarly, if MCE is built in and creates a
problem on some new non-standard machine, you can boot with "nomce"
to disable it.  MCE support simply ignores non-MCE processors like
the 386 and 486, so nearly everyone can say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_MCE_NONFATAL</term>
<nutsynopsis>
	"Check for non-fatal errors on AMD Athlon/Duron / Intel Pentium 4"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86_MCE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enabling this feature starts a timer that triggers every 5 seconds which
will look at the machine check registers to see if anything happened.
Non-fatal problems automatically get corrected (but still logged).
Disable this if you don't want to see these messages.
Seeing the messages this option prints out may be indicative of dying hardware,
or out-of-spec (ie, overclocked) hardware.
This option only does something on certain CPUs.
(AMD Athlon/Duron and Intel Pentium 4)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_MCE_P4THERMAL</term>
<nutsynopsis>
	"check for P4 thermal throttling interrupt."
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this feature will cause a message to be printed when the P4
enters thermal throttling.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOSHIBA</term>
<nutsynopsis>
	"Toshiba Laptop support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds a driver to safely access the System Management Mode of
the CPU on Toshiba portables with a genuine Toshiba BIOS. It does
not work on models with a Phoenix BIOS. The System Management Mode
is used to set the BIOS and power saving options on Toshiba portables.

For information on utilities to make use of this driver see the
Toshiba Linux utilities web site at:
<http://www.buzzard.org.uk/toshiba/>.

Say Y if you intend to run this kernel on a Toshiba portable.
Say N otherwise.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I8K</term>
<nutsynopsis>
	"Dell laptop support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds a driver to safely access the System Management Mode
of the CPU on the Dell Inspiron 8000. The System Management Mode
is used to read cpu temperature and cooling fan status and to
control the fans on the I8K portables.

This driver has been tested only on the Inspiron 8000 but it may
also work with other Dell laptops. You can force loading on other
models by passing the parameter `force=1' to the module. Use at
your own risk.

For information on utilities to make use of this driver see the
I8K Linux utilities web site at:
<http://people.debian.org/~dz/i8k/>

Say Y if you intend to run this kernel on a Dell Inspiron 8000.
Say N otherwise.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_REBOOTFIXUPS</term>
<nutsynopsis>
	"Enable X86 board specific fixups for reboot"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86</literal>
	</para>

	<para>
	default value
	<literal>n if X86</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables chipset and/or board specific fixups to be done
in order to get reboot to work correctly. This is only needed on
some combinations of hardware and BIOS. The symptom, for which
this config is intended, is when reboot ends with a stalled/hung
system.

Currently, the only fixup is for the Geode GX1/CS5530A/TROM2.1.
combination.

Say Y if you want to enable the fixup. Currently, it's safe to
enable this option even if you don't need it.
Say N otherwise.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MICROCODE</term>
<nutsynopsis>
	"/dev/cpu/microcode - Intel IA32 CPU microcode support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and also to "/dev file system support" in the
'File systems' section, you will be able to update the microcode on
Intel processors in the IA32 family, e.g. Pentium Pro, Pentium II,
Pentium III, Pentium 4, Xeon etc.  You will obviously need the
actual microcode binary data itself which is not shipped with the
Linux kernel.

For latest news and information on obtaining all the required
ingredients for this driver, check:
<http://www.urbanmyth.org/microcode/>.

To compile this driver as a module, choose M here: the
module will be called microcode.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_MSR</term>
<nutsynopsis>
	"/dev/cpu/*/msr - Model-specific register support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This device gives privileged processes access to the x86
Model-Specific Registers (MSRs).  It is a character device with
major 202 and minors 0 to 31 for /dev/cpu/0/msr to /dev/cpu/31/msr.
MSR accesses are directed to a specific CPU on multi-processor
systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_CPUID</term>
<nutsynopsis>
	"/dev/cpu/*/cpuid - CPU information support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This device gives processes access to the x86 CPUID instruction to
be executed on a specific processor.  It is a character device
with major 203 and minors 0 to 31 for /dev/cpu/0/cpuid to
/dev/cpu/31/cpuid.
	</para>

</nutentrybody>
</nutentry>

menu "Firmware Drivers"

<nutentry>
	<term>EDD</term>
<nutsynopsis>
	"BIOS Enhanced Disk Drive calls determine boot disk (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && !IA64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M here if you want to enable BIOS Enhanced Disk Drive
Services real mode BIOS calls to determine which disk
BIOS tries boot from.  This information is then exported via sysfs.

This option is experimental and is known to fail to boot on some
obscure configurations. Most disk controller BIOS vendors do
not yet implement this feature.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EFI_VARS</term>
<nutsynopsis>
	"EFI Variable Support via sysfs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EFI</literal>
	</para>

	<para>
	default value
	<literal>n if EFI</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you are able to get EFI (Extensible Firmware
Interface) variable information via sysfs.  You may read,
write, create, and destroy EFI variables through this interface.

Note that using this driver in concert with efibootmgr requires
at least test release version 0.5.0-test3 or later, which is
available from Matt Domsch's website located at:
<http://linux.dell.com/efibootmgr/testing/efibootmgr-0.5.0-test3.tar.gz>

Subsequent efibootmgr releases may be found at:
<http://linux.dell.com/efibootmgr>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EFI_PCDP</term>
<nutsynopsis>
	"Console device selection via EFI PCDP or HCDP table"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ACPI && EFI && IA64</literal>
	</para>

	<para>
	default value
	<literal>y if ACPI && EFI && IA64</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your firmware supplies the PCDP table, and you want to
automatically use the primary console device it describes
as the Linux console, say Y here.

If your firmware supplies the HCDP table, and you want to
use the first serial port it describes as the Linux console,
say Y here.  If your EFI ConOut path contains only a UART
device, it will become the console automatically.  Otherwise,
you must specify the "console=hcdp" kernel boot argument.

Neither the PCDP nor the HCDP affects naming of serial devices,
so a serial console may be /dev/ttyS0, /dev/ttyS1, etc, depending
on how the driver discovers devices.

You must also enable the appropriate drivers (serial, VGA, etc.)

See <http://www.dig64.org/specifications/DIG64_HCDPv20_042804.pdf>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DELL_RBU</term>
<nutsynopsis>
	"BIOS update support for DELL systems via sysfs"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say m if you want to have the option of updating the BIOS for your
DELL system. Note you need a Dell OpenManage or Dell Update package (DUP)
supporting application to comunicate with the BIOS regarding the new
image for the image update to take effect.
See <file:Documentation/dell_rbu.txt> for more details on the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DCDBAS</term>
<nutsynopsis>
	"Dell Systems Management Base Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 || X86_64</literal>
	</para>

	<para>
	default value
	<literal>m if X86 || X86_64</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Dell Systems Management Base Driver provides a sysfs interface
for systems management software to perform System Management
Interrupts (SMIs) and Host Control Actions (system power cycle or
power off after OS shutdown) on certain Dell systems.

See <file:Documentation/dcdbas.txt> for more details on the driver
and the Dell systems on which Dell systems management software makes
use of this driver.

Say Y or M here to enable the driver for use by Dell systems
management software such as Dell OpenManage.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
choice
  #choice value
<nutsynopsis>
	"High Memory Support"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>NOHIGHMEM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NOHIGHMEM</term>
<nutsynopsis>
	"off"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Linux can use up to 64 Gigabytes of physical memory on x86 systems.
However, the address space of 32-bit x86 processors is only 4
Gigabytes large. That means that, if you have a large amount of
physical memory, not all of it can be "permanently mapped" by the
kernel. The physical memory that's not permanently mapped is called
"high memory".

If you are compiling a kernel which will never run on a machine with
more than 1 Gigabyte total physical RAM, answer "off" here (default
choice and suitable for most users). This will result in a "3GB/1GB"
split: 3GB are mapped so that each process sees a 3GB virtual memory
space and the remaining part of the 4GB virtual memory space is used
by the kernel to permanently map as much physical memory as
possible.

If the machine has between 1 and 4 Gigabytes physical RAM, then
answer "4GB" here.

If more than 4 Gigabytes is used then answer "64GB" here. This
selection turns Intel PAE (Physical Address Extension) mode on.
PAE implements 3-level paging on IA32 processors. PAE is fully
supported by Linux, PAE mode is implemented on all recent Intel
processors (Pentium Pro and better). NOTE: If you say "64GB" here,
then the kernel will not boot on CPUs that don't support PAE!

The actual amount of total physical memory will either be
auto detected or can be forced by using a kernel command line option
such as "mem=256M". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)

If unsure, say "off".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HIGHMEM4G</term>
<nutsynopsis>
	"4GB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this if you have a 32-bit processor and between 1 and 4
gigabytes of physical RAM.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HIGHMEM64G</term>
<nutsynopsis>
	"64GB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this if you have a 32-bit processor and more than 4
gigabytes of physical RAM.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HIGHMEM</term>
	<para>
	default value
	<literal>y if HIGHMEM64G || HIGHMEM4G</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_PAE</term>
	<para>
	default value
	<literal>y if HIGHMEM64G</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NUMA</term>
<nutsynopsis>
	"Numa Memory Allocation and Scheduler Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP && HIGHMEM64G && (X86_NUMAQ || X86_GENERICARCH || X86_SUMMIT && ACPI)</literal>
	</para>

	<para>
	default value
	<literal>n if SMP && HIGHMEM64G && (X86_NUMAQ || X86_GENERICARCH || X86_SUMMIT && ACPI) && X86_PC</literal>
	</para>


	<para>
	default value
	<literal>y if SMP && HIGHMEM64G && (X86_NUMAQ || X86_GENERICARCH || X86_SUMMIT && ACPI) && (X86_NUMAQ || X86_SUMMIT)</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

comment "NUMA (NUMA-Q) requires SMP, 64GB highmem support"
<para>
	depends on
	<literal>X86_NUMAQ && (!HIGHMEM64G || !SMP)</literal>
	</para>



comment "NUMA (Summit) requires SMP, 64GB highmem support, ACPI"
<para>
	depends on
	<literal>X86_SUMMIT && (!HIGHMEM64G || !ACPI)</literal>
	</para>


<nutentry>
	<term>HAVE_ARCH_BOOTMEM_NODE</term>
	<para>
	default value
	<literal>y if NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCH_HAVE_MEMORY_PRESENT</term>
	<para>
	default value
	<literal>y if DISCONTIGMEM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NEED_NODE_MEMMAP_SIZE</term>
	<para>
	default value
	<literal>y if DISCONTIGMEM || SPARSEMEM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HAVE_ARCH_ALLOC_REMAP</term>
	<para>
	default value
	<literal>y if NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCH_DISCONTIGMEM_ENABLE</term>
	<para>
	default value
	<literal>y if NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCH_DISCONTIGMEM_DEFAULT</term>
	<para>
	default value
	<literal>y if NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCH_SPARSEMEM_ENABLE</term>
	<para>
	default value
	<literal>y if NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCH_SELECT_MEMORY_MODEL</term>
	<para>
	default value
	<literal>y if ARCH_SPARSEMEM_ENABLE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SELECT_MEMORY_MODEL</term>
	<para>
	default value
	<literal>y if EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Memory model"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SELECT_MEMORY_MODEL</literal>
	</para>

	<para>
	default value
	<literal>DISCONTIGMEM_MANUAL if SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_DEFAULT</literal>
	</para>


	<para>
	default value
	<literal>SPARSEMEM_MANUAL if SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_DEFAULT</literal>
	</para>


	<para>
	default value
	<literal>FLATMEM_MANUAL if SELECT_MEMORY_MODEL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FLATMEM_MANUAL</term>
<nutsynopsis>
	"Flat Memory"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && (!ARCH_DISCONTIGMEM_ENABLE || ARCH_FLATMEM_ENABLE)</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to change some of the ways that
Linux manages its memory internally.  Most users will
only have one option here: FLATMEM.  This is normal
and a correct option.

Some users of more advanced features like NUMA and
memory hotplug may have different options here.
DISCONTIGMEM is an more mature, better tested system,
but is incompatible with memory hotplug and may suffer
decreased performance over SPARSEMEM.  If unsure between
"Sparse Memory" and "Discontiguous Memory", choose
"Discontiguous Memory".

If unsure, choose this option (Flat Memory) over any other.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DISCONTIGMEM_MANUAL</term>
<nutsynopsis>
	"Discontiguous Memory"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && ARCH_DISCONTIGMEM_ENABLE</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option provides enhanced support for discontiguous
memory systems, over FLATMEM.  These systems have holes
in their physical address spaces, and this option provides
more efficient handling of these holes.  However, the vast
majority of hardware has quite flat address spaces, and
can have degraded performance from extra overhead that
this option imposes.

Many NUMA configurations will have this as the only option.

If unsure, choose "Flat Memory" over this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPARSEMEM_MANUAL</term>
<nutsynopsis>
	"Sparse Memory"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && ARCH_SPARSEMEM_ENABLE</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will be the only option for some systems, including
memory hotplug systems.  This is normal.

For many other systems, this will be an alternative to
"Discontiguous Memory".  This option provides some potential
performance benefits, along with decreased code complexity,
but it is newer, and more experimental.

If unsure, choose "Discontiguous Memory" or "Flat Memory"
over this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DISCONTIGMEM</term>
	<para>
	default value
	<literal>y if !SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPARSEMEM</term>
	<para>
	default value
	<literal>y if SPARSEMEM_MANUAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FLATMEM</term>
	<para>
	default value
	<literal>y if !DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FLAT_NODE_MEM_MAP</term>
	<para>
	default value
	<literal>y if !SPARSEMEM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NEED_MULTIPLE_NODES</term>
	<para>
	default value
	<literal>y if DISCONTIGMEM || NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HAVE_MEMORY_PRESENT</term>
	<para>
	default value
	<literal>y if ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPARSEMEM_STATIC</term>
	<para>
	default value
	<literal>n</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPARSEMEM_EXTREME</term>
	<para>
	default value
	<literal>y if SPARSEMEM && !SPARSEMEM_STATIC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HAVE_ARCH_EARLY_PFN_TO_NID</term>
	<para>
	default value
	<literal>y if NUMA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HIGHPTE</term>
<nutsynopsis>
	"Allocate 3rd-level pagetables from highmem"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HIGHMEM4G || HIGHMEM64G</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The VM uses one page table entry for each page of physical memory.
For systems with a lot of RAM, this can be wasteful of precious
low memory.  Setting this option will put user-space page table
entries in high memory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MATH_EMULATION</term>
<nutsynopsis>
	"Math emulation"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Linux can emulate a math coprocessor (used for floating point
operations) if you don't have one. 486DX and Pentium processors have
a math coprocessor built in, 486SX and 386 do not, unless you added
a 487DX or 387, respectively. (The messages during boot time can
give you some hints here ["man dmesg"].) Everyone needs either a
coprocessor or this emulation.

If you don't have a math coprocessor, you need to say Y here; if you
say Y here even though you have a coprocessor, the coprocessor will
be used nevertheless. (This behavior can be changed with the kernel
command line option "no387", which comes handy if your coprocessor
is broken. Try "man bootparam" or see the documentation of your boot
loader (lilo or loadlin) about how to pass options to the kernel at
boot time.) This means that it is a good idea to say Y here if you
intend to use this kernel on different machines.

More information about the internals of the Linux math coprocessor
emulation can be found in <file:arch/i386/math-emu/README>.

If you are not sure, say Y; apart from resulting in a 66 KB bigger
kernel, it won't hurt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTRR</term>
<nutsynopsis>
	"MTRR (Memory Type Range Register) support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
On Intel P6 family processors (Pentium Pro, Pentium II and later)
the Memory Type Range Registers (MTRRs) may be used to control
processor access to memory ranges. This is most useful if you have
a video (VGA) card on a PCI or AGP bus. Enabling write-combining
allows bus write transfers to be combined into a larger transfer
before bursting over the PCI/AGP bus. This can increase performance
of image write operations 2.5 times or more. Saying Y here creates a
/proc/mtrr file which may be used to manipulate your processor's
MTRRs. Typically the X server should use this.

This code has a reasonably generic interface so that similar
control registers on other processors can be easily supported
as well:

The Cyrix 6x86, 6x86MX and M II processors have Address Range
Registers (ARRs) which provide a similar functionality to MTRRs. For
these, the ARRs are used to emulate the MTRRs.
The AMD K6-2 (stepping 8 and above) and K6-3 processors have two
MTRRs. The Centaur C6 (WinChip) has 8 MCRs, allowing
write-combining. All of these processors are supported by this code
and it makes sense to say Y here if you have one of them.

Saying Y here also fixes a problem with buggy SMP BIOSes which only
set the MTRRs for the boot CPU and not for the secondary CPUs. This
can lead to all sorts of problems, so it's good to say Y here.

You can safely say Y even if your machine doesn't have MTRRs, you'll
just add about 9 KB to your kernel.

See <file:Documentation/mtrr.txt> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EFI</term>
<nutsynopsis>
	"Boot from EFI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ACPI</literal>
	</para>

	<para>
	default value
	<literal>n if ACPI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the the kernel to boot on EFI platforms using
system configuration information passed to it from the firmware.
This also enables the kernel to use any EFI runtime services that are
available (such as the EFI variable services).

This option is only useful on systems that have EFI firmware
and will result in a kernel image that is ~8k larger.  In addition,
you must use the latest ELILO loader available at
<http://elilo.sourceforge.net> in order to take advantage of
kernel initialization using EFI information (neither GRUB nor LILO know
anything about EFI).  However, even with this option, the resultant
kernel should continue to boot on existing non-EFI platforms.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IRQBALANCE</term>
<nutsynopsis>
	"Enable kernel irq balancing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP && X86_IO_APIC</literal>
	</para>

	<para>
	default value
	<literal>y if SMP && X86_IO_APIC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The default yes will allow the kernel to do irq load balancing.
Saying no will keep the kernel from doing irq load balancing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BOOT_IOREMAP</term>
	<para>
	default value
	<literal>y if (X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REGPARM</term>
<nutsynopsis>
	"Use register arguments (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Compile the kernel with -mregparm=3. This uses a different ABI
and passes the first three arguments of a function call in registers.
This will probably break binary only modules.

This feature is only enabled for gcc-3.0 and later - earlier compilers
generate incorrect output with certain kernel constructs when
-mregparm=3 is used.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECCOMP</term>
<nutsynopsis>
	"Enable seccomp to safely compute untrusted bytecode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PROC_FS</literal>
	</para>

	<para>
	default value
	<literal>y if PROC_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This kernel feature is useful for number crunching applications
that may need to compute untrusted bytecode during their
execution. By using pipes or other transports made available to
the process as file descriptors supporting the read/write
syscalls, it's possible to isolate those applications in
their own address space using seccomp. Once seccomp is
enabled via /proc/<pid>/seccomp, it cannot be disabled
and the task is only allowed to execute a few safe syscalls
defined by each seccomp mode.

If unsure, say Y. Only embedded should say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Timer frequency"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>HZ_250</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows the configuration of the timer frequency. It is customary
to have the timer interrupt run at 1000 HZ but 100 HZ may be more
beneficial for servers and NUMA systems that do not need to have
a fast response for user interaction and that may experience bus
contention and cacheline bounces as a result of timer interrupts.
Note that the timer interrupt occurs on each processor in an SMP
environment leading to NR_CPUS * HZ number of timer interrupts
per second.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HZ_100</term>
<nutsynopsis>
	"100 HZ"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
100 HZ is a typical choice for servers, SMP and NUMA systems
with lots of processors that may show reduced performance if
too many timer interrupts are occurring.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HZ_250</term>
<nutsynopsis>
	"250 HZ"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
250 HZ is a good compromise choice allowing server performance
while also showing good interactive responsiveness even
on SMP and NUMA systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HZ_1000</term>
<nutsynopsis>
	"1000 HZ"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
1000 HZ is the preferred choice for desktop systems and other
systems requiring fast interactive responses to events.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HZ</term>
	<para>
	default value
	<literal>100 if HZ_100</literal>
	</para>


	<para>
	default value
	<literal>250 if HZ_250</literal>
	</para>


	<para>
	default value
	<literal>1000 if HZ_1000</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PHYSICAL_START</term>
<nutsynopsis>
	"Physical address where the kernel is loaded"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>0x100000</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
This gives the physical address where the kernel is loaded.
Primarily used in the case of kexec on panic where the
fail safe kernel needs to run at a different address than
the panic-ed kernel.

Don't change this unless you know what you are doing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEXEC</term>
<nutsynopsis>
	"kexec system call (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
kexec is a system call that implements the ability to shutdown your
current kernel, and to start another kernel.  It is like a reboot
but it is indepedent of the system firmware.   And like a reboot
you can start any kernel with it, not just Linux.

The name comes from the similiarity to the exec system call.

It is an ongoing process to be certain the hardware in a machine
is properly shutdown, so do not be surprised if this code does not
initially work for you.  It may help to enable device hotplugging
support.  As of this writing the exact hardware interface is
strongly in flux, so no good recommendation can be made.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRASH_DUMP</term>
<nutsynopsis>
	"kernel crash dumps (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED && EXPERIMENTAL && HIGHMEM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generate crash dump after being started by kexec.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Power management options (ACPI, APM)"
<para>
	depends on
	<literal>!X86_VOYAGER</literal>
	</para>


<nutentry>
	<term>PM</term>
<nutsynopsis>
	"Power Management support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !IA64_HP_SIM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
"Power Management" means that parts of your computer are shut
off or put into a power conserving "sleep" mode if they are not
being used.  There are two competing standards for doing this: APM
and ACPI.  If you want to use either one, say Y here and then also
to the requisite support below.

Power Management is most important for battery powered laptop
computers; if you have a laptop, check out the Linux Laptop home
page on the WWW at <http://www.linux-on-laptops.com/> or
Tuxmobil - Linux on Mobile Computers at <http://www.tuxmobil.org/>
and the Battery Powered Linux mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Note that, even if you say N here, Linux on the x86 architecture
will issue the hlt instruction if nothing is to be done, thereby
sending the processor to sleep and saving power.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PM_DEBUG</term>
<nutsynopsis>
	"Power Management Debug Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables verbose debugging support in the Power Management
code. This is helpful when debugging and reporting various PM bugs, 
like suspend support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOFTWARE_SUSPEND</term>
<nutsynopsis>
	"Software Suspend"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && (PM && SWAP && X86 && (!SMP || SUSPEND_SMP) || (FVR || PPC32) && !SMP)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the possibility of suspending the machine.
It doesn't need APM.
You may suspend your machine by 'swsusp' or 'shutdown -z <time>' 
(patch for sysvinit needed). 

It creates an image which is saved in your active swap. Upon next
boot, pass the 'resume=/dev/swappartition' argument to the kernel to
have it detect the saved image, restore memory state from it, and
continue to run as before. If you do not want the previous state to
be reloaded, then use the 'noresume' kernel argument. However, note
that your partitions will be fsck'd and you must re-mkswap your swap
partitions. It does not work with swap files.

Right now you may boot without resuming and then later resume but
in meantime you cannot use those swap partitions/files which were
involved in suspending. Also in this case there is a risk that buffers
on disk won't match with saved ones.

For more information take a look at <file:Documentation/power/swsusp.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PM_STD_PARTITION</term>
<nutsynopsis>
	"Default resume partition"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && SOFTWARE_SUSPEND</literal>
	</para>

	<para>
	default value
	<literal> if !X86_VOYAGER && SOFTWARE_SUSPEND</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
The default resume partition is the partition that the suspend-
to-disk implementation will look for a suspended disk image. 

The partition specified here will be different for almost every user. 
It should be a valid swap partition (at least for now) that is turned
on before suspending. 

The partition specified can be overridden by specifying:

      resume=/dev/<other device> 

which will set the resume partition to the device specified. 

Note there is currently not a way to specify which device to save the
suspended image to. It will simply pick the first available swap 
device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SWSUSP_ENCRYPT</term>
<nutsynopsis>
	"Encrypt suspend image"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && SOFTWARE_SUSPEND && CRYPTO && (CRYPTO_AES=y || CRYPTO_AES_586=y || CRYPTO_AES_X86_64=y)</literal>
	</para>

	<para>
	default value
	<literal> if !X86_VOYAGER && SOFTWARE_SUSPEND && CRYPTO && (CRYPTO_AES=y || CRYPTO_AES_586=y || CRYPTO_AES_X86_64=y)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
To prevent data gathering from swap after resume you can encrypt
the suspend image with a temporary key that is deleted on
resume.

Note that the temporary key is stored unencrypted on disk while the
system is suspended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUSPEND_SMP</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && HOTPLUG_CPU && X86 && PM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

menu "ACPI (Advanced Configuration and Power Interface) Support"
<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86)</literal>
	</para>


<nutentry>
	<term>ACPI</term>
<nutsynopsis>
	"ACPI Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Advanced Configuration and Power Interface (ACPI) support for 
Linux requires an ACPI compliant platform (hardware/firmware),
and assumes the presence of OS-directed configuration and power
management (OSPM) software.  This option will enlarge your 
kernel by about 70K.

Linux ACPI provides a robust functional replacement for several 
legacy configuration and power management interfaces, including
the Plug-and-Play BIOS specification (PnP BIOS), the 
MultiProcessor Specification (MPS), and the Advanced Power 
Management (APM) specification.  If both ACPI and APM support 
are configured, whichever is loaded first shall be used.

The ACPI SourceForge project contains the latest source code, 
documentation, tools, mailing list subscription, and other 
information.  This project is available at:
<http://sourceforge.net/projects/acpi>

Linux support for ACPI is based on Intel Corporation's ACPI
Component Architecture (ACPI CA).  For more information see:
<http://developer.intel.com/technology/iapc/acpi>

ACPI is an open industry specification co-developed by Compaq, 
Intel, Microsoft, Phoenix, and Toshiba.  The specification is 
available at:
<http://www.acpi.info>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_SLEEP</term>
<nutsynopsis>
	"Sleep States"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && (!SMP || SUSPEND_SMP) && PM</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && (!SMP || SUSPEND_SMP) && PM</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option adds support for ACPI suspend states. 

With this option, you will be able to put the system "to sleep". 
Sleep states are low power states for the system and devices. All
of the system operating state is saved to either memory or disk
(depending on the state), to allow the system to resume operation
quickly at your request.

Although this option sounds really nifty, barely any of the device
drivers have been converted to the new driver model and hence few
have proper power management support. 

This option is not recommended for anyone except those doing driver
power management development.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_SLEEP_PROC_FS</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP && PROC_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_SLEEP_PROC_SLEEP</term>
<nutsynopsis>
	"/proc/acpi/sleep (deprecated)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP_PROC_FS</literal>
	</para>

	<para>
	default value
	<literal>n if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP_PROC_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Create /proc/acpi/sleep
Deprecated by /sys/power/state
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_AC</term>
<nutsynopsis>
	"AC Adapter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for the AC Adapter object, which indicates
whether a system is on AC, or not. If you have a system that can
switch between A/C and battery, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_BATTERY</term>
<nutsynopsis>
	"Battery"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for battery information through
/proc/acpi/battery. If you have a mobile system with a battery, 
say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_BUTTON</term>
<nutsynopsis>
	"Button"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver handles events on the power, sleep and lid buttons.
A daemon reads /proc/acpi/event and perform user-defined actions
such as shutting down the system.  This is necessary for
software controlled poweroff.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_VIDEO</term>
<nutsynopsis>
	"Video"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver implement the ACPI Extensions For Display Adapters
for integrated graphics devices on motherboard, as specified in
ACPI 2.0 Specification, Appendix B, allowing to perform some basic
control like defining the video POST device, retrieving EDID information
or to setup a video output, etc.
Note that this is an ref. implementation only.  It may or may not work
for your integrated video device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_HOTKEY</term>
<nutsynopsis>
	"Generic Hotkey (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL && X86</literal>
	</para>

	<para>
	default value
	<literal>n if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Experimental consolidated hotkey driver.
If you are unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_FAN</term>
<nutsynopsis>
	"Fan"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for ACPI fan devices, allowing user-mode 
applications to perform basic fan control (on, off, status).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_PROCESSOR</term>
<nutsynopsis>
	"Processor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver installs ACPI as the idle handler for Linux, and uses
ACPI C2 and C3 processor states to save power, on systems that
support it.  It is required by several flavors of cpufreq
Performance-state drivers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_HOTPLUG_CPU</term>
  unknown prop 6!
	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_THERMAL</term>
<nutsynopsis>
	"Thermal Zone"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for ACPI thermal zones.  Most mobile and
some desktop systems support ACPI thermal zones.  It is HIGHLY
recommended that this option be enabled, as your processor(s)
may be damaged without it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_NUMA</term>
<nutsynopsis>
	"NUMA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && NUMA && (IA64 || X86_64)</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && NUMA && (IA64 || X86_64) && (IA64_GENERIC || IA64_SGI_SN2)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_ASUS</term>
<nutsynopsis>
	"ASUS/Medion Laptop Extras"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides support for extra features of ACPI-compatible
ASUS laptops. As some of Medion laptops are made by ASUS, it may also
support some Medion laptops (such as 9675 for example).  It makes all
the extra buttons generate standard ACPI events that go through
/proc/acpi/events, and (on some models) adds support for changing the
display brightness and output, switching the LCD backlight on and off,
and most importantly, allows you to blink those fancy LEDs intended
for reporting mail and wireless status.

Note: display switching code is currently considered EXPERIMENTAL,
toying with these values may even lock your machine.

All settings are changed via /proc/acpi/asus directory entries. Owner
and group for these entries can be set with asus_uid and asus_gid
parameters.

More information and a userspace daemon for handling the extra buttons
at <http://sourceforge.net/projects/acpi4asus/>.

If you have an ACPI-compatible ASUS laptop, say Y or M here. This
driver is still under development, so if your laptop is unsupported or
something works not quite as expected, please use the mailing list
available on the above page (acpi4asus-user@lists.sourceforge.net)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_IBM</term>
<nutsynopsis>
	"IBM ThinkPad Laptop Extras"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a Linux ACPI driver for the IBM ThinkPad laptops. It adds
support for Fn-Fx key combinations, Bluetooth control, video
output switching, ThinkLight control, UltraBay eject and more.
For more information about this driver see <file:Documentation/ibm-acpi.txt>
and <http://ibm-acpi.sf.net/> .

If you have an IBM ThinkPad laptop, say Y or M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_TOSHIBA</term>
<nutsynopsis>
	"Toshiba Laptop Extras"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for access to certain system settings
on "legacy free" Toshiba laptops.  These laptops can be recognized by
their lack of a BIOS setup menu and APM support.

On these machines, all system configuration is handled through the
ACPI.  This driver is required for access to controls not covered
by the general ACPI drivers, such as LCD brightness, video output,
etc.

This driver differs from the non-ACPI Toshiba laptop driver (located
under "Processor type and features") in several aspects.
Configuration is accessed by reading and writing text files in the
/proc tree instead of by program interface to /dev.  Furthermore, no
power management functions are exposed, as those are handled by the
general ACPI drivers.

More information about this driver is available at
<http://memebeam.org/toys/ToshibaAcpiDriver>.

If you have a legacy free Toshiba laptop (such as the Libretto L1
series), say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_CUSTOM_DSDT</term>
<nutsynopsis>
	"Include Custom DSDT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && !STANDALONE</literal>
	</para>

	<para>
	default value
	<literal>n if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && !STANDALONE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Thist option is to load a custom ACPI DSDT
If you don't know what that is, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_CUSTOM_DSDT_FILE</term>
<nutsynopsis>
	"Custom DSDT Table file to include"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_CUSTOM_DSDT</literal>
	</para>

	<para>
	default value
	<literal> if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_CUSTOM_DSDT</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
Enter the full path name to the file wich includes the AmlCode declaration.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_BLACKLIST_YEAR</term>
<nutsynopsis>
	"Disable ACPI for systems before Jan 1st this year"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>

	<para>
	default value
	<literal>0 if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
enter a 4-digit year, eg. 2001 to disable ACPI by default
on platforms with DMI BIOS date before January 1st that year.
"acpi=force" can be used to override this mechanism.

Enter 0 to disable this mechanism and allow ACPI to
run by default no matter what the year.  (default)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_DEBUG</term>
<nutsynopsis>
	"Debug Statements"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>

	<para>
	default value
	<literal>n if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The ACPI driver can optionally report errors with a great deal
of verbosity. Saying Y enables these statements. This will increase
your kernel size by around 50K.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_EC</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver is required on some systems for the proper operation of
the battery and thermal drivers.  If you are compiling for a 
mobile system, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_POWER</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_SYSTEM</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver will enable your system to shut down using ACPI, and
dump your ACPI DSDT table using /proc/acpi/dsdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_PM_TIMER</term>
<nutsynopsis>
	"Power Management Timer Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && !X86_64</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && !X86_64</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Power Management Timer is available on all ACPI-capable,
in most cases even if ACPI is unusable or blacklisted.

This timing source is not affected by powermanagement features
like aggressive processor idling, throttling, frequency and/or
voltage scaling, unlike the commonly used Time Stamp Counter
(TSC) timing source.

So, if you see messages like 'Losing too many ticks!' in the
kernel logs, and/or you are using this on a notebook which
does not yet have an HPET, you should say "Y" here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_CONTAINER</term>
<nutsynopsis>
	"ACPI0004,PNP0A05 and PNP0A06 Container Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>ACPI_HOTPLUG_MEMORY || ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows _physical_ insertion and removal of CPUs and memory.
This can be useful, for example, on NUMA machines that support
ACPI based physical hotplug of nodes, or non-NUMA machines that
support physical cpu/memory hot-plug.

If one selects "m", this driver can be loaded with
"modprobe acpi_container".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACPI_HOTPLUG_MEMORY</term>
<nutsynopsis>
	"Memory Hotplug"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && MEMORY_HOTPLUG</literal>
	</para>

	<para>
	default value
	<literal>n if !X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && MEMORY_HOTPLUG</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds supports for ACPI Memory Hotplug.  This driver
provides support for fielding notifications on ACPI memory
devices (PNP0C80) which represent memory ranges that may be
onlined or offlined during runtime.  

Enabling this driver assumes that your platform hardware
and firmware have support for hot-plugging physical memory. If
your system does not support physically adding or ripping out 
memory DIMMs at some platfrom defined granularity (individually 
or as a bank) at runtime, then you need not enable this driver.

If one selects "m," this driver can be loaded using the following
command: 
      $>modprobe acpi_memhotplug 
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "APM (Advanced Power Management) BIOS Support"
<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS</literal>
	</para>


<nutentry>
	<term>APM</term>
<nutsynopsis>
	"APM (Advanced Power Management) BIOS support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS && PM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
APM is a BIOS specification for saving power using several different
techniques. This is mostly useful for battery powered laptops with
APM compliant BIOSes. If you say Y here, the system time will be
reset after a RESUME operation, the /proc/apm device will provide
battery status information, and user-space programs will receive
notification of APM "events" (e.g. battery status change).

If you select "Y" here, you can disable actual use of the APM
BIOS by passing the "apm=off" option to the kernel at boot time.

Note that the APM support is almost completely disabled for
machines with more than one CPU.

In order to use APM, you will need supporting software. For location
and more information, read <file:Documentation/pm.txt> and the
Battery Powered Linux mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

This driver does not spin down disk drives (see the hdparm(8)
manpage ("man 8 hdparm") for that), and it doesn't turn off
VESA-compliant "green" monitors.

This driver does not support the TI 4000M TravelMate and the ACER
486/DX4/75 because they don't have compliant BIOSes. Many "green"
desktop machines also don't have compliant BIOSes, and this driver
may cause those machines to panic during the boot phase.

Generally, if you don't have a battery in your machine, there isn't
much point in using this driver and you should say N. If you get
random kernel OOPSes or reboots that don't seem to be related to
anything, try disabling/enabling this option (or disabling/enabling
APM in your BIOS).

Some other things you should try when experiencing seemingly random,
"weird" problems:

1) make sure that you have enough swap space and that it is
enabled.
2) pass the "no-hlt" option to the kernel
3) switch on floating point emulation in the kernel and pass
the "no387" option to the kernel
4) pass the "floppy=nodma" option to the kernel
5) pass the "mem=4M" option to the kernel (thereby disabling
all but the first 4 MB of RAM)
6) make sure that the CPU is not over clocked.
7) read the sig11 FAQ at <http://www.bitwizard.nl/sig11/>
8) disable the cache from your BIOS settings
9) install a fan for the video card or exchange video RAM
10) install a better fan for the CPU
11) exchange RAM chips
12) exchange the motherboard.

To compile this driver as a module, choose M here: the
module will be called apm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_IGNORE_USER_SUSPEND</term>
<nutsynopsis>
	"Ignore USER SUSPEND"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will ignore USER SUSPEND requests. On machines with a
compliant APM BIOS, you want to say N. However, on the NEC Versa M
series notebooks, it is necessary to say Y because of a BIOS bug.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_DO_ENABLE</term>
<nutsynopsis>
	"Enable PM at boot time"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable APM features at boot time. From page 36 of the APM BIOS
specification: "When disabled, the APM BIOS does not automatically
power manage devices, enter the Standby State, enter the Suspend
State, or take power saving steps in response to CPU Idle calls."
This driver will make CPU Idle calls when Linux is idle (unless this
feature is turned off -- see "Do CPU IDLE calls", below). This
should always save battery power, but more complicated APM features
will be dependent on your BIOS implementation. You may need to turn
this option off if your computer hangs at boot time when using APM
support, or if it beeps continuously instead of suspending. Turn
this off if you have a NEC UltraLite Versa 33/C or a Toshiba
T400CDT. This is off by default since most machines do fine without
this feature.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_CPU_IDLE</term>
<nutsynopsis>
	"Make CPU Idle calls when idle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable calls to APM CPU Idle/CPU Busy inside the kernel's idle loop.
On some machines, this can activate improved power savings, such as
a slowed CPU clock rate, when the machine is idle. These idle calls
are made after the idle loop has run for some length of time (e.g.,
333 mS). On some machines, this will cause a hang at boot time or
whenever the CPU becomes idle. (On machines with more than one CPU,
this option does nothing.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_DISPLAY_BLANK</term>
<nutsynopsis>
	"Enable console blanking using APM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable console blanking using the APM. Some laptops can use this to
turn off the LCD backlight when the screen blanker of the Linux
virtual console blanks the screen. Note that this is only used by
the virtual console screen blanker, and won't turn off the backlight
when using the X Window system. This also doesn't have anything to
do with your VESA-compliant power-saving monitor. Further, this
option doesn't work for all laptops -- it might not turn off your
backlight at all, or it might print a lot of errors to the console,
especially if you are using gpm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_RTC_IS_GMT</term>
<nutsynopsis>
	"RTC stores time in GMT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if your RTC (Real Time Clock a.k.a. hardware clock)
stores the time in GMT (Greenwich Mean Time). Say N if your RTC
stores localtime.

It is in fact recommended to store GMT in your RTC, because then you
don't have to worry about daylight savings time changes. The only
reason not to use GMT in your RTC is if you also run a broken OS
that doesn't understand GMT.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_ALLOW_INTS</term>
<nutsynopsis>
	"Allow interrupts during APM BIOS calls"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally we disable external interrupts while we are making calls to
the APM BIOS as a measure to lessen the effects of a badly behaving
BIOS implementation.  The BIOS should reenable interrupts if it
needs to.  Unfortunately, some BIOSes do not -- especially those in
many of the newer IBM Thinkpads.  If you experience hangs when you
suspend, try setting this to Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APM_REAL_MODE_POWER_OFF</term>
<nutsynopsis>
	"Use real mode APM BIOS call to power off"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && PM && !X86_VISWS && APM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use real mode APM BIOS calls to switch off the computer. This is
a work-around for a number of buggy BIOSes. Switch this option on if
your computer crashes instead of powering off properly.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "CPU Frequency scaling"
<para>
	depends on
	<literal>!X86_VOYAGER</literal>
	</para>


<nutentry>
	<term>CPU_FREQ</term>
<nutsynopsis>
	"CPU Frequency scaling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
CPU Frequency scaling allows you to change the clock speed of 
CPUs on the fly. This is a nice method to save power, because 
the lower the CPU clock speed, the less power the CPU consumes.

Note that this driver doesn't automatically change the CPU
clock speed, you need to either enable a dynamic cpufreq governor
(see below) after boot, or use a userspace tool.

For details, take a look at <file:Documentation/cpu-freq>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_TABLE</term>
	<para>
	default value
	<literal>m if !X86_VOYAGER && CPU_FREQ</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_DEBUG</term>
<nutsynopsis>
	"Enable CPUfreq debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable CPUfreq subsystem (including drivers)
debugging. You will need to activate it via the kernel
command line by passing
   cpufreq.debug=<value>

To get <value>, add 
     1 to activate CPUfreq core debugging,
     2 to activate CPUfreq drivers debugging, and
     4 to activate CPUfreq governor debugging
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_STAT</term>
<nutsynopsis>
	"CPU frequency translation statistics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if !X86_VOYAGER && CPU_FREQ</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver exports CPU frequency statistics information through sysfs
file system
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_STAT_DETAILS</term>
<nutsynopsis>
	"CPU frequency translation statistics details"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && CPU_FREQ_STAT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will show detail CPU frequency translation table in sysfs file
system
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Default CPUFreq governor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	default value
	<literal>CPU_FREQ_DEFAULT_GOV_USERSPACE if !X86_VOYAGER && CPU_FREQ && (CPU_FREQ_SA1100 || CPU_FREQ_SA1110)</literal>
	</para>


	<para>
	default value
	<literal>CPU_FREQ_DEFAULT_GOV_PERFORMANCE if !X86_VOYAGER && CPU_FREQ</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option sets which CPUFreq governor shall be loaded at
startup. If in doubt, select 'performance'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_DEFAULT_GOV_PERFORMANCE</term>
<nutsynopsis>
	"performance"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  unknown prop 6!
  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use the CPUFreq governor 'performance' as default. This sets
the frequency statically to the highest frequency supported by
the CPU.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_DEFAULT_GOV_USERSPACE</term>
<nutsynopsis>
	"userspace"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  unknown prop 6!
  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use the CPUFreq governor 'userspace' as default. This allows
you to set the CPU frequency manually or when an userspace 
program shall be able to set the CPU dynamically without having
to enable the userspace governor manually.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_GOV_PERFORMANCE</term>
<nutsynopsis>
	"'performance' governor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This cpufreq governor sets the frequency statically to the
highest available CPU frequency.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_GOV_POWERSAVE</term>
<nutsynopsis>
	"'powersave' governor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This cpufreq governor sets the frequency statically to the
lowest available CPU frequency.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_GOV_USERSPACE</term>
<nutsynopsis>
	"'userspace' governor for userspace frequency scaling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable this cpufreq governor when you either want to set the
CPU frequency manually or when an userspace program shall
be able to set the CPU dynamically, like on LART 
<http://www.lart.tudelft.nl/>

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_GOV_ONDEMAND</term>
<nutsynopsis>
	"'ondemand' cpufreq policy governor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
'ondemand' - This driver adds a dynamic cpufreq policy governor.
The governor does a periodic polling and 
changes frequency based on the CPU utilization.
The support for this governor depends on CPU capability to
do fast frequency switching (i.e, very low latency frequency
transitions). 

For details, take a look at linux/Documentation/cpu-freq.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU_FREQ_GOV_CONSERVATIVE</term>
<nutsynopsis>
	"'conservative' cpufreq governor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
'conservative' - this driver is rather similar to the 'ondemand'
governor both in its source code and its purpose, the difference is
its optimisation for better suitability in a battery powered
environment.  The frequency is gracefully increased and decreased
rather than jumping to 100% when speed is required.

If you have a desktop machine then you should really be considering
the 'ondemand' governor instead, however if you are using a laptop,
PDA or even an AMD64 based computer (due to the unacceptable
step-by-step latency issues between the minimum and maximum frequency
transitions in the CPU) you will probably want to use this governor.

For details, take a look at linux/Documentation/cpu-freq.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>

comment "CPUFreq processor drivers"
<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>


<nutentry>
	<term>X86_ACPI_CPUFREQ</term>
<nutsynopsis>
	"ACPI Processor P-States driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds a CPUFreq driver which utilizes the ACPI
Processor Performance States.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ELAN_CPUFREQ</term>
<nutsynopsis>
	"AMD Elan SC400 and SC410"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && X86_ELAN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for AMD Elan SC400 and SC410
processors.

You need to specify the processor maximum speed as boot
parameter: elanfreq=maxspeed (in kHz) or as module
parameter "max_freq".

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC520_CPUFREQ</term>
<nutsynopsis>
	"AMD Elan SC520"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && X86_ELAN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for AMD Elan SC520 processor.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_POWERNOW_K6</term>
<nutsynopsis>
	"AMD Mobile K6-2/K6-3 PowerNow!"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for mobile AMD K6-2+ and mobile
AMD K6-3+ processors.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_POWERNOW_K7</term>
<nutsynopsis>
	"AMD Mobile Athlon/Duron PowerNow!"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for mobile AMD K7 mobile processors.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_POWERNOW_K7_ACPI</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!=y || ACPI_PROCESSOR!=m)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_POWERNOW_K8</term>
<nutsynopsis>
	"AMD Opteron/Athlon64 PowerNow!"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for mobile AMD Opteron/Athlon64 processors.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_POWERNOW_K8_ACPI</term>
	<para>
	default value
	<literal>y if !X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K8 && ACPI_PROCESSOR && (X86_POWERNOW_K8!=y || ACPI_PROCESSOR!=m)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_GX_SUSPMOD</term>
<nutsynopsis>
	"Cyrix MediaGX/NatSemi Geode Suspend Modulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This add the CPUFreq driver for NatSemi Geode processors which
support suspend modulation.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_CENTRINO</term>
<nutsynopsis>
	"Intel Enhanced SpeedStep"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for Enhanced SpeedStep enabled
mobile CPUs.  This means Intel Pentium M (Centrino) CPUs. However,
you also need to say Y to "Use ACPI tables to decode..." below
[which might imply enabling ACPI] if you want to use this driver
on non-Banias CPUs.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_CENTRINO_ACPI</term>
<nutsynopsis>
	"Use ACPI tables to decode valid frequency/voltage pairs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO && ACPI_PROCESSOR && (X86_SPEEDSTEP_CENTRINO!=y || ACPI_PROCESSOR!=m)</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO && ACPI_PROCESSOR && (X86_SPEEDSTEP_CENTRINO!=y || ACPI_PROCESSOR!=m)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use primarily the information provided in the BIOS ACPI tables
to determine valid CPU frequency and voltage pairings. It is
required for the driver to work on non-Banias CPUs.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_CENTRINO_TABLE</term>
<nutsynopsis>
	"Built-in tables for Banias CPUs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use built-in tables for Banias CPUs if ACPI encoding
is not available.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_ICH</term>
<nutsynopsis>
	"Intel Speedstep on ICH-M chipsets (ioport interface)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for certain mobile Intel Pentium III
(Coppermine), all mobile Intel Pentium III-M (Tualatin) and all
mobile Intel Pentium 4 P4-M on systems which have an Intel ICH2, 
ICH3 or ICH4 southbridge.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_SMI</term>
<nutsynopsis>
	"Intel SpeedStep on 440BX/ZX/MX chipsets (SMI interface)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for certain mobile Intel Pentium III
(Coppermine), all mobile Intel Pentium III-M (Tualatin)  
on systems which have an Intel 440BX/ZX/MX southbridge.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_P4_CLOCKMOD</term>
<nutsynopsis>
	"Intel Pentium 4 clock modulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for Intel Pentium 4 / XEON
processors.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_CPUFREQ_NFORCE2</term>
<nutsynopsis>
	"nVidia nForce2 FSB changing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for FSB changing on nVidia nForce2
platforms.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_LONGRUN</term>
<nutsynopsis>
	"Transmeta LongRun"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for Transmeta Crusoe and Efficeon processors
which support LongRun.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_LONGHAUL</term>
<nutsynopsis>
	"VIA Cyrix III Longhaul"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds the CPUFreq driver for VIA Samuel/CyrixIII, 
VIA Cyrix Samuel/C3, VIA Cyrix Ezra and VIA Cyrix Ezra-T 
processors.

For details, take a look at <file:Documentation/cpu-freq/>.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>

comment "shared options"
<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ</literal>
	</para>


<nutentry>
	<term>X86_ACPI_CPUFREQ_PROC_INTF</term>
<nutsynopsis>
	"/proc/acpi/processor/../performance interface (deprecated)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && PROC_FS && (X86_ACPI_CPUFREQ || X86_SPEEDSTEP_CENTRINO_ACPI || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the deprecated /proc/acpi/processor/../performance 
interface. While it is helpful for debugging, the generic,
cross-architecture cpufreq interfaces should be used.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_LIB</term>
	<para>
	default value
	<literal>X86_SPEEDSTEP_ICH || X86_SPEEDSTEP_SMI || X86_P4_CLOCKMOD if !X86_VOYAGER && CPU_FREQ</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SPEEDSTEP_RELAXED_CAP_CHECK</term>
<nutsynopsis>
	"Relaxed speedstep capability checks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && CPU_FREQ && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Don't perform all checks for a speedstep capable system which would 
normally be done. Some ancient or strange systems, though speedstep 
capable, don't always indicate that they are speedstep capable. This 
option lets the probing code bypass some of those checks if the
parameter "relaxed_check=1" is passed to the module.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Bus options (PCI, PCMCIA, EISA, MCA, ISA)"

<nutentry>
	<term>PCI</term>
<nutsynopsis>
	"PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS</literal>
	</para>

	<para>
	default value
	<literal>y if !X86_VOYAGER && X86_VISWS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Find out whether you have a PCI motherboard. PCI is the name of a
bus system, i.e. the way the CPU talks to the other stuff inside
your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
VESA. If you have PCI, say Y, otherwise N.

The PCI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, contains valuable
information about which PCI hardware does work under Linux and which
doesn't.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"PCI access mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && !X86_VISWS</literal>
	</para>

	<para>
	default value
	<literal>PCI_GOANY if PCI && !X86_VISWS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
On PCI systems, the BIOS can be used to detect the PCI devices and
determine their configuration. However, some old PCI motherboards
have BIOS bugs and may crash if this is done. Also, some embedded
PCI-based systems don't have any BIOS at all. Linux can also try to
detect the PCI hardware directly without using the BIOS.

With this option, you can specify how Linux should detect the
PCI devices. If you choose "BIOS", the BIOS will be used,
if you choose "Direct", the BIOS won't be used, and if you
choose "MMConfig", then PCI Express MMCONFIG will be used.
If you choose "Any", the kernel will try MMCONFIG, then the
direct access method and falls back to the BIOS if that doesn't
work. If unsure, go with the default, which is "Any".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_GOBIOS</term>
<nutsynopsis>
	"BIOS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_GOMMCONFIG</term>
<nutsynopsis>
	"MMConfig"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_GODIRECT</term>
<nutsynopsis>
	"Direct"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_GOANY</term>
<nutsynopsis>
	"Any"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_BIOS</term>
	<para>
	default value
	<literal>y if !X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_DIRECT</term>
	<para>
	default value
	<literal>y if PCI && (PCI_GODIRECT || PCI_GOANY || X86_VISWS)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_MMCONFIG</term>
	<para>
	default value
	<literal>y if PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCIEPORTBUS</term>
<nutsynopsis>
	"PCI Express support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This automatically enables PCI Express Port Bus support. Users can
choose Native Hot-Plug support, Advanced Error Reporting support,
Power Management Event support and Virtual Channel support to run
on PCI Express Ports (Root or Switch).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_PCIE</term>
<nutsynopsis>
	"PCI Express Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && PCIEPORTBUS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a motherboard that supports PCI Express Native
Hotplug

To compile this driver as a module, choose M here: the
module will be called pciehp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_PCIE_POLL_EVENT_MODE</term>
<nutsynopsis>
	"Use polling mechanism for hot-plug events (for testing purpose)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI_PCIE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the polling mechanism for hot-plug 
events for early platform testing.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_MSI</term>
<nutsynopsis>
	"Message Signaled Interrupts (MSI and MSI-X)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && (X86_LOCAL_APIC && X86_IO_APIC || IA64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This allows device drivers to enable MSI (Message Signaled
Interrupts).  Message Signaled Interrupts enable a device to
generate an interrupt using an inbound Memory Write on its
PCI bus instead of asserting a device IRQ pin.

If you don't know what to do here, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_LEGACY_PROC</term>
<nutsynopsis>
	"Legacy /proc/pci interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This feature enables a procfs file -- /proc/pci -- that provides a 
summary of PCI devices in the system. 

This feature has been deprecated as of v2.5.53, in favor of using the 
tool lspci(8). This feature may be removed at a future date. 

lspci can provide the same data, as well as much more. lspci is a part of
the pci-utils package, which should be installed by your distribution. 
See <file:Documentation/Changes> for information on where to get the latest
version. 

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_DEBUG</term>
<nutsynopsis>
	"PCI Debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the PCI core to produce a bunch of debug
messages to the system log.  Select this if you are having a
problem with PCI support and want to see more of what is going on.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISA_DMA_API</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISA</term>
<nutsynopsis>
	"ISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER && !X86_VISWS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Find out whether you have ISA slots on your motherboard.  ISA is the
name of a bus system, i.e. the way the CPU talks to the other stuff
inside your box.  Other bus systems are PCI, EISA, MicroChannel
(MCA) or VESA.  ISA is an older system, now being displaced by PCI;
newer boards don't support it.  If you have ISA, say Y, otherwise N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EISA</term>
<nutsynopsis>
	"EISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Extended Industry Standard Architecture (EISA) bus was
developed as an open alternative to the IBM MicroChannel bus.

The EISA bus provided some of the features of the IBM MicroChannel
bus while maintaining backward compatibility with cards made for
the older ISA bus.  The EISA bus saw limited use between 1988 and
1995 when it was made obsolete by the PCI bus.

Say Y here if you are building a kernel for an EISA-based machine.

Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EISA_VLB_PRIMING</term>
<nutsynopsis>
	"Vesa Local Bus priming"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86_PC && EISA</literal>
	</para>

	<para>
	default value
	<literal>n if X86_PC && EISA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Activate this option if your system contains a Vesa Local
Bus (VLB) card that identify itself as an EISA card (such as
the Adaptec AHA-284x).

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EISA_PCI_EISA</term>
<nutsynopsis>
	"Generic PCI/EISA bridge"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!PARISC && PCI && EISA</literal>
	</para>

	<para>
	default value
	<literal>y if !PARISC && PCI && EISA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Activate this option if your system contains a PCI to EISA
bridge. If your system have both PCI and EISA slots, you
certainly need this option.

When in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EISA_VIRTUAL_ROOT</term>
<nutsynopsis>
	"EISA virtual root device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EISA && (ALPHA || X86_PC)</literal>
	</para>

	<para>
	default value
	<literal>y if EISA && (ALPHA || X86_PC)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Activate this option if your system only have EISA bus
(no PCI slots). The Alpha Jensen is an example of such
a system.

When in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EISA_NAMES</term>
<nutsynopsis>
	"EISA device name database"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EISA</literal>
	</para>

	<para>
	default value
	<literal>y if EISA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
By default, the kernel contains a database of all known EISA
device names to make the information in sysfs comprehensible
to the user. This database increases size of the kernel
image by about 40KB, but it gets freed after the system
boots up, so it doesn't take up kernel memory. Anyway, if
you are building an installation floppy or kernel for an
embedded system where kernel image size really matters, you
can disable this feature and you'll get device ID instead of
names.

When in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCA</term>
<nutsynopsis>
	"MCA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VISWS && !X86_VOYAGER</literal>
	</para>

	<para>
	default value
	<literal>y if X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
MicroChannel Architecture is found in some IBM PS/2 machines and
laptops.  It is a bus system similar to PCI or ISA. See
<file:Documentation/mca.txt> (and especially the web page given
there) before attempting to build an MCA bus kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCA_LEGACY</term>
<nutsynopsis>
	"Legacy MCA API Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This compiles in support for the old slot based MCA API.  If you
have an unconverted MCA driver, you will need to say Y here.  It
is safe to say Y anyway.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCA_PROC_FS</term>
<nutsynopsis>
	"Support for the mca entry in /proc"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA_LEGACY && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want the old style /proc/mca directory in addition to the
new style sysfs say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200</term>
<nutsynopsis>
	"NatSemi SCx200 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!X86_VOYAGER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides basic support for the National Semiconductor SCx200
processor.  Right now this is just a driver for the GPIO pins.

If you don't know what to do here, say N.

This support is also available as a module.  If compiled as a
module, it will be called scx200.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_CPU</term>
<nutsynopsis>
	"Support for hot-pluggable CPUs (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SMP && HOTPLUG && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to experiment with turning CPUs off and on.  CPUs
can be controlled through /sys/devices/system/cpu.

Say N.
	</para>

</nutentrybody>
</nutentry>

menu "PCCARD (PCMCIA/CardBus) support"

<nutentry>
	<term>PCCARD</term>
<nutsynopsis>
	"PCCard (PCMCIA/CardBus) support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to attach PCMCIA- or PC-cards to your Linux
computer.  These are credit-card size devices such as network cards,
modems or hard drives often used with laptops computers.  There are
actually two varieties of these cards: 16 bit PCMCIA and 32 bit
CardBus cards.

To compile this driver as modules, choose M here: the
module will be called pcmcia_core.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_DEBUG</term>
<nutsynopsis>
	"Enable PCCARD debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable PCMCIA subsystem debugging.  You
will need to choose the debugging level either via the
kernel command line, or module options depending whether
you build the PCMCIA as modules.

The kernel command line options are:
  pcmcia_core.pc_debug=N
  pcmcia.pc_debug=N
  sa11xx_core.pc_debug=N

The module option is called pc_debug=N

In all the above examples, N is the debugging verbosity
level.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA</term>
<nutsynopsis>
	"16-bit PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if PCCARD</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for 16-bit PCMCIA cards. Most older
PC-cards are such 16-bit PCMCIA cards, so unless you know you're
only using 32-bit CardBus cards, say Y or M here.

To use 16-bit PCMCIA cards, you will need supporting software in
most cases. (see the file <file:Documentation/Changes> for
location and details).

To compile this driver as modules, choose M here: the
module will be called pcmcia.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_LOAD_CIS</term>
<nutsynopsis>
	"Load CIS updates from userspace (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if PCCARD && PCMCIA && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some PCMCIA cards require an updated Card Information Structure (CIS)
to be loaded from userspace to work correctly. If you say Y here,
and your userspace is arranged correctly, this will be loaded
automatically using the in-kernel firmware loader and the hotplug
subsystem, instead of relying on cardmgr from pcmcia-cs to do so.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_IOCTL</term>
<nutsynopsis>
	"PCMCIA control ioctl (obsolete)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA</literal>
	</para>

	<para>
	default value
	<literal>y if PCCARD && PCMCIA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the deprecated ioctl interface to the PCMCIA
subsystem will be built. It is needed by cardmgr and cardctl
(pcmcia-cs) to function properly.

You should use the new pcmciautils package instead (see
<file:Documentation/Changes> for location and details).

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CARDBUS</term>
<nutsynopsis>
	"32-bit CardBus support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCI</literal>
	</para>

	<para>
	default value
	<literal>y if PCCARD && PCI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
CardBus is a bus mastering architecture for PC-cards, which allows
for 32 bit PC-cards (the original PCMCIA standard specifies only
a 16 bit wide bus). Many newer PC-cards are actually CardBus cards.

To use 32 bit PC-cards, you also need a CardBus compatible host
bridge. Virtually all modern PCMCIA bridges do this, and most of
them are "yenta-compatible", so say Y or M there, too.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>

comment "PC-card bridges"
<para>
	depends on
	<literal>PCCARD</literal>
	</para>


<nutentry>
	<term>YENTA</term>
<nutsynopsis>
	"CardBus yenta-compatible bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for CardBus host bridges.  Virtually
all modern PCMCIA bridges are CardBus compatible.  A "bridge" is 
the hardware inside your computer that PCMCIA cards are plugged 
into.

To compile this driver as modules, choose M here: the
module will be called yenta_socket.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PD6729</term>
<nutsynopsis>
	"Cirrus PD6729 compatible bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides support for the Cirrus PD6729 PCI-to-PCMCIA bridge
device, found in some older laptops and PCMCIA card readers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I82092</term>
<nutsynopsis>
	"i82092 compatible bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides support for the Intel I82092AA PCI-to-PCMCIA bridge device,
found in some older laptops and more commonly in evaluation boards for the
chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I82365</term>
<nutsynopsis>
	"i82365 compatible bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for ISA-bus PCMCIA host bridges that
are register compatible with the Intel i82365.  These are found on
older laptops and ISA-bus card readers for desktop systems.  A
"bridge" is the hardware inside your computer that PCMCIA cards are
plugged into. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCIC</term>
<nutsynopsis>
	"Databook TCIC host bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the Databook TCIC family of PCMCIA
host bridges. These are only found on a handful of old systems.
"Bridge" is the name used for the hardware inside your computer that
PCMCIA cards are plugged into. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HD64465_PCMCIA</term>
<nutsynopsis>
	"HD64465 host bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && HD64465 && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_AU1X00</term>
<nutsynopsis>
	"Au1x00 pcmcia support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && SOC_AU1X00 && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_SA1100</term>
<nutsynopsis>
	"SA1100 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && ARM && ARCH_SA1100 && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for SA11x0-based PCMCIA or CF
sockets, found on HP iPAQs, Yopy, and other StrongARM(R)/
Xscale(R) embedded machines.

This driver is also available as a module called sa1100_cs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_SA1111</term>
<nutsynopsis>
	"SA1111 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y  here to include support for SA1111-based PCMCIA or CF
sockets, found on the Jornada 720, Graphicsmaster and other
StrongARM(R)/Xscale(R) embedded machines.

This driver is also available as a module called sa1111_cs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_PXA2XX</term>
<nutsynopsis>
	"PXA2xx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && ARM && ARCH_PXA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the PXA2xx PCMCIA controller
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_PROBE</term>
	<para>
	default value
	<literal>y if PCCARD && ISA && !ARCH_SA1100 && !ARCH_CLPS711X</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M32R_PCC</term>
<nutsynopsis>
	"M32R PCMCIA I/F"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && M32R && CHIP_M32700 && PCMCIA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to use the M32R PCMCIA controller.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M32R_CFC</term>
<nutsynopsis>
	"M32R CF I/F Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to use the M32R CompactFlash controller.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>M32R_CFC_NUM</term>
<nutsynopsis>
	"M32R CF I/F number"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && M32R_CFC</literal>
	</para>

	<para>
	default value
	<literal>1 if PCCARD && M32R_CFC && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Set the number of M32R CF slots.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_VRC4171</term>
<nutsynopsis>
	"NEC VRC4171 Card Controllers support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && VRC4171 && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_VRC4173</term>
<nutsynopsis>
	"NEC VRC4173 CARDU support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && CPU_VR41XX && PCI && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OMAP_CF</term>
<nutsynopsis>
	"OMAP CompactFlash Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCCARD && PCMCIA && ARCH_OMAP16XX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the CompactFlash controller on OMAP.
Note that this doesn't support "True IDE" mode.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCCARD_NONSTATIC</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "PCI Hotplug Support"

<nutentry>
	<term>HOTPLUG_PCI</term>
<nutsynopsis>
	"Support for PCI Hotplug (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a motherboard with a PCI Hotplug controller.
This allows you to add and remove PCI cards while the machine is
powered up and running.  The file system pcihpfs must be mounted
in order to interact with any PCI Hotplug controllers.

To compile this driver as a module, choose M here: the
module will be called pci_hotplug.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_FAKE</term>
<nutsynopsis>
	"Fake PCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the fake PCI hotplug driver. It can
be used to simulate PCI hotplug events if even if your system is
not PCI hotplug capable.

This driver will "emulate" removing PCI devices from the system.
If the "power" file is written to with "0" then the specified PCI
device will be completely removed from the kernel.

WARNING, this does NOT turn off the power to the PCI device.
This is a "logical" removal, not a physical or electrical
removal.

Use this module at your own risk.  You have been warned!

To compile this driver as a module, choose M here: the
module will be called fakephp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_COMPAQ</term>
<nutsynopsis>
	"Compaq PCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && X86 && PCI_BIOS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a motherboard with a Compaq PCI Hotplug
controller.

To compile this driver as a module, choose M here: the
module will be called cpqphp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_COMPAQ_NVRAM</term>
<nutsynopsis>
	"Save configuration into NVRAM on Compaq servers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI_COMPAQ</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a Compaq server that has a PCI Hotplug
controller.  This will allow the PCI Hotplug driver to store the PCI
system configuration options in NVRAM.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_IBM</term>
<nutsynopsis>
	"IBM PCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a motherboard with a IBM PCI Hotplug
controller.

To compile this driver as a module, choose M here: the
module will be called ibmphp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_ACPI</term>
<nutsynopsis>
	"ACPI PCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ACPI && HOTPLUG_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a system that supports PCI Hotplug using
ACPI.

To compile this driver as a module, choose M here: the
module will be called acpiphp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_ACPI_IBM</term>
<nutsynopsis>
	"ACPI PCI Hotplug driver IBM extensions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI_ACPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an IBM system that supports PCI Hotplug using
ACPI.

To compile this driver as a module, choose M here: the
module will be called acpiphp_ibm.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_CPCI</term>
<nutsynopsis>
	"CompactPCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a CompactPCI system card with CompactPCI
hotswap support per the PICMG 2.1 specification.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_CPCI_ZT5550</term>
<nutsynopsis>
	"Ziatech ZT5550 CompactPCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Performance Technologies (formerly Intel,
formerly just Ziatech) Ziatech ZT5550 CompactPCI system card.

To compile this driver as a module, choose M here: the
module will be called cpcihp_zt5550.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_CPCI_GENERIC</term>
<nutsynopsis>
	"Generic port I/O CompactPCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a CompactPCI system card that exposes the #ENUM
hotswap signal as a bit in a system register that can be read through
standard port I/O.

To compile this driver as a module, choose M here: the
module will be called cpcihp_generic.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_SHPC</term>
<nutsynopsis>
	"SHPC PCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a motherboard with a SHPC PCI Hotplug
controller.

To compile this driver as a module, choose M here: the
module will be called shpchp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_SHPC_POLL_EVENT_MODE</term>
<nutsynopsis>
	"Use polling mechanism for hot-plug events (for testing purpose)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI_SHPC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the polling mechanism for hot-plug 
events for early platform testing.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_SHPC_PHPRM_LEGACY</term>
<nutsynopsis>
	"For AMD SHPC only: Use $HRT for resource/configuration"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI_SHPC && !ACPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here for AMD SHPC. You have to select this option if you are 
using this driver on platform with AMD SHPC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_RPA</term>
<nutsynopsis>
	"RPA PCI Hotplug driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a a RPA system that supports PCI Hotplug.

To compile this driver as a module, choose M here: the
module will be called rpaphp.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_RPA_DLPAR</term>
<nutsynopsis>
	"RPA Dynamic Logical Partitioning for I/O slots"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI_RPA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if your system supports Dynamic Logical Partitioning
for I/O slots.

To compile this driver as a module, choose M here: the
module will be called rpadlpar_io.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOTPLUG_PCI_SGI</term>
<nutsynopsis>
	"SGI PCI Hotplug Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the SGI Altix Hotplug
Driver for PCI devices.

When in doubt, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Executable file formats"

<nutentry>
	<term>BINFMT_ELF</term>
<nutsynopsis>
	"Kernel support for ELF binaries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMU</literal>
	</para>

	<para>
	default value
	<literal>y if MMU</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
ELF (Executable and Linkable Format) is a format for libraries and
executables used across different architectures and operating
systems. Saying Y here will enable your kernel to run ELF binaries
and enlarge it by about 13 KB. ELF support under Linux has now all
but replaced the traditional Linux a.out formats (QMAGIC and ZMAGIC)
because it is portable (this does *not* mean that you will be able
to run executables from different architectures or operating systems
however) and makes building run-time libraries very easy. Many new
executables are distributed solely in ELF format. You definitely
want to say Y here.

Information about ELF is contained in the ELF HOWTO available from
<http://www.tldp.org/docs.html#howto>.

If you find that after upgrading from Linux kernel 1.2 and saying Y
here, you still can't run any ELF binaries (they just crash), then
you'll have to install the newest ELF runtime libraries, including
ld.so (check the file <file:Documentation/Changes> for location and
latest version).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_ELF_FDPIC</term>
<nutsynopsis>
	"Kernel support for FDPIC ELF binaries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FRV</literal>
	</para>

	<para>
	default value
	<literal>y if FRV</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
ELF FDPIC binaries are based on ELF, but allow the individual load
segments of a binary to be located in memory independently of each
other. This makes this format ideal for use in environments where no
MMU is available as it still permits text segments to be shared,
even if data segments are not.

It is also possible to run FDPIC ELF binaries on MMU linux also.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_FLAT</term>
<nutsynopsis>
	"Kernel support for flat binaries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!MMU || SUPERH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support uClinux FLAT format binaries.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_ZFLAT</term>
<nutsynopsis>
	"Enable ZFLAT support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BINFMT_FLAT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support FLAT format compressed binaries
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_SHARED_FLAT</term>
<nutsynopsis>
	"Enable shared FLAT support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BINFMT_FLAT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support FLAT shared libraries
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_AOUT</term>
<nutsynopsis>
	"Kernel support for a.out and ECOFF binaries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 && !X86_64 || ALPHA || ARM || M68K || SPARC32</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A.out (Assembler.OUTput) is a set of formats for libraries and
executables used in the earliest versions of UNIX.  Linux used
the a.out formats QMAGIC and ZMAGIC until they were replaced
with the ELF format.

The conversion to ELF started in 1995.  This option is primarily
provided for historical interest and for the benefit of those
who need to run binaries from that era.

Most people should answer N here.  If you think you may have
occasional use for this format, enable module support above
and answer M here to compile this support as a module called
binfmt_aout.

If any crucial components of your system (such as /sbin/init
or /lib/ld.so) are still in a.out format, you will have to
say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OSF4_COMPAT</term>
<nutsynopsis>
	"OSF/1 v4 readv/writev compatibility"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ALPHA && BINFMT_AOUT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you are using OSF/1 binaries (like Netscape and Acrobat)
with v4 shared libraries freely available from Compaq. If you're
going to use shared libraries from Tru64 version 5.0 or later, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_EM86</term>
<nutsynopsis>
	"Kernel support for Linux/Intel ELF binaries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ALPHA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be able to execute Linux/Intel ELF
binaries just like native Alpha binaries on your Alpha machine. For
this to work, you need to have the emulator /usr/bin/em86 in place.

You can get the same functionality by saying N here and saying Y to
"Kernel support for MISC binaries".

You may answer M to compile the emulation support as a module and
later load the module when you want to use a Linux/Intel binary. The
module will be called binfmt_em86. If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_SOM</term>
<nutsynopsis>
	"Kernel support for SOM binaries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARISC && HPUX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SOM is a binary executable format inherited from HP/UX.  Say
Y here to be able to load and execute SOM binaries directly.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BINFMT_MISC</term>
<nutsynopsis>
	"Kernel support for MISC binaries"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, it will be possible to plug wrapper-driven binary
formats into the kernel. You will like this especially when you use
programs that need an interpreter to run like Java, Python, .NET or
Emacs-Lisp. It's also useful if you often run DOS executables under
the Linux DOS emulator DOSEMU (read the DOSEMU-HOWTO, available from
<http://www.tldp.org/docs.html#howto>). Once you have
registered such a binary class with the kernel, you can start one of
those programs simply by typing in its name at a shell prompt; Linux
will automatically feed it to the correct interpreter.

You can do other nice things, too. Read the file
<file:Documentation/binfmt_misc.txt> to learn how to use this
feature, <file:Documentation/java.txt> for information about how
to include Java support. and <file:Documentation/mono.txt> for
information about how to include Mono-based .NET support.

To use binfmt_misc, you will need to mount it:
      mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc

You may say M here for module support and later load the module when
you have use for it; the module is called binfmt_misc. If you
don't know what to answer at this point, say Y.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Networking"

<nutentry>
	<term>NET</term>
<nutsynopsis>
	"Networking support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Unless you really know what you are doing, you should say Y here.
The reason is that some programs need kernel networking support even
when running on a stand-alone machine that isn't connected to any
other computer.

If you are upgrading from an older kernel, you
should consider updating your networking tools too because changes
in the kernel and the tools often go hand in hand. The tools are
contained in the package net-tools, the location and version number
of which are given in <file:Documentation/Changes>.

For a general introduction to Linux networking, it is highly
recommended to read the NET-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>

menu "Networking options"
<para>
	depends on
	<literal>NET</literal>
	</para>


<nutentry>
	<term>PACKET</term>
<nutsynopsis>
	"Packet socket"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Packet protocol is used by applications which communicate
directly with network devices without an intermediate network
protocol implemented in the kernel, e.g. tcpdump.  If you want them
to work, choose Y.

To compile this driver as a module, choose M here: the module will
be called af_packet.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PACKET_MMAP</term>
<nutsynopsis>
	"Packet socket: mmapped IO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && PACKET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the Packet protocol driver will use an IO
mechanism that results in faster communication.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UNIX</term>
<nutsynopsis>
	"Unix domain sockets"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will include support for Unix domain sockets;
sockets are the standard Unix mechanism for establishing and
accessing network connections.  Many commonly used programs such as
the X Window system and syslog use these sockets even if your
machine is not connected to any network.  Unless you are working on
an embedded system or something similar, you therefore definitely
want to say Y here.

To compile this driver as a module, choose M here: the module will be
called unix.  Note that several important services won't work
correctly if you say M here and then neglect to load the module.

Say Y unless you know what you are doing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFRM</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFRM_USER</term>
<nutsynopsis>
	"IPsec user configuration interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && XFRM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IPsec user configuration interface used
by native Linux tools.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_KEY</term>
<nutsynopsis>
	"PF_KEY sockets"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
PF_KEYv2 socket family, compatible to KAME ones.
They are required if you are going to use IPsec tools ported
from KAME.

Say Y unless you know what you are doing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET</term>
<nutsynopsis>
	"TCP/IP networking"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
These are the protocols used on the Internet and on most local
Ethernets. It is highly recommended to say Y here (this will enlarge
your kernel by about 144 KB), since some programs (e.g. the X window
system) use TCP/IP even if your machine is not connected to any
other computer. You will get the so-called loopback device which
allows you to ping yourself (great fun, that!).

For an excellent introduction to Linux networking, please read the
Linux Networking HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

If you say Y here and also to "/proc file system support" and
"Sysctl support" below, you can change various aspects of the
behavior of the TCP/IP code by writing to the (virtual) files in
/proc/sys/net/ipv4/*; the options are explained in the file
<file:Documentation/networking/ip-sysctl.txt>.

Short answer: say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_MULTICAST</term>
<nutsynopsis>
	"IP: multicasting"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is code for addressing several networked computers at once,
enlarging your kernel by about 2 KB. You need multicasting if you
intend to participate in the MBONE, a high bandwidth network on top
of the Internet which carries audio and video broadcasts. More
information about the MBONE is on the WWW at
<http://www-itg.lbl.gov/mbone/>. Information about the multicast
capabilities of the various network cards is contained in
<file:Documentation/networking/multicast.txt>. For most people, it's
safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ADVANCED_ROUTER</term>
<nutsynopsis>
	"IP: advanced router"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you intend to run your Linux box mostly as a router, i.e. as a
computer that forwards and redistributes network packets, say Y; you
will then be presented with several options that allow more precise
control about the routing process.

The answer to this question won't directly affect the kernel:
answering N will just cause the configurator to skip all the
questions about advanced routing.

Note that your box can only act as a router if you enable IP
forwarding in your kernel; you can do that by saying Y to "/proc
file system support" and "Sysctl support" below and executing the
line

echo "1" > /proc/sys/net/ipv4/ip_forward

at boot time after the /proc file system has been mounted.

If you turn on IP forwarding, you will also get the rp_filter, which
automatically rejects incoming packets if the routing table entry
for their source address doesn't match the network interface they're
arriving on. This has security advantages because it prevents the
so-called IP spoofing, however it can pose problems if you use
asymmetric routing (packets from you to a host take a different path
than packets from that host to you) or if you operate a non-routing
host which has several IP addresses on different interfaces. To turn
rp_filter off use:

echo 0 > /proc/sys/net/ipv4/conf/<device>/rp_filter
or
echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter

If unsure, say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Choose IP: FIB lookup algorithm (choose FIB_HASH if unsure)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ADVANCED_ROUTER</literal>
	</para>

	<para>
	default value
	<literal>ASK_IP_FIB_HASH if NET && INET && IP_ADVANCED_ROUTER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ASK_IP_FIB_HASH</term>
<nutsynopsis>
	"FIB_HASH"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Current FIB is very proven and good enough for most users.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_FIB_TRIE</term>
<nutsynopsis>
	"FIB_TRIE"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use new experimental LC-trie as FIB lookup algoritm. 
This improves lookup performance if you have a large
number of routes.

LC-trie is a longest matching prefix lookup algorithm which
performs better than FIB_HASH for large routing tables.
But, it consumes more memory and is more complex.

LC-trie is described in:

IP-address lookup using LC-tries. Stefan Nilsson and Gunnar Karlsson
IEEE Journal on Selected Areas in Communications, 17(6):1083-1092, June 1999
An experimental study of compression methods for dynamic tries
Stefan Nilsson and Matti Tikkanen. Algorithmica, 33(1):19-33, 2002.
http://www.nada.kth.se/~snilsson/public/papers/dyntrie2/
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_FIB_HASH</term>
	<para>
	default value
	<literal>ASK_IP_FIB_HASH || !IP_ADVANCED_ROUTER if NET && INET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_MULTIPLE_TABLES</term>
<nutsynopsis>
	"IP: policy routing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ADVANCED_ROUTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally, a router decides what to do with a received packet based
solely on the packet's final destination address. If you say Y here,
the Linux router will also be able to take the packet's source
address into account. Furthermore, the TOS (Type-Of-Service) field
of the packet can be used for routing decisions as well.

If you are interested in this, please see the preliminary
documentation at <http://www.compendium.com.ar/policy-routing.txt>
and <ftp://post.tepkom.ru/pub/vol2/Linux/docs/advanced-routing.tex>.
You will need supporting software from
<ftp://ftp.tux.org/pub/net/ip-routing/>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_FWMARK</term>
<nutsynopsis>
	"IP: use netfilter MARK value as routing key"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_MULTIPLE_TABLES && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will be able to specify different routes for
packets with different mark values (see iptables(8), MARK target).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_MULTIPATH</term>
<nutsynopsis>
	"IP: equal cost multipath"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ADVANCED_ROUTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally, the routing tables specify a single action to be taken in
a deterministic manner for a given packet. If you say Y here
however, it becomes possible to attach several actions to a packet
pattern, in effect specifying several alternative paths to travel
for those packets. The router considers all these paths to be of
equal "cost" and chooses one of them in a non-deterministic fashion
if a matching packet arrives.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_MULTIPATH_CACHED</term>
<nutsynopsis>
	"IP: equal cost multipath with caching support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ROUTE_MULTIPATH</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally, equal cost multipath routing is not supported by the
routing cache. If you say Y here, alternative routes are cached
and on cache lookup a route is chosen in a configurable fashion.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_MULTIPATH_RR</term>
<nutsynopsis>
	"MULTIPATH: round robin algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ROUTE_MULTIPATH_CACHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Mulitpath routes are chosen according to Round Robin
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_MULTIPATH_RANDOM</term>
<nutsynopsis>
	"MULTIPATH: random algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ROUTE_MULTIPATH_CACHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multipath routes are chosen in a random fashion. Actually,
there is no weight for a route. The advantage of this policy
is that it is implemented stateless and therefore introduces only
a very small delay.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_MULTIPATH_WRANDOM</term>
<nutsynopsis>
	"MULTIPATH: weighted random algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ROUTE_MULTIPATH_CACHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multipath routes are chosen in a weighted random fashion. 
The per route weights are the weights visible via ip route 2. As the
corresponding state management introduces some overhead routing delay
is increased.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_MULTIPATH_DRR</term>
<nutsynopsis>
	"MULTIPATH: interface round robin algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ROUTE_MULTIPATH_CACHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Connections are distributed in a round robin fashion over the
available interfaces. This policy makes sense if the connections 
should be primarily distributed on interfaces and not on routes. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_ROUTE_VERBOSE</term>
<nutsynopsis>
	"IP: verbose route monitoring"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_ADVANCED_ROUTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, which is recommended, then the kernel will print
verbose messages regarding the routing, for example warnings about
received packets which look strange and could be evidence of an
attack or a misconfigured system somewhere. The information is
handled by the klogd daemon which is responsible for kernel messages
("man klogd").
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_PNP</term>
<nutsynopsis>
	"IP: kernel level autoconfiguration"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables automatic configuration of IP addresses of devices and
of the routing table during kernel boot, based on either information
supplied on the kernel command line or by BOOTP or RARP protocols.
You need to say Y only for diskless machines requiring network
access to boot (in which case you want to say Y to "Root file system
on NFS" as well), because all other machines configure the network
in their startup scripts.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_PNP_DHCP</term>
<nutsynopsis>
	"IP: DHCP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_PNP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want your Linux box to mount its whole root file system (the
one containing the directory /) from some other computer over the
net via NFS and you want the IP address of your computer to be
discovered automatically at boot time using the DHCP protocol (a
special protocol designed for doing this job), say Y here. In case
the boot ROM of your network card was designed for booting Linux and
does DHCP itself, providing all necessary information on the kernel
command line, you can say N here.

If unsure, say Y. Note that if you want to use DHCP, a DHCP server
must be operating on your network.  Read
<file:Documentation/nfsroot.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_PNP_BOOTP</term>
<nutsynopsis>
	"IP: BOOTP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_PNP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want your Linux box to mount its whole root file system (the
one containing the directory /) from some other computer over the
net via NFS and you want the IP address of your computer to be
discovered automatically at boot time using the BOOTP protocol (a
special protocol designed for doing this job), say Y here. In case
the boot ROM of your network card was designed for booting Linux and
does BOOTP itself, providing all necessary information on the kernel
command line, you can say N here. If unsure, say Y. Note that if you
want to use BOOTP, a BOOTP server must be operating on your network.
Read <file:Documentation/nfsroot.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_PNP_RARP</term>
<nutsynopsis>
	"IP: RARP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_PNP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want your Linux box to mount its whole root file system (the
one containing the directory /) from some other computer over the
net via NFS and you want the IP address of your computer to be
discovered automatically at boot time using the RARP protocol (an
older protocol which is being obsoleted by BOOTP and DHCP), say Y
here. Note that if you want to use RARP, a RARP server must be
operating on your network. Read <file:Documentation/nfsroot.txt> for
details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_IPIP</term>
<nutsynopsis>
	"IP: tunneling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Tunneling means encapsulating data of one protocol type within
another protocol and sending it over a channel that understands the
encapsulating protocol. This particular tunneling driver implements
encapsulation of IP within IP, which sounds kind of pointless, but
can be useful if you want to make your (or some other) machine
appear on a different network than it physically is, or to use
mobile-IP facilities (allowing laptops to seamlessly move between
networks without changing their IP addresses).

Saying Y to this option will produce two modules ( = code which can
be inserted in and removed from the running kernel whenever you
want). Most people won't need this and can say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_IPGRE</term>
<nutsynopsis>
	"IP: GRE tunnels over IP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Tunneling means encapsulating data of one protocol type within
another protocol and sending it over a channel that understands the
encapsulating protocol. This particular tunneling driver implements
GRE (Generic Routing Encapsulation) and at this time allows
encapsulating of IPv4 or IPv6 over existing IPv4 infrastructure.
This driver is useful if the other endpoint is a Cisco router: Cisco
likes GRE much better than the other Linux tunneling driver ("IP
tunneling" above). In addition, GRE allows multicast redistribution
through the tunnel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_IPGRE_BROADCAST</term>
<nutsynopsis>
	"IP: broadcast GRE over IP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_MULTICAST && NET_IPGRE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
One application of GRE/IP is to construct a broadcast WAN (Wide Area
Network), which looks like a normal Ethernet LAN (Local Area
Network), but can be distributed all over the Internet. If you want
to do that, say Y here and to "IP multicast routing" below.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_MROUTE</term>
<nutsynopsis>
	"IP: multicast routing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_MULTICAST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is used if you want your machine to act as a router for IP
packets that have several destination addresses. It is needed on the
MBONE, a high bandwidth network on top of the Internet which carries
audio and video broadcasts. In order to do that, you would most
likely run the program mrouted. Information about the multicast
capabilities of the various network cards is contained in
<file:Documentation/networking/multicast.txt>. If you haven't heard
about it, you don't need it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_PIMSM_V1</term>
<nutsynopsis>
	"IP: PIM-SM version 1 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_MROUTE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Kernel side support for Sparse Mode PIM (Protocol Independent
Multicast) version 1. This multicast routing protocol is used widely
because Cisco supports it. You need special software to use it
(pimd-v1). Please see <http://netweb.usc.edu/pim/> for more
information about PIM.

Say Y if you want to use PIM-SM v1. Note that you can say N here if
you just want to use Dense Mode PIM.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_PIMSM_V2</term>
<nutsynopsis>
	"IP: PIM-SM version 2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IP_MROUTE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Kernel side support for Sparse Mode PIM version 2. In order to use
this, you need an experimental routing daemon supporting it (pimd or
gated-5). This routing protocol is not used widely, so say N unless
you want to play with it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARPD</term>
<nutsynopsis>
	"IP: ARP daemon support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally, the kernel maintains an internal cache which maps IP
addresses to hardware addresses on the local network, so that
Ethernet/Token Ring/ etc. frames are sent to the proper address on
the physical networking layer. For small networks having a few
hundred directly connected hosts or less, keeping this address
resolution (ARP) cache inside the kernel works well. However,
maintaining an internal ARP cache does not work well for very large
switched networks, and will use a lot of kernel memory if TCP/IP
connections are made to many machines on the network.

If you say Y here, the kernel's internal ARP cache will never grow
to more than 256 entries (the oldest entries are expired in a LIFO
manner) and communication will be attempted with the user space ARP
daemon arpd. Arpd then answers the address resolution request either
from its own cache or by asking the net.

This code is experimental and also obsolete. If you want to use it,
you need to find a version of the daemon arpd on the net somewhere,
and you should also say Y to "Kernel/User network link driver",
below. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYN_COOKIES</term>
<nutsynopsis>
	"IP: TCP syncookie support (disabled per default)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normal TCP/IP networking is open to an attack known as "SYN
flooding". This denial-of-service attack prevents legitimate remote
users from being able to connect to your computer during an ongoing
attack and requires very little work from the attacker, who can
operate from anywhere on the Internet.

SYN cookies provide protection against this type of attack. If you
say Y here, the TCP/IP stack will use a cryptographic challenge
protocol known as "SYN cookies" to enable legitimate users to
continue to connect, even when your machine is under attack. There
is no need for the legitimate users to change their TCP/IP software;
SYN cookies work transparently to them. For technical information
about SYN cookies, check out <http://cr.yp.to/syncookies.html>.

If you are SYN flooded, the source address reported by the kernel is
likely to have been forged by the attacker; it is only reported as
an aid in tracing the packets to their actual source and should not
be taken as absolute truth.

SYN cookies may prevent correct error reporting on clients when the
server is really overloaded. If this happens frequently better turn
them off.

If you say Y here, note that SYN cookies aren't enabled by default;
you can enable them by saying Y to "/proc file system support" and
"Sysctl support" below and executing the command

echo 1 >/proc/sys/net/ipv4/tcp_syncookies

at boot time after the /proc file system has been mounted.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_AH</term>
<nutsynopsis>
	"IP: AH transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IPsec AH.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_ESP</term>
<nutsynopsis>
	"IP: ESP transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IPsec ESP.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_IPCOMP</term>
<nutsynopsis>
	"IP: IPComp transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IP Payload Compression Protocol (IPComp) (RFC3173),
typically needed for IPsec.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_TUNNEL</term>
<nutsynopsis>
	"IP: tunnel transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for generic IP tunnel transformation, which is required by
the IP tunneling module as well as tunnel mode IPComp.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_DIAG</term>
<nutsynopsis>
	"INET: socket monitoring interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	default value
	<literal>y if NET && INET</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for INET (TCP, DCCP, etc) socket monitoring interface used by
native Linux tools such as ss. ss is included in iproute2, currently
downloadable at <http://developer.osdl.org/dev/iproute2>. 

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_TCP_DIAG</term>
	<para>
	default value
	<literal>INET_DIAG if NET && INET && INET_DIAG</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_ADVANCED</term>
<nutsynopsis>
	"TCP: advanced congestion control"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for selection of various TCP congestion control
modules.

Nearly all users can safely say no here, and a safe default
selection will be made (BIC-TCP with new Reno as a fallback).

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

menu "TCP congestion control"
<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED</literal>
	</para>


<nutentry>
	<term>TCP_CONG_BIC</term>
<nutsynopsis>
	"Binary Increase Congestion (BIC) control"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if NET && INET && TCP_CONG_ADVANCED</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
BIC-TCP is a sender-side only change that ensures a linear RTT
fairness under large windows while offering both scalability and
bounded TCP-friendliness. The protocol combines two schemes
called additive increase and binary search increase. When the
congestion window is large, additive increase with a large
increment ensures linear RTT fairness as well as good
scalability. Under small congestion windows, binary search
increase provides TCP friendliness.
See http://www.csc.ncsu.edu/faculty/rhee/export/bitcp/
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_WESTWOOD</term>
<nutsynopsis>
	"TCP Westwood+"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>m if NET && INET && TCP_CONG_ADVANCED</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TCP Westwood+ is a sender-side only modification of the TCP Reno
protocol stack that optimizes the performance of TCP congestion
control. It is based on end-to-end bandwidth estimation to set
congestion window and slow start threshold after a congestion
episode. Using this estimation, TCP Westwood+ adaptively sets a
slow start threshold and a congestion window which takes into
account the bandwidth used  at the time congestion is experienced.
TCP Westwood+ significantly increases fairness wrt TCP Reno in
wired networks and throughput over wireless links.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_HTCP</term>
<nutsynopsis>
	"H-TCP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>m if NET && INET && TCP_CONG_ADVANCED</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
H-TCP is a send-side only modifications of the TCP Reno
protocol stack that optimizes the performance of TCP
congestion control for high speed network links. It uses a
modeswitch to change the alpha and beta parameters of TCP Reno
based on network conditions and in a way so as to be fair with
other Reno and H-TCP flows.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_HSTCP</term>
<nutsynopsis>
	"High Speed TCP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Sally Floyd's High Speed TCP (RFC 3649) congestion control.
A modification to TCP's congestion control mechanism for use
with large congestion windows. A table indicates how much to
increase the congestion window by when an ACK is received.
For more detail	see http://www.icir.org/floyd/hstcp.html
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_HYBLA</term>
<nutsynopsis>
	"TCP-Hybla congestion control algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TCP-Hybla is a sender-side only change that eliminates penalization of
long-RTT, large-bandwidth connections, like when satellite legs are
involved, expecially when sharing a common bottleneck with normal
terrestrial connections.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_VEGAS</term>
<nutsynopsis>
	"TCP Vegas"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TCP Vegas is a sender-side only change to TCP that anticipates
the onset of congestion by estimating the bandwidth. TCP Vegas
adjusts the sending rate by modifying the congestion
window. TCP Vegas should provide less packet loss, but it is
not as aggressive as TCP Reno.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCP_CONG_SCALABLE</term>
<nutsynopsis>
	"Scalable TCP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Scalable TCP is a sender-side only change to TCP which uses a
MIMD congestion control algorithm which has some nice scaling
properties, though is known to have fairness issues.
See http://www-lce.eng.cam.ac.uk/~ctk21/scalable/
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>TCP_CONG_BIC</term>
	<para>
	default value
	<literal>y if NET && INET && !TCP_CONG_ADVANCED</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
BIC-TCP is a sender-side only change that ensures a linear RTT
fairness under large windows while offering both scalability and
bounded TCP-friendliness. The protocol combines two schemes
called additive increase and binary search increase. When the
congestion window is large, additive increase with a large
increment ensures linear RTT fairness as well as good
scalability. Under small congestion windows, binary search
increase provides TCP friendliness.
See http://www.csc.ncsu.edu/faculty/rhee/export/bitcp/
	</para>

</nutentrybody>
</nutentry>

menu "IP: Virtual Server Configuration"
<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>


<nutentry>
	<term>IP_VS</term>
<nutsynopsis>
	"IP virtual server support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
IP Virtual Server support will let you build a high-performance
virtual server based on cluster of two or more real servers. This
option must be enabled for at least one of the clustered computers
that will take care of intercepting incoming connections to a
single IP address and scheduling them to real servers.

Three request dispatching techniques are implemented, they are
virtual server via NAT, virtual server via tunneling and virtual
server via direct routing. The several scheduling algorithms can
be used to choose which server the connection is directed to,
thus load balancing can be achieved among the servers.  For more
information and its administration program, please visit the
following URL: <http://www.linuxvirtualserver.org/>.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_DEBUG</term>
<nutsynopsis>
	"IP virtual server debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to get additional messages useful in
debugging the IP virtual server code. You can change the debug
level in /proc/sys/net/ipv4/vs/debug_level
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_TAB_BITS</term>
<nutsynopsis>
	"IPVS connection table size (the Nth power of 2)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	default value
	<literal>12 if NET && INET && NETFILTER && IP_VS</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The IPVS connection hash table uses the chaining scheme to handle
hash collisions. Using a big IPVS connection hash table will greatly
reduce conflicts when there are hundreds of thousands of connections
in the hash table.

Note the table size must be power of 2. The table size will be the
value of 2 to the your input number power. The number to choose is
from 8 to 20, the default number is 12, which means the table size
is 4096. Don't input the number too small, otherwise you will lose
performance on it. You can adapt the table size yourself, according
to your virtual server application. It is good to set the table size
not far less than the number of connections per second multiplying
average lasting time of connection in the table.  For example, your
virtual server gets 200 connections per second, the connection lasts
for 200 seconds in average in the connection table, the table size
should be not far less than 200x200, it is good to set the table
size 32768 (2**15).

Another note that each connection occupies 128 bytes effectively and
each hash entry uses 8 bytes, so you can estimate how much memory is
needed for your box.
	</para>

</nutentrybody>
</nutentry>

comment "IPVS transport protocol load balancing support"
<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>


<nutentry>
	<term>IP_VS_PROTO_TCP</term>
<nutsynopsis>
	"TCP load balancing support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for load balancing TCP transport
protocol. Say Y if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_PROTO_UDP</term>
<nutsynopsis>
	"UDP load balancing support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for load balancing UDP transport
protocol. Say Y if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_PROTO_ESP</term>
<nutsynopsis>
	"ESP load balancing support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for load balancing ESP (Encapsultion
Security Payload) transport protocol. Say Y if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_PROTO_AH</term>
<nutsynopsis>
	"AH load balancing support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for load balancing AH (Authentication
Header) transport protocol. Say Y if unsure.
	</para>

</nutentrybody>
</nutentry>

comment "IPVS scheduler"
<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>


<nutentry>
	<term>IP_VS_RR</term>
<nutsynopsis>
	"round-robin scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The robin-robin scheduling algorithm simply directs network
connections to different real servers in a round-robin manner.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_WRR</term>
<nutsynopsis>
	"weighted round-robin scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The weighted robin-robin scheduling algorithm directs network
connections to different real servers based on server weights
in a round-robin manner. Servers with higher weights receive
new connections first than those with less weights, and servers
with higher weights get more connections than those with less
weights and servers with equal weights get equal connections.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_LC</term>
<nutsynopsis>
	"least-connection scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The least-connection scheduling algorithm directs network
connections to the server with the least number of active 
connections.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_WLC</term>
<nutsynopsis>
	"weighted least-connection scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The weighted least-connection scheduling algorithm directs network
connections to the server with the least active connections
normalized by the server weight.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_LBLC</term>
<nutsynopsis>
	"locality-based least-connection scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The locality-based least-connection scheduling algorithm is for
destination IP load balancing. It is usually used in cache cluster.
This algorithm usually directs packet destined for an IP address to
its server if the server is alive and under load. If the server is
overloaded (its active connection numbers is larger than its weight)
and there is a server in its half load, then allocate the weighted
least-connection server to this IP address.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_LBLCR</term>
<nutsynopsis>
	"locality-based least-connection with replication scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The locality-based least-connection with replication scheduling
algorithm is also for destination IP load balancing. It is 
usually used in cache cluster. It differs from the LBLC scheduling
as follows: the load balancer maintains mappings from a target
to a set of server nodes that can serve the target. Requests for
a target are assigned to the least-connection node in the target's
server set. If all the node in the server set are over loaded,
it picks up a least-connection node in the cluster and adds it
in the sever set for the target. If the server set has not been
modified for the specified time, the most loaded node is removed
from the server set, in order to avoid high degree of replication.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_DH</term>
<nutsynopsis>
	"destination hashing scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The destination hashing scheduling algorithm assigns network
connections to the servers through looking up a statically assigned
hash table by their destination IP addresses.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_SH</term>
<nutsynopsis>
	"source hashing scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The source hashing scheduling algorithm assigns network
connections to the servers through looking up a statically assigned
hash table by their source IP addresses.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_SED</term>
<nutsynopsis>
	"shortest expected delay scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The shortest expected delay scheduling algorithm assigns network
connections to the server with the shortest expected delay. The 
expected delay that the job will experience is (Ci + 1) / Ui if 
sent to the ith server, in which Ci is the number of connections
on the the ith server and Ui is the fixed service rate (weight)
of the ith server.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_VS_NQ</term>
<nutsynopsis>
	"never queue scheduling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The never queue scheduling algorithm adopts a two-speed model.
When there is an idle server available, the job will be sent to
the idle server, instead of waiting for a fast one. When there
is no idle server available, the job will be sent to the server
that minimize its expected delay (The Shortest Expected Delay
scheduling algorithm).

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "IPVS application helper"
<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS</literal>
	</para>


<nutentry>
	<term>IP_VS_FTP</term>
<nutsynopsis>
	"FTP protocol helper"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_VS && IP_VS_PROTO_TCP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
FTP is a protocol that transfers IP address and/or port number in
the payload. In the virtual server via Network Address Translation,
the IP address and port number of real servers cannot be sent to
clients in ftp connections directly, so FTP protocol helper is
required for tracking the connection and mangling it back to that of
virtual service.

If you want to compile it in kernel, say Y. To compile it as a
module, choose M here. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>IPV6</term>
<nutsynopsis>
	"The IPv6 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	default value
	<literal>m if NET && INET</literal>
	</para>


  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is complemental support for the IP version 6.
You will still be able to do traditional IPv4 networking as well.

For general information about IPv6, see
<http://playground.sun.com/pub/ipng/html/ipng-main.html>.
For Linux IPv6 development information, see <http://www.linux-ipv6.org>.
For specific information about IPv6 under Linux, read the HOWTO at
<http://www.bieringer.de/linux/IPv6/>.

To compile this protocol support as a module, choose M here: the 
module will be called ipv6.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPV6_PRIVACY</term>
<nutsynopsis>
	"IPv6: Privacy Extensions (RFC 3041) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Privacy Extensions for Stateless Address Autoconfiguration in IPv6
support.  With this option, additional periodically-alter 
pseudo-random global-scope unicast address(es) will assigned to
your interface(s).

By default, kernel do not generate temporary addresses.
To use temporary addresses, do

      echo 2 >/proc/sys/net/ipv6/conf/all/use_tempaddr 

See <file:Documentation/networking/ip-sysctl.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET6_AH</term>
<nutsynopsis>
	"IPv6: AH transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IPsec AH.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET6_ESP</term>
<nutsynopsis>
	"IPv6: ESP transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IPsec ESP.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET6_IPCOMP</term>
<nutsynopsis>
	"IPv6: IPComp transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IP Payload Compression Protocol (IPComp) (RFC3173),
typically needed for IPsec.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET6_TUNNEL</term>
<nutsynopsis>
	"IPv6: tunnel transformation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for generic IPv6-in-IPv6 tunnel transformation, which is
required by the IPv6-in-IPv6 tunneling module as well as tunnel mode
IPComp.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPV6_TUNNEL</term>
<nutsynopsis>
	"IPv6: IPv6-in-IPv6 tunnel"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for IPv6-in-IPv6 tunnels described in RFC 2473.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETFILTER</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Netfilter is a framework for filtering and mangling network packets
that pass through your Linux box.

The most common use of packet filtering is to run your Linux box as
a firewall protecting a local network from the Internet. The type of
firewall provided by this kernel support is called a "packet
filter", which means that it can reject individual network packets
based on type, source, destination etc. The other kind of firewall,
a "proxy-based" one, is more secure but more intrusive and more
bothersome to set up; it inspects the network traffic much more
closely, modifies it and has knowledge about the higher level
protocols, which a packet filter lacks. Moreover, proxy-based
firewalls often require changes to the programs running on the local
clients. Proxy-based firewalls don't need support by the kernel, but
they are often combined with a packet filter, which only works if
you say Y here.

You should also say Y here if you intend to use your Linux box as
the gateway to the Internet for a local network of machines without
globally valid IP addresses. This is called "masquerading": if one
of the computers on your local network wants to send something to
the outside, your box can "masquerade" as that computer, i.e. it
forwards the traffic to the intended outside destination, but
modifies the packets to make it look like they came from the
firewall box itself. It works both ways: if the outside host
replies, the Linux box will silently forward the traffic to the
correct local computer. This way, the computers on your local net
are completely invisible to the outside world, even though they can
reach the outside and can receive replies. It is even possible to
run globally visible servers from within a masqueraded local network
using a mechanism called portforwarding. Masquerading is also often
called NAT (Network Address Translation).

Another use of Netfilter is in transparent proxying: if a machine on
the local network tries to connect to an outside host, your Linux
box can transparently forward the traffic to a local server,
typically a caching proxy server.

Yet another use of Netfilter is building a bridging firewall. Using
a bridge with Network packet filtering enabled makes iptables "see"
the bridged traffic. For filtering on the lower network and Ethernet
protocols over the bridge, use ebtables (under bridge netfilter
configuration).

Various modules exist for netfilter which replace the previous
masquerading (ipmasqadm), packet filtering (ipchains), transparent
proxying, and portforwarding mechanisms. Please see
<file:Documentation/Changes> under "iptables" for the location of
these packages.

Make sure to say N to "Fast switching" below if you intend to say Y
here, as Fast switching currently bypasses netfilter.

Chances are that you should say Y here if you compile a kernel which
will run as a router and N for regular hosts. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETFILTER_DEBUG</term>
<nutsynopsis>
	"Network packet filtering debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
You can say Y here if you want to get additional messages useful in
debugging the netfilter code.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_NETFILTER</term>
<nutsynopsis>
	"Bridged IP/ARP packets filtering"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && INET</literal>
	</para>

	<para>
	default value
	<literal>y if NET && BRIDGE && NETFILTER && INET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will let arptables resp. iptables see bridged
ARP resp. IP traffic. If you want a bridging firewall, you probably
want this option enabled.
Enabling or disabling this option doesn't enable or disable
ebtables.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETFILTER_NETLINK</term>
<nutsynopsis>
	"Netfilter netlink interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If this option is enabled, the kernel will include support
for the new netfilter netlink interface.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETFILTER_NETLINK_QUEUE</term>
<nutsynopsis>
	"Netfilter NFQUEUE over NFNETLINK interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NETFILTER && NETFILTER_NETLINK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If this option isenabled, the kernel will include support
for queueing packets via NFNETLINK.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETFILTER_NETLINK_LOG</term>
<nutsynopsis>
	"Netfilter LOG over NFNETLINK interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NETFILTER && NETFILTER_NETLINK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If this option is enabled, the kernel will include support
for logging packets via NFNETLINK.

This obsoletes the existing ipt_ULOG and ebg_ulog mechanisms,
and is also scheduled to replace the old syslog-based ipt_LOG
and ip6t_LOG modules.
	</para>

</nutentrybody>
</nutentry>

menu "IP: Netfilter Configuration"
<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>


<nutentry>
	<term>IP_NF_CONNTRACK</term>
<nutsynopsis>
	"Connection tracking (required for masq/NAT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Connection tracking keeps a record of what packets have passed
through your machine, in order to figure out how they are related
into connections.

This is required to do Masquerading or other kinds of Network
Address Translation (except for Fast NAT).  It can also be used to
enhance packet filtering (see `Connection state match support'
below).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_CT_ACCT</term>
<nutsynopsis>
	"Connection tracking flow accounting"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If this option is enabled, the connection tracking code will
keep per-flow packet and byte counters.

Those counters can be used for flow-based accounting or the
`connbytes' match.

If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_CONNTRACK_MARK</term>
<nutsynopsis>
	"Connection mark tracking support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for connection marks, used by the
`CONNMARK' target and `connmark' match. Similar to the mark value
of packets, but this mark value is kept in the conntrack session
instead of the individual packets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_CONNTRACK_EVENTS</term>
<nutsynopsis>
	"Connection tracking events"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If this option is enabled, the connection tracking code will
provide a notifier chain that can be used by other kernel code
to get notified about changes in the connection tracking state.

IF unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_CONNTRACK_NETLINK</term>
<nutsynopsis>
	"Connection tracking netlink interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK && NETFILTER_NETLINK && (IP_NF_CONNTRACK!=y || NETFILTER_NETLINK!=m)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for a netlink-based userspace interface
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_CT_PROTO_SCTP</term>
<nutsynopsis>
	"SCTP protocol connection tracking support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
With this option enabled, the connection tracking code will
be able to do state tracking on SCTP connections.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_FTP</term>
<nutsynopsis>
	"FTP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Tracking FTP connections is problematic: special helpers are
required for tracking them, and doing masquerading and other forms
of Network Address Translation on them.

To compile it as a module, choose M here.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_IRC</term>
<nutsynopsis>
	"IRC protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
There is a commonly-used extension to IRC called
Direct Client-to-Client Protocol (DCC).  This enables users to send
files to each other, and also chat to each other without the need
of a server.  DCC Sending is used anywhere you send files over IRC,
and DCC Chat is most commonly used by Eggdrop bots.  If you are
using NAT, this extension will enable you to send files and initiate
chats.  Note that you do NOT need this extension to get files or
have others initiate chats, or everything else in IRC.

To compile it as a module, choose M here.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NETBIOS_NS</term>
<nutsynopsis>
	"NetBIOS name service protocol support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
NetBIOS name service requests are sent as broadcast messages from an
unprivileged port and responded to with unicast messages to the
same port. This make them hard to firewall properly because connection
tracking doesn't deal with broadcasts. This helper tracks locally
originating NetBIOS name service requests and the corresponding
responses. It relies on correct IP address configuration, specifically
netmask and broadcast address. When properly configured, the output
of "ip address show" should look similar to this:

$ ip -4 address show eth0
4: eth0: <BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast qlen 1000
    inet 172.16.2.252/24 brd 172.16.2.255 scope global eth0

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TFTP</term>
<nutsynopsis>
	"TFTP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TFTP connection tracking helper, this is required depending
on how restrictive your ruleset is.
If you are using a tftp client behind -j SNAT or -j MASQUERADING
you will need this.

To compile it as a module, choose M here.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_AMANDA</term>
<nutsynopsis>
	"Amanda backup protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you are running the Amanda backup package <http://www.amanda.org/>
on this machine or machines that will be MASQUERADED through this
machine, then you may want to enable this feature.  This allows the
connection tracking and natting code to allow the sub-channels that
Amanda requires for communication of the backup data, messages and
index.

To compile it as a module, choose M here.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_PPTP</term>
<nutsynopsis>
	"PPTP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module adds support for PPTP (Point to Point Tunnelling
Protocol, RFC2637) connection tracking and NAT. 

If you are running PPTP sessions over a stateful firewall or NAT
box, you may want to enable this feature.  

Please note that not all PPTP modes of operation are supported yet.
For more info, read top of the file
net/ipv4/netfilter/ip_conntrack_pptp.c

If you want to compile it as a module, say M here and read
Documentation/modules.txt.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_QUEUE</term>
<nutsynopsis>
	"IP Userspace queueing via NETLINK (OBSOLETE)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Netfilter has the ability to queue packets to user space: the
netlink device can be used to access them using this driver.

This option enables the old IPv4-only "ip_queue" implementation
which has been obsoleted by the new "nfnetlink_queue" code (see
CONFIG_NETFILTER_NETLINK_QUEUE).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_IPTABLES</term>
<nutsynopsis>
	"IP tables support (required for filtering/masq/NAT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
iptables is a general, extensible packet identification framework.
The packet filtering and full NAT (masquerading, port forwarding,
etc) subsystems now use this: say `Y' or `M' here if you want to use
either of those.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_LIMIT</term>
<nutsynopsis>
	"limit match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
limit matching allows you to control the rate at which a rule can be
matched: mainly useful in combination with the LOG target ("LOG
target support", below) and to avoid some Denial of Service attacks.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_IPRANGE</term>
<nutsynopsis>
	"IP range match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option makes possible to match IP addresses against IP address
ranges.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_MAC</term>
<nutsynopsis>
	"MAC address match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
MAC matching allows you to match packets based on the source
Ethernet address of the packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_PKTTYPE</term>
<nutsynopsis>
	"Packet type match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Packet type matching allows you to match a packet by
its "class", eg. BROADCAST, MULTICAST, ...

 Typical usage:
 iptables -A INPUT -m pkttype --pkt-type broadcast -j LOG

 To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_MARK</term>
<nutsynopsis>
	"netfilter MARK match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Netfilter mark matching allows you to match packets based on the
`nfmark' value in the packet.  This can be set by the MARK target
(see below).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_MULTIPORT</term>
<nutsynopsis>
	"Multiple port match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multiport matching allows you to match TCP or UDP packets based on
a series of source or destination ports: normally a rule can only
match a single range of ports.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_TOS</term>
<nutsynopsis>
	"TOS match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TOS matching allows you to match packets based on the Type Of
Service fields of the IP packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_RECENT</term>
<nutsynopsis>
	"recent match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This match is used for creating one or many lists of recently
used addresses and then matching against that/those list(s).

Short options are available by using 'iptables -m recent -h'
Official Website: <http://snowman.net/projects/ipt_recent/>

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_ECN</term>
<nutsynopsis>
	"ECN match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `ECN' match, which allows you to match against
the IPv4 and TCP header ECN fields.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_DSCP</term>
<nutsynopsis>
	"DSCP match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `DSCP' match, which allows you to match against
the IPv4 header DSCP field (DSCP codepoint).

The DSCP codepoint can have any value between 0x0 and 0x4f.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_AH_ESP</term>
<nutsynopsis>
	"AH/ESP match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These two match extensions (`ah' and `esp') allow you to match a
range of SPIs inside AH or ESP headers of IPSec packets.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_LENGTH</term>
<nutsynopsis>
	"LENGTH match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option allows you to match the length of a packet against a
specific value or range of values.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_TTL</term>
<nutsynopsis>
	"TTL match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds CONFIG_IP_NF_MATCH_TTL option, which enabled the user
to match packets by their TTL value.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_TCPMSS</term>
<nutsynopsis>
	"tcpmss match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `tcpmss' match, which allows you to examine the
MSS value of TCP SYN packets, which control the maximum packet size
for that connection.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_HELPER</term>
<nutsynopsis>
	"Helper match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Helper matching allows you to match packets in dynamic connections
tracked by a conntrack-helper, ie. ip_conntrack_ftp

To compile it as a module, choose M here.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_STATE</term>
<nutsynopsis>
	"Connection state match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Connection state matching allows you to match packets based on their
relationship to a tracked connection (ie. previous packets).  This
is a powerful tool for packet classification.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_CONNTRACK</term>
<nutsynopsis>
	"Connection tracking match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a general conntrack match module, a superset of the state match.

It allows matching on additional conntrack information, which is
useful in complex configurations, such as NAT gateways with multiple
internet links or tunnels.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_OWNER</term>
<nutsynopsis>
	"Owner match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Packet owner matching allows you to match locally-generated packets
based on who created them: the user, group, process or session.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_PHYSDEV</term>
<nutsynopsis>
	"Physdev match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES && BRIDGE_NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Physdev packet matching matches against the physical bridge ports
the IP packet arrived on or will leave by.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_ADDRTYPE</term>
<nutsynopsis>
	"address type match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option allows you to match what routing thinks of an address,
eg. UNICAST, LOCAL, BROADCAST, ...

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_REALM</term>
<nutsynopsis>
	"realm match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `realm' match, which allows you to use the realm
key from the routing subsystem inside iptables.

This match pretty much resembles the CONFIG_NET_CLS_ROUTE4 option 
in tc world.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_SCTP</term>
<nutsynopsis>
	"SCTP protocol match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
With this option enabled, you will be able to use the iptables
`sctp' match in order to match on SCTP source/destination ports
and SCTP chunk types.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_DCCP</term>
<nutsynopsis>
	"DCCP protocol match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
With this option enabled, you will be able to use the iptables
`dccp' match in order to match on DCCP source/destination ports
and DCCP flags.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_COMMENT</term>
<nutsynopsis>
	"comment match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `comment' dummy-match, which allows you to put
comments in your iptables ruleset.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_CONNMARK</term>
<nutsynopsis>
	"Connection mark match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK_MARK && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `connmark' match, which allows you to match the
connection mark value previously set for the session by `CONNMARK'. 

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  The module will be called
ipt_connmark.o.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_CONNBYTES</term>
<nutsynopsis>
	"Connection byte/packet counter match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CT_ACCT && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `connbytes' match, which allows you to match the
number of bytes and/or packets for each direction within a connection.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_HASHLIMIT</term>
<nutsynopsis>
	"hashlimit match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a new iptables `hashlimit' match.  

As opposed to `limit', this match dynamically crates a hash table
of limit buckets, based on your selection of source/destination
ip addresses and/or ports.

It enables you to express policies like `10kpps for any given
destination IP' or `500pps from any given source IP'  with a single
IPtables rule.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MATCH_STRING</term>
<nutsynopsis>
	"string match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `string' match, which allows you to look for
pattern matchings in packets.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_FILTER</term>
<nutsynopsis>
	"Packet filtering"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Packet filtering defines a table `filter', which has a series of
rules for simple packet filtering at local input, forwarding and
local output.  See the man page for iptables(8).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_REJECT</term>
<nutsynopsis>
	"REJECT target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_FILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The REJECT target allows a filtering rule to specify that an ICMP
error should be issued in response to an incoming packet, rather
than silently being dropped.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_LOG</term>
<nutsynopsis>
	"LOG target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `LOG' target, which allows you to create rules in
any iptables table which records the packet header to the syslog.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_ULOG</term>
<nutsynopsis>
	"ULOG target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `ULOG' target, which allows you to create rules in
any iptables table. The packet is passed to a userspace logging
daemon using netlink multicast sockets; unlike the LOG target
which can only be viewed through syslog.

The apropriate userspace logging daemon (ulogd) may be obtained from
<http://www.gnumonks.org/projects/ulogd/>

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_TCPMSS</term>
<nutsynopsis>
	"TCPMSS target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `TCPMSS' target, which allows you to alter the
MSS value of TCP SYN packets, to control the maximum size for that
connection (usually limiting it to your outgoing interface's MTU
minus 40).

This is used to overcome criminally braindead ISPs or servers which
block ICMP Fragmentation Needed packets.  The symptoms of this
problem are that everything works fine from your Linux
firewall/router, but machines behind it can never exchange large
packets:
      1) Web browsers connect, then hang with no data received.
      2) Small mail works fine, but large emails hang.
      3) ssh works fine, but scp hangs after initial handshaking.

Workaround: activate this option and add a rule to your firewall
configuration like:

iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN \
               -j TCPMSS --clamp-mss-to-pmtu

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_NFQUEUE</term>
<nutsynopsis>
	"NFQUEUE Target Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This Target replaced the old obsolete QUEUE target.

As opposed to QUEUE, it supports 65535 different queues,
not just one.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT</term>
<nutsynopsis>
	"Full NAT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Full NAT option allows masquerading, port forwarding and other
forms of full Network Address Port Translation.  It is controlled by
the `nat' table in iptables: see the man page for iptables(8).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_NEEDED</term>
	<para>
	default value
	<literal>y if NET && INET && NETFILTER && IP_NF_NAT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_MASQUERADE</term>
<nutsynopsis>
	"MASQUERADE target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_NAT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Masquerading is a special case of NAT: all outgoing connections are
changed to seem to come from a particular interface's address, and
if the interface goes down, those connections are lost.  This is
only useful for dialup accounts with dynamic IP address (ie. your IP
address will be different on next dialup).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_REDIRECT</term>
<nutsynopsis>
	"REDIRECT target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_NAT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
REDIRECT is a special case of NAT: all incoming connections are
mapped onto the incoming interface's address, causing the packets to
come to the local machine instead of passing through.  This is
useful for transparent proxies.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_NETMAP</term>
<nutsynopsis>
	"NETMAP target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_NAT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
NETMAP is an implementation of static 1:1 NAT mapping of network
addresses. It maps the network address part, while keeping the host
address part intact. It is similar to Fast NAT, except that
Netfilter's connection tracking doesn't work well with Fast NAT.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_SAME</term>
<nutsynopsis>
	"SAME target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_NAT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `SAME' target, which works like the standard SNAT
target, but attempts to give clients the same IP for all connections.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_SNMP_BASIC</term>
<nutsynopsis>
	"Basic SNMP-ALG support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_NAT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>

This module implements an Application Layer Gateway (ALG) for
SNMP payloads.  In conjunction with NAT, it allows a network
management system to access multiple private networks with
conflicting addresses.  It works by modifying IP addresses
inside SNMP payloads to match IP-layer NAT mapping.

This is the "basic" form of SNMP-ALG, as described in RFC 2962

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_IRC</term>
	<para>
	default value
	<literal>IP_NF_NAT if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_IRC=y</literal>
	</para>


	<para>
	default value
	<literal>m if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_IRC=m</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_FTP</term>
	<para>
	default value
	<literal>IP_NF_NAT if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_FTP=y</literal>
	</para>


	<para>
	default value
	<literal>m if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_FTP=m</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_TFTP</term>
	<para>
	default value
	<literal>IP_NF_NAT if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_TFTP=y</literal>
	</para>


	<para>
	default value
	<literal>m if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_TFTP=m</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_AMANDA</term>
	<para>
	default value
	<literal>IP_NF_NAT if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_AMANDA=y</literal>
	</para>


	<para>
	default value
	<literal>m if NET && INET && NETFILTER && IP_NF_IPTABLES!=n && IP_NF_CONNTRACK!=n && IP_NF_NAT!=n && IP_NF_AMANDA=m</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_NAT_PPTP</term>
	<para>
	default value
	<literal>IP_NF_NAT if NET && INET && NETFILTER && IP_NF_NAT!=n && IP_NF_PPTP=y</literal>
	</para>


	<para>
	default value
	<literal>m if NET && INET && NETFILTER && IP_NF_NAT!=n && IP_NF_PPTP=m</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_MANGLE</term>
<nutsynopsis>
	"Packet mangling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `mangle' table to iptables: see the man page for
iptables(8).  This table is used for various packet alterations
which can effect how the packet is routed.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_TOS</term>
<nutsynopsis>
	"TOS target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `TOS' target, which allows you to create rules in
the `mangle' table which alter the Type Of Service field of an IP
packet prior to routing.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_ECN</term>
<nutsynopsis>
	"ECN target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `ECN' target, which can be used in the iptables mangle
table.  

You can use this target to remove the ECN bits from the IPv4 header of
an IP packet.  This is particularly useful, if you need to work around
existing ECN blackholes on the internet, but don't want to disable
ECN support in general.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_DSCP</term>
<nutsynopsis>
	"DSCP target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `DSCP' match, which allows you to match against
the IPv4 header DSCP field (DSCP codepoint).

The DSCP codepoint can have any value between 0x0 and 0x4f.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_MARK</term>
<nutsynopsis>
	"MARK target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `MARK' target, which allows you to create rules
in the `mangle' table which alter the netfilter mark (nfmark) field
associated with the packet prior to routing. This can change
the routing method (see `Use netfilter MARK value as routing
key') and can also be used by other subsystems to change their
behavior.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_CLASSIFY</term>
<nutsynopsis>
	"CLASSIFY target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `CLASSIFY' target, which enables the user to set
the priority of a packet. Some qdiscs can use this value for
classification, among these are:

atm, cbq, dsmark, pfifo_fast, htb, prio

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_TTL</term>
<nutsynopsis>
	"TTL target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `TTL' target, which enables the user to modify
the TTL value of the IP header.

While it is safe to decrement/lower the TTL, this target also enables
functionality to increment and set the TTL value of the IP header to
arbitrary values.  This is EXTREMELY DANGEROUS since you can easily
create immortal packets that loop forever on the network.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_CONNMARK</term>
<nutsynopsis>
	"CONNMARK target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK_MARK && IP_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `CONNMARK' target, which allows one to manipulate
the connection mark value.  Similar to the MARK target, but
affects the connection mark value rather than the packet mark value.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  The module will be called
ipt_CONNMARK.o.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_CLUSTERIP</term>
<nutsynopsis>
	"CLUSTERIP target support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_CONNTRACK_MARK && IP_NF_IPTABLES && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The CLUSTERIP target allows you to build load-balancing clusters of
network servers without having a dedicated load-balancing
router/server/switch.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_RAW</term>
<nutsynopsis>
	"raw table support (required for NOTRACK/TRACE)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `raw' table to iptables. This table is the very
first in the netfilter framework and hooks in at the PREROUTING
and OUTPUT chains.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_TARGET_NOTRACK</term>
<nutsynopsis>
	"NOTRACK target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_RAW && IP_NF_CONNTRACK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The NOTRACK target allows a select rule to specify
which packets *not* to enter the conntrack/NAT
subsystem with all the consequences (no ICMP error tracking,
no protocol helpers for the selected packets).

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_ARPTABLES</term>
<nutsynopsis>
	"ARP tables support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
arptables is a general, extensible packet identification framework.
The ARP packet filtering and mangling (manipulation)subsystems
use this: say Y or M here if you want to use either of those.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_ARPFILTER</term>
<nutsynopsis>
	"ARP packet filtering"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_ARPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ARP packet filtering defines a table `filter', which has a series of
rules for simple ARP packet filtering at local input and
local output.  On a bridge, you can also specify filtering rules
for forwarded ARP packets. See the man page for arptables(8).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_NF_ARP_MANGLE</term>
<nutsynopsis>
	"ARP payload mangling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && NETFILTER && IP_NF_ARPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Allows altering the ARP packet payload: source and destination
hardware and network addresses.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "IPv6: Netfilter Configuration (EXPERIMENTAL)"
<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>IP6_NF_QUEUE</term>
<nutsynopsis>
	"IP6 Userspace queueing via NETLINK (OBSOLETE)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>

This option adds a queue handler to the kernel for IPv6
packets which enables users to receive the filtered packets
with QUEUE target using libipq.

THis option enables the old IPv6-only "ip6_queue" implementation
which has been obsoleted by the new "nfnetlink_queue" code (see
CONFIG_NETFILTER_NETLINK_QUEUE).

(C) Fernando Anton 2001
IPv64 Project - Work based in IPv64 draft by Arturo Azcorra.
Universidad Carlos III de Madrid
Universidad Politecnica de Alcala de Henares
email: <fanton@it.uc3m.es>.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_IPTABLES</term>
<nutsynopsis>
	"IP6 tables support (required for filtering/masq/NAT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ip6tables is a general, extensible packet identification framework.
Currently only the packet filtering and packet mangling subsystem
for IPv6 use this, but connection tracking is going to follow.
Say 'Y' or 'M' here if you want to use either of those.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_LIMIT</term>
<nutsynopsis>
	"limit match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
limit matching allows you to control the rate at which a rule can be
matched: mainly useful in combination with the LOG target ("LOG
target support", below) and to avoid some Denial of Service attacks.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_MAC</term>
<nutsynopsis>
	"MAC address match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
mac matching allows you to match packets based on the source
Ethernet address of the packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_RT</term>
<nutsynopsis>
	"Routing header match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
rt matching allows you to match packets based on the routing
header of the packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_OPTS</term>
<nutsynopsis>
	"Hop-by-hop and Dst opts header match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows one to match packets based on the hop-by-hop
and destination options headers of a packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_FRAG</term>
<nutsynopsis>
	"Fragmentation header match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
frag matching allows you to match packets based on the fragmentation
header of the packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_HL</term>
<nutsynopsis>
	"HL match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
HL matching allows you to match packets based on the hop
limit of the packet.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_MULTIPORT</term>
<nutsynopsis>
	"Multiple port match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multiport matching allows you to match TCP or UDP packets based on
a series of source or destination ports: normally a rule can only
match a single range of ports.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_OWNER</term>
<nutsynopsis>
	"Owner match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Packet owner matching allows you to match locally-generated packets
based on who created them: the user, group, process or session.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_MARK</term>
<nutsynopsis>
	"netfilter MARK match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Netfilter mark matching allows you to match packets based on the
`nfmark' value in the packet.  This can be set by the MARK target
(see below).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_IPV6HEADER</term>
<nutsynopsis>
	"IPv6 Extension Headers Match"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module allows one to match packets based upon
the ipv6 extension headers.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_AHESP</term>
<nutsynopsis>
	"AH/ESP match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module allows one to match AH and ESP packets.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_LENGTH</term>
<nutsynopsis>
	"Packet Length match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option allows you to match the length of a packet against a
specific value or range of values.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_EUI64</term>
<nutsynopsis>
	"EUI64 address check"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module performs checking on the IPv6 source address
Compares the last 64 bits with the EUI64 (delivered
from the MAC address) address

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MATCH_PHYSDEV</term>
<nutsynopsis>
	"Physdev match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES && BRIDGE_NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Physdev packet matching matches against the physical bridge ports
the IP packet arrived on or will leave by.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_FILTER</term>
<nutsynopsis>
	"Packet filtering"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Packet filtering defines a table `filter', which has a series of
rules for simple packet filtering at local input, forwarding and
local output.  See the man page for iptables(8).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_TARGET_LOG</term>
<nutsynopsis>
	"LOG target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `LOG' target, which allows you to create rules in
any iptables table which records the packet header to the syslog.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_TARGET_REJECT</term>
<nutsynopsis>
	"REJECT target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The REJECT target allows a filtering rule to specify that an ICMPv6
error should be issued in response to an incoming packet, rather
than silently being dropped.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_TARGET_NFQUEUE</term>
<nutsynopsis>
	"NFQUEUE Target Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This Target replaced the old obsolete QUEUE target.

As opposed to QUEUE, it supports 65535 different queues,
not just one.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_MANGLE</term>
<nutsynopsis>
	"Packet mangling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `mangle' table to iptables: see the man page for
iptables(8).  This table is used for various packet alterations
which can effect how the packet is routed.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_TARGET_MARK</term>
<nutsynopsis>
	"MARK target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `MARK' target, which allows you to create rules
in the `mangle' table which alter the netfilter mark (nfmark) field
associated with the packet packet prior to routing. This can change
the routing method (see `Use netfilter MARK value as routing
key') and can also be used by other subsystems to change their
behavior.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_TARGET_HL</term>
<nutsynopsis>
	"HL (hoplimit) target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_MANGLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `HL' target, which enables the user to decrement
the hoplimit value of the IPv6 header or set it to a given (lower)
value.

While it is safe to decrement the hoplimit value, this option also
enables functionality to increment and set the hoplimit value of the
IPv6 header to arbitrary values.  This is EXTREMELY DANGEROUS since
you can easily create immortal packets that loop forever on the
network.  

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP6_NF_RAW</term>
<nutsynopsis>
	"raw table support (required for TRACE)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds a `raw' table to ip6tables. This table is the very
first in the netfilter framework and hooks in at the PREROUTING
and OUTPUT chains.

If you want to compile it as a module, say M here and read
<file:Documentation/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "DECnet: Netfilter Configuration"
<para>
	depends on
	<literal>NET && DECNET && NETFILTER && EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>DECNET_NF_GRABULATOR</term>
<nutsynopsis>
	"Routing message grabulator (for userland routing daemon)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DECNET && NETFILTER && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable this module if you want to use the userland DECnet routing
daemon. You will also need to enable routing support for DECnet
unless you just want to monitor routing messages from other nodes.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Bridge: Netfilter Configuration"
<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER</literal>
	</para>


<nutentry>
	<term>BRIDGE_NF_EBTABLES</term>
<nutsynopsis>
	"Ethernet Bridge tables (ebtables) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ebtables is a general, extensible frame/packet identification
framework. Say 'Y' or 'M' here if you want to do Ethernet
filtering/NAT/brouting on the Ethernet bridge.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_BROUTE</term>
<nutsynopsis>
	"ebt: broute table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The ebtables broute table is used to define rules that decide between
bridging and routing frames, giving Linux the functionality of a
brouter. See the man page for ebtables(8) and examples on the ebtables
website.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_T_FILTER</term>
<nutsynopsis>
	"ebt: filter table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The ebtables filter table is used to define frame filtering rules at
local input, forwarding and local output. See the man page for
ebtables(8).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_T_NAT</term>
<nutsynopsis>
	"ebt: nat table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The ebtables nat table is used to define rules that alter the MAC
source address (MAC SNAT) or the MAC destination address (MAC DNAT).
See the man page for ebtables(8).

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_802_3</term>
<nutsynopsis>
	"ebt: 802.3 filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds matching support for 802.3 Ethernet frames.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_AMONG</term>
<nutsynopsis>
	"ebt: among filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the among match, which allows matching the MAC source
and/or destination address on a list of addresses. Optionally,
MAC/IP address pairs can be matched, f.e. for anti-spoofing rules.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_ARP</term>
<nutsynopsis>
	"ebt: ARP filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the ARP match, which allows ARP and RARP header field
filtering.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_IP</term>
<nutsynopsis>
	"ebt: IP filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the IP match, which allows basic IP header field
filtering.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_LIMIT</term>
<nutsynopsis>
	"ebt: limit match support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the limit match, which allows you to control
the rate at which a rule can be matched. This match is the
equivalent of the iptables limit match.

If you want to compile it as a module, say M here and read
<file:Documentation/kbuild/modules.txt>.  If unsure, say `N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_MARK</term>
<nutsynopsis>
	"ebt: mark filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the mark match, which allows matching frames based on
the 'nfmark' value in the frame. This can be set by the mark target.
This value is the same as the one used in the iptables mark match and
target.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_PKTTYPE</term>
<nutsynopsis>
	"ebt: packet type filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the packet type match, which allows matching on the
type of packet based on its Ethernet "class" (as determined by
the generic networking code): broadcast, multicast,
for this host alone or for another host.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_STP</term>
<nutsynopsis>
	"ebt: STP filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the Spanning Tree Protocol match, which
allows STP header field filtering.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_VLAN</term>
<nutsynopsis>
	"ebt: 802.1Q VLAN filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the 802.1Q vlan match, which allows the filtering of
802.1Q vlan fields.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_ARPREPLY</term>
<nutsynopsis>
	"ebt: arp reply target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the arp reply target, which allows
automatically sending arp replies to arp requests.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_DNAT</term>
<nutsynopsis>
	"ebt: dnat target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the MAC DNAT target, which allows altering the MAC
destination address of frames.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_MARK_T</term>
<nutsynopsis>
	"ebt: mark target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the mark target, which allows marking frames by
setting the 'nfmark' value in the frame.
This value is the same as the one used in the iptables mark match and
target.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_REDIRECT</term>
<nutsynopsis>
	"ebt: redirect target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the MAC redirect target, which allows altering the MAC
destination address of a frame to that of the device it arrived on.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_SNAT</term>
<nutsynopsis>
	"ebt: snat target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the MAC SNAT target, which allows altering the MAC
source address of frames.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_LOG</term>
<nutsynopsis>
	"ebt: log support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the log watcher, that you can use in any rule
in any ebtables table. It records info about the frame header
to the syslog.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE_EBT_ULOG</term>
<nutsynopsis>
	"ebt: ulog support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds the ulog watcher, that you can use in any rule
in any ebtables table. The packet is passed to a userspace
logging daemon using netlink multicast sockets. This differs
from the log watcher in the sense that the complete packet is
sent to userspace instead of a descriptive text and that
netlink multicast sockets are used instead of the syslog.

To compile it as a module, choose M here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "DCCP Configuration (EXPERIMENTAL)"
<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>IP_DCCP</term>
<nutsynopsis>
	"The DCCP Protocol (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Datagram Congestion Control Protocol

From draft-ietf-dccp-spec-11 <http://www.icir.org/kohler/dcp/draft-ietf-dccp-spec-11.txt>.

The Datagram Congestion Control Protocol (DCCP) is a transport
protocol that implements bidirectional, unicast connections of
congestion-controlled, unreliable datagrams. It should be suitable
for use by applications such as streaming media, Internet telephony,
and on-line games

To compile this protocol support as a module, choose M here: the
module will be called dccp.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INET_DCCP_DIAG</term>
	<para>
	default value
	<literal>y if NET && INET && EXPERIMENTAL && IP_DCCP=y && INET_DIAG=y</literal>
	</para>


	<para>
	default value
	<literal>m if NET && INET && EXPERIMENTAL && IP_DCCP && INET_DIAG</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

menu "DCCP CCIDs Configuration (EXPERIMENTAL)"
<para>
	depends on
	<literal>NET && INET && IP_DCCP && EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>IP_DCCP_CCID3</term>
<nutsynopsis>
	"CCID3 (TFRC) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_DCCP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
CCID 3 denotes TCP-Friendly Rate Control (TFRC), an equation-based
rate-controlled congestion control mechanism.  TFRC is designed to
be reasonably fair when competing for bandwidth with TCP-like flows,
where a flow is "reasonably fair" if its sending rate is generally
within a factor of two of the sending rate of a TCP flow under the
same conditions.  However, TFRC has a much lower variation of
throughput over time compared with TCP, which makes CCID 3 more
suitable than CCID 2 for applications such streaming media where a
relatively smooth sending rate is of importance.

CCID 3 is further described in [CCID 3 PROFILE]. The TFRC
congestion control algorithms were initially described in RFC 3448.

This text was extracted from draft-ietf-dccp-spec-11.txt.

If in doubt, say M.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_DCCP_TFRC_LIB</term>
	<para>
	default value
	<literal>IP_DCCP_CCID3 if NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "DCCP Kernel Hacking"
<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL</literal>
	</para>


<nutentry>
	<term>IP_DCCP_DEBUG</term>
<nutsynopsis>
	"DCCP debug messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Only use this if you're hacking DCCP.

Just say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IP_DCCP_UNLOAD_HACK</term>
<nutsynopsis>
	"DCCP control sock unload hack"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL && IP_DCCP=m && IP_DCCP_CCID3=m</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable this to be able to unload the dccp module when the it
has only one refcount held, the control sock one. Just execute
"rmmod dccp_ccid3 dccp"

Just say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "SCTP Configuration (EXPERIMENTAL)"
<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>IP_SCTP</term>
<nutsynopsis>
	"The SCTP Protocol (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && (IPV6 || IPV6=n)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Stream Control Transmission Protocol

From RFC 2960 <http://www.ietf.org/rfc/rfc2960.txt>.

"SCTP is a reliable transport protocol operating on top of a
connectionless packet network such as IP.  It offers the following
services to its users:

-- acknowledged error-free non-duplicated transfer of user data,
-- data fragmentation to conform to discovered path MTU size,
-- sequenced delivery of user messages within multiple streams,
with an option for order-of-arrival delivery of individual user
messages,
-- optional bundling of multiple user messages into a single SCTP
packet, and
-- network-level fault tolerance through supporting of multi-
homing at either or both ends of an association."

To compile this protocol support as a module, choose M here: the
module will be called sctp.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCTP_DBG_MSG</term>
<nutsynopsis>
	"SCTP: Debug messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_SCTP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y, this will enable verbose debugging messages. 

If unsure, say N.  However, if you are running into problems, use 
this option to gather detailed trace information
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCTP_DBG_OBJCNT</term>
<nutsynopsis>
	"SCTP: Debug object counts"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_SCTP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y, this will enable debugging support for counting the 
type of objects that are currently allocated.  This is useful for 
identifying memory leaks.   If the /proc filesystem is enabled this 
debug information can be viewed by 
'cat /proc/net/sctp/sctp_dbg_objcnt'

If unsure, say N
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"SCTP: Cookie HMAC Algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL && IP_SCTP</literal>
	</para>

	<para>
	default value
	<literal>SCTP_HMAC_MD5 if NET && INET && EXPERIMENTAL && IP_SCTP</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
HMAC algorithm to be used during association initialization.  It
is strongly recommended to use HMAC-SHA1 or HMAC-MD5.  See 
configuration for Cryptographic API and enable those algorithms
to make usable by SCTP. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCTP_HMAC_NONE</term>
<nutsynopsis>
	"None"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choosing this disables the use of an HMAC during association 
establishment.  It is advised to use either HMAC-MD5 or HMAC-SHA1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCTP_HMAC_SHA1</term>
<nutsynopsis>
	"HMAC-SHA1"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the use of HMAC-SHA1 during association establishment.  It 
is advised to use either HMAC-MD5 or HMAC-SHA1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCTP_HMAC_MD5</term>
<nutsynopsis>
	"HMAC-MD5"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the use of HMAC-MD5 during association establishment.  It is 
advised to use either HMAC-MD5 or HMAC-SHA1.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>ATM</term>
<nutsynopsis>
	"Asynchronous Transfer Mode (ATM) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ATM is a high-speed networking technology for Local Area Networks
and Wide Area Networks.  It uses a fixed packet size and is
connection oriented, allowing for the negotiation of minimum
bandwidth requirements.

In order to participate in an ATM network, your Linux box needs an
ATM networking card. If you have that, say Y here and to the driver
of your ATM card below.

Note that you need a set of user-space programs to actually make use
of ATM.  See the file <file:Documentation/networking/atm.txt> for
further details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_CLIP</term>
<nutsynopsis>
	"Classical IP over ATM (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATM && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Classical IP over ATM for PVCs and SVCs, supporting InARP and
ATMARP. If you want to communication with other IP hosts on your ATM
network, you will typically either say Y here or to "LAN Emulation
(LANE)" below.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_CLIP_NO_ICMP</term>
<nutsynopsis>
	"Do NOT send ICMP if no neighbour (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATM_CLIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally, an "ICMP host unreachable" message is sent if a neighbour
cannot be reached because there is no VC to it in the kernel's
ATMARP table. This may cause problems when ATMARP table entries are
briefly removed during revalidation. If you say Y here, packets to
such neighbours are silently discarded instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_LANE</term>
<nutsynopsis>
	"LAN Emulation (LANE) support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
LAN Emulation emulates services of existing LANs across an ATM
network. Besides operating as a normal ATM end station client, Linux
LANE client can also act as an proxy client bridging packets between
ELAN and Ethernet segments. You need LANE if you want to try MPOA.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_MPOA</term>
<nutsynopsis>
	"Multi-Protocol Over ATM (MPOA) support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATM && INET && ATM_LANE!=n</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multi-Protocol Over ATM allows ATM edge devices such as routers,
bridges and ATM attached hosts establish direct ATM VCs across
subnetwork boundaries. These shortcut connections bypass routers
enhancing overall network performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_BR2684</term>
<nutsynopsis>
	"RFC1483/2684 Bridged protocols"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATM && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ATM PVCs can carry ethernet PDUs according to RFC2684 (formerly 1483)
This device will act like an ethernet from the kernels point of view,
with the traffic being carried by ATM PVCs (currently 1 PVC/device).
This is sometimes used over DSL lines.  If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_BR2684_IPFILTER</term>
<nutsynopsis>
	"Per-VC IP filter kludge"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATM_BR2684</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is an experimental mechanism for users who need to terminate a
large number of IP-only vcc's.  Do not enable this unless you are sure
you know what you are doing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BRIDGE</term>
<nutsynopsis>
	"802.1d Ethernet Bridging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, then your Linux box will be able to act as an
Ethernet bridge, which means that the different Ethernet segments it
is connected to will appear as one Ethernet to the participants.
Several such bridges can work together to create even larger
networks of Ethernets using the IEEE 802.1 spanning tree algorithm.
As this is a standard, Linux bridges will cooperate properly with
other third party bridge products.

In order to use the Ethernet bridge, you'll need the bridge
configuration tools; see <file:Documentation/networking/bridge.txt>
for location. Please read the Bridge mini-HOWTO for more
information.

If you enable iptables support along with the bridge support then you
turn your bridge into a bridging IP firewall.
iptables will then see the IP packets being bridged, so you need to
take this into account when setting up your firewall rules.
Enabling arptables support when bridging will let arptables see
bridged ARP traffic in the arptables FORWARD chain.

To compile this code as a module, choose M here: the module
will be called bridge.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VLAN_8021Q</term>
<nutsynopsis>
	"802.1Q VLAN Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this and you will be able to create 802.1Q VLAN interfaces
on your ethernet interfaces.  802.1Q VLAN supports almost
everything a regular ethernet interface does, including
firewalling, bridging, and of course IP traffic.  You will need
the 'vconfig' tool from the VLAN project in order to effectively
use VLANs.  See the VLAN web page for more information:
<http://www.candelatech.com/~greear/vlan.html>

To compile this code as a module, choose M here: the module
will be called 8021q.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DECNET</term>
<nutsynopsis>
	"DECnet Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The DECnet networking protocol was used in many products made by
Digital (now Compaq).  It provides reliable stream and sequenced
packet communications over which run a variety of services similar
to those which run over TCP/IP.

To find some tools to use with the kernel layer support, please
look at Patrick Caulfield's web site:
<http://linux-decnet.sourceforge.net/>.

More detailed documentation is available in
<file:Documentation/networking/decnet.txt>.

Be sure to say Y to "/proc file system support" and "Sysctl support"
below when using DECnet, since you will need sysctl support to aid
in configuration at run time.

The DECnet code is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module is called decnet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DECNET_ROUTER</term>
<nutsynopsis>
	"DECnet: router support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DECNET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Add support for turning your DECnet Endnode into a level 1 or 2
router.  This is an experimental, but functional option.  If you
do say Y here, then make sure that you also say Y to "Kernel/User
network link driver", "Routing messages" and "Network packet
filtering".  The first two are required to allow configuration via
rtnetlink (you will need Alexey Kuznetsov's iproute2 package
from <ftp://ftp.tux.org/pub/net/ip-routing/>). The "Network packet
filtering" option will be required for the forthcoming routing daemon
to work.

See <file:Documentation/networking/decnet.txt> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DECNET_ROUTE_FWMARK</term>
<nutsynopsis>
	"DECnet: use FWMARK value as routing key (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DECNET_ROUTER && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will be able to specify different routes for
packets with different FWMARK ("firewalling mark") values
(see ipchains(8), "-m" argument).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LLC</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LLC2</term>
<nutsynopsis>
	"ANSI/IEEE 802.2 LLC type 2 Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a Logical Link Layer type 2, connection oriented support. 
Select this if you want to have support for PF_LLC sockets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPX</term>
<nutsynopsis>
	"The IPX protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the Novell networking protocol, IPX, commonly
used for local networks of Windows machines.  You need it if you
want to access Novell NetWare file or print servers using the Linux
Novell client ncpfs (available from
<ftp://platan.vc.cvut.cz/pub/linux/ncpfs/>) or from
within the Linux DOS emulator DOSEMU (read the DOSEMU-HOWTO,
available from <http://www.tldp.org/docs.html#howto>).  In order
to do the former, you'll also have to say Y to "NCP file system
support", below.

IPX is similar in scope to IP, while SPX, which runs on top of IPX,
is similar to TCP. There is also experimental support for SPX in
Linux (see "SPX networking", below).

To turn your Linux box into a fully featured NetWare file server and
IPX router, say Y here and fetch either lwared from
<ftp://ibiblio.org/pub/Linux/system/network/daemons/> or
mars_nwe from <ftp://www.compu-art.de/mars_nwe/>. For more
information, read the IPX-HOWTO available from
<http://www.tldp.org/docs.html#howto>.

General information about how to connect Linux, Windows machines and
Macs is on the WWW at <http://www.eats.com/linux_mac_win.html>.

The IPX driver would enlarge your kernel by about 16 KB. To compile
this driver as a module, choose M here: the module will be called ipx.
Unless you want to integrate your Linux box with a local Novell
network, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPX_INTERN</term>
<nutsynopsis>
	"IPX: Full internal IPX network"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IPX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Every IPX network has an address that identifies it. Sometimes it is
useful to give an IPX "network" address to your Linux box as well
(for example if your box is acting as a file server for different
IPX networks: it will then be accessible from everywhere using the
same address). The way this is done is to create a virtual internal
"network" inside your box and to assign an IPX address to this
network. Say Y here if you want to do this; read the IPX-HOWTO at
<http://www.tldp.org/docs.html#howto> for details.

The full internal IPX network enables you to allocate sockets on
different virtual nodes of the internal network. This is done by
evaluating the field sipx_node of the socket address given to the
bind call. So applications should always initialize the node field
to 0 when binding a socket on the primary network. In this case the
socket is assigned the default node that has been given to the
kernel when the internal network was created. By enabling the full
internal IPX network the cross-forwarding of packets targeted at
'special' sockets to sockets listening on the primary network is
disabled. This might break existing applications, especially RIP/SAP
daemons. A RIP/SAP daemon that works well with the full internal net
can be found on <ftp://ftp.gwdg.de/pub/linux/misc/ncpfs/>.

If you don't know what you are doing, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATALK</term>
<nutsynopsis>
	"Appletalk protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
AppleTalk is the protocol that Apple computers can use to communicate
on a network.  If your Linux box is connected to such a network and you
wish to connect to it, say Y.  You will need to use the netatalk package
so that your Linux box can act as a print and file server for Macs as
well as access AppleTalk printers.  Check out
<http://www.zettabyte.net/netatalk/> on the WWW for details.
EtherTalk is the name used for AppleTalk over Ethernet and the
cheaper and slower LocalTalk is AppleTalk over a proprietary Apple
network using serial links.  EtherTalk and LocalTalk are fully
supported by Linux.

General information about how to connect Linux, Windows machines and
Macs is on the WWW at <http://www.eats.com/linux_mac_win.html>.  The
NET-3-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, contains valuable
information as well.

To compile this driver as a module, choose M here: the module will be
called appletalk. You almost certainly want to compile it as a
module so you can restart your AppleTalk stack without rebooting
your machine. I hear that the GNU boycott of Apple is over, so
even politically correct people are allowed to say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEV_APPLETALK</term>
<nutsynopsis>
	"Appletalk interfaces support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ATALK</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
AppleTalk is the protocol that Apple computers can use to communicate
on a network.  If your Linux box is connected to such a network, and wish
to do IP over it, or you have a LocalTalk card and wish to use it to
connect to the AppleTalk network, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LTPC</term>
<nutsynopsis>
	"Apple/Farallon LocalTalk PC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use the AppleTalk PC card to connect to LocalTalk
networks. The card is also known as the Farallon PhoneNet PC card.
If you are in doubt, this card is the one with the 65C02 chip on it.
You also need version 1.3.3 or later of the netatalk package.
This driver is experimental, which means that it may not work.
See the file <file:Documentation/networking/ltpc.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>COPS</term>
<nutsynopsis>
	"COPS LocalTalk PC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DEV_APPLETALK && (ISA || EISA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use COPS AppleTalk cards to connect to LocalTalk
networks. You also need version 1.3.3 or later of the netatalk
package. This driver is experimental, which means that it may not
work. This driver will only work if you choose "AppleTalk DDP"
networking support, above.
Please read the file <file:Documentation/networking/cops.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>COPS_DAYNA</term>
<nutsynopsis>
	"Dayna firmware support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && COPS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support COPS compatible cards with Dayna style firmware (Dayna
DL2000/ Daynatalk/PC (half length), COPS LT-95, Farallon PhoneNET PC
III, Farallon PhoneNET PC II).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>COPS_TANGENT</term>
<nutsynopsis>
	"Tangent firmware support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && COPS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support COPS compatible cards with Tangent style firmware (Tangent
ATB_II, Novell NL-1000, Daystar Digital LT-200.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPDDP</term>
<nutsynopsis>
	"Appletalk-IP driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DEV_APPLETALK && ATALK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows IP networking for users who only have AppleTalk
networking available. This feature is experimental. With this
driver, you can encapsulate IP inside AppleTalk (e.g. if your Linux
box is stuck on an AppleTalk only network) or decapsulate (e.g. if
you want your Linux box to act as an Internet gateway for a zoo of
AppleTalk connected Macs). Please see the file
<file:Documentation/networking/ipddp.txt> for more information.

If you say Y here, the AppleTalk-IP support will be compiled into
the kernel. In this case, you can either use encapsulation or
decapsulation, but not both. With the following two questions, you
decide which one you want.

To compile the AppleTalk-IP support as a module, choose M here: the
module will be called ipddp.
In this case, you will be able to use both encapsulation and
decapsulation simultaneously, by loading two copies of the module
and specifying different values for the module option ipddp_mode.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPDDP_ENCAP</term>
<nutsynopsis>
	"IP to Appletalk-IP Encapsulation support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IPDDP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the AppleTalk-IP code will be able to encapsulate
IP packets inside AppleTalk frames; this is useful if your Linux box
is stuck on an AppleTalk network (which hopefully contains a
decapsulator somewhere). Please see
<file:Documentation/networking/ipddp.txt> for more information. If
you said Y to "AppleTalk-IP driver support" above and you say Y
here, then you cannot say Y to "AppleTalk-IP to IP Decapsulation
support", below.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPDDP_DECAP</term>
<nutsynopsis>
	"Appletalk-IP to IP Decapsulation support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IPDDP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the AppleTalk-IP code will be able to decapsulate
AppleTalk-IP frames to IP packets; this is useful if you want your
Linux box to act as an Internet gateway for an AppleTalk network.
Please see <file:Documentation/networking/ipddp.txt> for more
information.  If you said Y to "AppleTalk-IP driver support" above
and you say Y here, then you cannot say Y to "IP to AppleTalk-IP
Encapsulation support", above.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X25</term>
<nutsynopsis>
	"CCITT X.25 Packet Layer (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
X.25 is a set of standardized network protocols, similar in scope to
frame relay; the one physical line from your box to the X.25 network
entry point can carry several logical point-to-point connections
(called "virtual circuits") to other computers connected to the X.25
network. Governments, banks, and other organizations tend to use it
to connect to each other or to form Wide Area Networks (WANs). Many
countries have public X.25 networks. X.25 consists of two
protocols: the higher level Packet Layer Protocol (PLP) (say Y here
if you want that) and the lower level data link layer protocol LAPB
(say Y to "LAPB Data Link Driver" below if you want that).

You can read more about X.25 at <http://www.sangoma.com/x25.htm> and
<http://www.cisco.com/univercd/cc/td/doc/product/software/ios11/cbook/cx25.htm>.
Information about X.25 for Linux is contained in the files
<file:Documentation/networking/x25.txt> and
<file:Documentation/networking/x25-iface.txt>.

One connects to an X.25 network either with a dedicated network card
using the X.21 protocol (not yet supported by Linux) or one can do
X.25 over a standard telephone line using an ordinary modem (say Y
to "X.25 async driver" below) or over Ethernet using an ordinary
Ethernet card and the LAPB over Ethernet (say Y to "LAPB Data Link
Driver" and "LAPB over Ethernet driver" below).

To compile this driver as a module, choose M here: the module
will be called x25. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LAPB</term>
<nutsynopsis>
	"LAPB Data Link Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Link Access Procedure, Balanced (LAPB) is the data link layer (i.e.
the lower) part of the X.25 protocol. It offers a reliable
connection service to exchange data frames with one other host, and
it is used to transport higher level protocols (mostly X.25 Packet
Layer, the higher part of X.25, but others are possible as well).
Usually, LAPB is used with specialized X.21 network cards, but Linux
currently supports LAPB only over Ethernet connections. If you want
to use LAPB connections over Ethernet, say Y here and to "LAPB over
Ethernet driver" below. Read
<file:Documentation/networking/lapb-module.txt> for technical
details.

To compile this driver as a module, choose M here: the
module will be called lapb.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_DIVERT</term>
<nutsynopsis>
	"Frame Diverter (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Frame Diverter allows you to divert packets from the
network, that are not aimed at the interface receiving it (in
promisc. mode). Typically, a Linux box setup as an Ethernet bridge
with the Frames Diverter on, can do some *really* transparent www
caching using a Squid proxy for example.

This is very useful when you don't want to change your router's
config (or if you simply don't have access to it).

The other possible usages of diverting Ethernet Frames are
numberous:
- reroute smtp traffic to another interface
- traffic-shape certain network streams
- transparently proxy smtp connections
- etc...

For more informations, please refer to:
<http://diverter.sourceforge.net/>
<http://perso.wanadoo.fr/magpie/EtherDivert.html>

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ECONET</term>
<nutsynopsis>
	"Acorn Econet/AUN protocols (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Econet is a fairly old and slow networking protocol mainly used by
Acorn computers to access file and print servers. It uses native
Econet network cards. AUN is an implementation of the higher level
parts of Econet that runs over ordinary Ethernet connections, on
top of the UDP packet protocol, which in turn runs on top of the
Internet protocol IP.

If you say Y here, you can choose with the next two options whether
to send Econet/AUN traffic over a UDP Ethernet connection or over
a native Econet network card.

To compile this driver as a module, choose M here: the module
will be called econet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ECONET_AUNUDP</term>
<nutsynopsis>
	"AUN over UDP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ECONET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to send Econet/AUN traffic over a UDP
connection (UDP is a packet based protocol that runs on top of the
Internet protocol IP) using an ordinary Ethernet network card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ECONET_NATIVE</term>
<nutsynopsis>
	"Native Econet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ECONET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a native Econet network card installed in
your computer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WAN_ROUTER</term>
<nutsynopsis>
	"WAN router"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Wide Area Networks (WANs), such as X.25, frame relay and leased
lines, are used to interconnect Local Area Networks (LANs) over vast
distances with data transfer rates significantly higher than those
achievable with commonly used asynchronous modem connections.
Usually, a quite expensive external device called a `WAN router' is
needed to connect to a WAN.

As an alternative, WAN routing can be built into the Linux kernel.
With relatively inexpensive WAN interface cards available on the
market, a perfectly usable router can be built for less than half
the price of an external router.  If you have one of those cards and
wish to use your Linux box as a WAN router, say Y here and also to
the WAN driver for your card, below.  You will then need the
wan-tools package which is available from <ftp://ftp.sangoma.com/>.
Read <file:Documentation/networking/wan-router.txt> for more
information.

To compile WAN routing support as a module, choose M here: the
module will be called wanrouter.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCHED</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
When the kernel has several packets to send out over a network
device, it has to decide which ones to send first, which ones to
delay, and which ones to drop. This is the job of the packet
scheduler, and several different algorithms for how to do this
"fairly" have been proposed.

If you say N here, you will get the standard packet scheduler, which
is a FIFO (first come, first served). If you say Y here, you will be
able to choose from among several alternative algorithms which can
then be attached to different network devices. This is useful for
example if some of your network devices are real time devices that
need a certain minimum data flow rate, or if you need to limit the
maximum data flow rate for traffic which matches specified criteria.
This code is considered to be experimental.

To administer these schedulers, you'll need the user-level utilities
from the package iproute2+tc at <ftp://ftp.tux.org/pub/net/ip-routing/>.
That package also contains some documentation; for more, check out
<http://snafu.freedom.org/linux2.2/iproute-notes.html>.

This Quality of Service (QoS) support will enable you to use
Differentiated Services (diffserv) and Resource Reservation Protocol
(RSVP) on your Linux router if you also say Y to "QoS support",
"Packet classifier API" and to some classifiers below. Documentation
and software is at <http://diffserv.sourceforge.net/>.

If you say Y here and to "/proc file system" below, you will be able
to read status information about packet schedulers from the file
/proc/net/psched.

The available schedulers are listed in the following questions; you
can say Y to as many as you like. If unsure, say N now.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Packet scheduler clock source"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	default value
	<literal>NET_SCH_CLK_JIFFIES if NET && NET_SCHED</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Packet schedulers need a monotonic clock that increments at a static
rate. The kernel provides several suitable interfaces, each with
different properties:

- high resolution (us or better)
- fast to read (minimal locking, no i/o access)
- synchronized on all processors
- handles cpu clock frequency changes

but nothing provides all of the above.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_CLK_JIFFIES</term>
<nutsynopsis>
	"Timer interrupt"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the timer interrupt (jiffies) as clock
source. This clock source is fast, synchronized on all processors and
handles cpu clock frequency changes, but its resolution is too low
for accurate shaping except at very low speed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_CLK_GETTIMEOFDAY</term>
<nutsynopsis>
	"gettimeofday"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use gettimeofday as clock source. This clock
source has high resolution, is synchronized on all processors and
handles cpu clock frequency changes, but it is slow.

Choose this if you need a high resolution clock source but can't use
the CPU's cycle counter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_CLK_CPU</term>
<nutsynopsis>
	"CPU cycle counter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && (X86_TSC || X86_64 || ALPHA || SPARC64 || PPC64 || IA64)</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the CPU's cycle counter as clock source.
This is a cheap and high resolution clock source, but on some
architectures it is not synchronized on all processors and doesn't
handle cpu clock frequency changes.

The useable cycle counters are:

      x86/x86_64	- Timestamp Counter
      alpha		- Cycle Counter
      sparc64		- %ticks register
      ppc64		- Time base
      ia64		- Interval Time Counter

Choose this if your CPU's cycle counter is working properly.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_CBQ</term>
<nutsynopsis>
	"CBQ packet scheduler"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Class-Based Queueing (CBQ) packet
scheduling algorithm for some of your network devices.  This
algorithm classifies the waiting packets into a tree-like hierarchy
of classes; the leaves of this tree are in turn scheduled by
separate algorithms (called "disciplines" in this context).

See the top of <file:net/sched/sch_cbq.c> for references about the
CBQ algorithm.

CBQ is a commonly used scheduler, so if you're unsure, you should
say Y here. Then say Y to all the queueing algorithms below that you
want to use as CBQ disciplines.  Then say Y to "Packet classifier
API" and say Y to all the classifiers you want to use; a classifier
is a routine that allows you to sort your outgoing traffic into
classes based on a certain criterion.

To compile this code as a module, choose M here: the
module will be called sch_cbq.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_HTB</term>
<nutsynopsis>
	"HTB packet scheduler"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Hierarchical Token Buckets (HTB)
packet scheduling algorithm for some of your network devices. See
<http://luxik.cdi.cz/~devik/qos/htb/> for complete manual and
in-depth articles.

HTB is very similar to the CBQ regarding its goals however is has 
different properties and different algorithm.

To compile this code as a module, choose M here: the
module will be called sch_htb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_HFSC</term>
<nutsynopsis>
	"HFSC packet scheduler"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Hierarchical Fair Service Curve
(HFSC) packet scheduling algorithm for some of your network devices.

To compile this code as a module, choose M here: the
module will be called sch_hfsc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_ATM</term>
<nutsynopsis>
	"ATM pseudo-scheduler"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the ATM pseudo-scheduler.  This
provides a framework for invoking classifiers (aka "filters"), which
in turn select classes of this queuing discipline.  Each class maps
the flow(s) it is handling to a given virtual circuit (see the top of
<file:net/sched/sch_atm.c>).

To compile this code as a module, choose M here: the
module will be called sch_atm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_PRIO</term>
<nutsynopsis>
	"The simplest PRIO pseudoscheduler"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use an n-band priority queue packet
"scheduler" for some of your network devices or as a leaf discipline
for the CBQ scheduling algorithm. If unsure, say Y.

To compile this code as a module, choose M here: the
module will be called sch_prio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_RED</term>
<nutsynopsis>
	"RED queue"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Random Early Detection (RED)
packet scheduling algorithm for some of your network devices (see
the top of <file:net/sched/sch_red.c> for details and references
about the algorithm).

To compile this code as a module, choose M here: the
module will be called sch_red.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_SFQ</term>
<nutsynopsis>
	"SFQ queue"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Stochastic Fairness Queueing (SFQ)
packet scheduling algorithm for some of your network devices or as a
leaf discipline for the CBQ scheduling algorithm (see the top of
<file:net/sched/sch_sfq.c> for details and references about the SFQ
algorithm).

To compile this code as a module, choose M here: the
module will be called sch_sfq.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_TEQL</term>
<nutsynopsis>
	"TEQL queue"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the True Link Equalizer (TLE) packet
scheduling algorithm for some of your network devices or as a leaf
discipline for the CBQ scheduling algorithm. This queueing
discipline allows the combination of several physical devices into
one virtual device. (see the top of <file:net/sched/sch_teql.c> for
details).

To compile this code as a module, choose M here: the
module will be called sch_teql.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_TBF</term>
<nutsynopsis>
	"TBF queue"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Simple Token Bucket Filter (TBF)
packet scheduling algorithm for some of your network devices or as a
leaf discipline for the CBQ scheduling algorithm (see the top of
<file:net/sched/sch_tbf.c> for a description of the TBF algorithm).

To compile this code as a module, choose M here: the
module will be called sch_tbf.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_GRED</term>
<nutsynopsis>
	"GRED queue"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the Generic Random Early Detection
(GRED) packet scheduling algorithm for some of your network devices
(see the top of <file:net/sched/sch_red.c> for details and
references about the algorithm).

To compile this code as a module, choose M here: the
module will be called sch_gred.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_DSMARK</term>
<nutsynopsis>
	"Diffserv field marker"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you want to schedule packets according to the
Differentiated Services architecture proposed in RFC 2475.
Technical information on this method, with pointers to associated
RFCs, is available at <http://www.gta.ufrj.br/diffserv/>.

To compile this code as a module, choose M here: the
module will be called sch_dsmark.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_NETEM</term>
<nutsynopsis>
	"Network emulator"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you want to emulate network delay, loss, and packet
re-ordering. This is often useful to simulate networks when
testing applications or protocols.

To compile this driver as a module, choose M here: the module
will be called sch_netem.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SCH_INGRESS</term>
<nutsynopsis>
	"Ingress Qdisc"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to police incoming bandwidth
and drop packets when this bandwidth exceeds your desired rate.
If unsure, say Y.

To compile this code as a module, choose M here: the
module will be called sch_ingress.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_QOS</term>
<nutsynopsis>
	"QoS support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to include Quality Of Service scheduling
features, which means that you will be able to request certain
rate-of-flow limits for your network devices.

This Quality of Service (QoS) support will enable you to use
Differentiated Services (diffserv) and Resource Reservation Protocol
(RSVP) on your Linux router if you also say Y to "Packet classifier
API" and to some classifiers below. Documentation and software is at
<http://diffserv.sourceforge.net/>.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about QoS support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ESTIMATOR</term>
<nutsynopsis>
	"Rate estimator"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_QOS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
In order for Quality of Service scheduling to work, the current
rate-of-flow for a network device has to be estimated; if you say Y
here, the kernel will do just that.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS</term>
<nutsynopsis>
	"Packet classifier API"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_SCHED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The CBQ scheduling algorithm requires that network packets which are
scheduled to be sent out over a network device be classified
according to some criterion. If you say Y here, you will get a
choice of several different packet classifiers with the following
questions.

This will enable you to use Differentiated Services (diffserv) and
Resource Reservation Protocol (RSVP) on your Linux router.
Documentation and software is at
<http://diffserv.sourceforge.net/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_BASIC</term>
<nutsynopsis>
	"Basic classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be able to classify packets using
only extended matches and actions.

To compile this code as a module, choose M here: the
module will be called cls_basic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_TCINDEX</term>
<nutsynopsis>
	"TC index classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to classify outgoing packets
according to the tc_index field of the skb. You will want this
feature if you want to implement Differentiated Services using
sch_dsmark. If unsure, say Y.

To compile this code as a module, choose M here: the
module will be called cls_tcindex.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_ROUTE4</term>
<nutsynopsis>
	"Routing table based classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to classify outgoing packets
according to the route table entry they matched. If unsure, say Y.

To compile this code as a module, choose M here: the
module will be called cls_route.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>NET_CLS_ROUTE</term>
	<para>
	default value
	<literal>n if NET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_FW</term>
<nutsynopsis>
	"Firewall based classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to classify outgoing packets
according to firewall criteria you specified.

To compile this code as a module, choose M here: the
module will be called cls_fw.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_U32</term>
<nutsynopsis>
	"U32 classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to classify outgoing packets
according to their destination address. If unsure, say Y.

To compile this code as a module, choose M here: the
module will be called cls_u32.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CLS_U32_PERF</term>
<nutsynopsis>
	"U32 classifier performance counters"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_U32</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
gathers stats that could be used to tune u32 classifier performance.
Requires a new iproute2
You MUST NOT turn this on if you dont have an update iproute2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_IND</term>
<nutsynopsis>
	"classify input device (slows things u32/fw) "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && (NET_CLS_U32 || NET_CLS_FW)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will be killed eventually when a 
metadata action appears because it slows things a little
Available only for u32 and fw classifiers.
Requires a new iproute2
You MUST NOT turn this on if you dont have an update iproute2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CLS_U32_MARK</term>
<nutsynopsis>
	"Use nfmark as a key in U32 classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_U32 && NETFILTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This allows you to match mark in a u32 filter.
Example:
tc filter add dev eth0 protocol ip parent 1:0 prio 5 u32 \
      match mark 0x0090 0xffff \
      match ip dst 4.4.4.4 \
      flowid 1:90
You must use a new iproute2 to use this feature.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_RSVP</term>
<nutsynopsis>
	"Special RSVP classifier"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS && NET_QOS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Resource Reservation Protocol (RSVP) permits end systems to
request a minimum and maximum data flow rate for a connection; this
is important for real time data such as streaming sound or video.

Say Y here if you want to be able to classify outgoing packets based
on their RSVP requests.

To compile this code as a module, choose M here: the
module will be called cls_rsvp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_RSVP6</term>
<nutsynopsis>
	"Special RSVP classifier for IPv6"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS && NET_QOS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Resource Reservation Protocol (RSVP) permits end systems to
request a minimum and maximum data flow rate for a connection; this
is important for real time data such as streaming sound or video.

Say Y here if you want to be able to classify outgoing packets based
on their RSVP requests and you are using the new Internet Protocol
IPv6 as opposed to the older and more common IPv4.

To compile this code as a module, choose M here: the
module will be called cls_rsvp6.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH</term>
<nutsynopsis>
	"Extended Matches"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use extended matches on top of classifiers
and select the extended matches below.

Extended matches are small classification helpers not worth writing
a separate classifier.

You must have a recent version of the iproute2 tools in order to use
extended matches.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH_STACK</term>
<nutsynopsis>
	"Stack size"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_EMATCH</literal>
	</para>

	<para>
	default value
	<literal>32 if NET && NET_EMATCH</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Size of the local stack variable used while evaluating the tree of
ematches. Limits the depth of the tree, i.e. the number of
encapsulated precedences. Every level requires 4 bytes of additional
stack space.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH_CMP</term>
<nutsynopsis>
	"Simple packet data comparison"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_EMATCH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be able to classify packets based on
simple packet data comparisons for 8, 16, and 32bit values.

To compile this code as a module, choose M here: the
module will be called em_cmp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH_NBYTE</term>
<nutsynopsis>
	"Multi byte comparison"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_EMATCH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be able to classify packets based on
multiple byte comparisons mainly useful for IPv6 address comparisons.

To compile this code as a module, choose M here: the
module will be called em_nbyte.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH_U32</term>
<nutsynopsis>
	"U32 hashing key"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_EMATCH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be able to classify packets using
the famous u32 key in combination with logic relations.

To compile this code as a module, choose M here: the
module will be called em_u32.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH_META</term>
<nutsynopsis>
	"Metadata"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_EMATCH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be ablt to classify packets based on
metadata such as load average, netfilter attributes, socket
attributes and routing decisions.

To compile this code as a module, choose M here: the
module will be called em_meta.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_EMATCH_TEXT</term>
<nutsynopsis>
	"Textsearch"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_EMATCH</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be ablt to classify packets based on
textsearch comparisons.

To compile this code as a module, choose M here: the
module will be called em_text.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_ACT</term>
<nutsynopsis>
	"Packet ACTION"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL && NET_CLS && NET_QOS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option requires you have a new iproute2. It enables
tc extensions which can be used with tc classifiers.
  You MUST NOT turn this on if you dont have an update iproute2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ACT_POLICE</term>
<nutsynopsis>
	"Policing Actions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_ACT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you are using a newer iproute2 select this one, otherwise use one
below to select a policer.
  You MUST NOT turn this on if you dont have an update iproute2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ACT_GACT</term>
<nutsynopsis>
	"generic Actions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_ACT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
You must have new iproute2 to use this feature.
This adds simple filtering actions like drop, accept etc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GACT_PROB</term>
<nutsynopsis>
	"generic Actions probability"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_ACT_GACT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows generic actions to be randomly or deterministically used.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ACT_MIRRED</term>
<nutsynopsis>
	"Packet In/Egress redirecton/mirror Actions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_ACT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
requires new iproute2
This allows packets to be mirrored or redirected to netdevices
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ACT_IPT</term>
<nutsynopsis>
	"iptables Actions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
requires new iproute2
This allows iptables targets to be used by tc filters
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ACT_PEDIT</term>
<nutsynopsis>
	"Generic Packet Editor Actions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_ACT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
requires new iproute2
This allows for packets to be generically edited
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_CLS_POLICE</term>
<nutsynopsis>
	"Traffic policing (needed for in/egress)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS && NET_QOS && !NET_CLS_ACT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y to support traffic policing (bandwidth limits).  Needed for
ingress and egress rate limiting.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ACT_SIMP</term>
<nutsynopsis>
	"Simple action"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NET_CLS_ACT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
You must have new iproute2 to use this feature.
This adds a very simple action for demonstration purposes
The idea is to give action authors a basic example to look at.
All this action will do is print on the console the configured
policy string followed by _ then packet count.
	</para>

</nutentrybody>
</nutentry>

menu "Network testing"
<para>
	depends on
	<literal>NET</literal>
	</para>


<nutentry>
	<term>NET_PKTGEN</term>
<nutsynopsis>
	"Packet Generator (USE WITH CAUTION)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module will inject preconfigured packets, at a configurable
rate, out of a given interface.  It is used for network interface
stress testing and performance analysis.  If you don't understand
what was just said, you don't need it: say N.

Documentation on how to use the packet generator can be found
at <file:Documentation/networking/pktgen.txt>.

To compile this code as a module, choose M here: the
module will be called pktgen.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu
<nutentry>
	<term>HAMRADIO</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want to connect your Linux box to an amateur radio, answer Y
here. You want to read <http://www.tapr.org/tapr/html/pkthome.html> and
the AX25-HOWTO, available from <http://www.tldp.org/docs.html#howto>.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about amateur radio.
	</para>

</nutentrybody>
</nutentry>

comment "Packet Radio protocols"
<para>
	depends on
	<literal>HAMRADIO && NET</literal>
	</para>


<nutentry>
	<term>AX25</term>
<nutsynopsis>
	"Amateur Radio AX.25 Level 2 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the protocol used for computer communication over amateur
radio. It is either used by itself for point-to-point links, or to
carry other protocols such as tcp/ip. To use it, you need a device
that connects your Linux box to your amateur radio. You can either
use a low speed TNC (a Terminal Node Controller acts as a kind of
modem connecting your computer's serial port to your radio's
microphone input and speaker output) supporting the KISS protocol or
one of the various SCC cards that are supported by the generic Z8530
or the DMA SCC driver. Another option are the Baycom modem serial
and parallel port hacks or the sound card modem (supported by their
own drivers). If you say Y here, you also have to say Y to one of
those drivers.

Information about where to get supporting software for Linux amateur
radio as well as information about how to configure an AX.25 port is
contained in the AX25-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. You might also want to
check out the file <file:Documentation/networking/ax25.txt> in the
kernel source. More information about digital amateur radio in
general is on the WWW at
<http://www.tapr.org/tapr/html/pkthome.html>.

To compile this driver as a module, choose M here: the
module will be called ax25.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AX25_DAMA_SLAVE</term>
<nutsynopsis>
	"AX.25 DAMA Slave support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && AX25</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
DAMA is a mechanism to prevent collisions when doing AX.25
networking. A DAMA server (called "master") accepts incoming traffic
from clients (called "slaves") and redistributes it to other slaves.
If you say Y here, your Linux box will act as a DAMA slave; this is
transparent in that you don't have to do any special DAMA
configuration. (Linux cannot yet act as a DAMA server.) If unsure,
say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETROM</term>
<nutsynopsis>
	"Amateur Radio NET/ROM protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && AX25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
NET/ROM is a network layer protocol on top of AX.25 useful for
routing.

A comprehensive listing of all the software for Linux amateur radio
users as well as information about how to configure an AX.25 port is
contained in the AX25-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. You also might want to
check out the file <file:Documentation/networking/ax25.txt>. More
information about digital amateur radio in general is on the WWW at
<http://www.tapr.org/tapr/html/pkthome.html>.

To compile this driver as a module, choose M here: the
module will be called netrom.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ROSE</term>
<nutsynopsis>
	"Amateur Radio X.25 PLP (Rose)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && AX25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Packet Layer Protocol (PLP) is a way to route packets over X.25
connections in general and amateur radio AX.25 connections in
particular, essentially an alternative to NET/ROM.

A comprehensive listing of all the software for Linux amateur radio
users as well as information about how to configure an AX.25 port is
contained in the AX25-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  You also might want to
check out the file <file:Documentation/networking/ax25.txt>. More
information about digital amateur radio in general is on the WWW at
<http://www.tapr.org/tapr/html/pkthome.html>.

To compile this driver as a module, choose M here: the
module will be called rose.
	</para>

</nutentrybody>
</nutentry>

menu "AX.25 network device drivers"
<para>
	depends on
	<literal>HAMRADIO && NET && AX25!=n</literal>
	</para>


<nutentry>
	<term>MKISS</term>
<nutsynopsis>
	"Serial port KISS driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
KISS is a protocol used for the exchange of data between a computer
and a Terminal Node Controller (a small embedded system commonly
used for networking over AX.25 amateur radio connections; it
connects the computer's serial port with the radio's microphone
input and speaker output).

Although KISS is less advanced than the 6pack protocol, it has
the advantage that it is already supported by most modern TNCs
without the need for a firmware upgrade.

To compile this driver as a module, choose M here: the module
will be called mkiss.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>6PACK</term>
<nutsynopsis>
	"Serial port 6PACK driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
6pack is a transmission protocol for the data exchange between your
PC and your TNC (the Terminal Node Controller acts as a kind of
modem connecting your computer's serial port to your radio's
microphone input and speaker output). This protocol can be used as
an alternative to KISS for networking over AX.25 amateur radio
connections, but it has some extended functionality.

Note that this driver is still experimental and might cause
problems. For details about the features and the usage of the
driver, read <file:Documentation/networking/6pack.txt>.

To compile this driver as a module, choose M here: the module
will be called 6pack.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BPQETHER</term>
<nutsynopsis>
	"BPQ Ethernet driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
AX.25 is the protocol used for computer communication over amateur
radio. If you say Y here, you will be able to send and receive AX.25
traffic over Ethernet (also called "BPQ AX.25"), which could be
useful if some other computer on your local network has a direct
amateur radio connection.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DMASCC</term>
<nutsynopsis>
	"High-speed (DMA) SCC driver for AX.25"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for high-speed SCC boards, i.e. those supporting
DMA on one port. You usually use those boards to connect your
computer to an amateur radio modem (such as the WA4DSY 56kbps
modem), in order to send and receive AX.25 packet radio network
traffic.

Currently, this driver supports Ottawa PI/PI2, Paccomm/Gracilis
PackeTwin, and S5SCC/DMA boards. They are detected automatically.
If you have one of these cards, say Y here and read the AX25-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

This driver can operate multiple boards simultaneously. If you
compile it as a module (by saying M instead of Y), it will be called
dmascc. If you don't pass any parameter to the driver, all
possible I/O addresses are probed. This could irritate other devices
that are currently not in use. You may specify the list of addresses
to be probed by "dmascc=addr1,addr2,..." (when compiled into the
kernel image) or "io=addr1,addr2,..." (when loaded as a module). The
network interfaces will be called dmascc0 and dmascc1 for the board
detected first, dmascc2 and dmascc3 for the second one, and so on.

Before you configure each interface with ifconfig, you MUST set
certain parameters, such as channel access timing, clock mode, and
DMA channel. This is accomplished with a small utility program,
dmascc_cfg, available at
<http://cacofonix.nt.tuwien.ac.at/~oe1kib/Linux/>. Please be sure to
get at least version 1.27 of dmascc_cfg, as older versions will not
work with the current driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCC</term>
<nutsynopsis>
	"Z8530 SCC driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && ISA && AX25 && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These cards are used to connect your Linux box to an amateur radio
in order to communicate with other computers. If you want to use
this, read <file:Documentation/networking/z8530drv.txt> and the
AX25-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. Also make sure to say Y
to "Amateur Radio AX.25 Level 2" support.

To compile this driver as a module, choose M here: the module
will be called scc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCC_DELAY</term>
<nutsynopsis>
	"additional delay for PA0HZP OptoSCC compatible boards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25 && SCC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you experience problems with the SCC driver not
working properly; please read
<file:Documentation/networking/z8530drv.txt> for details.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCC_TRXECHO</term>
<nutsynopsis>
	"support for TRX that feedback the tx signal to rx"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25 && SCC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some transmitters feed the transmitted signal back to the receive
line.  Say Y here to foil this by explicitly disabling the receiver
during data transmission.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BAYCOM_SER_FDX</term>
<nutsynopsis>
	"BAYCOM ser12 fullduplex driver for AX.25"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is one of two drivers for Baycom style simple amateur radio
modems that connect to a serial interface. The driver supports the
ser12 design in full-duplex mode. In addition, it allows the
baudrate to be set between 300 and 4800 baud (however not all modems
support all baudrates). This is the preferred driver. The next
driver, "BAYCOM ser12 half-duplex driver for AX.25" is the old
driver and still provided in case this driver does not work with
your serial interface chip. To configure the driver, use the sethdlc
utility available in the standard ax25 utilities package. For
information on the modems, see <http://www.baycom.de/> and
<file:Documentation/networking/baycom.txt>.

To compile this driver as a module, choose M here: the module
will be called baycom_ser_fdx.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BAYCOM_SER_HDX</term>
<nutsynopsis>
	"BAYCOM ser12 halfduplex driver for AX.25"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is one of two drivers for Baycom style simple amateur radio
modems that connect to a serial interface. The driver supports the
ser12 design in full-duplex mode. This is the old driver.  It is
still provided in case your serial interface chip does not work with
the full-duplex driver. This driver is depreciated.  To configure
the driver, use the sethdlc utility available in the standard ax25
utilities package. For information on the modems, see
<http://www.baycom.de/> and
<file:Documentation/networking/baycom.txt>.

To compile this driver as a module, choose M here: the module
will be called baycom_ser_hdx.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BAYCOM_PAR</term>
<nutsynopsis>
	"BAYCOM picpar and par96 driver for AX.25"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && PARPORT && AX25</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for Baycom style simple amateur radio modems that
connect to a parallel interface. The driver supports the picpar and
par96 designs. To configure the driver, use the sethdlc utility
available in the standard ax25 utilities package. For information on
the modems, see <http://www.baycom.de/> and the file
<file:Documentation/networking/baycom.txt>.

To compile this driver as a module, choose M here: the module
will be called baycom_par.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BAYCOM_EPP</term>
<nutsynopsis>
	"BAYCOM epp driver for AX.25"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && PARPORT && AX25 && !64BIT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for Baycom style simple amateur radio modems that
connect to a parallel interface. The driver supports the EPP
designs. To configure the driver, use the sethdlc utility available
in the standard ax25 utilities package. For information on the
modems, see <http://www.baycom.de/> and the file
<file:Documentation/networking/baycom.txt>.

To compile this driver as a module, choose M here: the module
will be called baycom_epp.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>YAM</term>
<nutsynopsis>
	"YAM driver for AX.25"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAMRADIO && NET && AX25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The YAM is a modem for packet radio which connects to the serial
port and includes some of the functions of a Terminal Node
Controller. If you have one of those, say Y here.

To compile this driver as a module, choose M here: the module
will be called yam.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu
<nutentry>
	<term>IRDA</term>
  unknown prop 3!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the IrDA (TM) protocols.
The Infrared Data Associations (tm) specifies standards for wireless
infrared communication and is supported by most laptops and PDA's.

To use Linux support for the IrDA (tm) protocols, you will also need
some user-space utilities like irattach.  For more information, see
the file <file:Documentation/networking/irda.txt>.  You also want to
read the IR-HOWTO, available at
<http://www.tldp.org/docs.html#howto>.

If you want to exchange bits of data (vCal, vCard) with a PDA, you
will need to install some OBEX application, such as OpenObex :
<http://sourceforge.net/projects/openobex/>

To compile this support as a module, choose M here: the module will
be called irda.
	</para>

</nutentrybody>
</nutentry>

comment "IrDA protocols"
<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>


<nutentry>
	<term>IRLAN</term>
<nutsynopsis>
	"IrLAN protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the IrLAN protocol.
To compile it as a module, choose M here: the module will be called
irlan.  IrLAN emulates an Ethernet and makes it possible to put up
a wireless LAN using infrared beams.

The IrLAN protocol can be used to talk with infrared access points
like the HP NetbeamIR, or the ESI JetEye NET.  You can also connect
to another Linux machine running the IrLAN protocol for ad-hoc
networking!
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IRNET</term>
<nutsynopsis>
	"IrNET protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && PPP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the IrNET protocol.
To compile it as a module, choose M here: the module will be
called irnet.  IrNET is a PPP driver, so you will also need a
working PPP subsystem (driver, daemon and config)...

IrNET is an alternate way to transfer TCP/IP traffic over IrDA.  It
uses synchronous PPP over a set of point to point IrDA sockets.  You
can use it between Linux machine or with W2k.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IRCOMM</term>
<nutsynopsis>
	"IrCOMM protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the IrCOMM protocol.
To compile it as modules, choose M here: the modules will be
called ircomm and ircomm_tty.
IrCOMM implements serial port emulation, and makes it possible to
use all existing applications that understands TTY's with an
infrared link.  Thus you should be able to use application like PPP,
minicom and others.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IRDA_ULTRA</term>
<nutsynopsis>
	"Ultra (connectionless) protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support the connectionless Ultra IRDA protocol.
Ultra allows to exchange data over IrDA with really simple devices
(watch, beacon) without the overhead of the IrDA protocol (no handshaking,
no management frames, simple fixed header).
Ultra is available as a special socket : socket(AF_IRDA, SOCK_DGRAM, 1);
	</para>

</nutentrybody>
</nutentry>

comment "IrDA options"
<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>


<nutentry>
	<term>IRDA_CACHE_LAST_LSAP</term>
<nutsynopsis>
	"Cache last LSAP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want IrLMP to cache the last LSAP used.  This
makes sense since most frames will be sent/received on the same
connection.  Enabling this option will save a hash-lookup per frame.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IRDA_FAST_RR</term>
<nutsynopsis>
	"Fast RRs (low latency)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here is you want IrLAP to send fast RR (Receive Ready) frames
when acting as a primary station.
Disabling this option will make latency over IrDA very bad. Enabling
this option will make the IrDA stack send more packet than strictly
necessary, thus reduce your battery life (but not that much).

Fast RR will make IrLAP send out a RR frame immediately when
receiving a frame if its own transmit queue is currently empty. This
will give a lot of speed improvement when receiving much data since
the secondary station will not have to wait the max. turn around
time (usually 500ms) before it is allowed to transmit the next time.
If the transmit queue of the secondary is also empty, the primary will
start backing-off before sending another RR frame, waiting longer
each time until the back-off reaches the max. turn around time.
This back-off increase in controlled via
/proc/sys/net/irda/fast_poll_increase

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IRDA_DEBUG</term>
<nutsynopsis>
	"Debug information"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the IrDA subsystem to write debug information
to your syslog. You can change the debug level in
/proc/sys/net/irda/debug .
When this option is enabled, the IrDA also perform many extra internal
verifications which will usually prevent the kernel to crash in case of
bugs.

If unsure, say Y (since it makes it easier to find the bugs).
	</para>

</nutentrybody>
</nutentry>

menu "Infrared-port device drivers"
<para>
	depends on
	<literal>NET && IRDA!=n</literal>
	</para>



comment "SIR device drivers"
<para>
	depends on
	<literal>NET && IRDA!=n</literal>
	</para>


<nutentry>
	<term>IRTTY_SIR</term>
<nutsynopsis>
	"IrTTY (uses Linux serial driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the IrTTY line
discipline.  To compile it as a module, choose M here: the module
will be called irtty-sir. IrTTY makes it possible to use Linux's
own serial driver for all IrDA ports that are 16550 compatible.
Most IrDA chips are 16550 compatible so you should probably say Y
to this option.  Using IrTTY will however limit the speed of the
connection to 115200 bps (IrDA SIR mode).

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>

comment "Dongle support"
<para>
	depends on
	<literal>NET && IRDA!=n</literal>
	</para>


<nutentry>
	<term>DONGLE</term>
<nutsynopsis>
	"Serial dongle support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && IRTTY_SIR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have an infrared device that connects to your
computer's serial port. These devices are called dongles. Then say Y
or M to the driver for your particular dongle below.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about serial dongles.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ESI_DONGLE</term>
<nutsynopsis>
	"ESI JetEye PC dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Extended Systems
JetEye PC dongle.  To compile it as a module, choose M here. The ESI
dongle attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for ESI
dongles you will have to start irattach like this:
"irattach -d esi".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACTISYS_DONGLE</term>
<nutsynopsis>
	"ACTiSYS IR-220L and IR220L+ dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the ACTiSYS IR-220L and
IR220L+ dongles.  To compile it as a module, choose M here. The
ACTiSYS dongles attaches to the normal 9-pin serial port connector,
and can currently only be used by IrTTY.  To activate support for
ACTiSYS dongles you will have to start irattach like this:
"irattach -d actisys" or "irattach -d actisys+".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TEKRAM_DONGLE</term>
<nutsynopsis>
	"Tekram IrMate 210B dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Tekram IrMate 210B
dongle.  To compile it as a module, choose M here. The Tekram dongle
attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for Tekram
dongles you will have to start irattach like this:
"irattach -d tekram".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LITELINK_DONGLE</term>
<nutsynopsis>
	"Parallax LiteLink dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Parallax Litelink
dongle.  To compile it as a module, choose M here.  The Parallax
dongle attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for Parallax
dongles you will have to start irattach like this:
"irattach -d litelink".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MA600_DONGLE</term>
<nutsynopsis>
	"Mobile Action MA600 dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Mobile Action MA600
dongle.  To compile it as a module, choose M here. The MA600 dongle
attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  The driver should also support
the MA620 USB version of the dongle, if the integrated USB-to-RS232
converter is supported by usbserial. To activate support for
MA600 dongle you will have to start irattach like this:
"irattach -d ma600".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GIRBIL_DONGLE</term>
<nutsynopsis>
	"Greenwich GIrBIL dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Greenwich GIrBIL
dongle.  If you want to compile it as a module, choose M here.
The Greenwich dongle attaches to the normal 9-pin serial port
connector, and can currently only be used by IrTTY.  To activate
support for Greenwich dongles you will have to start irattach
like this: "irattach -d girbil".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCP2120_DONGLE</term>
<nutsynopsis>
	"Microchip MCP2120"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Microchip MCP2120
dongle.  If you want to compile it as a module, choose M here.
The MCP2120 dongle attaches to the normal 9-pin serial port
connector, and can currently only be used by IrTTY.  To activate
support for MCP2120 dongles you will have to start irattach
like this: "irattach -d mcp2120".

You must build this dongle yourself.  For more information see:
<http://www.eyetap.org/~tangf/irda_sir_linux.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OLD_BELKIN_DONGLE</term>
<nutsynopsis>
	"Old Belkin dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Adaptec Airport 1000
and 2000 dongles.  If you want to compile it as a module, choose
M here. Some information is contained in the comments
at the top of <file:drivers/net/irda/old_belkin.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACT200L_DONGLE</term>
<nutsynopsis>
	"ACTiSYS IR-200L dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE && IRDA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the ACTiSYS IR-200L
dongle. If you want to compile it as a module, choose M here.
The ACTiSYS IR-200L dongle attaches to the normal 9-pin serial
port connector, and can currently only be used by IrTTY.
To activate support for ACTiSYS IR-200L dongle you will have to
start irattach like this: "irattach -d act200l".
	</para>

</nutentrybody>
</nutentry>

comment "Old SIR device drivers"
<para>
	depends on
	<literal>NET && IRDA!=n</literal>
	</para>


<nutentry>
	<term>IRPORT_SIR</term>
<nutsynopsis>
	"IrPORT (IrDA serial driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the IrPORT IrDA device
driver.  To compile it as a module, choose M here: the module will be
called irport. IrPORT can be used instead of IrTTY and sometimes
this can be better.  One example is if your IrDA port does not
have echo-canceling, which will work OK with IrPORT since this
driver is working in half-duplex mode only.  You don't need to use
irattach with IrPORT, but you just insert it the same way as FIR
drivers (insmod irport io=0x3e8 irq=11).  Notice that IrPORT is a
SIR device driver which means that speed is limited to 115200 bps.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>

comment "Old Serial dongle support"
<para>
	depends on
	<literal>NET && IRDA!=n</literal>
	</para>


<nutentry>
	<term>DONGLE_OLD</term>
<nutsynopsis>
	"Old Serial dongle support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && (IRTTY_OLD || IRPORT_SIR) && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have an infrared device that connects to your
computer's serial port. These devices are called dongles. Then say Y
or M to the driver for your particular dongle below.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about serial dongles.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ESI_DONGLE_OLD</term>
<nutsynopsis>
	"ESI JetEye PC dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Extended Systems
JetEye PC dongle.  To compile it as a module, choose M here.  The ESI
dongle attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for ESI
dongles you will have to start irattach like this:
"irattach -d esi".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACTISYS_DONGLE_OLD</term>
<nutsynopsis>
	"ACTiSYS IR-220L and IR220L+ dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the ACTiSYS IR-220L and
IR220L+ dongles.  To compile it as a module, choose M here.  The
ACTiSYS dongles attaches to the normal 9-pin serial port connector,
and can currently only be used by IrTTY.  To activate support for
ACTiSYS dongles you will have to start irattach like this:
"irattach -d actisys" or "irattach -d actisys+".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TEKRAM_DONGLE_OLD</term>
<nutsynopsis>
	"Tekram IrMate 210B dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Tekram IrMate 210B
dongle.  To compile it as a module, choose M here.  The Tekram dongle
attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for Tekram
dongles you will have to start irattach like this:
"irattach -d tekram".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GIRBIL_DONGLE_OLD</term>
<nutsynopsis>
	"Greenwich GIrBIL dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Greenwich GIrBIL
dongle.  To compile it as a module, choose M here.  The Greenwich
dongle attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for Greenwich
dongles you will have to insert "irattach -d girbil" in the
/etc/irda/drivers script.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LITELINK_DONGLE_OLD</term>
<nutsynopsis>
	"Parallax LiteLink dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Parallax Litelink
dongle.  To compile it as a module, choose M here.  The Parallax
dongle attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for Parallax
dongles you will have to start irattach like this:
"irattach -d litelink".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCP2120_DONGLE_OLD</term>
<nutsynopsis>
	"Microchip MCP2120"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Microchip MCP2120
dongle.  To compile it as a module, choose M here.  The MCP2120 dongle
attaches to the normal 9-pin serial port connector, and can
currently only be used by IrTTY.  To activate support for MCP2120
dongles you will have to insert "irattach -d mcp2120" in the
/etc/irda/drivers script.

You must build this dongle yourself.  For more information see:
<http://www.eyetap.org/~tangf/irda_sir_linux.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OLD_BELKIN_DONGLE_OLD</term>
<nutsynopsis>
	"Old Belkin dongle"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Adaptec Airport 1000
and 2000 dongles.  To compile it as a module, choose M here: the module
will be called old_belkin.  Some information is contained in the
comments at the top of <file:drivers/net/irda/old_belkin.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACT200L_DONGLE_OLD</term>
<nutsynopsis>
	"ACTiSYS IR-200L dongle (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && EXPERIMENTAL && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the ACTiSYS IR-200L
dongle.  To compile it as a module, choose M here.  The ACTiSYS
IR-200L dongle attaches to the normal 9-pin serial port connector,
and can currently only be used by IrTTY. To activate support for
ACTiSYS IR-200L dongles you will have to start irattach like this:
"irattach -d act200l".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MA600_DONGLE_OLD</term>
<nutsynopsis>
	"Mobile Action MA600 dongle (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && EXPERIMENTAL && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Mobile Action MA600
dongle.  To compile it as a module, choose M here. The MA600 dongle
attaches to the normal 9-pin serial port connector, and can
currently only be tested on IrCOMM.  To activate support for MA600
dongles you will have to insert "irattach -d ma600" in the
/etc/irda/drivers script.  Note: irutils 0.9.15 requires no
modification. irutils 0.9.9 needs modification. For more
information, download the following tar gzip file.

There is a pre-compiled module on
<http://engsvr.ust.hk/~eetwl95/ma600.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EP7211_IR</term>
<nutsynopsis>
	"EP7211 I/R support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && DONGLE_OLD && ARCH_EP7211 && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

comment "FIR device drivers"
<para>
	depends on
	<literal>NET && IRDA!=n</literal>
	</para>


<nutentry>
	<term>USB_IRDA</term>
<nutsynopsis>
	"IrDA USB dongles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the USB IrDA FIR Dongle
device driver.  To compile it as a module, choose M here: the module
will be called irda-usb.  IrDA-USB support the various IrDA USB
dongles available and most of their pecularities.  Those dongles
plug in the USB port of your computer, are plug and play, and
support SIR and FIR (4Mbps) speeds.  On the other hand, those
dongles tend to be less efficient than a FIR chipset.

Please note that the driver is still experimental.  And of course,
you will need both USB and IrDA support in your kernel...
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SIGMATEL_FIR</term>
<nutsynopsis>
	"SigmaTel STIr4200 bridge (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && USB && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the SigmaTel STIr4200
USB IrDA FIR bridge device driver.  

USB bridge based on the SigmaTel STIr4200 don't conform to the
IrDA-USB device class specification, and therefore need their
own specific driver. Those dongles support SIR and FIR (4Mbps)
speeds. 

To compile it as a module, choose M here: the module will be called
stir4200.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NSC_FIR</term>
<nutsynopsis>
	"NSC PC87108/PC87338"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the NSC PC87108 and
PC87338 IrDA chipsets.  This driver supports SIR,
MIR and FIR (4Mbps) speeds.

To compile it as a module, choose M here: the module will be called
nsc-ircc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WINBOND_FIR</term>
<nutsynopsis>
	"Winbond W83977AF (IR)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build IrDA support for the Winbond
W83977AF super-io chipset.  This driver should be used for the IrDA
chipset in the Corel NetWinder.  The driver supports SIR, MIR and
FIR (4Mbps) speeds.

To compile it as a module, choose M here: the module will be called
w83977af_ir.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOSHIBA_FIR</term>
<nutsynopsis>
	"Toshiba Type-O IR Port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && PCI && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the Toshiba Type-O IR
and Donau oboe chipsets. These chipsets are used by the Toshiba
Libretto 100/110CT, Tecra 8100, Portege 7020 and many more laptops.
To compile it as a module, choose M here: the module will be called
donauboe.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AU1000_FIR</term>
<nutsynopsis>
	"Alchemy Au1000 SIR/FIR"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && MIPS_AU1000 && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMC_IRCC_FIR</term>
<nutsynopsis>
	"SMSC IrCC (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL && IRDA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the SMC Infrared
Communications Controller.  It is used in a wide variety of
laptops (Fujitsu, Sony, Compaq and some Toshiba).
To compile it as a module, choose M here: the module will be called
smsc-ircc2.o.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ALI_FIR</term>
<nutsynopsis>
	"ALi M5123 FIR (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL && IRDA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the ALi M5123 FIR
Controller.  The ALi M5123 FIR Controller is embedded in ALi M1543C,
M1535, M1535D, M1535+, M1535D Sourth Bridge.  This driver supports
SIR, MIR and FIR (4Mbps) speeds.

To compile it as a module, choose M here: the module will be called
ali-ircc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VLSI_FIR</term>
<nutsynopsis>
	"VLSI 82C147 SIR/MIR/FIR (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && EXPERIMENTAL && IRDA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the VLSI 82C147
PCI-IrDA Controller. This controller is used by the HP OmniBook 800
and 5500 notebooks. The driver provides support for SIR, MIR and
FIR (4Mbps) speeds.

To compile it as a module, choose M here: the module will be called
vlsi_ir.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SA1100_FIR</term>
<nutsynopsis>
	"SA1100 Internal IR"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ARCH_SA1100 && IRDA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIA_FIR</term>
<nutsynopsis>
	"VIA VT8231/VT1211 SIR/MIR/FIR"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IRDA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to build support for the VIA VT8231
and VIA VT1211 IrDA controllers, found on the motherboards using
those VIA chipsets. To use this controller, you will need
to plug a specific 5 pins FIR IrDA dongle in the specific
motherboard connector. The driver provides support for SIR, MIR
and FIR (4Mbps) speeds.

You will need to specify the 'dongle_id' module parameter to
indicate the FIR dongle attached to the controller.

To compile it as a module, choose M here: the module will be called
via-ircc.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu
<nutentry>
	<term>BT</term>
  unknown prop 3!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth is low-cost, low-power, short-range wireless technology.
It was designed as a replacement for cables and other short-range
technologies like IrDA.  Bluetooth operates in personal area range
that typically extends up to 10 meters.  More information about
Bluetooth can be found at <http://www.bluetooth.com/>.

Linux Bluetooth subsystem consist of several layers:
   Bluetooth Core (HCI device and connection manager, scheduler)
   HCI Device drivers (Interface to the hardware)
   SCO Module (SCO audio links)
   L2CAP Module (Logical Link Control and Adaptation Protocol)
   RFCOMM Module (RFCOMM Protocol)  
   BNEP Module (Bluetooth Network Encapsulation Protocol)
   CMTP Module (CAPI Message Transport Protocol)
   HIDP Module (Human Interface Device Protocol)

Say Y here to compile Bluetooth support into the kernel or say M to
compile it as module (bluetooth).

To use Linux Bluetooth subsystem, you will need several user-space
utilities like hciconfig and hcid.  These utilities and updates to
Bluetooth kernel modules are provided in the BlueZ packages.
For more information, see <http://www.bluez.org/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_L2CAP</term>
<nutsynopsis>
	"L2CAP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
L2CAP (Logical Link Control and Adaptation Protocol) provides
connection oriented and connection-less data transport.  L2CAP
support is required for most Bluetooth applications.

Say Y here to compile L2CAP support into the kernel or say M to
compile it as module (l2cap).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_SCO</term>
<nutsynopsis>
	"SCO links support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SCO link provides voice transport over Bluetooth.  SCO support is
required for voice applications like Headset and Audio.

Say Y here to compile SCO support into the kernel or say M to
compile it as module (sco).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_RFCOMM</term>
<nutsynopsis>
	"RFCOMM protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_L2CAP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
RFCOMM provides connection oriented stream transport.  RFCOMM
support is required for Dialup Networking, OBEX and other Bluetooth
applications.

Say Y here to compile RFCOMM support into the kernel or say M to
compile it as module (rfcomm).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_RFCOMM_TTY</term>
<nutsynopsis>
	"RFCOMM TTY support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT_RFCOMM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables TTY emulation support for RFCOMM channels.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_BNEP</term>
<nutsynopsis>
	"BNEP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_L2CAP</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
BNEP (Bluetooth Network Encapsulation Protocol) is Ethernet
emulation layer on top of Bluetooth.  BNEP is required for
Bluetooth PAN (Personal Area Network).

Say Y here to compile BNEP support into the kernel or say M to
compile it as module (bnep).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_BNEP_MC_FILTER</term>
<nutsynopsis>
	"Multicast filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT_BNEP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables the multicast filter support for BNEP.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_BNEP_PROTO_FILTER</term>
<nutsynopsis>
	"Protocol filter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT_BNEP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables the protocol filter support for BNEP.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_CMTP</term>
<nutsynopsis>
	"CMTP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_L2CAP && ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
CMTP (CAPI Message Transport Protocol) is a transport layer
for CAPI messages.  CMTP is required for the Bluetooth Common
ISDN Access Profile.

Say Y here to compile CMTP support into the kernel or say M to
compile it as module (cmtp).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HIDP</term>
<nutsynopsis>
	"HIDP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_L2CAP</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
HIDP (Human Interface Device Protocol) is a transport layer
for HID reports.  HIDP is required for the Bluetooth Human
Interface Device Profile.

Say Y here to compile HIDP support into the kernel or say M to
compile it as module (hidp).
	</para>

</nutentrybody>
</nutentry>

menu "Bluetooth device drivers"
<para>
	depends on
	<literal>NET && BT</literal>
	</para>


<nutentry>
	<term>BT_HCIUSB</term>
<nutsynopsis>
	"HCI USB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI USB driver.
This driver is required if you want to use Bluetooth devices with
USB interface.

Say Y here to compile support for Bluetooth USB devices into the
kernel or say M to compile it as module (hci_usb).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIUSB_SCO</term>
<nutsynopsis>
	"SCO (voice) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_HCIUSB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables the SCO support in the HCI USB driver. You need this
to transmit voice data with your Bluetooth USB device.

Say Y here to compile support for SCO over HCI USB.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIUART</term>
<nutsynopsis>
	"HCI UART driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI UART driver.
This driver is required if you want to use Bluetooth devices with
serial port interface. You will also need this driver if you have 
UART based Bluetooth PCMCIA and CF devices like Xircom Credit Card 
adapter and BrainBoxes Bluetooth PC Card.

Say Y here to compile support for Bluetooth UART devices into the
kernel or say M to compile it as module (hci_uart).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIUART_H4</term>
<nutsynopsis>
	"UART (H4) protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_HCIUART</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
UART (H4) is serial protocol for communication between Bluetooth 
device and host. This protocol is required for most Bluetooth devices 
with UART interface, including PCMCIA and CF cards. 

Say Y here to compile support for HCI UART (H4) protocol.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIUART_BCSP</term>
<nutsynopsis>
	"BCSP protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_HCIUART</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
BCSP (BlueCore Serial Protocol) is serial protocol for communication 
between Bluetooth device and host. This protocol is required for non
USB Bluetooth devices based on CSR BlueCore chip, including PCMCIA and
CF cards.

Say Y here to compile support for HCI BCSP protocol.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIUART_BCSP_TXCRC</term>
<nutsynopsis>
	"Transmit CRC with every BCSP packet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && BT_HCIUART_BCSP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, a 16-bit CRC checksum will be transmitted along with
every BCSP (BlueCore Serial Protocol) packet sent to the Bluetooth chip.
This increases reliability, but slightly reduces efficiency.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIBCM203X</term>
<nutsynopsis>
	"HCI BCM203x USB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI BCM203x USB driver.
This driver provides the firmware loading mechanism for the Broadcom
Blutonium based devices.

Say Y here to compile support for HCI BCM203x devices into the
kernel or say M to compile it as module (bcm203x).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIBPA10X</term>
<nutsynopsis>
	"HCI BPA10x USB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI BPA10x USB driver.
This driver provides support for the Digianswer BPA 100/105 Bluetooth
sniffer devices.

Say Y here to compile support for HCI BPA10x devices into the
kernel or say M to compile it as module (bpa10x).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIBFUSB</term>
<nutsynopsis>
	"HCI BlueFRITZ! USB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI BlueFRITZ! USB driver.
This driver provides support for Bluetooth USB devices with AVM
interface:
   AVM BlueFRITZ! USB

Say Y here to compile support for HCI BFUSB devices into the
kernel or say M to compile it as module (bfusb).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIDTL1</term>
<nutsynopsis>
	"HCI DTL1 (PC Card) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI DTL1 (PC Card) driver.
This driver provides support for Bluetooth PCMCIA devices with
Nokia DTL1 interface:
   Nokia Bluetooth Card
   Socket Bluetooth CF Card

Say Y here to compile support for HCI DTL1 devices into the
kernel or say M to compile it as module (dtl1_cs).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIBT3C</term>
<nutsynopsis>
	"HCI BT3C (PC Card) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && PCMCIA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI BT3C (PC Card) driver.
This driver provides support for Bluetooth PCMCIA devices with
3Com BT3C interface:
   3Com Bluetooth Card (3CRWB6096)
   HP Bluetooth Card

Say Y here to compile support for HCI BT3C devices into the
kernel or say M to compile it as module (bt3c_cs).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIBLUECARD</term>
<nutsynopsis>
	"HCI BlueCard (PC Card) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI BlueCard (PC Card) driver.
This driver provides support for Bluetooth PCMCIA devices with
Anycom BlueCard interface:
   Anycom Bluetooth PC Card
   Anycom Bluetooth CF Card

Say Y here to compile support for HCI BlueCard devices into the
kernel or say M to compile it as module (bluecard_cs).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIBTUART</term>
<nutsynopsis>
	"HCI UART (PC Card) device driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth HCI UART (PC Card) driver.
This driver provides support for Bluetooth PCMCIA devices with
an UART interface:
   Xircom CreditCard Bluetooth Adapter
   Xircom RealPort2 Bluetooth Adapter
   Sphinx PICO Card
   H-Soft blue+Card
   Cyber-blue Compact Flash Card

Say Y here to compile support for HCI UART devices into the
kernel or say M to compile it as module (btuart_cs).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BT_HCIVHCI</term>
<nutsynopsis>
	"HCI VHCI (Virtual HCI device) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && BT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Bluetooth Virtual HCI device driver.
This driver is required if you want to use HCI Emulation software.

Say Y here to compile support for virtual HCI devices into the
kernel or say M to compile it as module (hci_vhci).
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu
<nutentry>
	<term>IEEE80211</term>
<nutsynopsis>
	"Generic IEEE 802.11 Networking Stack"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the hardware independent IEEE 802.11
networking stack.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE80211_DEBUG</term>
<nutsynopsis>
	"Enable full debugging output"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IEEE80211</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will enable debug tracing output for the
ieee80211 network stack.

This will result in the kernel module being ~70k larger.  You
can control which debug output is sent to the kernel log by
setting the value in

/proc/net/ieee80211/debug_level

For example:

% echo 0x00000FFO > /proc/net/ieee80211/debug_level

For a list of values you can assign to debug_level, you
can look at the bit mask values in <net/ieee80211.h>

If you are not trying to debug or develop the ieee80211
subsystem, you most likely want to say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE80211_CRYPT_WEP</term>
<nutsynopsis>
	"IEEE 802.11 WEP encryption (802.1x)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IEEE80211</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include software based cipher suites in support of IEEE
802.11's WEP.  This is needed for WEP as well as 802.1x.

This can be compiled as a modules and it will be called
"ieee80211_crypt_wep".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE80211_CRYPT_CCMP</term>
<nutsynopsis>
	"IEEE 802.11i CCMP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IEEE80211</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include software based cipher suites in support of IEEE 802.11i
(aka TGi, WPA, WPA2, WPA-PSK, etc.) for use with CCMP enabled
networks.

This can be compiled as a modules and it will be called
"ieee80211_crypt_ccmp".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE80211_CRYPT_TKIP</term>
<nutsynopsis>
	"IEEE 802.11i TKIP encryption"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && IEEE80211</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include software based cipher suites in support of IEEE 802.11i
(aka TGi, WPA, WPA2, WPA-PSK, etc.) for use with TKIP enabled
networks.

This can be compiled as a modules and it will be called
"ieee80211_crypt_tkip".
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Device Drivers"


menu "Generic Driver Options"

<nutentry>
	<term>STANDALONE</term>
<nutsynopsis>
	"Select only drivers that don't need compile-time external firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this option if you don't have magic firmware for drivers that
need it.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PREVENT_FIRMWARE_BUILD</term>
<nutsynopsis>
	"Prevent firmware from being built"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say yes to avoid building firmware. Firmware is usually shipped
with the driver, and only when updating the firmware a rebuild
should be made.
If unsure say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FW_LOADER</term>
<nutsynopsis>
	"Hotplug firmware loading support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option is provided for the case where no in-kernel-tree modules
require hotplug firmware loading support, but a module built outside
the kernel tree does.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_DRIVER</term>
<nutsynopsis>
	"Driver Core verbose debug messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the Driver core to produce a bunch of
debug messages to the system log. Select this if you are having a
problem with the driver core and want to see more of what is
going on.

If you are unsure about this, say N here.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Connector - unified userspace <-> kernelspace linker"

<nutentry>
	<term>CONNECTOR</term>
<nutsynopsis>
	"Connector - unified userspace <-> kernelspace linker"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is unified userspace <-> kernelspace connector working on top
of the netlink socket protocol.

Connector support can also be built as a module.  If so, the module
will be called cn.ko.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Memory Technology Devices (MTD)"

<nutentry>
	<term>MTD</term>
<nutsynopsis>
	"Memory Technology Device (MTD) support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Memory Technology Devices are flash, RAM and similar chips, often
used for solid state file systems on embedded devices. This option
will provide the generic support for MTD drivers to register
themselves with the kernel and for potential users of MTD devices
to enumerate the devices which are present and obtain a handle on
them. It will also allow you to select individual drivers for 
particular hardware and users of MTD devices. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DEBUG</term>
<nutsynopsis>
	"Debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This turns on low-level debugging for the entire MTD sub-system.
Normally, you should say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DEBUG_VERBOSE</term>
<nutsynopsis>
	"Debugging verbosity (0 = quiet, 3 = noisy)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_DEBUG</literal>
	</para>

	<para>
	default value
	<literal>0 if MTD_DEBUG</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Determines the verbosity level of the MTD debugging messages.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CONCAT</term>
<nutsynopsis>
	"MTD concatenating support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for concatenating several MTD devices into a single
(virtual) one. This allows you to have -for example- a JFFS(2)
file system spanning multiple physical flash chips. If unsure,
say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PARTITIONS</term>
<nutsynopsis>
	"MTD partitioning support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a device which needs to divide its flash chip(s) up
into multiple 'partitions', each of which appears to the user as
a separate MTD device, you require this option to be enabled. If
unsure, say 'Y'.

Note, however, that you don't need this option for the DiskOnChip
devices. Partitioning on NFTL 'devices' is a different - that's the
'normal' form of partitioning used on a block device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_REDBOOT_PARTS</term>
<nutsynopsis>
	"RedBoot partition table parsing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
RedBoot is a ROM monitor and bootloader which deals with multiple
'images' in flash devices by putting a table one of the erase
blocks on the device, similar to a partition table, which gives
the offsets, lengths and names of all the images stored in the
flash.

If you need code which can detect and parse this table, and register
MTD 'partitions' corresponding to each image in the table, enable
this option. 

You will still need the parsing functions to be called by the driver
for your particular device. It won't happen automatically. The 
SA1100 map driver (CONFIG_MTD_SA1100) has an option for this, for 
example.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_REDBOOT_DIRECTORY_BLOCK</term>
<nutsynopsis>
	"Location of RedBoot partition table"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_REDBOOT_PARTS</literal>
	</para>

	<para>
	default value
	<literal>-1 if MTD_REDBOOT_PARTS</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option is the Linux counterpart to the
CYGNUM_REDBOOT_FIS_DIRECTORY_BLOCK RedBoot compile time
option.

The option specifies which Flash sectors holds the RedBoot
partition table.  A zero or positive value gives an absolete
erase block number. A negative value specifies a number of
sectors before the end of the device.

For example "2" means block number 2, "-1" means the last
block and "-2" means the penultimate block.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_REDBOOT_PARTS_UNALLOCATED</term>
<nutsynopsis>
	"  Include unallocated flash regions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_REDBOOT_PARTS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you need to register each unallocated flash region as a MTD
'partition', enable this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_REDBOOT_PARTS_READONLY</term>
<nutsynopsis>
	"  Force read-only for RedBoot system images"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_REDBOOT_PARTS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you need to force read-only for 'RedBoot', 'RedBoot Config' and
'FIS directory' images, enable this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CMDLINE_PARTS</term>
<nutsynopsis>
	"Command line partition table parsing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allow generic configuration of the MTD paritition tables via the kernel
command line. Multiple flash resources are supported for hardware where
different kinds of flash memory are available. 

You will still need the parsing functions to be called by the driver
for your particular device. It won't happen automatically. The 
SA1100 map driver (CONFIG_MTD_SA1100) has an option for this, for 
example.

The format for the command line is as follows:

mtdparts=<mtddef>[;<mtddef]
<mtddef>  := <mtd-id>:<partdef>[,<partdef>]
<partdef> := <size>[@offset][<name>][ro]
<mtd-id>  := unique id used in mapping driver/device
<size>    := standard linux memsize OR "-" to denote all 
remaining space
<name>    := (NAME)

Due to the way Linux handles the command line, no spaces are 
allowed in the partition definition, including mtd id's and partition 
names.

Examples:

1 flash resource (mtd-id "sa1100"), with 1 single writable partition:
mtdparts=sa1100:-

Same flash, but 2 named partitions, the first one being read-only:
mtdparts=sa1100:256k(ARMboot)ro,-(root)

If unsure, say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_AFS_PARTS</term>
<nutsynopsis>
	"ARM Firmware Suite partition parsing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The ARM Firmware Suite allows the user to divide flash devices into
multiple 'images'. Each such image has a header containing its name
and offset/size etc.

If you need code which can detect and parse these tables, and
register MTD 'partitions' corresponding to each image detected,
enable this option.

You will still need the parsing functions to be called by the driver
for your particular device. It won't happen automatically. The
'armflash' map driver (CONFIG_MTD_ARMFLASH) does this, for example.
	</para>

</nutentrybody>
</nutentry>

comment "User Modules And Translation Layers"
<para>
	depends on
	<literal>MTD</literal>
	</para>


<nutentry>
	<term>MTD_CHAR</term>
<nutsynopsis>
	"Direct char device access to MTD devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a character device for each MTD device present in
the system, allowing the user to read and write directly to the
memory chips, and also use ioctl() to obtain information about
the device, or to erase parts of it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BLOCK</term>
<nutsynopsis>
	"Caching block device access to MTD devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Although most flash chips have an erase size too large to be useful
as block devices, it is possible to use MTD devices which are based
on RAM chips in this manner. This block device is a user of MTD
devices performing that function.

At the moment, it is also required for the Journalling Flash File
System(s) to obtain a handle on the MTD device when it's mounted
(although JFFS and JFFS2 don't actually use any of the functionality
of the mtdblock device).

Later, it may be extended to perform read/erase/modify/write cycles
on flash chips to emulate a smaller block size. Needless to say,
this is very unsafe, but could be useful for file systems which are
almost never written to.

You do not need this option for use with the DiskOnChip devices. For
those, enable NFTL support (CONFIG_NFTL) instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BLOCK_RO</term>
<nutsynopsis>
	"Readonly block device access to MTD devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD_BLOCK!=y && MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to mount read-only file systems (such as cramfs)
from an MTD device, without the overhead (and danger) of the caching
driver.

You do not need this option for use with the DiskOnChip devices. For
those, enable NFTL support (CONFIG_NFTL) instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FTL</term>
<nutsynopsis>
	"FTL (Flash Translation Layer) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides support for the original Flash Translation Layer which
is part of the PCMCIA specification. It uses a kind of pseudo-
file system on a flash device to emulate a block device with
512-byte sectors, on top of which you put a 'normal' file system.

You may find that the algorithms used in this code are patented
unless you live in the Free World where software patents aren't
legal - in the USA you are only permitted to use this on PCMCIA
hardware, although under the terms of the GPL you're obviously
permitted to copy, modify and distribute the code as you wish. Just
not use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFTL</term>
<nutsynopsis>
	"NFTL (NAND Flash Translation Layer) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides support for the NAND Flash Translation Layer which is
used on M-Systems' DiskOnChip devices. It uses a kind of pseudo-
file system on a flash device to emulate a block device with
512-byte sectors, on top of which you put a 'normal' file system.

You may find that the algorithms used in this code are patented
unless you live in the Free World where software patents aren't
legal - in the USA you are only permitted to use this on DiskOnChip
hardware, although under the terms of the GPL you're obviously
permitted to copy, modify and distribute the code as you wish. Just
not use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFTL_RW</term>
<nutsynopsis>
	"Write support for NFTL"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NFTL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for writing to the NAND Flash Translation Layer, as used
on the DiskOnChip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFTL</term>
<nutsynopsis>
	"INFTL (Inverse NAND Flash Translation Layer) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides support for the Inverse NAND Flash Translation 
Layer which is used on M-Systems' newer DiskOnChip devices. It
uses a kind of pseudo-file system on a flash device to emulate
a block device with 512-byte sectors, on top of which you put
a 'normal' file system.

You may find that the algorithms used in this code are patented
unless you live in the Free World where software patents aren't
legal - in the USA you are only permitted to use this on DiskOnChip
hardware, although under the terms of the GPL you're obviously
permitted to copy, modify and distribute the code as you wish. Just
not use it.
	</para>

</nutentrybody>
</nutentry>

menu "RAM/ROM/Flash chip drivers"
<para>
	depends on
	<literal>MTD!=n</literal>
	</para>


<nutentry>
	<term>MTD_CFI</term>
<nutsynopsis>
	"Detect flash chips by Common Flash Interface (CFI) probe"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Common Flash Interface specification was developed by Intel,
AMD and other flash manufactures that provides a universal method
for probing the capabilities of flash devices. If you wish to
support any device that is CFI-compliant, you need to enable this
option. Visit <http://www.amd.com/products/nvd/overview/cfi.html>
for more information on CFI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_JEDECPROBE</term>
<nutsynopsis>
	"Detect non-CFI AMD/JEDEC-compatible flash chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables JEDEC-style probing of flash chips which are not
compatible with the Common Flash Interface, but will use the common
CFI-targetted flash drivers for any chips which are identified which
are in fact compatible in all but the probe method. This actually
covers most AMD/Fujitsu-compatible chips, and will shortly cover also
non-CFI Intel chips (that code is in MTD CVS and should shortly be sent
for inclusion in Linus' tree)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_GEN_PROBE</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_ADV_OPTIONS</term>
<nutsynopsis>
	"Flash chip driver advanced configuration options"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_GEN_PROBE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you need to specify a specific endianness for access to flash
chips, or if you wish to reduce the size of the kernel by including
support for only specific arrangements of flash chips, say 'Y'. This
option does not directly affect the code, but will enable other 
configuration options which allow you to do so.

If unsure, say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Flash cmd/query data swapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_ADV_OPTIONS</literal>
	</para>

	<para>
	default value
	<literal>MTD_CFI_NOSWAP if MTD && MTD_CFI_ADV_OPTIONS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_NOSWAP</term>
<nutsynopsis>
	"NO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option defines the way in which the CPU attempts to arrange
data bits when writing the 'magic' commands to the chips. Saying
'NO', which is the default when CONFIG_MTD_CFI_ADV_OPTIONS isn't
enabled, means that the CPU will not do any swapping; the chips
are expected to be wired to the CPU in 'host-endian' form. 
Specific arrangements are possible with the BIG_ENDIAN_BYTE and
LITTLE_ENDIAN_BYTE, if the bytes are reversed.

If you have a LART, on which the data (and address) lines were
connected in a fashion which ensured that the nets were as short
as possible, resulting in a bit-shuffling which seems utterly
random to the untrained eye, you need the LART_ENDIAN_BYTE option.

Yes, there really exists something sicker than PDP-endian :)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_BE_BYTE_SWAP</term>
<nutsynopsis>
	"BIG_ENDIAN_BYTE"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_LE_BYTE_SWAP</term>
<nutsynopsis>
	"LITTLE_ENDIAN_BYTE"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_GEOMETRY</term>
<nutsynopsis>
	"Specific CFI Flash geometry selection"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_ADV_OPTIONS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option does not affect the code directly, but will enable 
some other configuration options which would allow you to reduce
the size of the kernel by including support for only certain 
arrangements of CFI chips. If unsure, say 'N' and all options 
which are supported by the current code will be enabled.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAP_BANK_WIDTH_1</term>
<nutsynopsis>
	"Support  8-bit buswidth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>y if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to support CFI devices on a physical bus which is
8 bits wide, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAP_BANK_WIDTH_2</term>
<nutsynopsis>
	"Support 16-bit buswidth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>y if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to support CFI devices on a physical bus which is
16 bits wide, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAP_BANK_WIDTH_4</term>
<nutsynopsis>
	"Support 32-bit buswidth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>y if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to support CFI devices on a physical bus which is
32 bits wide, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAP_BANK_WIDTH_8</term>
<nutsynopsis>
	"Support 64-bit buswidth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>n if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to support CFI devices on a physical bus which is
64 bits wide, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAP_BANK_WIDTH_16</term>
<nutsynopsis>
	"Support 128-bit buswidth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>n if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to support CFI devices on a physical bus which is
128 bits wide, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAP_BANK_WIDTH_32</term>
<nutsynopsis>
	"Support 256-bit buswidth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>n if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to support CFI devices on a physical bus which is
256 bits wide, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_I1</term>
<nutsynopsis>
	"Support 1-chip flash interleave"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>y if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your flash chips are not interleaved - i.e. you only have one
flash chip addressed by each bus cycle, then say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_I2</term>
<nutsynopsis>
	"Support 2-chip flash interleave"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>y if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your flash chips are interleaved in pairs - i.e. you have two
flash chips addressed by each bus cycle, then say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_I4</term>
<nutsynopsis>
	"Support 4-chip flash interleave"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>n if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your flash chips are interleaved in fours - i.e. you have four
flash chips addressed by each bus cycle, then say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_I8</term>
<nutsynopsis>
	"Support 8-chip flash interleave"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_GEOMETRY</literal>
	</para>

	<para>
	default value
	<literal>n if MTD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your flash chips are interleaved in eights - i.e. you have eight
flash chips addressed by each bus cycle, then say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_OTP</term>
<nutsynopsis>
	"Protection Registers aka one-time programmable (OTP) bits"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_ADV_OPTIONS</literal>
	</para>

	<para>
	default value
	<literal>n if MTD && MTD_CFI_ADV_OPTIONS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for reading, writing and locking so called
"Protection Registers" present on some flash chips.
A subset of them are pre-programmed at the factory with a
unique set of values. The rest is user-programmable.

The user-programmable Protection Registers contain one-time
programmable (OTP) bits; when programmed, register bits cannot be
erased. Each Protection Register can be accessed multiple times to
program individual bits, as long as the register remains unlocked.

Each Protection Register has an associated Lock Register bit. When a
Lock Register bit is programmed, the associated Protection Register
can only be read; it can no longer be programmed. Additionally,
because the Lock Register bits themselves are OTP, when programmed,
Lock Register bits cannot be erased. Therefore, when a Protection
Register is locked, it cannot be unlocked.

This feature should therefore be used with extreme care. Any mistake
in the programming of OTP bits will waste them.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_INTELEXT</term>
<nutsynopsis>
	"Support for Intel/Sharp flash chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_GEN_PROBE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Common Flash Interface defines a number of different command
sets which a CFI-compliant chip may claim to implement. This code
provides support for one of those command sets, used on Intel
StrataFlash and other parts.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_AMDSTD</term>
<nutsynopsis>
	"Support for AMD/Fujitsu flash chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_GEN_PROBE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Common Flash Interface defines a number of different command
sets which a CFI-compliant chip may claim to implement. This code
provides support for one of those command sets, used on chips 
including the AMD Am29LV320.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_AMDSTD_RETRY</term>
<nutsynopsis>
	"Retry failed commands (erase/program)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_AMDSTD</literal>
	</para>

	<para>
	default value
	<literal>0 if MTD && MTD_CFI_AMDSTD</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Some chips, when attached to a shared bus, don't properly filter
bus traffic that is destined to other devices.  This broken
behavior causes erase and program sequences to be aborted when
the sequences are mixed with traffic for other devices.

SST49LF040 (and related) chips are know to be broken.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_AMDSTD_RETRY_MAX</term>
<nutsynopsis>
	"Max retries of failed commands (erase/program)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CFI_AMDSTD_RETRY</literal>
	</para>

	<para>
	default value
	<literal>0 if MTD && MTD_CFI_AMDSTD_RETRY</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
If you have an SST49LF040 (or related chip) then this value should
be set to at least 1.  This can also be adjusted at driver load
time with the retry_cmd_max module parameter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_STAA</term>
<nutsynopsis>
	"Support for ST (Advanced Architecture) flash chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_GEN_PROBE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Common Flash Interface defines a number of different command
sets which a CFI-compliant chip may claim to implement. This code
provides support for one of those command sets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_UTIL</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_RAM</term>
<nutsynopsis>
	"Support for RAM chips in bus mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables basic support for RAM chips accessed through 
a bus mapping driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_ROM</term>
<nutsynopsis>
	"Support for ROM chips in bus mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables basic support for ROM chips accessed through 
a bus mapping driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_ABSENT</term>
<nutsynopsis>
	"Support for absent chips in bus mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for a dummy probing driver used to
allocated placeholder MTD devices on systems that have socketed
or removable media.  Use of this driver as a fallback chip probe
preserves the expected registration order of MTD device nodes on
the system regardless of media presence.  Device nodes created
with this driver will return -ENODEV upon access.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_OBSOLETE_CHIPS</term>
<nutsynopsis>
	"Older (theoretically obsoleted now) drivers for non-CFI chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option does not enable any code directly, but will allow you to
select some other chip drivers which are now considered obsolete,
because the generic CONFIG_JEDECPROBE code above should now detect
the chips which are supported by these drivers, and allow the generic
CFI-compatible drivers to drive the chips. Say 'N' here unless you have
already tried the CONFIG_JEDECPROBE method and reported its failure
to the MTD mailing list at <linux-mtd@lists.infradead.org>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_AMDSTD</term>
<nutsynopsis>
	"AMD compatible flash chip support (non-CFI)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_OBSOLETE_CHIPS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for flash chips using AMD-compatible
commands, including some which are not CFI-compatible and hence 
cannot be used with the CONFIG_MTD_CFI_AMDSTD option.

It also works on AMD compatible chips that do conform to CFI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SHARP</term>
<nutsynopsis>
	"pre-CFI Sharp chip support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_OBSOLETE_CHIPS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for flash chips using Sharp-compatible
commands, including some which are not CFI-compatible and hence 
cannot be used with the CONFIG_MTD_CFI_INTELxxx options.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_JEDEC</term>
<nutsynopsis>
	"JEDEC device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_OBSOLETE_CHIPS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable older older JEDEC flash interface devices for self
programming flash.  It is commonly used in older AMD chips.  It is
only called JEDEC because the JEDEC association
<http://www.jedec.org/> distributes the identification codes for the
chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_XIP</term>
<nutsynopsis>
	"XIP aware MTD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARM</literal>
	</para>

	<para>
	default value
	<literal>y if MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARM && XIP_KERNEL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This allows MTD support to work with flash memory which is also
used for XIP purposes.  If you're not sure what this is all about
then say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Mapping drivers for chip access"
<para>
	depends on
	<literal>MTD!=n</literal>
	</para>


<nutentry>
	<term>MTD_COMPLEX_MAPPINGS</term>
<nutsynopsis>
	"Support non-linear mappings of flash chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This causes the chip drivers to allow for complicated
paged mappings of flash chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PHYSMAP</term>
<nutsynopsis>
	"CFI Flash device in physical memory map"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a 'mapping' driver which allows the CFI probe and
command set driver code to communicate with flash chips which
are mapped physically into the CPU's memory. You will need to
configure the physical address and size of the flash chips on
your particular board as well as the bus width, either statically
with config options or at run-time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PHYSMAP_START</term>
<nutsynopsis>
	"Physical start address of flash mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_PHYSMAP</literal>
	</para>

	<para>
	default value
	<literal>0x8000000 if MTD && MTD_PHYSMAP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
This is the physical memory location at which the flash chips
are mapped on your particular target board. Refer to the
memory map which should hopefully be in the documentation for
your board.
Ignore this option if you use run-time physmap configuration
(i.e., run-time calling physmap_configure()).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PHYSMAP_LEN</term>
<nutsynopsis>
	"Physical length of flash mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_PHYSMAP</literal>
	</para>

	<para>
	default value
	<literal>0x4000000 if MTD && MTD_PHYSMAP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
This is the total length of the mapping of the flash chips on
your particular board. If there is space, or aliases, in the
physical memory map between the chips, this could be larger
than the total amount of flash present. Refer to the memory
map which should hopefully be in the documentation for your
board.
Ignore this option if you use run-time physmap configuration
(i.e., run-time calling physmap_configure()).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PHYSMAP_BANKWIDTH</term>
<nutsynopsis>
	"Bank width in octets"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_PHYSMAP</literal>
	</para>

	<para>
	default value
	<literal>2 if MTD && MTD_PHYSMAP</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the total width of the data bus of the flash devices
in octets. For example, if you have a data bus width of 32
bits, you would set the bus width octect value to 4. This is
used internally by the CFI drivers.
Ignore this option if you use run-time physmap configuration
(i.e., run-time calling physmap_configure()).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SUN_UFLASH</term>
<nutsynopsis>
	"Sun Microsystems userflash support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && (SPARC32 || SPARC64) && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a 'mapping' driver which supports the way in 
which user-programmable flash chips are connected on various 
Sun Microsystems boardsets.  This driver will require CFI support 
in the kernel, so if you did not enable CFI previously, do that now.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PNC2000</term>
<nutsynopsis>
	"CFI Flash device mapped on Photron PNC-2000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_CFI && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
PNC-2000 is the name of Network Camera product from PHOTRON
Ltd. in Japan. It uses CFI-compliant flash.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SC520CDP</term>
<nutsynopsis>
	"CFI Flash device mapped on AMD SC520 CDP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The SC520 CDP board has two banks of CFI-compliant chips and one
Dual-in-line JEDEC chip. This 'mapping' driver supports that
arrangement, implementing three MTD devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NETSC520</term>
<nutsynopsis>
	"CFI Flash device mapped on AMD NetSc520"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_CFI && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the AMD NetSc520
demonstration board. If you have one of these boards and would like 
to use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_TS5500</term>
<nutsynopsis>
	"JEDEC Flash device mapped on Technologic Systems TS-5500"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDECPROBE && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a driver for the on-board flash of the Technologic
System's TS-5500 board. The flash is split into 3 partitions
which are accessed as separate MTD devices.

mtd0 and mtd2 are the two BIOS drives. Unfortunately the BIOS
uses a proprietary flash translation layer from General Software,
which is not supported (the drives cannot be mounted). You can
create your own file system (jffs for example), but the BIOS
won't be able to boot from it.

mtd1 allows you to reprogram your BIOS. BE VERY CAREFUL.

Note that jumper 3 ("Write Enable Drive A") must be set
otherwise detection won't succeeed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SBC_GXX</term>
<nutsynopsis>
	"CFI Flash device mapped on Arcom SBC-GXx boards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a driver for the on-board flash of Arcom Control
Systems' SBC-GXn family of boards, formerly known as SBC-MediaGX.
By default the flash is split into 3 partitions which are accessed
as separate MTD devices. This board utilizes Intel StrataFlash.
More info at
<http://www.arcomcontrols.com/products/icp/pc104/processors/SBC_GX1.htm>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_LUBBOCK</term>
<nutsynopsis>
	"CFI Flash device mapped on Intel Lubbock XScale eval board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARCH_LUBBOCK && MTD_CFI_INTELEXT && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a driver for the on-board flash of the Intel
'Lubbock' XScale evaluation board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MAINSTONE</term>
<nutsynopsis>
	"CFI Flash device mapped on Intel Mainstone XScale eval board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MACH_MAINSTONE && MTD_CFI_INTELEXT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a driver for the on-board flash of the Intel
'Mainstone PXA27x evaluation board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_OCTAGON</term>
<nutsynopsis>
	"JEDEC Flash device mapped on Octagon 5066 SBC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a 'mapping' driver which supports the way in which
the flash chips are connected in the Octagon-5066 Single Board
Computer. More information on the board is available at
<http://www.octagonsystems.com/CPUpages/5066.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_VMAX</term>
<nutsynopsis>
	"JEDEC Flash device mapped on Tempustech VMAX SBC301"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a 'mapping' driver which supports the way in which
the flash chips are connected in the Tempustech VMAX SBC301 Single
Board Computer. More information on the board is available at
<http://www.tempustech.com/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SCx200_DOCFLASH</term>
<nutsynopsis>
	"Flash device mapped with DOCCS on NatSemi SCx200"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && SCx200 && MTD_CFI && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for a flash chip mapped using the DOCCS signal on a
National Semiconductor SCx200 processor.

If you don't know what to do here, say N.

If compiled as a module, it will be called scx200_docflash.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_AMD76XROM</term>
<nutsynopsis>
	"BIOS flash chip on AMD76x southbridge"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDECPROBE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for treating the BIOS flash chip on AMD76x motherboards
as an MTD device - with this you can reprogram your BIOS.

BE VERY CAREFUL.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_ICHXROM</term>
<nutsynopsis>
	"BIOS flash chip on Intel Controller Hub 2/3/4/5"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDECPROBE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for treating the BIOS flash chip on ICHX motherboards
as an MTD device - with this you can reprogram your BIOS.

BE VERY CAREFUL.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SCB2_FLASH</term>
<nutsynopsis>
	"BIOS flash chip on Intel SCB2 boards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDECPROBE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for treating the BIOS flash chip on Intel SCB2 boards
as an MTD device - with this you can reprogram your BIOS.

BE VERY CAREFUL.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_TSUNAMI</term>
<nutsynopsis>
	"Flash chips on Tsunami TIG bus"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the flash chip on Tsunami TIG bus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_LASAT</term>
<nutsynopsis>
	"Flash chips on LASAT board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && LASAT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the flash chips on the Lasat 100 and 200 boards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NETtel</term>
<nutsynopsis>
	"CFI flash device on SnapGear/SecureEdge"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_PARTITIONS && MTD_JEDECPROBE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for flash chips on NETtel/SecureEdge/SnapGear boards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_ALCHEMY</term>
<nutsynopsis>
	"  AMD Alchemy Pb1xxx/Db1xxx/RDK MTD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MIPS && SOC_AU1X00</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Flash memory access on AMD Alchemy Pb/Db/RDK Reference Boards
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DILNETPC</term>
<nutsynopsis>
	"CFI Flash device mapped on DIL/Net PC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
MTD map driver for SSV DIL/Net PC Boards "DNP" and "ADNP".
For details, see <http://www.ssv-embedded.de/ssv/pc104/p169.htm>
and <http://www.ssv-embedded.de/ssv/pc104/p170.htm>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DILNETPC_BOOTSIZE</term>
<nutsynopsis>
	"Size of DIL/Net PC flash boot partition"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_DILNETPC</literal>
	</para>

	<para>
	default value
	<literal>0x80000 if MTD && MTD_DILNETPC</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
The amount of space taken up by the kernel or Etherboot
on the DIL/Net PC flash chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_L440GX</term>
<nutsynopsis>
	"BIOS flash chip on Intel L440GX boards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && X86 && MTD_JEDECPROBE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for treating the BIOS flash chip on Intel L440GX motherboards
as an MTD device - with this you can reprogram your BIOS.

BE VERY CAREFUL.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SBC8240</term>
<nutsynopsis>
	"Flash device on SBC8240"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && PPC32 && MTD_JEDECPROBE && 6xx && 8260</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Flash access on the SBC8240 board from Wind River.  See
<http://www.windriver.com/products/sbc8240/>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_TQM8XXL</term>
<nutsynopsis>
	"CFI Flash device mapped on TQM8XXL"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 8xx && TQM8xxL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The TQM8xxL PowerPC board has up to two banks of CFI-compliant
chips, currently uses AMD one. This 'mapping' driver supports
that arrangement, allowing the CFI probe and command set driver
code to communicate with the chips on the TQM8xxL board. More at
<http://www.denx.de/embedded-ppc-en.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_RPXLITE</term>
<nutsynopsis>
	"CFI Flash device mapped on RPX Lite or CLLF"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 8xx && (RPXCLASSIC || RPXLITE)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The RPXLite PowerPC board has CFI-compliant chips mapped in
a strange sparse mapping. This 'mapping' driver supports that
arrangement, allowing the CFI probe and command set driver code
to communicate with the chips on the RPXLite board. More at
<http://www.embeddedplanet.com/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MBX860</term>
<nutsynopsis>
	"System flash on MBX860 board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 8xx && MBX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the Motorola
MBX860 board. If you have one of these boards and would like
to use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DBOX2</term>
<nutsynopsis>
	"CFI Flash device mapped on D-Box2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && PPC32 && 8xx && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the Nokia/Sagem
D-Box 2 board. If you have one of these boards and would like to use
the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CFI_FLAGADM</term>
<nutsynopsis>
	"CFI Flash device mapping on FlagaDM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && PPC32 && 8xx && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Mapping for the Flaga digital module. If you don't have one, ignore
this setting.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BEECH</term>
<nutsynopsis>
	"CFI Flash device mapped on IBM 405LP Beech"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 40x && BEECH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the IBM
405LP Beech board. If you have one of these boards and would like
to use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_ARCTIC</term>
<nutsynopsis>
	"CFI Flash device mapped on IBM 405LP Arctic"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 40x && ARCTIC2</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the IBM 405LP
Arctic board. If you have one of these boards and would like to
use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_WALNUT</term>
<nutsynopsis>
	"Flash device mapped on IBM 405GP Walnut"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_JEDECPROBE && PPC32 && 40x && WALNUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the IBM 405GP
Walnut board. If you have one of these boards and would like to
use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_EBONY</term>
<nutsynopsis>
	"Flash devices mapped on IBM 440GP Ebony"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_JEDECPROBE && PPC32 && 44x && EBONY</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the IBM 440GP
Ebony board. If you have one of these boards and would like to
use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_OCOTEA</term>
<nutsynopsis>
	"Flash devices mapped on IBM 440GX Ocotea"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 44x && OCOTEA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the IBM 440GX
Ocotea board. If you have one of these boards and would like to
use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_REDWOOD</term>
<nutsynopsis>
	"CFI Flash devices mapped on IBM Redwood"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && PPC32 && 4xx && 40x && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the IBM
Redwood board. If you have one of these boards and would like to
use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CSTM_MIPS_IXX</term>
<nutsynopsis>
	"Flash chip mapping on ITE QED-4N-S01B, Globespan IVR or custom board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MIPS && MTD_CFI && MTD_JEDECPROBE && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a mapping driver for the Integrated Technology
Express, Inc (ITE) QED-4N-S01B eval board and the Globespan IVR
Reference Board. It provides the necessary addressing, length,
buswidth, vpp code and addition setup of the flash device for
these boards. In addition, this mapping driver can be used for
other boards via setting of the CONFIG_MTD_CSTM_MIPS_IXX_START/
LEN/BUSWIDTH parameters. This mapping will provide one mtd device
using one partition. The start address can be offset from the
beginning of flash and the len can be less than the total flash
device size to allow a window into the flash. Both CFI and JEDEC
probes are called.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CSTM_MIPS_IXX_START</term>
<nutsynopsis>
	"Physical start address of flash mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CSTM_MIPS_IXX</literal>
	</para>

	<para>
	default value
	<literal>0x8000000 if MTD && MTD_CSTM_MIPS_IXX</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
This is the physical memory location that the MTD driver will
use for the flash chips on your particular target board. 
Refer to the memory map which should hopefully be in the 
documentation for your board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CSTM_MIPS_IXX_LEN</term>
<nutsynopsis>
	"Physical length of flash mapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CSTM_MIPS_IXX</literal>
	</para>

	<para>
	default value
	<literal>0x4000000 if MTD && MTD_CSTM_MIPS_IXX</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
This is the total length that the MTD driver will use for the 
flash chips on your particular board.  Refer to the memory
map which should hopefully be in the documentation for your
board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CSTM_MIPS_IXX_BUSWIDTH</term>
<nutsynopsis>
	"Bus width in octets"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_CSTM_MIPS_IXX</literal>
	</para>

	<para>
	default value
	<literal>2 if MTD && MTD_CSTM_MIPS_IXX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the total bus width of the mapping of the flash chips
on your particular board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_OCELOT</term>
<nutsynopsis>
	"Momenco Ocelot boot flash device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MIPS && MOMENCO_OCELOT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the boot flash device and for the
NVRAM on the Momenco Ocelot board. If you have one of these boards
and would like access to either of these, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SOLUTIONENGINE</term>
<nutsynopsis>
	"CFI Flash device mapped on Hitachi SolutionEngine"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && SUPERH && MTD_CFI && MTD_REDBOOT_PARTS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the flash chips on the Hitachi SolutionEngine and
similar boards. Say 'Y' if you are building a kernel for such a board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_ARM_INTEGRATOR</term>
<nutsynopsis>
	"CFI Flash device mapped on ARM Integrator/P720T"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CDB89712</term>
<nutsynopsis>
	"Cirrus CDB89712 evaluation board mappings"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && ARCH_CDB89712</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the flash or ROM chips on the CDB89712 board.
If you have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SA1100</term>
<nutsynopsis>
	"CFI Flash device mapped on StrongARM SA11x0"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the flash chips on most platforms based on
the SA1100 and SA1110, including the Assabet and the Compaq iPAQ.
If you have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_IPAQ</term>
<nutsynopsis>
	"CFI Flash device mapped on Compaq/HP iPAQ"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && IPAQ_HANDHELD && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a driver for the on-board flash of the iPAQ.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DC21285</term>
<nutsynopsis>
	"CFI Flash device mapped on DC21285 Footbridge"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a driver for the flash accessed using Intel's
21285 bridge used with Intel's StrongARM processors. More info at
<http://www.intel.com/design/bridge/docs/21285_documentation.htm>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_IQ80310</term>
<nutsynopsis>
	"CFI Flash device mapped on the XScale IQ80310 board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && ARCH_IQ80310</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access routines for the flash chips on the Intel XScale
IQ80310 evaluation board. If you have one of these boards and would 
like to use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_IXP4XX</term>
<nutsynopsis>
	"CFI Flash device mapped on Intel IXP4xx based systems"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables MTD access to flash devices on platforms based 
on Intel's IXP4xx family of network processors such as the
IXDP425 and Coyote. If you have an IXP4xx based board and
would like to use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_IXP2000</term>
<nutsynopsis>
	"CFI Flash device mapped on Intel IXP2000 based systems"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables MTD access to flash devices on platforms based 
on Intel's IXP2000 family of network processors such as the
IXDP425 and Coyote. If you have an IXP2000 based board and
would like to use the flash chips on it, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_EPXA10DB</term>
<nutsynopsis>
	"CFI Flash device mapped on Epxa10db"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && MTD_PARTITIONS && ARCH_CAMELOT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the flash devices on the Altera
Excalibur XA10 Development Board. If you are building a kernel
for on of these boards then you should say 'Y' otherwise say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_FORTUNET</term>
<nutsynopsis>
	"CFI Flash device mapped on the FortuNet board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the Flash on the FortuNet board.  If you
have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_AUTCPU12</term>
<nutsynopsis>
	"NV-RAM mapping AUTCPU12 board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && ARCH_AUTCPU12</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the NV-RAM on autronix autcpu12 board.
If you have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_EDB7312</term>
<nutsynopsis>
	"CFI Flash device mapped on EDB7312"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the CFI Flash on the Cogent EDB7312 board.
If you have such a board, say 'Y' here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_IMPA7</term>
<nutsynopsis>
	"JEDEC Flash device mapped on impA7"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_JEDECPROBE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the NOR Flash on the impA7 board of
implementa GmbH. If you have such a board, say 'Y' here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_CEIVA</term>
<nutsynopsis>
	"JEDEC Flash device mapped on Ceiva/Polaroid PhotoMax Digital Picture Frame"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_JEDECPROBE && ARCH_CEIVA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the flash chips on the Ceiva/Polaroid
PhotoMax Digital Picture Frame.
If you have such a device, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NOR_TOTO</term>
<nutsynopsis>
	"NOR Flash device on TOTO board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && ARCH_OMAP && OMAP_TOTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the NOR flash on the Texas Instruments
TOTO board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_H720X</term>
<nutsynopsis>
	"Hynix evaluation board mappings"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_CFI && (ARCH_H7201 || ARCH_H7202)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the flash chips on the Hynix evaluation boards.
If you have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MPC1211</term>
<nutsynopsis>
	"CFI Flash device mapped on Interface MPC-1211"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && SUPERH && SH_MPC1211 && MTD_CFI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the flash chips on the Interface MPC-1211(CTP/PCI/MPC-SH02).
If you have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_OMAP_NOR</term>
<nutsynopsis>
	"TI OMAP board mappings"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_CFI && ARCH_OMAP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables access to the NOR flash chips on TI OMAP-based
boards defining flash platform devices and flash platform data.
These boards include the Innovator, H2, H3, OSK, Perseus2, and
more.  If you have such a board, say 'Y'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PCI</term>
<nutsynopsis>
	"PCI MTD driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && PCI && MTD_COMPLEX_MAPPINGS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Mapping for accessing flash devices on add-in cards like the Intel XScale
IQ80310 card, and the Intel EBSA285 card in blank ROM programming mode
(please see the manual for the link settings).

If you are not sure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PCMCIA</term>
<nutsynopsis>
	"PCMCIA MTD driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Map driver for accessing PCMCIA linear flash memory cards. These
cards are usually around 4-16MiB in size. This does not include
Compact Flash cards which are treated as IDE devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PCMCIA_ANONYMOUS</term>
<nutsynopsis>
	"Use PCMCIA MTD drivers for anonymous PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_PCMCIA</literal>
	</para>

	<para>
	default value
	<literal>N if MTD && MTD_PCMCIA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If this option is enabled, PCMCIA cards which do not report
anything about themselves are assumed to be MTD cards.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_UCLINUX</term>
<nutsynopsis>
	"Generic uClinux RAM/ROM filesystem support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_PARTITIONS && !MMU</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Map driver to support image based filesystems for uClinux.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_WRSBC8260</term>
<nutsynopsis>
	"Map driver for WindRiver PowerQUICC II MPC82xx board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && (SBC82xx || SBC8560)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Map driver for WindRiver PowerQUICC II MPC82xx board. Drives
all three flash regions on CS0, CS1 and CS6 if they are configured
correctly by the boot loader.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DMV182</term>
<nutsynopsis>
	"Map driver for Dy-4 SVME/DMV-182 board."
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && DMV182</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Map driver for Dy-4 SVME/DMV-182 board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BAST</term>
<nutsynopsis>
	"Map driver for Simtec BAST (EB2410ITX) or Thorcom VR1000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && (ARCH_BAST || MACH_VR1000)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Map driver for NOR flash on the Simtec BAST (EB2410ITX), or the
Thorcom VR1000

Note, this driver *cannot* over-ride the WP link on the
board, or currently detect the state of the link.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BAST_MAXSIZE</term>
<nutsynopsis>
	"Maximum size for BAST flash area (MiB)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_BAST</literal>
	</para>

	<para>
	default value
	<literal>4 if MTD && MTD_BAST</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SHARP_SL</term>
<nutsynopsis>
	"ROM maped on Sharp SL Series"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && ARCH_PXA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables access to the flash chip on the Sharp SL Series of PDAs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PLATRAM</term>
<nutsynopsis>
	"Map driver for platform device RAM (mtd-ram)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Map driver for RAM areas described via the platform device
system.

This selection automatically selects the map_ram driver.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Self-contained MTD device drivers"
<para>
	depends on
	<literal>MTD!=n</literal>
	</para>


<nutentry>
	<term>MTD_PMC551</term>
<nutsynopsis>
	"Ramix PMC551 PCI Mezzanine RAM card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides a MTD device driver for the Ramix PMC551 RAM PCI card
from Ramix Inc. <http://www.ramix.com/products/memory/pmc551.html>.
These devices come in memory configurations from 32M - 1G.  If you
have one, you probably want to enable this.

If this driver is compiled as a module you get the ability to select
the size of the aperture window pointing into the devices memory.
What this means is that if you have a 1G card, normally the kernel
will use a 1G memory map as its view of the device.  As a module,
you can select a 1M window into the memory and the driver will
"slide" the window around the PMC551's memory.  This was
particularly useful on the 2.2 kernels on PPC architectures as there
was limited kernel space to deal with.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PMC551_BUGFIX</term>
<nutsynopsis>
	"PMC551 256M DRAM Bugfix"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_PMC551</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some of Ramix's PMC551 boards with 256M configurations have invalid
column and row mux values.  This option will fix them, but will
break other memory configurations.  If unsure say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PMC551_DEBUG</term>
<nutsynopsis>
	"PMC551 Debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_PMC551</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option makes the PMC551 more verbose during its operation and
is only really useful if you are developing on this driver or
suspect a possible hardware or driver bug.  If unsure say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MS02NV</term>
<nutsynopsis>
	"DEC MS02-NV NVRAM module support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MACH_DECSTATION</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is an MTD driver for the DEC's MS02-NV (54-20948-01) battery
backed-up NVRAM module.  The module was originally meant as an NFS
accelerator.  Say Y here if you have a DECstation 5000/2x0 or a
DECsystem 5900 equipped with such a module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_SLRAM</term>
<nutsynopsis>
	"Uncached system RAM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If your CPU cannot cache all of the physical memory in your machine,
you can still use it for storage or swap by using this driver to
present it to the system as a Memory Technology Device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_PHRAM</term>
<nutsynopsis>
	"Physical system RAM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a re-implementation of the slram driver above.

Use this driver to access physical memory that the kernel proper
doesn't have access to, memory beyond the mem=xxx limit, nvram,
memory on the video card, etc...
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_LART</term>
<nutsynopsis>
	"28F160xx flash driver for LART"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SA1100_LART && MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the flash driver for LART. Please note that you do
not need any mapping/chip driver for LART. This one does it all
for you, so go disable all of those if you enabled some of them (:
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_MTDRAM</term>
<nutsynopsis>
	"Test driver using RAM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables a test MTD device driver which uses vmalloc() to
provide storage.  You probably want to say 'N' unless you're
testing stuff.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTDRAM_TOTAL_SIZE</term>
<nutsynopsis>
	"MTDRAM device size in KiB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_MTDRAM</literal>
	</para>

	<para>
	default value
	<literal>4096 if MTD && MTD_MTDRAM</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This allows you to configure the total size of the MTD device
emulated by the MTDRAM driver.  If the MTDRAM driver is built
as a module, it is also possible to specify this as a parameter when
loading the module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTDRAM_ERASE_SIZE</term>
<nutsynopsis>
	"MTDRAM erase block size in KiB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_MTDRAM</literal>
	</para>

	<para>
	default value
	<literal>128 if MTD && MTD_MTDRAM</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This allows you to configure the size of the erase blocks in the
device emulated by the MTDRAM driver.  If the MTDRAM driver is built
as a module, it is also possible to specify this as a parameter when
loading the module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTDRAM_ABS_POS</term>
<nutsynopsis>
	"SRAM Hexadecimal Absolute position or 0"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_MTDRAM=y</literal>
	</para>

	<para>
	default value
	<literal>0 if MTD && MTD_MTDRAM=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
If you have system RAM accessible by the CPU but not used by Linux
in normal operation, you can give the physical address at which the
available RAM starts, and the MTDRAM driver will use it instead of
allocating space from Linux's available memory. Otherwise, leave 
this set to zero. Most people will want to leave this as zero.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BLKMTD</term>
<nutsynopsis>
	"MTD emulation using block device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver allows a block device to appear as an MTD. It would
generally be used in the following cases:

Using Compact Flash as an MTD, these usually present themselves to
the system as an ATA drive.
Testing MTD users (eg JFFS2) on large media and media that might
be removed during a write (using the floppy drive).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_BLOCK2MTD</term>
<nutsynopsis>
	"MTD using block device (rewrite)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is basically the same at MTD_BLKMTD above, but
experienced some interface changes plus serious speedups.  In
the long term, it should replace MTD_BLKMTD.  Right now, you
shouldn't entrust important data to it yet.
	</para>

</nutentrybody>
</nutentry>

comment "Disk-On-Chip Device Drivers"
<para>
	depends on
	<literal>MTD!=n</literal>
	</para>


<nutentry>
	<term>MTD_DOC2000</term>
<nutsynopsis>
	"M-Systems Disk-On-Chip 2000 and Millennium (DEPRECATED)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides an MTD device driver for the M-Systems DiskOnChip
2000 and Millennium devices.  Originally designed for the DiskOnChip
2000, it also now includes support for the DiskOnChip Millennium.
If you have problems with this driver and the DiskOnChip Millennium,
you may wish to try the alternative Millennium driver below. To use
the alternative driver, you will need to undefine DOC_SINGLE_DRIVER
in the <file:drivers/mtd/devices/docprobe.c> source code.

If you use this device, you probably also want to enable the NFTL
'NAND Flash Translation Layer' option below, which is used to
emulate a block device by using a kind of file system on the flash
chips.

NOTE: This driver is deprecated and will probably be removed soon.
Please try the new DiskOnChip driver under "NAND Flash Device
Drivers".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOC2001</term>
<nutsynopsis>
	"M-Systems Disk-On-Chip Millennium-only alternative driver (DEPRECATED)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides an alternative MTD device driver for the M-Systems 
DiskOnChip Millennium devices.  Use this if you have problems with
the combined DiskOnChip 2000 and Millennium driver above.  To get
the DiskOnChip probe code to load and use this driver instead of
the other one, you will need to undefine DOC_SINGLE_DRIVER near
the beginning of <file:drivers/mtd/devices/docprobe.c>.

If you use this device, you probably also want to enable the NFTL
'NAND Flash Translation Layer' option below, which is used to
emulate a block device by using a kind of file system on the flash
chips.

NOTE: This driver is deprecated and will probably be removed soon.
Please try the new DiskOnChip driver under "NAND Flash Device
Drivers".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOC2001PLUS</term>
<nutsynopsis>
	"M-Systems Disk-On-Chip Millennium Plus"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides an MTD device driver for the M-Systems DiskOnChip
Millennium Plus devices.

If you use this device, you probably also want to enable the INFTL
'Inverse NAND Flash Translation Layer' option below, which is used
to emulate a block device by using a kind of file system on the 
flash chips.

NOTE: This driver will soon be replaced by the new DiskOnChip driver
under "NAND Flash Device Drivers" (currently that driver does not
support all Millennium Plus devices).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOCPROBE</term>
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOCECC</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOCPROBE_ADVANCED</term>
<nutsynopsis>
	"Advanced detection options for DiskOnChip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_DOCPROBE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to specify nonstandard address at which to
probe for a DiskOnChip, or to change the detection options.  You
are unlikely to need any of this unless you are using LinuxBIOS.
Say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOCPROBE_ADDRESS</term>
<nutsynopsis>
	"Physical address of DiskOnChip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>0x0000 if MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED</literal>
	</para>


	<para>
	default value
	<literal>0 if MTD && MTD_DOCPROBE && !MTD_DOCPROBE_ADVANCED</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
By default, the probe for DiskOnChip devices will look for a
DiskOnChip at every multiple of 0x2000 between 0xC8000 and 0xEE000.
This option allows you to specify a single address at which to probe
for the device, which is useful if you have other devices in that
range which get upset when they are probed.

(Note that on PowerPC, the normal probe will only check at
0xE4000000.)

Normally, you should leave this set to zero, to allow the probe at
the normal addresses.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOCPROBE_HIGH</term>
<nutsynopsis>
	"Probe high addresses"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_DOCPROBE_ADVANCED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
By default, the probe for DiskOnChip devices will look for a
DiskOnChip at every multiple of 0x2000 between 0xC8000 and 0xEE000.
This option changes to make it probe between 0xFFFC8000 and
0xFFFEE000.  Unless you are using LinuxBIOS, this is unlikely to be
useful to you.  Say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_DOCPROBE_55AA</term>
<nutsynopsis>
	"Probe for 0x55 0xAA BIOS Extension Signature"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_DOCPROBE_ADVANCED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Check for the 0x55 0xAA signature of a DiskOnChip, and do not
continue with probing if it is absent.  The signature will always be
present for a DiskOnChip 2000 or a normal DiskOnChip Millennium.
Only if you have overwritten the first block of a DiskOnChip
Millennium will it be absent.  Enable this option if you are using
LinuxBIOS or if you need to recover a DiskOnChip Millennium on which
you have managed to wipe the first block.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "NAND Flash Device Drivers"
<para>
	depends on
	<literal>MTD!=n</literal>
	</para>


<nutentry>
	<term>MTD_NAND</term>
<nutsynopsis>
	"NAND Device Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for accessing all type of NAND flash
devices. For further information see
<http://www.linux-mtd.infradead.org/tech/nand.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_VERIFY_WRITE</term>
<nutsynopsis>
	"Verify NAND page writes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This adds an extra check when data is written to the flash. The
NAND flash device internally checks only bits transitioning
from 1 to 0. There is a rare possibility that even though the
device thinks the write was successful, a bit could have been
flipped accidentaly due to device wear or something else.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_AUTCPU12</term>
<nutsynopsis>
	"SmartMediaCard on autronix autcpu12 board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_NAND && ARCH_AUTCPU12</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for the autronix autcpu12 board to 
access the SmartMediaCard.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_EDB7312</term>
<nutsynopsis>
	"Support for Cirrus Logic EBD7312 evaluation board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_NAND && ARCH_EDB7312</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for the Cirrus Logic EBD7312 evaluation 
board to access the onboard NAND Flash.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_H1900</term>
<nutsynopsis>
	"iPAQ H1900 flash"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && MTD_NAND && ARCH_PXA && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for the iPAQ h1900 flash.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_SPIA</term>
<nutsynopsis>
	"NAND Flash device on SPIA board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && ARCH_P720T && MTD_NAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you had to ask, you don't have one. Say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_TOTO</term>
<nutsynopsis>
	"NAND Flash device on TOTO board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARM && ARCH_OMAP && MTD_NAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for NAND flash on Texas Instruments Toto platform.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_IDS</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_AU1550</term>
<nutsynopsis>
	"Au1550 NAND support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && SOC_AU1550 && MTD_NAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for the NAND flash controller on the
AMD/Alchemy 1550 SOC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_RTC_FROM4</term>
<nutsynopsis>
	"Renesas Flash ROM 4-slot interface board (FROM_BOARD4)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_NAND && SH_SOLUTION_ENGINE</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for the Renesas Technology AG-AND 
flash interface board (FROM_BOARD4)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_PPCHAMELEONEVB</term>
<nutsynopsis>
	"NAND Flash device on PPChameleonEVB board"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && PPCHAMELEONEVB && MTD_NAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the NAND flash driver on the PPChameleon EVB Board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_S3C2410</term>
<nutsynopsis>
	"NAND Flash support for S3C2410/S3C2440 SoC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && ARCH_S3C2410 && MTD_NAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the NAND flash controller on the S3C2410 and S3C2440
SoCs

No board specfic support is done by this driver, each board
must advertise a platform_device for the driver to attach. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_S3C2410_DEBUG</term>
<nutsynopsis>
	"S3C2410 NAND driver debug"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND_S3C2410</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable debugging of the S3C2410 NAND driver
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_S3C2410_HWECC</term>
<nutsynopsis>
	"S3C2410 NAND Hardware ECC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND_S3C2410</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the use of the S3C2410's internal ECC generator when
using NAND. Early versions of the chip have had problems with
incorrect ECC generation, and if using these, the default of
software ECC is preferable.

If you lay down a device with the hardware ECC, then you will
currently not be able to switch to software, as there is no
implementation for ECC method used by the S3C2410
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_DISKONCHIP</term>
<nutsynopsis>
	"DiskOnChip 2000, Millennium and Millennium Plus (NAND reimplementation) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD!=n && MTD_NAND && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a reimplementation of M-Systems DiskOnChip 2000,
Millennium and Millennium Plus as a standard NAND device driver,
as opposed to the earlier self-contained MTD device drivers.
This should enable, among other things, proper JFFS2 operation on
these devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_DISKONCHIP_PROBE_ADVANCED</term>
<nutsynopsis>
	"Advanced detection options for DiskOnChip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND_DISKONCHIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to specify nonstandard address at which to
probe for a DiskOnChip, or to change the detection options.  You
are unlikely to need any of this unless you are using LinuxBIOS.
Say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_DISKONCHIP_PROBE_ADDRESS</term>
<nutsynopsis>
	"Physical address of DiskOnChip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND_DISKONCHIP && MTD_NAND_DISKONCHIP_PROBE_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>0 if MTD && MTD_NAND_DISKONCHIP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
By default, the probe for DiskOnChip devices will look for a
DiskOnChip at every multiple of 0x2000 between 0xC8000 and 0xEE000.
This option allows you to specify a single address at which to probe
for the device, which is useful if you have other devices in that
range which get upset when they are probed.

(Note that on PowerPC, the normal probe will only check at
0xE4000000.)

Normally, you should leave this set to zero, to allow the probe at
the normal addresses.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_DISKONCHIP_PROBE_HIGH</term>
<nutsynopsis>
	"Probe high addresses"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND_DISKONCHIP_PROBE_ADVANCED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
By default, the probe for DiskOnChip devices will look for a
DiskOnChip at every multiple of 0x2000 between 0xC8000 and 0xEE000.
This option changes to make it probe between 0xFFFC8000 and
0xFFFEE000.  Unless you are using LinuxBIOS, this is unlikely to be
useful to you.  Say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_DISKONCHIP_BBTWRITE</term>
<nutsynopsis>
	"Allow BBT writes on DiskOnChip Millennium and 2000TSOP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND_DISKONCHIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
On DiskOnChip devices shipped with the INFTL filesystem (Millennium
and 2000 TSOP/Alon), Linux reserves some space at the end of the
device for the Bad Block Table (BBT).  If you have existing INFTL
data on your device (created by non-Linux tools such as M-Systems'
DOS drivers), your data might overlap the area Linux wants to use for
the BBT.  If this is a concern for you, leave this option disabled and
Linux will not write BBT data into this area.
The downside of leaving this option disabled is that if bad blocks
are detected by Linux, they will not be recorded in the BBT, which
could cause future problems.
Once you enable this option, new filesystems (INFTL or others, created
in Linux or other operating systems) will not use the reserved area.
The only reason not to enable this option is to prevent damage to
preexisting filesystems.
Even if you leave this disabled, you can enable BBT writes at module
load time (assuming you build diskonchip as a module) with the module
parameter "inftl_bbt_write=1".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_SHARPSL</term>
<nutsynopsis>
	"Support for NAND Flash on Sharp SL Series (C7xx + others)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND && ARCH_PXA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MTD_NAND_NANDSIM</term>
<nutsynopsis>
	"Support for NAND Flash Simulator"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD && MTD_NAND && MTD_PARTITIONS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The simulator may simulate verious NAND flash chips for the
MTD nand layer.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Parallel port support"

<nutentry>
	<term>PARPORT</term>
<nutsynopsis>
	"Parallel port support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use devices connected to your machine's parallel port
(the connector at the computer with 25 holes), e.g. printer, ZIP
drive, PLIP link (Parallel Line Internet Protocol is mainly used to
create a mini network by connecting the parallel ports of two local
machines) etc., then you need to say Y here; please read
<file:Documentation/parport.txt> and
<file:drivers/parport/BUGS-parport>.

For extensive information about drivers for many devices attaching
to the parallel port see <http://www.torque.net/linux-pp.html> on
the WWW.

It is possible to share a single parallel port among several devices
and it is safe to compile all the corresponding drivers into the
kernel. To compile parallel port support as a module, choose M here:
the module will be called parport.
If you have more than one parallel port and want to specify which
port and IRQ to be used by this driver at module load time, take a
look at <file:Documentation/parport.txt>.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_PC</term>
<nutsynopsis>
	"PC-style hardware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
You should say Y here if you have a PC-style parallel port. All
IBM PC compatible computers and some Alphas have PC-style
parallel ports.  PA-RISC owners should only say Y here if they
have a SuperIO parallel port.

To compile this driver as a module, choose M here: the
module will be called parport_pc.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_SERIAL</term>
<nutsynopsis>
	"Multi-IO cards (parallel and serial)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250 && PARPORT_PC && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds support for multi-IO PCI cards that have parallel and
serial ports.  You should say Y or M here.  If you say M, the module
will be called parport_serial.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_PC_FIFO</term>
<nutsynopsis>
	"Use FIFO/DMA if available (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT_PC && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Many parallel port chipsets provide hardware that can speed up
printing. Say Y here if you want to take advantage of that.

As well as actually having a FIFO, or DMA capability, the kernel
will need to know which IRQ the parallel port has.  By default,
parallel port interrupts will not be used, and so neither will the
FIFO.  See <file:Documentation/parport.txt> to find out how to
specify which IRQ/DMA to use.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_PC_SUPERIO</term>
<nutsynopsis>
	"SuperIO chipset support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT_PC && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Saying Y here enables some probes for Super-IO chipsets in order to
find out things like base addresses, IRQ lines and DMA channels.  It
is safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_PC_PCMCIA</term>
<nutsynopsis>
	"Support for PCMCIA management for PC-style ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT!=n && (PCMCIA!=n && PARPORT_PC=m && PARPORT_PC || PARPORT_PC=y && PCMCIA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you need PCMCIA support for your PC-style parallel
ports. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_NOT_PC</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_ARC</term>
<nutsynopsis>
	"Archimedes hardware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && PARPORT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_AMIGA</term>
<nutsynopsis>
	"Amiga builtin port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AMIGA && PARPORT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you need support for the parallel port hardware on
Amiga machines. This code is also available as a module (say M),
called parport_amiga. If in doubt, saying N is the safe plan.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_MFC3</term>
<nutsynopsis>
	"Multiface III parallel port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && PARPORT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you need parallel port support for the MFC3 card.
This code is also available as a module (say M), called
parport_mfc3. If in doubt, saying N is the safe plan.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_ATARI</term>
<nutsynopsis>
	"Atari hardware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI && PARPORT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you need support for the parallel port hardware on
Atari machines. This code is also available as a module (say M),
called parport_atari. If in doubt, saying N is the safe plan.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_GSC</term>
	<para>
	default value
	<literal>GSC if PARPORT</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_SUNBPP</term>
<nutsynopsis>
	"Sparc hardware (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SBUS && PARPORT && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides support for the bidirectional parallel port
found on many Sun machines. Note that many of the newer Ultras
actually have pc style hardware instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARPORT_1284</term>
<nutsynopsis>
	"IEEE 1284 transfer modes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a printer that supports status readback or device ID, or
want to use a device that uses enhanced parallel port transfer modes
such as EPP and ECP, say Y here to enable advanced IEEE 1284
transfer modes. Also say Y if you want device ID information to
appear in /proc/sys/dev/parport/*/autoprobe*. It is safe to say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Plug and Play support"

<nutentry>
	<term>PNP</term>
<nutsynopsis>
	"Plug and Play support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA || ACPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Plug and Play (PnP) is a standard for peripherals which allows those
peripherals to be configured by software, e.g. assign IRQ's or other
parameters. No jumpers on the cards are needed, instead the values
are provided to the cards from the BIOS, from the operating system,
or using a user-space utility.

Say Y here if you would like Linux to configure your Plug and Play
devices. You should then also say Y to all of the protocols below.
Alternatively, you can say N here and configure your PnP devices
using user space utilities such as the isapnptools package.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PNP_DEBUG</term>
<nutsynopsis>
	"PnP Debug Messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PNP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want the Plug and Play Layer to print debug messages.
This is useful if you are developing a PnP driver or troubleshooting.
	</para>

</nutentrybody>
</nutentry>

comment "Protocols"
<para>
	depends on
	<literal>PNP</literal>
	</para>


<nutentry>
	<term>ISAPNP</term>
<nutsynopsis>
	"ISA Plug and Play support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PNP && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like support for ISA Plug and Play devices.
Some information is in <file:Documentation/isapnp.txt>.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PNPBIOS</term>
<nutsynopsis>
	"Plug and Play BIOS support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PNP && ISA && X86 && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if PNP && ISA && X86 && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Linux uses the PNPBIOS as defined in "Plug and Play BIOS
Specification Version 1.0A May 5, 1994" to autodetect built-in
mainboard resources (e.g. parallel port resources).

Some features (e.g. event notification, docking station information,
ISAPNP services) are not currently implemented.

If you would like the kernel to detect and allocate resources to
your mainboard devices (on some systems they are disabled by the
BIOS) say Y here.  Also the PNPBIOS can help prevent resource
conflicts between mainboard devices and other bus devices.

Note: ACPI is expected to supersede PNPBIOS some day, currently it
co-exists nicely.  If you have a non-ISA system that supports ACPI,
you probably don't need PNPBIOS support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PNPBIOS_PROC_FS</term>
<nutsynopsis>
	"Plug and Play BIOS /proc interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PNPBIOS && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here and to "/proc file system support", you will be
able to directly access the PNPBIOS.  This includes resource
allocation, ESCD, and other PNPBIOS services.  Using this
interface is potentially dangerous because the PNPBIOS driver will
not be notified of any resource changes made by writing directly.
Also some buggy systems will fault when accessing certain features
in the PNPBIOS /proc interface (e.g. "boot" configs).

See the latest pcmcia-cs (stand-alone package) for a nice set of
PNPBIOS /proc interface tools (lspnp and setpnp).

Unless you are debugging or have other specific reasons, it is
recommended that you say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PNPACPI</term>
<nutsynopsis>
	"Plug and Play ACPI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PNP && ACPI && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>y if PNP && ACPI && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Linux uses the PNPACPI to autodetect built-in
mainboard resources (e.g. parallel port resources).

Some features (e.g. real hotplug) are not currently
implemented.

If you would like the kernel to detect and allocate resources to
your mainboard devices (on some systems they are disabled by the
BIOS) say Y here.  Also the PNPACPI can help prevent resource
conflicts between mainboard devices and other bus devices.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Block devices"

<nutentry>
	<term>BLK_DEV_FD</term>
<nutsynopsis>
	"Normal floppy disk support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_MAY_HAVE_PC_FDC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use the floppy disk drive(s) of your PC under Linux,
say Y. Information about this driver, especially important for IBM
Thinkpad users, is contained in <file:Documentation/floppy.txt>.
That file also contains the location of the Floppy driver FAQ as
well as location of the fdutils package used to configure additional
parameters of the driver at run time.

To compile this driver as a module, choose M here: the
module will be called floppy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AMIGA_FLOPPY</term>
<nutsynopsis>
	"Amiga floppy support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AMIGA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_FLOPPY</term>
<nutsynopsis>
	"Atari floppy support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SWIM_IOP</term>
<nutsynopsis>
	"Macintosh IIfx/Quadra 900/Quadra 950 floppy support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MAC && EXPERIMENTAL && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support the SWIM (Super Woz Integrated Machine) IOP
floppy controller on the Macintosh IIfx and Quadra 900/950.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAC_FLOPPY</term>
<nutsynopsis>
	"Support for PowerMac floppy"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC_PMAC && !PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a SWIM-3 (Super Woz Integrated Machine 3; from Apple)
floppy controller, say Y here. Most commonly found in PowerMacs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_PS2</term>
<nutsynopsis>
	"PS/2 ESDI hard disk support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA && MCA_LEGACY && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a PS/2 machine with a MCA bus and an ESDI
hard disk.

To compile this driver as a module, choose M here: the
module will be called ps2esdi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AMIGA_Z2RAM</term>
<nutsynopsis>
	"Amiga Zorro II ramdisk support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for using Chip RAM and Zorro II RAM as a
ramdisk or as a swap partition. Say Y if you want to include this
driver in the kernel.

To compile this driver as a module, choose M here: the
module will be called z2ram.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_ACSI</term>
<nutsynopsis>
	"Atari ACSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Atari ACSI interface. The driver
supports hard disks and CD-ROMs, which have 512-byte sectors, or can
be switched to that mode. Due to the ACSI command format, only disks
up to 1 GB are supported. Special support for certain ACSI to SCSI
adapters, which could relax that, isn't included yet. The ACSI
driver is also the basis for certain other drivers for devices
attached to the ACSI bus: Atari SLM laser printer, BioNet-100
Ethernet, and PAMsNet Ethernet. If you want to use one of these
devices, you need ACSI support, too.

To compile this driver as a module, choose M here: the
module will be called acsi.
	</para>

</nutentrybody>
</nutentry>

comment "Some devices (e.g. CD jukebox) support multiple LUNs"
<para>
	depends on
	<literal>ATARI && ATARI_ACSI</literal>
	</para>


<nutentry>
	<term>ACSI_MULTI_LUN</term>
<nutsynopsis>
	"Probe all LUNs on each ACSI device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI_ACSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a ACSI device that supports more than one LUN (Logical
Unit Number), e.g. a CD jukebox, you should say Y here so that all
will be found by the ACSI driver. An ACSI device with multiple LUNs
acts logically like multiple ACSI devices. The vast majority of ACSI
devices have only one LUN, and so most people can say N here and
should in fact do so, because it is safer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_SLM</term>
<nutsynopsis>
	"Atari SLM laser printer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI && ATARI_ACSI!=n</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Atari SLM laser printer, say Y to include support for
it in the kernel. Otherwise, say N. This driver is also available as
a module ( = code which can be inserted in and removed from the
running kernel whenever you want). The module will be called
acsi_slm. Be warned: the driver needs much ST-RAM and can cause
problems due to that fact!
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_XD</term>
<nutsynopsis>
	"XT hard disk support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Very old 8 bit hard disk controllers used in the IBM XT computer
will be supported if you say Y here.

To compile this driver as a module, choose M here: the
module will be called xd.

It's pretty unlikely that you have one of these: say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE</term>
<nutsynopsis>
	"Parallel port IDE device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
There are many external CD-ROM and disk devices that connect through
your computer's parallel port. Most of them are actually IDE devices
using a parallel port IDE adapter. This option enables the PARIDE
subsystem which contains drivers for many of these external drives.
Read <file:Documentation/paride.txt> for more information.

If you have said Y to the "Parallel-port support" configuration
option, you may share a single port between your printer and other
parallel port devices. Answer Y to build PARIDE support into your
kernel, or M if you would like to build it as a loadable module. If
your parallel port support is in a loadable module, you must build
PARIDE as a module. If you built PARIDE support into your kernel,
you may still build the individual protocol modules and high-level
drivers as loadable modules. If you build this support as a module,
it will be called paride.

To use the PARIDE support, you must say Y or M here and also to at
least one high-level driver (e.g. "Parallel port IDE disks",
"Parallel port ATAPI CD-ROMs", "Parallel port ATAPI disks" etc.) and
to at least one protocol driver (e.g. "ATEN EH-100 protocol",
"MicroSolutions backpack protocol", "DataStor Commuter protocol"
etc.).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_PARPORT</term>
	<para>
	default value
	<literal>m if PARIDE!=n && PARPORT=m</literal>
	</para>


	<para>
	default value
	<literal>y if PARIDE!=n && PARPORT!=m</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

comment "Parallel IDE high-level drivers"
<para>
	depends on
	<literal>PARIDE</literal>
	</para>


<nutentry>
	<term>PARIDE_PD</term>
<nutsynopsis>
	"Parallel port IDE disks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the high-level driver for IDE-type disk devices
connected through a parallel port. If you chose to build PARIDE
support into your kernel, you may answer Y here to build in the
parallel port IDE driver, otherwise you should answer M to build
it as a loadable module. The module will be called pd. You
must also have at least one parallel port protocol driver in your
system. Among the devices supported by this driver are the SyQuest
EZ-135, EZ-230 and SparQ drives, the Avatar Shark and the backpack
hard drives from MicroSolutions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_PCD</term>
<nutsynopsis>
	"Parallel port ATAPI CD-ROMs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the high-level driver for ATAPI CD-ROM devices
connected through a parallel port. If you chose to build PARIDE
support into your kernel, you may answer Y here to build in the
parallel port ATAPI CD-ROM driver, otherwise you should answer M to
build it as a loadable module. The module will be called pcd. You
must also have at least one parallel port protocol driver in your
system. Among the devices supported by this driver are the
MicroSolutions backpack CD-ROM drives and the Freecom Power CD. If
you have such a CD-ROM drive, you should also say Y or M to "ISO
9660 CD-ROM file system support" below, because that's the file
system used on CD-ROMs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_PF</term>
<nutsynopsis>
	"Parallel port ATAPI disks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the high-level driver for ATAPI disk devices
connected through a parallel port. If you chose to build PARIDE
support into your kernel, you may answer Y here to build in the
parallel port ATAPI disk driver, otherwise you should answer M
to build it as a loadable module. The module will be called pf.
You must also have at least one parallel port protocol driver in
your system. Among the devices supported by this driver are the
MicroSolutions backpack PD/CD drive and the Imation Superdisk
LS-120 drive.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_PT</term>
<nutsynopsis>
	"Parallel port ATAPI tapes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the high-level driver for ATAPI tape devices
connected through a parallel port. If you chose to build PARIDE
support into your kernel, you may answer Y here to build in the
parallel port ATAPI disk driver, otherwise you should answer M
to build it as a loadable module. The module will be called pt.
You must also have at least one parallel port protocol driver in
your system. Among the devices supported by this driver is the
parallel port version of the HP 5GB drive.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_PG</term>
<nutsynopsis>
	"Parallel port generic ATAPI devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables a special high-level driver for generic ATAPI
devices connected through a parallel port. The driver allows user
programs, such as cdrtools, to send ATAPI commands directly to a
device.

If you chose to build PARIDE support into your kernel, you may
answer Y here to build in the parallel port generic ATAPI driver,
otherwise you should answer M to build it as a loadable module. The
module will be called pg.

You must also have at least one parallel port protocol driver in
your system.

This driver implements an API loosely related to the generic SCSI
driver. See <file:include/linux/pg.h>. for details.

You can obtain the most recent version of cdrtools from
<ftp://ftp.berlios.de/pub/cdrecord/>. Versions 1.6.1a3 and
later fully support this driver.
	</para>

</nutentrybody>
</nutentry>

comment "Parallel IDE protocol modules"
<para>
	depends on
	<literal>PARIDE</literal>
	</para>


<nutentry>
	<term>PARIDE_ATEN</term>
<nutsynopsis>
	"ATEN EH-100 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the ATEN EH-100 parallel port IDE
protocol. This protocol is used in some inexpensive low performance
parallel port kits made in Hong Kong. If you chose to build PARIDE
support into your kernel, you may answer Y here to build in the
protocol driver, otherwise you should answer M to build it as a
loadable module. The module will be called aten. You must also
have a high-level driver for the type of device that you want to
support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_BPCK</term>
<nutsynopsis>
	"MicroSolutions backpack (Series 5) protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the Micro Solutions BACKPACK
parallel port Series 5 IDE protocol.  (Most BACKPACK drives made
before 1999 were Series 5) Series 5 drives will NOT always have the
Series noted on the bottom of the drive. Series 6 drivers will.

In other words, if your BACKPACK drive doesn't say "Series 6" on the
bottom, enable this option.

If you chose to build PARIDE support into your kernel, you may
answer Y here to build in the protocol driver, otherwise you should
answer M to build it as a loadable module.  The module will be
called bpck.  You must also have a high-level driver for the type
of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_BPCK6</term>
<nutsynopsis>
	"MicroSolutions backpack (Series 6) protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the Micro Solutions BACKPACK
parallel port Series 6 IDE protocol.  (Most BACKPACK drives made
after 1999 were Series 6) Series 6 drives will have the Series noted
on the bottom of the drive.  Series 5 drivers don't always have it
noted.

In other words, if your BACKPACK drive says "Series 6" on the
bottom, enable this option.

If you chose to build PARIDE support into your kernel, you may
answer Y here to build in the protocol driver, otherwise you should
answer M to build it as a loadable module.  The module will be
called bpck6.  You must also have a high-level driver for the type
of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_COMM</term>
<nutsynopsis>
	"DataStor Commuter protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the Commuter parallel port IDE
protocol from DataStor. If you chose to build PARIDE support
into your kernel, you may answer Y here to build in the protocol
driver, otherwise you should answer M to build it as a loadable
module. The module will be called comm. You must also have
a high-level driver for the type of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_DSTR</term>
<nutsynopsis>
	"DataStor EP-2000 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the EP-2000 parallel port IDE
protocol from DataStor. If you chose to build PARIDE support
into your kernel, you may answer Y here to build in the protocol
driver, otherwise you should answer M to build it as a loadable
module. The module will be called dstr. You must also have
a high-level driver for the type of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_FIT2</term>
<nutsynopsis>
	"FIT TD-2000 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the TD-2000 parallel port IDE
protocol from Fidelity International Technology. This is a simple
(low speed) adapter that is used in some portable hard drives. If
you chose to build PARIDE support into your kernel, you may answer Y
here to build in the protocol driver, otherwise you should answer M
to build it as a loadable module. The module will be called ktti.
You must also have a high-level driver for the type of device that
you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_FIT3</term>
<nutsynopsis>
	"FIT TD-3000 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the TD-3000 parallel port IDE
protocol from Fidelity International Technology. This protocol is
used in newer models of their portable disk, CD-ROM and PD/CD
devices. If you chose to build PARIDE support into your kernel, you
may answer Y here to build in the protocol driver, otherwise you
should answer M to build it as a loadable module. The module will be
called fit3. You must also have a high-level driver for the type
of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_EPAT</term>
<nutsynopsis>
	"Shuttle EPAT/EPEZ protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the EPAT parallel port IDE protocol.
EPAT is a parallel port IDE adapter manufactured by Shuttle
Technology and widely used in devices from major vendors such as
Hewlett-Packard, SyQuest, Imation and Avatar. If you chose to build
PARIDE support into your kernel, you may answer Y here to build in
the protocol driver, otherwise you should answer M to build it as a
loadable module. The module will be called epat. You must also
have a high-level driver for the type of device that you want to
support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_EPATC8</term>
<nutsynopsis>
	"Support c7/c8 chips (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE_EPAT && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for the newer Shuttle EP1284 (aka c7 and
c8) chip. You need this if you are using any recent Imation SuperDisk
(LS-120) drive.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_EPIA</term>
<nutsynopsis>
	"Shuttle EPIA protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the (obsolete) EPIA parallel port
IDE protocol from Shuttle Technology. This adapter can still be
found in some no-name kits. If you chose to build PARIDE support
into your kernel, you may answer Y here to build in the protocol
driver, otherwise you should answer M to build it as a loadable
module. The module will be called epia. You must also have a
high-level driver for the type of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_FRIQ</term>
<nutsynopsis>
	"Freecom IQ ASIC-2 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for version 2 of the Freecom IQ parallel
port IDE adapter.  This adapter is used by the Maxell Superdisk
drive.  If you chose to build PARIDE support into your kernel, you
may answer Y here to build in the protocol driver, otherwise you
should answer M to build it as a loadable module. The module will be
called friq. You must also have a high-level driver for the type
of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_FRPW</term>
<nutsynopsis>
	"FreeCom power protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the Freecom power parallel port IDE
protocol. If you chose to build PARIDE support into your kernel, you
may answer Y here to build in the protocol driver, otherwise you
should answer M to build it as a loadable module. The module will be
called frpw. You must also have a high-level driver for the type
of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_KBIC</term>
<nutsynopsis>
	"KingByte KBIC-951A/971A protocols"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the KBIC-951A and KBIC-971A parallel
port IDE protocols from KingByte Information Corp. KingByte's
adapters appear in many no-name portable disk and CD-ROM products,
especially in Europe. If you chose to build PARIDE support into your
kernel, you may answer Y here to build in the protocol driver,
otherwise you should answer M to build it as a loadable module. The
module will be called kbic. You must also have a high-level driver
for the type of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_KTTI</term>
<nutsynopsis>
	"KT PHd protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the "PHd" parallel port IDE protocol
from KT Technology. This is a simple (low speed) adapter that is
used in some 2.5" portable hard drives. If you chose to build PARIDE
support into your kernel, you may answer Y here to build in the
protocol driver, otherwise you should answer M to build it as a
loadable module. The module will be called ktti. You must also
have a high-level driver for the type of device that you want to
support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_ON20</term>
<nutsynopsis>
	"OnSpec 90c20 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the (obsolete) 90c20 parallel port
IDE protocol from OnSpec (often marketed under the ValuStore brand
name). If you chose to build PARIDE support into your kernel, you
may answer Y here to build in the protocol driver, otherwise you
should answer M to build it as a loadable module. The module will
be called on20. You must also have a high-level driver for the
type of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PARIDE_ON26</term>
<nutsynopsis>
	"OnSpec 90c26 protocol"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARIDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the 90c26 parallel port IDE protocol
from OnSpec Electronics (often marketed under the ValuStore brand
name). If you chose to build PARIDE support into your kernel, you
may answer Y here to build in the protocol driver, otherwise you
should answer M to build it as a loadable module. The module will be
called on26. You must also have a high-level driver for the type
of device that you want to support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_CPQ_DA</term>
<nutsynopsis>
	"Compaq SMART2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for Compaq Smart Array controllers.  Everyone
using these boards should say Y here.  See the file
<file:Documentation/cpqarray.txt> for the current list of boards
supported by this driver, and for further information on the use of
this driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_CPQ_CISS_DA</term>
<nutsynopsis>
	"Compaq Smart Array 5xxx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for Compaq Smart Array 5xxx controllers.
Everyone using these boards should say Y here.
See <file:Documentation/cciss.txt> for the current list of
boards supported by this driver, and for further information
on the use of this driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CISS_SCSI_TAPE</term>
<nutsynopsis>
	"SCSI tape drive support for Smart Array 5xxx"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_CPQ_CISS_DA && SCSI && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
When enabled (Y), this option allows SCSI tape drives and SCSI medium
changers (tape robots) to be accessed via a Compaq 5xxx array 
controller.  (See <file:Documentation/cciss.txt> for more details.)

"SCSI support" and "SCSI tape support" must also be enabled for this 
option to work.

When this option is disabled (N), the SCSI portion of the driver 
is not compiled.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_DAC960</term>
<nutsynopsis>
	"Mylex DAC960/DAC1100 PCI RAID Controller support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for the Mylex DAC960, AcceleRAID, and
eXtremeRAID PCI RAID controllers.  See the file
<file:Documentation/README.DAC960> for further information about
this driver.

To compile this driver as a module, choose M here: the
module will be called DAC960.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_UMEM</term>
<nutsynopsis>
	"Micro Memory MM5415 Battery Backed RAM support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y here will include support for the MM5415 family of
battery backed (Non-volatile) RAM cards.
<http://www.umem.com/>

The cards appear as block devices that can be partitioned into
as many as 15 partitions.

To compile this driver as a module, choose M here: the
module will be called umem.

The umem driver has not yet been allocated a MAJOR number, so
one is chosen dynamically.  Use "devfs" or look in /proc/devices
for the device number
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_UBD</term>
<nutsynopsis>
	"Virtual block device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>UML</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The User-Mode Linux port includes a driver called UBD which will let
you access arbitrary files on the host computer as block devices.
Unless you know that you do not need such virtual block devices say
Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_UBD_SYNC</term>
<nutsynopsis>
	"Always do synchronous disk IO for UBD"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_UBD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Writes to the virtual block device are not immediately written to the
host's disk; this may cause problems if, for example, the User-Mode
Linux 'Virtual Machine' uses a journalling filesystem and the host
computer crashes.

Synchronous operation (i.e. always writing data to the host's disk
immediately) is configurable on a per-UBD basis by using a special
kernel command line option.  Alternatively, you can say Y here to
turn on synchronous operation by default for all block devices.

If you're running a journalling file system (like reiserfs, for
example) in your virtual machine, you will want to say Y here.  If
you care for the safety of the data in your virtual machine, Y is a
wise choice too.  In all other cases (for example, if you're just
playing around with User-Mode Linux) you can choose N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_COW_COMMON</term>
	<para>
	default value
	<literal>BLK_DEV_UBD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMAPPER</term>
<nutsynopsis>
	"Example IO memory driver (BROKEN)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>UML && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The User-Mode Linux port can provide support for IO Memory
emulation with this option.  This allows a host file to be
specified as an I/O region on the kernel command line. That file
will be mapped into UML's kernel address space where a driver can
locate it and do whatever it wants with the memory, including
providing an interface to it for UML processes to use.

For more information, see
<http://user-mode-linux.sourceforge.net/iomem.html>.

If you'd like to be able to provide a simulated IO port space for
User-Mode Linux processes, say Y.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_LOOP</term>
<nutsynopsis>
	"Loopback device support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y here will allow you to use a regular file as a block
device; you can then create a file system on that block device and
mount it just as you would mount other block devices such as hard
drive partitions, CD-ROM drives or floppy drives. The loop devices
are block special device files with major number 7 and typically
called /dev/loop0, /dev/loop1 etc.

This is useful if you want to check an ISO 9660 file system before
burning the CD, or if you want to use floppy images without first
writing them to floppy. Furthermore, some Linux distributions avoid
the need for a dedicated Linux partition by keeping their complete
root file system inside a DOS FAT file using this loop device
driver.

To use the loop device, you need the losetup utility, found in the
util-linux package, see
<ftp://ftp.kernel.org/pub/linux/utils/util-linux/>.

The loop device driver can also be used to "hide" a file system in
a disk partition, floppy, or regular file, either using encryption
(scrambling the data) or steganography (hiding the data in the low
bits of, say, a sound file). This is also safe if the file resides
on a remote file server.

There are several ways of encrypting disks. Some of these require
kernel patches. The vanilla kernel offers the cryptoloop option
and a Device Mapper target (which is superior, as it supports all
file systems). If you want to use the cryptoloop, say Y to both
LOOP and CRYPTOLOOP, and make sure you have a recent (version 2.12
or later) version of util-linux. Additionally, be aware that
the cryptoloop is not safe for storing journaled filesystems.

Note that this loop device has nothing to do with the loopback
device used for network connections from the machine to itself.

To compile this driver as a module, choose M here: the
module will be called loop.

Most users will answer N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CRYPTOLOOP</term>
<nutsynopsis>
	"Cryptoloop Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_LOOP</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to be able to use the ciphers that are 
provided by the CryptoAPI as loop transformation. This might be
used as hard disk encryption.

WARNING: This device is not safe for journaled file systems like
ext3 or Reiserfs. Please use the Device Mapper crypto module
instead, which can be configured to be on-disk compatible with the
cryptoloop device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_NBD</term>
<nutsynopsis>
	"Network block device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y here will allow your computer to be a client for network
block devices, i.e. it will be able to use block devices exported by
servers (mount file systems on them etc.). Communication between
client and server works over TCP/IP networking, but to the client
program this is hidden: it looks like a regular local file access to
a block device special file such as /dev/nd0.

Network block devices also allows you to run a block-device in
userland (making server and client physically the same computer,
communicating using the loopback network device).

Read <file:Documentation/nbd.txt> for more information, especially
about where to find the server code, which runs in user space and
does not need special kernel support.

Note that this has nothing to do with the network file systems NFS
or Coda; you can say N here even if you intend to use NFS or Coda.

To compile this driver as a module, choose M here: the
module will be called nbd.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SX8</term>
<nutsynopsis>
	"Promise SATA SX8 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y or M here will enable support for the 
Promise SATA SX8 controllers.

Use devices /dev/sx8/$N and /dev/sx8/$Np$M.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_UB</term>
<nutsynopsis>
	"Low Performance USB Block driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports certain USB attached storage devices
such as flash keys.

Warning: Enabling this cripples the usb-storage driver.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_RAM</term>
<nutsynopsis>
	"RAM disk support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y here will allow you to use a portion of your RAM memory as
a block device, so that you can make file systems on it, read and
write to it and do all the other things that you can do with normal
block devices (such as hard drives). It is usually used to load and
store a copy of a minimal root file system off of a floppy into RAM
during the initial install of Linux.

Note that the kernel command line option "ramdisk=XX" is now
obsolete. For details, read <file:Documentation/ramdisk.txt>.

To compile this driver as a module, choose M here: the
module will be called rd.

Most normal users won't need the RAM disk functionality, and can
thus say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_RAM_COUNT</term>
<nutsynopsis>
	"Default number of RAM disks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_RAM</literal>
	</para>

	<para>
	default value
	<literal>16</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The default value is 16 RAM disks. Change this if you know what
are doing. If you boot from a filesystem that needs to be extracted
in memory, you will need at least one RAM disk (e.g. root on cramfs).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_RAM_SIZE</term>
<nutsynopsis>
	"Default RAM disk size (kbytes)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_RAM</literal>
	</para>

	<para>
	default value
	<literal>4096 if BLK_DEV_RAM</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The default value is 4096 kilobytes. Only change this if you know
what are you doing. If you are using IBM S/390, then set this to
8192.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_INITRD</term>
<nutsynopsis>
	"Initial RAM disk (initrd) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_RAM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The initial RAM disk is a RAM disk that is loaded by the boot loader
(loadlin or lilo) and that is mounted as root before the normal boot
procedure. It is typically used to load modules needed to mount the
"real" root file system, etc. See <file:Documentation/initrd.txt>
for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LBD</term>
<nutsynopsis>
	"Support for Large Block Devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 || MIPS && 32BIT || PPC32 || ARCH_S390_31 || SUPERH || UML</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to attach large (bigger than 2TB) discs to
your machine, or if you want to have a raid or loopback device
bigger than 2TB.  Otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CDROM_PKTCDVD</term>
<nutsynopsis>
	"Packet writing on CD/DVD media"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a CDROM drive that supports packet writing, say Y to
include preliminary support. It should work with any MMC/Mt Fuji
compliant ATAPI or SCSI drive, which is just about any newer CD
writer.

Currently only writing to CD-RW, DVD-RW and DVD+RW discs is possible.
DVD-RW disks must be in restricted overwrite mode.

To compile this driver as a module, choose M here: the
module will be called pktcdvd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CDROM_PKTCDVD_BUFFERS</term>
<nutsynopsis>
	"Free buffers for data gathering"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CDROM_PKTCDVD</literal>
	</para>

	<para>
	default value
	<literal>8 if CDROM_PKTCDVD</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This controls the maximum number of active concurrent packets. More
concurrent packets can increase write performance, but also require
more memory. Each concurrent packet will require approximately 64Kb
of non-swappable kernel memory, memory which will be allocated at
pktsetup time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CDROM_PKTCDVD_WCACHE</term>
<nutsynopsis>
	"Enable write caching"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CDROM_PKTCDVD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If enabled, write caching will be set for the CD-R/W device. For now
this option is dangerous unless the CD-RW media is known good, as we
don't do deferred write error handling yet.
	</para>

</nutentrybody>
</nutentry>

comment "S/390 block device drivers"
<para>
	depends on
	<literal>ARCH_S390</literal>
	</para>


<nutentry>
	<term>BLK_DEV_XPRAM</term>
<nutsynopsis>
	"XPRAM disk support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to use your expanded storage on S/390
or zSeries as a disk.  This is useful as a _fast_ swap device if you
want to access more than 2G of memory when running in 31 bit mode.
This option is also available as a module which will be called
xpram.  If unsure, say "N".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DCSSBLK</term>
<nutsynopsis>
	"DCSSBLK support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for dcss block device
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DASD</term>
<nutsynopsis>
	"Support for DASD devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && CCW</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable this option if you want to access DASDs directly utilizing
S/390s channel subsystem commands. This is necessary for running
natively on a single image or an LPAR.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DASD_PROFILE</term>
<nutsynopsis>
	"Profiling support for dasd devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && DASD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable this option if you want to see profiling information
in /proc/dasd/statistics.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DASD_ECKD</term>
<nutsynopsis>
	"Support for ECKD Disks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && DASD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ECKD devices are the most commonly used devices. You should enable
this option unless you are very sure to have no ECKD device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DASD_FBA</term>
<nutsynopsis>
	"Support for FBA  Disks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && DASD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option to be able to access FBA devices. It is safe to
say "Y".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DASD_DIAG</term>
<nutsynopsis>
	"Support for DIAG access to Disks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && DASD && (ARCH_S390X=n || EXPERIMENTAL)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to use Diagnose250 command to access
Disks under VM.  If you are not running under VM or unsure what it is,
say "N".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DASD_CMB</term>
<nutsynopsis>
	"Compatibility interface for DASD channel measurement blocks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && DASD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides an additional interface to the channel measurement
facility, which is normally accessed though sysfs, with a set of
ioctl functions specific to the dasd driver.
This is only needed if you want to use applications written for
linux-2.4 dasd channel measurement facility interface.
	</para>

</nutentrybody>
</nutentry>

menu "IO Schedulers"

<nutentry>
	<term>IOSCHED_NOOP</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The no-op I/O scheduler is a minimal scheduler that does basic merging
and sorting. Its main uses include non-disk based block devices like
memory devices, and specialised software or hardware environments
that do their own scheduling and require only minimal assistance from
the kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IOSCHED_AS</term>
<nutsynopsis>
	"Anticipatory I/O scheduler"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The anticipatory I/O scheduler is the default disk scheduler. It is
generally a good choice for most environments, but is quite large and
complex when compared to the deadline I/O scheduler, it can also be
slower in some cases especially some database loads.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IOSCHED_DEADLINE</term>
<nutsynopsis>
	"Deadline I/O scheduler"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The deadline I/O scheduler is simple and compact, and is often as
good as the anticipatory I/O scheduler, and in some database
workloads, better. In the case of a single process performing I/O to
a disk at any one time, its behaviour is almost identical to the
anticipatory I/O scheduler and so is a good choice.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IOSCHED_CFQ</term>
<nutsynopsis>
	"CFQ I/O scheduler"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The CFQ I/O scheduler tries to distribute bandwidth equally
among all processes in the system. It should provide a fair
working environment, suitable for desktop systems.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>ATA_OVER_ETH</term>
<nutsynopsis>
	"ATA over Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides Support for ATA over Ethernet block
devices like the Coraid EtherDrive (R) Storage Blade.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ATA/ATAPI/MFM/RLL support"

<nutentry>
	<term>IDE</term>
<nutsynopsis>
	"ATA/ATAPI/MFM/RLL support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, your kernel will be able to manage low cost mass
storage units such as ATA/(E)IDE and ATAPI units. The most common
cases are IDE hard drives and ATAPI CD-ROM drives.

If your system is pure SCSI and doesn't use these interfaces, you
can say N here.

Integrated Disk Electronics (IDE aka ATA-1) is a connecting standard
for mass storage units such as hard disks. It was designed by
Western Digital and Compaq Computer in 1984. It was then named
ST506. Quite a number of disks use the IDE interface.

AT Attachment (ATA) is the superset of the IDE specifications.
ST506 was also called ATA-1.

Fast-IDE is ATA-2 (also named Fast ATA), Enhanced IDE (EIDE) is
ATA-3. It provides support for larger disks (up to 8.4GB by means of
the LBA standard), more disks (4 instead of 2) and for other mass
storage units such as tapes and cdrom. UDMA/33 (aka UltraDMA/33) is
ATA-4 and provides faster (and more CPU friendly) transfer modes
than previous PIO (Programmed processor Input/Output) from previous
ATA/IDE standards by means of fast DMA controllers.

ATA Packet Interface (ATAPI) is a protocol used by EIDE tape and
CD-ROM drives, similar in many respects to the SCSI protocol.

SMART IDE (Self Monitoring, Analysis and Reporting Technology) was
designed in order to prevent data corruption and disk crash by
detecting pre hardware failure conditions (heat, access time, and
the like...). Disks built since June 1995 may follow this standard.
The kernel itself doesn't manage this; however there are quite a
number of user programs such as smart that can query the status of
SMART parameters from disk drives.

To compile this driver as a module, choose M here: the
module will be called ide.

For further information, please read <file:Documentation/ide.txt>.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_MAX_HWIFS</term>
<nutsynopsis>
	"Max IDE interfaces"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && (ALPHA || SUPERH)</literal>
	</para>

	<para>
	default value
	<literal>4 if IDE && (ALPHA || SUPERH)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the maximum number of IDE hardware interfaces that will
be supported by the driver. Make sure it is at least as high as
the number of IDE interfaces in your system.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE</term>
<nutsynopsis>
	"Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will use the full-featured IDE driver to
control up to ten ATA/IDE interfaces, each being able to serve a
"master" and a "slave" device, for a total of up to twenty ATA/IDE
disk/cdrom/tape/floppy drives.

Useful information about large (>540 MB) IDE disks, multiple
interfaces, what to do if ATA/IDE devices are not automatically
detected, sound card ATA/IDE ports, module support, and other
topics, is contained in <file:Documentation/ide.txt>. For detailed
information about hard drives, consult the Disk-HOWTO and the
Multi-Disk-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To fine-tune ATA/IDE drive/interface parameters for improved
performance, look for the hdparm package at
<ftp://ibiblio.org/pub/Linux/system/hardware/>.

To compile this driver as a module, choose M here and read
<file:Documentation/ide.txt>. The module will be called ide-mod.
Do not compile this driver as a module if your root file system (the
one containing the directory /) is located on an IDE device.

If you have one or more IDE drives, say Y or M here. If your system
has no IDE drives, or if memory requirements are really tight, you
could say N here, and select the "Old hard disk driver" below
instead to save about 13 KB of memory in the kernel.
	</para>

</nutentrybody>
</nutentry>

comment "Please see Documentation/ide.txt for help/info on IDE drives"
<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>


<nutentry>
	<term>BLK_DEV_IDE_SATA</term>
<nutsynopsis>
	"Support for SATA (deprecated; conflicts with libata SATA driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	default value
	<literal>n if IDE && BLK_DEV_IDE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
There are two drivers for Serial ATA controllers.

The main driver, "libata", exists inside the SCSI subsystem
and supports most modern SATA controllers.

The IDE driver (which you are currently configuring) supports
a few first-generation SATA controllers.

In order to eliminate conflicts between the two subsystems,
this config option enables the IDE driver's SATA support.
Normally this is disabled, as it is preferred that libata
supports SATA controllers, and this (IDE) driver supports
PATA controllers.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_HD_IDE</term>
<nutsynopsis>
	"Use old disk-only driver on primary interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && (X86 || SH_MPC1211)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
There are two drivers for MFM/RLL/IDE disks.  Most people use just
the new enhanced driver by itself.  This option however installs the
old hard disk driver to control the primary IDE/disk interface in
the system, leaving the new enhanced IDE driver to take care of only
the 2nd/3rd/4th IDE interfaces.  Doing this will prevent you from
having an IDE/ATAPI CD-ROM or tape drive connected to the primary
IDE interface.  Choosing this option may be useful for older systems
which have MFM/RLL/ESDI controller+drives at the primary port
address (0x1f0), along with IDE drives at the secondary/3rd/4th port
addresses.

Normally, just say N here; you will then use the new driver for all
4 interfaces.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDISK</term>
<nutsynopsis>
	"Include IDE/ATA-2 DISK support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This will include enhanced support for MFM/RLL/IDE hard disks.  If
you have a MFM/RLL/IDE disk, and there is no special reason to use
the old hard disk driver instead, say Y.  If you have an SCSI-only
system, you can say N here.

To compile this driver as a module, choose M here: the
module will be called ide-disk.
Do not compile this driver as a module if your root file system
(the one containing the directory /) is located on the IDE disk.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEDISK_MULTI_MODE</term>
<nutsynopsis>
	"Use multi-mode by default"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you get this error, try to say Y here:

hda: set_multmode: status=0x51 { DriveReady SeekComplete Error }
hda: set_multmode: error=0x04 { DriveStatusError }

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDECS</term>
<nutsynopsis>
	"PCMCIA IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for outboard IDE disks, tape drives, and CD-ROM drives
connected through a  PCMCIA card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDECD</term>
<nutsynopsis>
	"Include IDE/ATAPI CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a CD-ROM drive using the ATAPI protocol, say Y. ATAPI is
a newer protocol used by IDE CD-ROM and TAPE drives, similar to the
SCSI protocol. Most new CD-ROM drives use ATAPI, including the
NEC-260, Mitsumi FX400, Sony 55E, and just about all non-SCSI
double(2X) or better speed drives.

If you say Y here, the CD-ROM drive will be identified at boot time
along with other IDE devices, as "hdb" or "hdc", or something
similar (check the boot messages with dmesg). If this is your only
CD-ROM drive, you can say N to all other CD-ROM options, but be sure
to say Y or M to "ISO 9660 CD-ROM file system support".

Note that older versions of LILO (LInux LOader) cannot properly deal
with IDE/ATAPI CD-ROMs, so install LILO 16 or higher, available from
<http://lilo.go.dyndns.org/>.

To compile this driver as a module, choose M here: the
module will be called ide-cd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDETAPE</term>
<nutsynopsis>
	"Include IDE/ATAPI TAPE support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an IDE tape drive using the ATAPI protocol, say Y.
ATAPI is a newer protocol used by IDE tape and CD-ROM drives,
similar to the SCSI protocol.  If you have an SCSI tape drive
however, you can say N here.

You should also say Y if you have an OnStream DI-30 tape drive; this
will not work with the SCSI protocol, until there is support for the
SC-30 and SC-50 versions.

If you say Y here, the tape drive will be identified at boot time
along with other IDE devices, as "hdb" or "hdc", or something
similar, and will be mapped to a character device such as "ht0"
(check the boot messages with dmesg).  Be sure to consult the
<file:drivers/ide/ide-tape.c> and <file:Documentation/ide.txt> files
for usage information.

To compile this driver as a module, choose M here: the
module will be called ide-tape.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEFLOPPY</term>
<nutsynopsis>
	"Include IDE/ATAPI FLOPPY support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an IDE floppy drive which uses the ATAPI protocol,
answer Y.  ATAPI is a newer protocol used by IDE CD-ROM/tape/floppy
drives, similar to the SCSI protocol.

The LS-120 and the IDE/ATAPI Iomega ZIP drive are also supported by
this driver. For information about jumper settings and the question
of when a ZIP drive uses a partition table, see
<http://www.win.tue.nl/~aeb/linux/zip/zip-1.html>.
(ATAPI PD-CD/CDR drives are not supported by this driver; support
for PD-CD/CDR drives is available if you answer Y to
"SCSI emulation support", below).

If you say Y here, the FLOPPY drive will be identified along with
other IDE devices, as "hdb" or "hdc", or something similar (check
the boot messages with dmesg).

To compile this driver as a module, choose M here: the
module will be called ide-floppy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDESCSI</term>
<nutsynopsis>
	"SCSI emulation support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
WARNING: ide-scsi is no longer needed for cd writing applications!
The 2.6 kernel supports direct writing to ide-cd, which eliminates
the need for ide-scsi + the entire scsi stack just for writing a
cd. The new method is more efficient in every way.

This will provide SCSI host adapter emulation for IDE ATAPI devices,
and will allow you to use a SCSI device driver instead of a native
ATAPI driver.

This is useful if you have an ATAPI device for which no native
driver has been written (for example, an ATAPI PD-CD drive);
you can then use this emulation together with an appropriate SCSI
device driver. In order to do this, say Y here and to "SCSI support"
and "SCSI generic support", below. You must then provide the kernel
command line "hdx=ide-scsi" (try "man bootparam" or see the
documentation of your boot loader (lilo or loadlin) about how to
pass options to the kernel at boot time) for devices if you want the
native EIDE sub-drivers to skip over the native support, so that
this SCSI emulation can be used instead.

Note that this option does NOT allow you to attach SCSI devices to a
box that doesn't have a SCSI host adapter installed.

If both this SCSI emulation and native ATAPI support are compiled
into the kernel, the native support will be used.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_TASK_IOCTL</term>
<nutsynopsis>
	"IDE Taskfile Access"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a direct raw access to the media.  It is a complex but
elegant solution to test and validate the domain of the hardware and
perform below the driver data recover if needed.  This is the most
basic form of media-forensics.

If you are unsure, say N here.
	</para>

</nutentrybody>
</nutentry>

comment "IDE chipset support/bugfixes"
<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>


<nutentry>
	<term>IDE_GENERIC</term>
<nutsynopsis>
	"generic/default IDE chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE</literal>
	</para>

	<para>
	default value
	<literal>y if IDE && BLK_DEV_IDE</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CMD640</term>
<nutsynopsis>
	"CMD640 chipset bugfix/support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && X86</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The CMD-Technologies CMD640 IDE chip is used on many common 486 and
Pentium motherboards, usually in combination with a "Neptune" or
"SiS" chipset. Unfortunately, it has a number of rather nasty
design flaws that can cause severe data corruption under many common
conditions. Say Y here to include code which tries to automatically
detect and correct the problems under Linux. This option also
enables access to the secondary IDE ports in some CMD640 based
systems.

This driver will work automatically in PCI based systems (most new
systems have PCI slots). But if your system uses VESA local bus
(VLB) instead of PCI, you must also supply a kernel boot parameter
to enable the CMD640 bugfix/support: "ide0=cmd640_vlb". (Try "man
bootparam" or see the documentation of your boot loader about how to
pass options to the kernel.)

The CMD640 chip is also used on add-in cards by Acculogic, and on
the "CSA-6400E PCI to IDE controller" that some people have. For
details, read <file:Documentation/ide.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CMD640_ENHANCED</term>
<nutsynopsis>
	"CMD640 enhanced support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_CMD640</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option includes support for setting/autotuning PIO modes and
prefetch on CMD640 IDE interfaces.  For details, read
<file:Documentation/ide.txt>. If you have a CMD640 IDE interface
and your BIOS does not already do this for you, then say Y here.
Otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEPNP</term>
<nutsynopsis>
	"PNP EIDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PNP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a PnP (Plug and Play) compatible EIDE card and
would like the kernel to automatically detect and activate
it, say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEPCI</term>
<nutsynopsis>
	"PCI IDE chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI</literal>
	</para>

	<para>
	default value
	<literal>BLK_DEV_IDEDMA_PMAC if IDE && BLK_DEV_IDE && PPC_PMAC && BLK_DEV_IDEDMA_PMAC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here for PCI systems which use IDE drive(s).
This option helps the IDE driver to automatically detect and
configure all PCI-based IDE interfaces in your system.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEPCI_SHARE_IRQ</term>
<nutsynopsis>
	"Sharing PCI IDE interrupts support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some ATA/IDE chipsets have hardware support which allows for
sharing a single IRQ with other cards. To enable support for
this in the ATA/IDE driver, say Y here.

It is safe to say Y to this question, in most cases.
If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_OFFBOARD</term>
<nutsynopsis>
	"Boot off-board chipsets first support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Normally, IDE controllers built into the motherboard (on-board
controllers) are assigned to ide0 and ide1 while those on add-in PCI
cards (off-board controllers) are relegated to ide2 and ide3.
Answering Y here will allow you to reverse the situation, with
off-board controllers on ide0/1 and on-board controllers on ide2/3.
This can improve the usability of some boot managers such as lilo
when booting from a drive on an off-board controller.

If you say Y here, and you actually want to reverse the device scan
order as explained above, you also need to issue the kernel command
line option "ide=reverse". (Try "man bootparam" or see the
documentation of your boot loader (lilo or loadlin) about how to
pass options to the kernel at boot time.)

Note that, if you do this, the order of the hd* devices will be
rearranged which may require modification of fstab and other files.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_GENERIC</term>
<nutsynopsis>
	"Generic PCI IDE Chipset Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEPCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_OPTI621</term>
<nutsynopsis>
	"OPTi 82C621 chipset enhanced support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the OPTi 82C621 EIDE controller.
Please read the comments at the top of <file:drivers/ide/pci/opti621.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_RZ1000</term>
<nutsynopsis>
	"RZ1000 chipset bugfix/support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The PC-Technologies RZ1000 IDE chip is used on many common 486 and
Pentium motherboards, usually along with the "Neptune" chipset.
Unfortunately, it has a rather nasty design flaw that can cause
severe data corruption under many conditions. Say Y here to include
code which automatically detects and corrects the problem under
Linux. This may slow disk throughput by a few percent, but at least
things will operate 100% reliably.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SL82C105</term>
<nutsynopsis>
	"Winbond SL82c105 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI && (PPC || ARM) && BLK_DEV_IDEPCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Winbond SL82c105 IDE controller, say Y here to enable
special configuration for this chip. This is common on various CHRP
motherboards, but could be used elsewhere. If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDMA_PCI</term>
<nutsynopsis>
	"Generic PCI bus-master DMA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your PCI system uses IDE drive(s) (as opposed to SCSI, say) and
is capable of bus-master DMA operation (most Pentium PCI systems),
you will want to say Y here to reduce CPU overhead. You can then use
the "hdparm" utility to enable DMA for drives for which it was not
enabled automatically. By default, DMA is not enabled automatically
for these drives, but you can change that by saying Y to the
following question "Use DMA by default when available". You can get
the latest version of the hdparm utility from
<ftp://ibiblio.org/pub/Linux/system/hardware/>.

Read the comments at the beginning of <file:drivers/ide/ide-dma.c>
and the file <file:Documentation/ide.txt> for more information.

It is safe to say Y to this question.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDMA_FORCED</term>
<nutsynopsis>
	"Force enable legacy 2.0.X HOSTS to use DMA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is an old piece of lost code from Linux 2.0 Kernels.

Generally say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEDMA_PCI_AUTO</term>
<nutsynopsis>
	"Use PCI DMA by default when available"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Prior to kernel version 2.1.112, Linux used to automatically use
DMA for IDE drives and chipsets which support it. Due to concerns
about a couple of cases where buggy hardware may have caused damage,
the default is now to NOT use DMA automatically. To revert to the
previous behaviour, say Y to this question.

If you suspect your hardware is at all flakey, say N here.
Do NOT email the IDE kernel people regarding this issue!

It is normally safe to answer Y to this question unless your
motherboard uses a VIA VP2 chipset, in which case you should say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEDMA_ONLYDISK</term>
<nutsynopsis>
	"Enable DMA only for disks "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && IDEDMA_PCI_AUTO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is used if you know your ATAPI Devices are going to fail DMA
Transfers.

Generally say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_AEC62XX</term>
<nutsynopsis>
	"AEC62XX chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds explicit support for Acard AEC62xx (Artop ATP8xx)
IDE controllers. This allows the kernel to change PIO, DMA and UDMA
speeds and to configure the chip to optimum performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_ALI15X3</term>
<nutsynopsis>
	"ALI M15x3 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver ensures (U)DMA support for ALI 1533, 1543 and 1543C
onboard chipsets.  It also tests for Simplex mode and enables
normal dual channel support.

If you say Y here, you also need to say Y to "Use DMA by default
when available", above.  Please read the comments at the top of
<file:drivers/ide/pci/alim15x3.c>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WDC_ALI15X3</term>
<nutsynopsis>
	"ALI M15x3 WDC support (DANGEROUS)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_ALI15X3</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This allows for UltraDMA support for WDC drives that ignore CRC
checking. You are a fool for enabling this option, but there have
been requests. DO NOT COMPLAIN IF YOUR DRIVE HAS FS CORRUPTION, IF
YOU ENABLE THIS! No one will listen, just laugh for ignoring this
SERIOUS WARNING.

Using this option can allow WDC drives to run at ATA-4/5 transfer
rates with only an ATA-2 support structure.

SAY N!
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_AMD74XX</term>
<nutsynopsis>
	"AMD and nVidia IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds explicit support for AMD-7xx and AMD-8111 chips
and also for the nVidia nForce chip.  This allows the kernel to
change PIO, DMA and UDMA speeds and to configure the chip to
optimum performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_ATIIXP</term>
<nutsynopsis>
	"ATI IXP chipset IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds explicit support for ATI IXP chipset.
This allows the kernel to change PIO, DMA and UDMA speeds
and to configure the chip to optimum performance.

Say Y here if you have an ATI IXP chipset IDE controller.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CMD64X</term>
<nutsynopsis>
	"CMD64{3|6|8|9} chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an IDE controller which uses any of these
chipsets: CMD643, CMD646, or CMD648.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_TRIFLEX</term>
<nutsynopsis>
	"Compaq Triflex IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Compaq Triflex IDE controller, such
as those commonly found on Compaq Pentium-Pro systems
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CY82C693</term>
<nutsynopsis>
	"CY82C693 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds detection and support for the CY82C693 chipset
used on Digital's PC-Alpha 164SX boards.

If you say Y here, you need to say Y to "Use DMA by default
when available" as well.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CS5520</term>
<nutsynopsis>
	"Cyrix CS5510/20 MediaGX chipset support (VERY EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include support for PIO tuning an virtual DMA on the Cyrix MediaGX 
5510/5520 chipset. This will automatically be detected and
configured if found.

It is safe to say Y to this question.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_CS5530</term>
<nutsynopsis>
	"Cyrix/National Semiconductor CS5530 MediaGX chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include support for UDMA on the Cyrix MediaGX 5530 chipset. This
will automatically be detected and configured if found.

It is safe to say Y to this question.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_HPT34X</term>
<nutsynopsis>
	"HPT34X chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds up to 4 more EIDE devices sharing a single
interrupt. The HPT343 chipset in its current form is a non-bootable
controller; the HPT345/HPT363 chipset is a bootable (needs BIOS FIX)
PCI UDMA controllers. This driver requires dynamic tuning of the
chipset during the ide-probe at boot time. It is reported to support
DVD II drives, by the manufacturer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPT34X_AUTODMA</term>
<nutsynopsis>
	"HPT34X AUTODMA support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_HPT34X && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a dangerous thing to attempt currently! Please read the
comments at the top of <file:drivers/ide/pci/hpt34x.c>.  If you say Y
here, then say Y to "Use DMA by default when available" as well.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_HPT366</term>
<nutsynopsis>
	"HPT36X/37X chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
HPT366 is an Ultra DMA chipset for ATA-66.
HPT368 is an Ultra DMA chipset for ATA-66 RAID Based.
HPT370 is an Ultra DMA chipset for ATA-100.
HPT372 is an Ultra DMA chipset for ATA-100.
HPT374 is an Ultra DMA chipset for ATA-100.

This driver adds up to 4 more EIDE devices sharing a single
interrupt.

The HPT366 chipset in its current form is bootable. One solution
for this problem are special LILO commands for redirecting the
reference to device 0x80. The other solution is to say Y to "Boot
off-board chipsets first support" (CONFIG_BLK_DEV_OFFBOARD) unless
your mother board has the chipset natively mounted. Regardless one
should use the fore mentioned option and call at LILO or include
"ide=reverse" in LILO's append-line.

This driver requires dynamic tuning of the chipset during the
ide-probe at boot. It is reported to support DVD II drives, by the
manufacturer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SC1200</term>
<nutsynopsis>
	"National SCx200 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for the built in IDE on the National
SCx200 series of embedded x86 "Geode" systems
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_PIIX</term>
<nutsynopsis>
	"Intel PIIXn chipsets support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds explicit support for Intel PIIX and ICH chips
and also for the Efar Victory66 (slc90e66) chip.  This allows
the kernel to change PIO, DMA and UDMA speeds and to configure
the chip to optimum performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IT8172</term>
<nutsynopsis>
	"IT8172 IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (MIPS_ITE8172 || MIPS_IVR)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support the on-board IDE controller on the Integrated
Technology Express, Inc. ITE8172 SBC.  Vendor page at
<http://www.ite.com.tw/ia/brief_it8172bsp.htm>; picture of the
board at <http://www.mvista.com/partners/semiconductor/ite.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IT821X</term>
<nutsynopsis>
	"IT821X IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for the ITE 8211 IDE controller and the
IT 8212 IDE RAID controller in both RAID and pass-through mode.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_NS87415</term>
<nutsynopsis>
	"NS87415 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds detection and support for the NS87415 chip
(used in SPARC64, among others).

Please read the comments at the top of <file:drivers/ide/pci/ns87415.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_PDC202XX_OLD</term>
<nutsynopsis>
	"PROMISE PDC202{46|62|65|67} support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Promise Ultra33 or PDC20246
Promise Ultra66 or PDC20262
Promise Ultra100 or PDC20265/PDC20267/PDC20268

This driver adds up to 4 more EIDE devices sharing a single
interrupt. This add-on card is a bootable PCI UDMA controller. Since
multiple cards can be installed and there are BIOS ROM problems that
happen if the BIOS revisions of all installed cards (three-max) do
not match, the driver attempts to do dynamic tuning of the chipset
at boot-time for max-speed.  Ultra33 BIOS 1.25 or newer is required
for more than one card. This card may require that you say Y to
"Special UDMA Feature".

If you say Y here, you need to say Y to "Use DMA by default when
available" as well.

Please read the comments at the top of
<file:drivers/ide/pci/pdc202xx_old.c>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PDC202XX_BURST</term>
<nutsynopsis>
	"Special UDMA Feature"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_PDC202XX_OLD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option causes the pdc202xx driver to enable UDMA modes on the
PDC202xx even when the PDC202xx BIOS has not done so.

It was originally designed for the PDC20246/Ultra33, whose BIOS will
only setup UDMA on the first two PDC20246 cards.  It has also been
used succesfully on a PDC20265/Ultra100, allowing use of UDMA modes
when the PDC20265 BIOS has been disabled (for faster boot up).

Please read the comments at the top of
<file:drivers/ide/pci/pdc202xx_old.c>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_PDC202XX_NEW</term>
<nutsynopsis>
	"PROMISE PDC202{68|69|70|71|75|76|77} support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PDC202XX_FORCE</term>
<nutsynopsis>
	"Enable controller even if disabled by BIOS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_PDC202XX_NEW</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the PDC202xx controller even if it has been disabled in the BIOS setup.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SVWKS</term>
<nutsynopsis>
	"ServerWorks OSB4/CSB5/CSB6 chipsets support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds PIO/(U)DMA support for the ServerWorks OSB4/CSB5
chipsets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SGIIOC4</term>
<nutsynopsis>
	"Silicon Graphics IOC4 chipset ATA/ATAPI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds PIO & MultiMode DMA-2 support for the SGI IOC4
chipset, which has one channel and can support two devices.
Please say Y here if you have an Altix System from SGI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SIIMAGE</term>
<nutsynopsis>
	"Silicon Image chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds PIO/(U)DMA support for the SI CMD680 and SII
3112 (Serial ATA) chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SIS5513</term>
<nutsynopsis>
	"SiS5513 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver ensures (U)DMA support for SIS5513 chipset family based
mainboards.

The following chipsets are supported:
ATA16:  SiS5511, SiS5513
ATA33:  SiS5591, SiS5597, SiS5598, SiS5600
ATA66:  SiS530, SiS540, SiS620, SiS630, SiS640
ATA100: SiS635, SiS645, SiS650, SiS730, SiS735, SiS740,
SiS745, SiS750

If you say Y here, you need to say Y to "Use DMA by default when
available" as well.

Please read the comments at the top of <file:drivers/ide/pci/sis5513.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SLC90E66</term>
<nutsynopsis>
	"SLC90E66 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver ensures (U)DMA support for Victroy66 SouthBridges for
SMsC with Intel NorthBridges.  This is an Ultra66 based chipset.
The nice thing about it is that you can mix Ultra/DMA/PIO devices
and it will handle timing cycles.  Since this is an improved
look-a-like to the PIIX4 it should be a nice addition.

If you say Y here, you need to say Y to "Use DMA by default when
available" as well.

Please read the comments at the top of
<file:drivers/ide/pci/slc90e66.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_TRM290</term>
<nutsynopsis>
	"Tekram TRM290 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds support for bus master DMA transfers
using the Tekram TRM290 PCI IDE chip. Volunteers are
needed for further tweaking and development.
Please read the comments at the top of <file:drivers/ide/pci/trm290.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_VIA82CXXX</term>
<nutsynopsis>
	"VIA82CXXX chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds explicit support for VIA BusMastering IDE chips.
This allows the kernel to change PIO, DMA and UDMA speeds and to
configure the chip to optimum performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE_PMAC</term>
<nutsynopsis>
	"Builtin PowerMac IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_IDE && PPC_PMAC && IDE=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver provides support for the built-in IDE controller on
most of the recent Apple Power Macintoshes and PowerBooks.
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE_PMAC_ATA100FIRST</term>
<nutsynopsis>
	"Probe internal ATA/100 (Kauai) first"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will cause the ATA/100 controller found in UniNorth2
based machines (Windtunnel PowerMac, Aluminium PowerBooks, ...)
to be probed before the ATA/66 and ATA/33 controllers. Without
these, those machine used to have the hard disk on hdc and the
CD-ROM on hda. This option changes this to more natural hda for
hard disk and hdc for CD-ROM.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDMA_PMAC</term>
<nutsynopsis>
	"PowerMac IDE DMA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows the driver for the built-in IDE controller on
Power Macintoshes and PowerBooks to use DMA (direct memory access)
to transfer data to and from memory.  Saying Y is safe and improves
performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE_PMAC_BLINK</term>
<nutsynopsis>
	"Blink laptop LED on drive activity"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC && ADB_PMU</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables the use of the sleep LED as a hard drive
activity LED.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_ARM</term>
	<para>
	default value
	<literal>ARM && (ARCH_A5K || ARCH_CLPS7500 || ARCH_RPC || ARCH_SHARK) if IDE && BLK_DEV_IDE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE_ICSIDE</term>
<nutsynopsis>
	"ICS IDE interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && ARM && ARCH_ACORN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
On Acorn systems, say Y here if you wish to use the ICS IDE
interface card.  This is not required for ICS partition support.
If you are unsure, say N to this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDMA_ICS</term>
<nutsynopsis>
	"ICS DMA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDE_ICSIDE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to add DMA (Direct Memory Access) support to
the ICS IDE driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEDMA_ICS_AUTO</term>
<nutsynopsis>
	"Use ICS DMA by default"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_ICS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Prior to kernel version 2.1.112, Linux used to automatically use
DMA for IDE drives and chipsets which support it. Due to concerns
about a couple of cases where buggy hardware may have caused damage,
the default is now to NOT use DMA automatically. To revert to the
previous behaviour, say Y to this question.

If you suspect your hardware is at all flakey, say N here.
Do NOT email the IDE kernel people regarding this issue!
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE_RAPIDE</term>
<nutsynopsis>
	"RapIDE interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && ARM && ARCH_ACORN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to support the Yellowstone RapIDE controller
manufactured for use with Acorn computers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDE_BAST</term>
<nutsynopsis>
	"Simtec BAST / Thorcom VR1000 IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && ARM && (ARCH_BAST || MACH_VR1000)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to support the onboard IDE channels on the
Simtec BAST or the Thorcom VR1000
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_GAYLE</term>
<nutsynopsis>
	"Amiga Gayle IDE interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && AMIGA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the IDE driver for the Amiga Gayle IDE interface. It supports
both the `A1200 style' and `A4000 style' of the Gayle IDE interface,
This includes builtin IDE interfaces on some Amiga models (A600,
A1200, A4000, and A4000T), and IDE interfaces on the Zorro expansion
bus (M-Tech E-Matrix 530 expansion card).
Say Y if you have an Amiga with a Gayle IDE interface and want to use
IDE devices (hard disks, CD-ROM drives, etc.) that are connected to
it.
Note that you also have to enable Zorro bus support if you want to
use Gayle IDE interfaces on the Zorro expansion bus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDOUBLER</term>
<nutsynopsis>
	"Amiga IDE Doubler support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_GAYLE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver provides support for the so-called `IDE doublers' (made
by various manufacturers, e.g. Eyetech) that can be connected to the
builtin IDE interface of some Amiga models. Using such an IDE
doubler, you can connect up to four instead of two IDE devices on
the Amiga's builtin IDE interface.

Note that the normal Amiga Gayle IDE driver may not work correctly
if you have an IDE doubler and don't enable this driver!

Say Y if you have an IDE doubler.  The driver is enabled at kernel
runtime using the "ide=doubler" kernel boot parameter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_BUDDHA</term>
<nutsynopsis>
	"Buddha/Catweasel/X-Surf IDE interface support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && ZORRO && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the IDE driver for the IDE interfaces on the Buddha, 
Catweasel and X-Surf expansion boards.  It supports up to two interfaces 
on the Buddha, three on the Catweasel and two on the X-Surf.

Say Y if you have a Buddha or Catweasel expansion board and want to
use IDE devices (hard disks, CD-ROM drives, etc.) that are connected
to one of its IDE interfaces.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_FALCON_IDE</term>
<nutsynopsis>
	"Falcon IDE interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && ATARI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the IDE driver for the builtin IDE interface on the Atari
Falcon. Say Y if you have a Falcon and want to use IDE devices (hard
disks, CD-ROM drives, etc.) that are connected to the builtin IDE
interface.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_MAC_IDE</term>
<nutsynopsis>
	"Macintosh Quadra/Powerbook IDE interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && MAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the IDE driver for the builtin IDE interface on some m68k
Macintosh models. It supports both the `Quadra style' (used in
Quadra/ Centris 630 and Performa 588 models) and `Powerbook style'
(used in the Powerbook 150 and 190 models) IDE interface.

Say Y if you have such an Macintosh model and want to use IDE
devices (hard disks, CD-ROM drives, etc.) that are connected to the
builtin IDE interface.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_Q40IDE</term>
<nutsynopsis>
	"Q40/Q60 IDE interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && Q40</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the on-board IDE controller in the Q40/Q60.  This should
normally be on; disable it only if you are running a custom hard
drive subsystem through an expansion card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_MPC8xx_IDE</term>
<nutsynopsis>
	"MPC8xx IDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && 8xx</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option provides support for IDE on Motorola MPC8xx Systems.
Please see 'Type of MPC8xx IDE interface' for details.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Type of MPC8xx IDE interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && BLK_DEV_MPC8xx_IDE</literal>
	</para>

	<para>
	default value
	<literal>IDE_8xx_PCCARD if IDE && BLK_DEV_IDE && BLK_DEV_MPC8xx_IDE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_8xx_PCCARD</term>
<nutsynopsis>
	"8xx_PCCARD"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select how the IDE devices are connected to the MPC8xx system:

8xx_PCCARD uses the 8xx internal PCMCIA interface in combination
with a PC Card (e.g. ARGOSY portable Hard Disk Adapter),
ATA PC Card HDDs or ATA PC Flash Cards (example: TQM8xxL
systems)

8xx_DIRECT is used for directly connected IDE devices using the 8xx
internal PCMCIA interface (example: IVMS8 systems)

EXT_DIRECT is used for IDE devices directly connected to the 8xx
bus using some glue logic, but _not_ the 8xx internal
PCMCIA interface (example: IDIF860 systems)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_8xx_DIRECT</term>
<nutsynopsis>
	"8xx_DIRECT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_EXT_DIRECT</term>
<nutsynopsis>
	"EXT_DIRECT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDE_CHIPSETS</term>
<nutsynopsis>
	"Other IDE chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to include enhanced support for various IDE
interface chipsets used on motherboards and add-on cards. You can
then pick your particular IDE chip from among the following options.
This enhanced support may be necessary for Linux to be able to
access the 3rd/4th drives in some systems. It may also enable
setting of higher speed I/O rates to improve system performance with
these chipsets. Most of these also require special kernel boot
parameters to actually turn on the support at runtime; you can find
a list of these in the file <file:Documentation/ide.txt>.

People with SCSI-only systems can say N here.
	</para>

</nutentrybody>
</nutentry>

comment "Note: most of these also require special kernel boot parameters"
<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>


<nutentry>
	<term>BLK_DEV_4DRIVES</term>
<nutsynopsis>
	"Generic 4 drives/port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Certain older chipsets, including the Tekram 690CD, use a single set
of I/O ports at 0x1f0 to control up to four drives, instead of the
customary two drives per port. Support for this can be enabled at
runtime using the "ide0=four" kernel boot parameter if you say Y
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_ALI14XX</term>
<nutsynopsis>
	"ALI M14xx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is enabled at runtime using the "ide0=ali14xx" kernel
boot parameter.  It enables support for the secondary IDE interface
of the ALI M1439/1443/1445/1487/1489 chipsets, and permits faster
I/O speeds to be set as well.  See the files
<file:Documentation/ide.txt> and <file:drivers/ide/legacy/ali14xx.c> for
more info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_DTC2278</term>
<nutsynopsis>
	"DTC-2278 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is enabled at runtime using the "ide0=dtc2278" kernel
boot parameter. It enables support for the secondary IDE interface
of the DTC-2278 card, and permits faster I/O speeds to be set as
well. See the <file:Documentation/ide.txt> and
<file:drivers/ide/legacy/dtc2278.c> files for more info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_HT6560B</term>
<nutsynopsis>
	"Holtek HT6560B support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is enabled at runtime using the "ide0=ht6560b" kernel
boot parameter. It enables support for the secondary IDE interface
of the Holtek card, and permits faster I/O speeds to be set as well.
See the <file:Documentation/ide.txt> and
<file:drivers/ide/legacy/ht6560b.c> files for more info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_QD65XX</term>
<nutsynopsis>
	"QDI QD65xx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is enabled at runtime using the "ide0=qd65xx" kernel
boot parameter.  It permits faster I/O speeds to be set.  See the
<file:Documentation/ide.txt> and <file:drivers/ide/legacy/qd65xx.c> for
more info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_UMC8672</term>
<nutsynopsis>
	"UMC-8672 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && IDE_CHIPSETS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is enabled at runtime using the "ide0=umc8672" kernel
boot parameter. It enables support for the secondary IDE interface
of the UMC-8672, and permits faster I/O speeds to be set as well.
See the files <file:Documentation/ide.txt> and
<file:drivers/ide/legacy/umc8672.c> for more info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_IDEDMA</term>
	<para>
	default value
	<literal>BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS if IDE && BLK_DEV_IDE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEDMA_IVB</term>
<nutsynopsis>
	"IGNORE word93 Validation BITS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE && (BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
There are unclear terms in ATA-4 and ATA-5 standards how certain
hardware (an 80c ribbon) should be detected. Different interpretations
of the standards have been released in hardware. This causes problems:
for example, a host with Ultra Mode 4 (or higher) will not run
in that mode with an 80c ribbon.

If you are experiencing compatibility or performance problems, you
MAY try to answering Y here. However, it does not necessarily solve
any of your problems, it could even cause more of them.

It is normally safe to answer Y; however, the default is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IDEDMA_AUTO</term>
	<para>
	default value
	<literal>IDEDMA_PCI_AUTO || IDEDMA_ICS_AUTO if IDE && BLK_DEV_IDE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_HD_ONLY</term>
<nutsynopsis>
	"Old hard disk (MFM/RLL/IDE) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IDE && BLK_DEV_IDE=n</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
There are two drivers for MFM/RLL/IDE hard disks. Most people use
the newer enhanced driver, but this old one is still around for two
reasons. Some older systems have strange timing problems and seem to
work only with the old driver (which itself does not work with some
newer systems). The other reason is that the old driver is smaller,
since it lacks the enhanced functionality of the new one. This makes
it a good choice for systems with very tight memory restrictions, or
for systems with only older MFM/RLL/ESDI drives. Choosing the old
driver can save 13 KB or so of kernel memory.

If you are unsure, then just choose the Enhanced IDE/MFM/RLL driver
instead of this one. For more detailed information, read the
Disk-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_HD</term>
	<para>
	default value
	<literal>BLK_DEV_HD_IDE || BLK_DEV_HD_ONLY if IDE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "SCSI device support"

<nutentry>
	<term>RAID_ATTRS</term>
<nutsynopsis>
	"RAID Transport Class"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>n</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Provides RAID
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI</term>
<nutsynopsis>
	"SCSI device support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use a SCSI hard disk, SCSI tape drive, SCSI CD-ROM or
any other SCSI device under Linux, say Y and make sure that you know
the name of your SCSI host adapter (the card inside your computer
that "speaks" the SCSI protocol, also called SCSI controller),
because you will be asked for it.

You also need to say Y here if you have a device which speaks
the SCSI protocol.  Examples of this include the parallel port
version of the IOMEGA ZIP drive, USB storage devices, Fibre
Channel, FireWire storage and the IDE-SCSI emulation driver.

To compile this driver as a module, choose M here and read
<file:Documentation/scsi/scsi.txt>.
The module will be called scsi_mod.

However, do not compile this as a module if your root file system
(the one containing the directory /) is located on a SCSI device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_PROC_FS</term>
<nutsynopsis>
	"legacy /proc/scsi/ support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && PROC_FS</literal>
	</para>

	<para>
	default value
	<literal>y if SCSI && PROC_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for the various files in
/proc/scsi.  In Linux 2.6 this has been superceeded by
files in sysfs but many legacy applications rely on this.

If unusure say Y.
	</para>

</nutentrybody>
</nutentry>

comment "SCSI support type (disk, tape, CD-ROM)"
<para>
	depends on
	<literal>SCSI</literal>
	</para>


<nutentry>
	<term>BLK_DEV_SD</term>
<nutsynopsis>
	"SCSI disk support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use SCSI hard disks, Fibre Channel disks,
USB storage or the SCSI or parallel port version of
the IOMEGA ZIP drive, say Y and read the SCSI-HOWTO,
the Disk-HOWTO and the Multi-Disk-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. This is NOT for SCSI
CD-ROMs.

To compile this driver as a module, choose M here and read
<file:Documentation/scsi/scsi.txt>.
The module will be called sd_mod.

Do not compile this driver as a module if your root file system
(the one containing the directory /) is located on a SCSI disk.
In this case, do not compile the driver for your SCSI host adapter
(below) as a module either.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CHR_DEV_ST</term>
<nutsynopsis>
	"SCSI tape support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use a SCSI tape drive under Linux, say Y and read the
SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, and
<file:Documentation/scsi/st.txt> in the kernel source.  This is NOT
for SCSI CD-ROMs.

To compile this driver as a module, choose M here and read
<file:Documentation/scsi/scsi.txt>. The module will be called st.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CHR_DEV_OSST</term>
<nutsynopsis>
	"SCSI OnStream SC-x0 tape support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The OnStream SC-x0 SCSI tape drives can not be driven by the
standard st driver, but instead need this special osst driver and
use the  /dev/osstX char device nodes (major 206).  Via usb-storage
and ide-scsi, you may be able to drive the USB-x0 and DI-x0 drives
as well.  Note that there is also a second generation of OnStream
tape drives (ADR-x0) that supports the standard SCSI-2 commands for
tapes (QIC-157) and can be driven by the standard driver st.
For more information, you may have a look at the SCSI-HOWTO
<http://www.tldp.org/docs.html#howto>  and
<file:Documentation/scsi/osst.txt>  in the kernel source.
More info on the OnStream driver may be found on
<http://linux1.onstream.nl/test/>
Please also have a look at the standard st docu, as most of it
applies to osst as well.

To compile this driver as a module, choose M here and read
<file:Documentation/scsi/scsi.txt>. The module will be called osst.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SR</term>
<nutsynopsis>
	"SCSI CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use a SCSI or FireWire CD-ROM under Linux,
say Y and read the SCSI-HOWTO and the CDROM-HOWTO at
<http://www.tldp.org/docs.html#howto>. Also make sure to say
Y or M to "ISO 9660 CD-ROM file system support" later.

To compile this driver as a module, choose M here and read
<file:Documentation/scsi/scsi.txt>.
The module will be called sr_mod.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_SR_VENDOR</term>
<nutsynopsis>
	"Enable vendor-specific extensions (for SCSI CDROM)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_SR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the usage of vendor specific SCSI commands. This is
required to support multisession CDs with old NEC/TOSHIBA cdrom
drives (and HP Writers). If you have such a drive and get the first
session only, try saying Y here; everybody else says N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CHR_DEV_SG</term>
<nutsynopsis>
	"SCSI generic support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use SCSI scanners, synthesizers or CD-writers or just
about anything having "SCSI" in its name other than hard disks,
CD-ROMs or tapes, say Y here. These won't be supported by the kernel
directly, so you need some additional software which knows how to
talk to these devices using the SCSI protocol:

For scanners, look at SANE (<http://www.mostang.com/sane/>). For CD
writer software look at Cdrtools
(<http://www.fokus.gmd.de/research/cc/glone/employees/joerg.schilling/private/cdrecord.html>)
and for burning a "disk at once": CDRDAO
(<http://cdrdao.sourceforge.net/>). Cdparanoia is a high
quality digital reader of audio CDs (<http://www.xiph.org/paranoia/>).
For other devices, it's possible that you'll have to write the
driver software yourself. Please read the file
<file:Documentation/scsi/scsi-generic.txt> for more information.

To compile this driver as a module, choose M here and read
<file:Documentation/scsi/scsi.txt>. The module will be called sg.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CHR_DEV_SCH</term>
<nutsynopsis>
	"SCSI media changer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for SCSI media changers.  Most common devices are
tape libraries and MOD/CDROM jukeboxes.  *Real* jukeboxes, you
don't need this for those tiny 6-slot cdrom changers.  Media
changers are listed as "Type: Medium Changer" in /proc/scsi/scsi.
If you have such hardware and want to use it with linux, say Y
here.  Check <file:Documentation/scsi-changer.txt> for details.

If you want to compile this as a module ( = code which can be
inserted in and removed from the running kernel whenever you want),
say M here and read <file:Documentation/modules.txt> and
<file:Documentation/scsi.txt>. The module will be called ch.o.
If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "Some SCSI devices (e.g. CD jukebox) support multiple LUNs"
<para>
	depends on
	<literal>SCSI</literal>
	</para>


<nutentry>
	<term>SCSI_MULTI_LUN</term>
<nutsynopsis>
	"Probe all LUNs on each SCSI device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a SCSI device that supports more than one LUN (Logical
Unit Number), e.g. a CD jukebox, and only one LUN is detected, you
can say Y here to force the SCSI driver to probe for multiple LUNs.
A SCSI device with multiple LUNs acts logically like multiple SCSI
devices. The vast majority of SCSI devices have only one LUN, and
so most people can say N here. The max_luns boot/module parameter 
allows to override this setting.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_CONSTANTS</term>
<nutsynopsis>
	"Verbose SCSI error reporting (kernel size +=12K)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The error messages regarding your SCSI hardware will be easier to
understand if you say Y here; it will enlarge your kernel by about
12 KB. If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_LOGGING</term>
<nutsynopsis>
	"SCSI logging facility"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This turns on a logging facility that can be used to debug a number
of SCSI related problems.

If you say Y here, no logging output will appear by default, but you
can enable logging by saying Y to "/proc file system support" and
"Sysctl support" below and executing the command

echo "scsi log token [level]" > /proc/scsi/scsi

at boot time after the /proc file system has been mounted.

There are a number of things that can be used for 'token' (you can
find them in the source: <file:drivers/scsi/scsi.c>), and this
allows you to select the types of information you want, and the
level allows you to select the level of verbosity.

If you say N here, it may be harder to track down some types of SCSI
problems. If you say Y here your kernel will be somewhat larger, but
there should be no noticeable performance impact as long as you have
logging turned off.
	</para>

</nutentrybody>
</nutentry>

menu "SCSI Transport Attributes"
<para>
	depends on
	<literal>SCSI</literal>
	</para>


<nutentry>
	<term>SCSI_SPI_ATTRS</term>
<nutsynopsis>
	"Parallel SCSI (SPI) Transport Attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you wish to export transport-specific information about
each attached SCSI device to sysfs, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_FC_ATTRS</term>
<nutsynopsis>
	"FiberChannel Transport Attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you wish to export transport-specific information about
each attached FiberChannel device to sysfs, say Y.
Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ISCSI_ATTRS</term>
<nutsynopsis>
	"iSCSI Transport Attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you wish to export transport-specific information about
each attached iSCSI device to sysfs, say Y.
Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SAS_ATTRS</term>
<nutsynopsis>
	"SAS Transport Attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you wish to export transport-specific information about
each attached SAS device to sysfs, say Y.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "SCSI low-level drivers"
<para>
	depends on
	<literal>SCSI!=n</literal>
	</para>


<nutentry>
	<term>SGIWD93_SCSI</term>
<nutsynopsis>
	"SGI WD93C93 SCSI Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SGI_IP22 && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Western Digital WD93 SCSI controller on
an SGI MIPS system, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DECNCR</term>
<nutsynopsis>
	"DEC NCR53C94 Scsi Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MACH_DECSTATION && SCSI && TC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the NCR53C94 SCSI controller chips on IOASIC
based TURBOchannel DECstations and TURBOchannel PMAZ-A cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DECSII</term>
<nutsynopsis>
	"DEC SII Scsi Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MACH_DECSTATION && SCSI && 32BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_3W_XXXX_RAID</term>
<nutsynopsis>
	"3ware 5/6/7/8xxx ATA-RAID support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
3ware is the only hardware ATA-Raid product in Linux to date.
This card is 2,4, or 8 channel master mode support only.
SCSI support required!!!

<http://www.3ware.com/>

Please read the comments at the top of
<file:drivers/scsi/3w-xxxx.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_3W_9XXX</term>
<nutsynopsis>
	"3ware 9xxx SATA-RAID support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the 9000 series 3ware SATA-RAID cards.

<http://www.amcc.com>

Please read the comments at the top of
<file:drivers/scsi/3w-9xxx.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_7000FASST</term>
<nutsynopsis>
	"7000FASST SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Western Digital 7000 SCSI host adapter
family.  Some information is in the source:
<file:drivers/scsi/wd7000.c>.

To compile this driver as a module, choose M here: the
module will be called wd7000.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ACARD</term>
<nutsynopsis>
	"ACARD SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the ACARD SCSI host adapter.
Support Chip <ATP870 ATP876 ATP880 ATP885>
To compile this driver as a module, choose M here: the
module will be called atp870u.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AHA152X</term>
<nutsynopsis>
	"Adaptec AHA152X/2825 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the AHA-1510, AHA-1520, AHA-1522, and AHA-2825
SCSI host adapters. It also works for the AVA-1505, but the IRQ etc.
must be manually specified in this case.

It is explained in section 3.3 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. You might also want to
read the file <file:Documentation/scsi/aha152x.txt>.

To compile this driver as a module, choose M here: the
module will be called aha152x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AHA1542</term>
<nutsynopsis>
	"Adaptec AHA1542 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for a SCSI host adapter.  It is explained in section
3.4 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  Note that Trantor was
purchased by Adaptec, and some former Trantor products are being
sold under the Adaptec name.  If it doesn't work out of the box, you
may have to change some settings in <file:drivers/scsi/aha1542.h>.

To compile this driver as a module, choose M here: the
module will be called aha1542.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AHA1740</term>
<nutsynopsis>
	"Adaptec AHA1740 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for a SCSI host adapter.  It is explained in section
3.5 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  If it doesn't work out
of the box, you may have to change some settings in
<file:drivers/scsi/aha1740.h>.

To compile this driver as a module, choose M here: the
module will be called aha1740.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AACRAID</term>
<nutsynopsis>
	"Adaptec AACRAID support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AIC7XXX</term>
<nutsynopsis>
	"Adaptec AIC7xxx Fast -> U160 support (New Driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PCI || EISA) && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports all of Adaptec's Fast through Ultra 160 PCI
based SCSI controllers as well as the aic7770 based EISA and VLB
SCSI controllers (the 274x and 284x series).  For AAA and ARO based
configurations, only SCSI functionality is provided.

To compile this driver as a module, choose M here: the
module will be called aic7xxx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_CMDS_PER_DEVICE</term>
<nutsynopsis>
	"Maximum number of TCQ commands per device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX</literal>
	</para>

	<para>
	default value
	<literal>32 if SCSI && SCSI_AIC7XXX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Specify the number of commands you would like to allocate per SCSI
device when Tagged Command Queueing (TCQ) is enabled on that device.

This is an upper bound value for the number of tagged transactions
to be used for any device.  The aic7xxx driver will automatically
vary this number based on device behavior.  For devices with a
fixed maximum, the driver will eventually lock to this maximum
and display a console message inidicating this value.

Due to resource allocation issues in the Linux SCSI mid-layer, using
a high number of commands per device may result in memory allocation
failures when many devices are attached to the system.  For this reason,
the default is set to 32.  Higher values may result in higer performance
on some devices.  The upper bound is 253.  0 disables tagged queueing.

Per device tag depth can be controlled via the kernel command line
"tag_info" option.  See drivers/scsi/aic7xxx/README.aic7xxx
for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_RESET_DELAY_MS</term>
<nutsynopsis>
	"Initial bus reset delay in milli-seconds"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX</literal>
	</para>

	<para>
	default value
	<literal>15000 if SCSI && SCSI_AIC7XXX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The number of milliseconds to delay after an initial bus reset.
The bus settle delay following all error recovery actions is
dictated by the SCSI layer and is not affected by this value.

Default: 15000 (15 seconds)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_PROBE_EISA_VL</term>
<nutsynopsis>
	"Probe for EISA and VL AIC7XXX Adapters"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX && EISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Probe for EISA and VLB Aic7xxx controllers.  In many newer systems,
the invasive probes necessary to detect these controllers can cause
other devices to fail.  For this reason, the non-PCI probe code is
disabled by default.  The current value of this option can be "toggled"
via the no_probe kernel command line option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_BUILD_FIRMWARE</term>
<nutsynopsis>
	"Build Adapter Firmware with Kernel Build"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option should only be enabled if you are modifying the firmware
source to the aic7xxx driver and wish to have the generated firmware
include files updated during a normal kernel build.  The assembler
for the firmware requires lex and yacc or their equivalents, as well
as the db v1 library.  You may have to install additional packages
or modify the assembler Makefile or the files it includes if your
build environment is different than that of the author.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_DEBUG_ENABLE</term>
<nutsynopsis>
	"Compile in Debugging Code"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX</literal>
	</para>

	<para>
	default value
	<literal>y if SCSI && SCSI_AIC7XXX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Compile in aic7xxx debugging code that can be useful in diagnosing
driver errors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_DEBUG_MASK</term>
<nutsynopsis>
	"Debug code enable mask (2047 for all debugging)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX</literal>
	</para>

	<para>
	default value
	<literal>0 if SCSI && SCSI_AIC7XXX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Bit mask of debug options that is only valid if the
CONFIG_AIC7XXX_DEBUG_ENBLE option is enabled.  The bits in this mask
are defined in the drivers/scsi/aic7xxx/aic7xxx.h - search for the
variable ahc_debug in that file to find them.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC7XXX_REG_PRETTY_PRINT</term>
<nutsynopsis>
	"Decode registers during diagnostics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC7XXX</literal>
	</para>

	<para>
	default value
	<literal>y if SCSI && SCSI_AIC7XXX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Compile in register value tables for the output of expanded register
contents in diagnostics.  This make it much easier to understand debug
output without having to refer to a data book and/or the aic7xxx.reg
file.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AIC7XXX_OLD</term>
<nutsynopsis>
	"Adaptec AIC7xxx support (old driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ISA || EISA || PCI) && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
WARNING This driver is an older aic7xxx driver and is no longer
under active development.  Adaptec, Inc. is writing a new driver to
take the place of this one, and it is recommended that whenever
possible, people should use the new Adaptec written driver instead
of this one.  This driver will eventually be phased out entirely.

This is support for the various aic7xxx based Adaptec SCSI
controllers. These include the 274x EISA cards; 284x VLB cards;
2902, 2910, 293x, 294x, 394x, 3985 and several other PCI and
motherboard based SCSI controllers from Adaptec. It does not support
the AAA-13x RAID controllers from Adaptec, nor will it likely ever
support them. It does not support the 2920 cards from Adaptec that
use the Future Domain SCSI controller chip. For those cards, you
need the "Future Domain 16xx SCSI support" driver.

In general, if the controller is based on an Adaptec SCSI controller
chip from the aic777x series or the aic78xx series, this driver
should work. The only exception is the 7810 which is specifically
not supported (that's the RAID controller chip on the AAA-13x
cards).

Note that the AHA2920 SCSI host adapter is *not* supported by this
driver; choose "Future Domain 16xx SCSI support" instead if you have
one of those.

Information on the configuration options for this controller can be
found by checking the help file for each of the available
configuration options. You should read
<file:Documentation/scsi/aic7xxx_old.txt> at a minimum before
contacting the maintainer with any questions.  The SCSI-HOWTO,
available from <http://www.tldp.org/docs.html#howto>, can also
be of great help.

To compile this driver as a module, choose M here: the
module will be called aic7xxx_old.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AIC79XX</term>
<nutsynopsis>
	"Adaptec AIC79xx U320 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports all of Adaptec's Ultra 320 PCI-X
based SCSI controllers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_CMDS_PER_DEVICE</term>
<nutsynopsis>
	"Maximum number of TCQ commands per device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX</literal>
	</para>

	<para>
	default value
	<literal>32 if SCSI && SCSI_AIC79XX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Specify the number of commands you would like to allocate per SCSI
device when Tagged Command Queueing (TCQ) is enabled on that device.

This is an upper bound value for the number of tagged transactions
to be used for any device.  The aic7xxx driver will automatically
vary this number based on device behavior.  For devices with a
fixed maximum, the driver will eventually lock to this maximum
and display a console message inidicating this value.

Due to resource allocation issues in the Linux SCSI mid-layer, using
a high number of commands per device may result in memory allocation
failures when many devices are attached to the system.  For this reason,
the default is set to 32.  Higher values may result in higer performance
on some devices.  The upper bound is 253.  0 disables tagged queueing.

Per device tag depth can be controlled via the kernel command line
"tag_info" option.  See drivers/scsi/aic7xxx/README.aic79xx
for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_RESET_DELAY_MS</term>
<nutsynopsis>
	"Initial bus reset delay in milli-seconds"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX</literal>
	</para>

	<para>
	default value
	<literal>15000 if SCSI && SCSI_AIC79XX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The number of milliseconds to delay after an initial bus reset.
The bus settle delay following all error recovery actions is
dictated by the SCSI layer and is not affected by this value.

Default: 15000 (15 seconds)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_BUILD_FIRMWARE</term>
<nutsynopsis>
	"Build Adapter Firmware with Kernel Build"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option should only be enabled if you are modifying the firmware
source to the aic79xx driver and wish to have the generated firmware
include files updated during a normal kernel build.  The assembler
for the firmware requires lex and yacc or their equivalents, as well
as the db v1 library.  You may have to install additional packages
or modify the assembler Makefile or the files it includes if your
build environment is different than that of the author.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_ENABLE_RD_STRM</term>
<nutsynopsis>
	"Enable Read Streaming for All Targets"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX</literal>
	</para>

	<para>
	default value
	<literal>n if SCSI && SCSI_AIC79XX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Read Streaming is a U320 protocol option that should enhance
performance.  Early U320 drive firmware actually performs slower
with read streaming enabled so it is disabled by default.  Read
Streaming can be configured in much the same way as tagged queueing
using the "rd_strm" command line option.  See
drivers/scsi/aic7xxx/README.aic79xx for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_DEBUG_ENABLE</term>
<nutsynopsis>
	"Compile in Debugging Code"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX</literal>
	</para>

	<para>
	default value
	<literal>y if SCSI && SCSI_AIC79XX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Compile in aic79xx debugging code that can be useful in diagnosing
driver errors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_DEBUG_MASK</term>
<nutsynopsis>
	"Debug code enable mask (16383 for all debugging)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX</literal>
	</para>

	<para>
	default value
	<literal>0 if SCSI && SCSI_AIC79XX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Bit mask of debug options that is only valid if the
CONFIG_AIC79XX_DEBUG_ENBLE option is enabled.  The bits in this mask
are defined in the drivers/scsi/aic7xxx/aic79xx.h - search for the
variable ahd_debug in that file to find them.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIC79XX_REG_PRETTY_PRINT</term>
<nutsynopsis>
	"Decode registers during diagnostics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_AIC79XX</literal>
	</para>

	<para>
	default value
	<literal>y if SCSI && SCSI_AIC79XX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Compile in register value tables for the output of expanded register
contents in diagnostics.  This make it much easier to understand debug
output without having to refer to a data book and/or the aic7xxx.reg
file.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DPT_I2O</term>
<nutsynopsis>
	"Adaptec I2O RAID support "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!64BIT && SCSI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports all of Adaptec's I2O based RAID controllers as 
well as the DPT SmartRaid V cards.  This is an Adaptec maintained
driver by Deanna Bonds.  See <file:Documentation/scsi/dpti.txt>.

To compile this driver as a module, choose M here: the
module will be called dpt_i2o.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ADVANSYS</term>
<nutsynopsis>
	"AdvanSys SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ISA || EISA || PCI) && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for all SCSI host adapters manufactured by
AdvanSys. It is documented in the kernel source in
<file:drivers/scsi/advansys.c>.

To compile this driver as a module, choose M here: the
module will be called advansys.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IN2000</term>
<nutsynopsis>
	"Always IN2000 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for an ISA bus SCSI host adapter.  You'll find more
information in <file:Documentation/scsi/in2000.txt>. If it doesn't work
out of the box, you may have to change the jumpers for IRQ or
address selection.

To compile this driver as a module, choose M here: the
module will be called in2000.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MEGARAID_NEWGEN</term>
<nutsynopsis>
	"LSI Logic New Generation RAID Device Drivers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
LSI Logic RAID Device Drivers
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MEGARAID_MM</term>
<nutsynopsis>
	"LSI Logic Management Module (New Driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI && MEGARAID_NEWGEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Management Module provides ioctl, sysfs support for LSI Logic
RAID controllers.
To compile this driver as a module, choose M here: the
module will be called megaraid_mm
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MEGARAID_MAILBOX</term>
<nutsynopsis>
	"LSI Logic MegaRAID Driver (New Driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI && MEGARAID_MM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
List of supported controllers

OEM	Product Name		VID :DID :SVID:SSID
---	------------		---- ---- ---- ----
Dell PERC3/QC			101E:1960:1028:0471
Dell PERC3/DC			101E:1960:1028:0493
Dell PERC3/SC			101E:1960:1028:0475
Dell PERC3/Di			1028:000E:1028:0123
Dell PERC4/SC			1000:1960:1028:0520
Dell PERC4/DC			1000:1960:1028:0518
Dell PERC4/QC			1000:0407:1028:0531
Dell PERC4/Di			1028:000F:1028:014A
Dell PERC 4e/Si			1028:0013:1028:016c
Dell PERC 4e/Di			1028:0013:1028:016d
Dell PERC 4e/Di			1028:0013:1028:016e
Dell PERC 4e/Di			1028:0013:1028:016f
Dell PERC 4e/Di			1028:0013:1028:0170
Dell PERC 4e/DC			1000:0408:1028:0002
Dell PERC 4e/SC			1000:0408:1028:0001
LSI MegaRAID SCSI 320-0		1000:1960:1000:A520
LSI MegaRAID SCSI 320-1		1000:1960:1000:0520
LSI MegaRAID SCSI 320-2		1000:1960:1000:0518
LSI MegaRAID SCSI 320-0X	1000:0407:1000:0530
LSI MegaRAID SCSI 320-2X	1000:0407:1000:0532
LSI MegaRAID SCSI 320-4X	1000:0407:1000:0531
LSI MegaRAID SCSI 320-1E	1000:0408:1000:0001
LSI MegaRAID SCSI 320-2E	1000:0408:1000:0002
LSI MegaRAID SATA 150-4		1000:1960:1000:4523
LSI MegaRAID SATA 150-6		1000:1960:1000:0523
LSI MegaRAID SATA 300-4X	1000:0409:1000:3004
LSI MegaRAID SATA 300-8X	1000:0409:1000:3008
INTEL RAID Controller SRCU42X	1000:0407:8086:0532
INTEL RAID Controller SRCS16	1000:1960:8086:0523
INTEL RAID Controller SRCU42E	1000:0408:8086:0002
INTEL RAID Controller SRCZCRX	1000:0407:8086:0530
INTEL RAID Controller SRCS28X	1000:0409:8086:3008
INTEL RAID Controller SROMBU42E	1000:0408:8086:3431
INTEL RAID Controller SROMBU42E	1000:0408:8086:3499
INTEL RAID Controller SRCU51L	1000:1960:8086:0520
FSC MegaRAID PCI Express ROMB	1000:0408:1734:1065
ACER MegaRAID ROMB-2E		1000:0408:1025:004D
NEC MegaRAID PCI Express ROMB	1000:0408:1033:8287

To compile this driver as a module, choose M here: the
module will be called megaraid_mbox
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MEGARAID_LEGACY</term>
<nutsynopsis>
	"LSI Logic Legacy MegaRAID Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!MEGARAID_NEWGEN && PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the LSI MegaRAID 418, 428, 438, 466, 762, 490
and 467 SCSI host adapters. This driver also support the all U320
RAID controllers

To compile this driver as a module, choose M here: the
module will be called megaraid
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MEGARAID_SAS</term>
<nutsynopsis>
	"LSI Logic MegaRAID SAS RAID Module"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Module for LSI Logic's SAS based RAID controllers.
To compile this driver as a module, choose 'm' here.
Module will be called megaraid_sas
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA</term>
<nutsynopsis>
	"Serial ATA (SATA) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver family supports Serial ATA host controllers
and devices.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_AHCI</term>
<nutsynopsis>
	"AHCI SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for AHCI Serial ATA.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_SVW</term>
<nutsynopsis>
	"ServerWorks Frodo / Apple K2 SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for Broadcom/Serverworks/Apple K2
SATA support.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ATA_PIIX</term>
<nutsynopsis>
	"Intel PIIX/ICH SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for ICH5 Serial ATA.
If PATA support was enabled previously, this enables
support for select Intel PIIX/ICH PATA host controllers.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_MV</term>
<nutsynopsis>
	"Marvell SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for the Marvell Serial ATA family.
Currently supports 88SX[56]0[48][01] chips.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_NV</term>
<nutsynopsis>
	"NVIDIA SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for NVIDIA Serial ATA.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_PROMISE</term>
<nutsynopsis>
	"Promise SATA TX2/TX4 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for Promise Serial ATA TX2/TX4.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_QSTOR</term>
<nutsynopsis>
	"Pacific Digital SATA QStor support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for Pacific Digital Serial ATA QStor.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_SX4</term>
<nutsynopsis>
	"Promise SATA SX4 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for Promise Serial ATA SX4.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_SIL</term>
<nutsynopsis>
	"Silicon Image SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for Silicon Image Serial ATA.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_SIS</term>
<nutsynopsis>
	"SiS 964/180 SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for SiS Serial ATA 964/180.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_ULI</term>
<nutsynopsis>
	"ULi Electronics SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for ULi Electronics SATA.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_VIA</term>
<nutsynopsis>
	"VIA SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for VIA Serial ATA.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SATA_VITESSE</term>
<nutsynopsis>
	"VITESSE VSC-7174 SATA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_SATA && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for Vitesse VSC7174 Serial ATA.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_BUSLOGIC</term>
<nutsynopsis>
	"BusLogic SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PCI || ISA || MCA) && SCSI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for BusLogic MultiMaster and FlashPoint SCSI Host
Adapters. Consult the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, and the files
<file:Documentation/scsi/BusLogic.txt> and
<file:Documentation/scsi/FlashPoint.txt> for more information.

To compile this driver as a module, choose M here: the
module will be called BusLogic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_OMIT_FLASHPOINT</term>
<nutsynopsis>
	"Omit FlashPoint support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_BUSLOGIC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to omit the FlashPoint support from the
BusLogic SCSI driver. The FlashPoint SCCB Manager code is
substantial, so users of MultiMaster Host Adapters may wish to omit
it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_CPQFCTS</term>
<nutsynopsis>
	"Compaq Fibre Channel 64-bit/66Mhz HBA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to compile in support for the Compaq StorageWorks Fibre
Channel 64-bit/66Mhz Host Bus Adapter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DMX3191D</term>
<nutsynopsis>
	"DMX3191D SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for Domex DMX3191D SCSI Host Adapters.

To compile this driver as a module, choose M here: the
module will be called dmx3191d.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DTC3280</term>
<nutsynopsis>
	"DTC3180/3280 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for DTC 3180/3280 SCSI Host Adapters.  Please read
the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, and the file
<file:Documentation/scsi/dtc3x80.txt>.

To compile this driver as a module, choose M here: the
module will be called dtc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_EATA</term>
<nutsynopsis>
	"EATA ISA/EISA/PCI (DPT and generic EATA/DMA-compliant boards) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ISA || EISA || PCI) && SCSI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports all EATA/DMA-compliant SCSI host adapters.  DPT
ISA and all EISA I/O addresses are probed looking for the "EATA"
signature. The addresses of all the PCI SCSI controllers reported
by the PCI subsystem are probed as well.

You want to read the start of <file:drivers/scsi/eata.c> and the
SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called eata.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_EATA_TAGGED_QUEUE</term>
<nutsynopsis>
	"enable tagged command queueing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_EATA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a feature of SCSI-2 which improves performance: the host
adapter can send several SCSI commands to a device's queue even if
previous commands haven't finished yet.
This is equivalent to the "eata=tc:y" boot option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_EATA_LINKED_COMMANDS</term>
<nutsynopsis>
	"enable elevator sorting"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_EATA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables elevator sorting for all probed SCSI disks and
CD-ROMs. It definitely reduces the average seek distance when doing
random seeks, but this does not necessarily result in a noticeable
performance improvement: your mileage may vary...
This is equivalent to the "eata=lc:y" boot option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_EATA_MAX_TAGS</term>
<nutsynopsis>
	"maximum number of queued commands"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_EATA</literal>
	</para>

	<para>
	default value
	<literal>16 if SCSI && SCSI_EATA</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This specifies how many SCSI commands can be maximally queued for
each probed SCSI device. You should reduce the default value of 16
only if you have disks with buggy or limited tagged command support.
Minimum is 2 and maximum is 62. This value is also the window size
used by the elevator sorting option above. The effective value used
by the driver for each probed SCSI device is reported at boot time.
This is equivalent to the "eata=mq:8" boot option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_EATA_PIO</term>
<nutsynopsis>
	"EATA-PIO (old DPT PM2001, PM2012A) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ISA || EISA || PCI) && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports all EATA-PIO protocol compliant SCSI Host
Adapters like the DPT PM2001 and the PM2012A.  EATA-DMA compliant
host adapters could also use this driver but are discouraged from
doing so, since this driver only supports hard disks and lacks
numerous features.  You might want to have a look at the SCSI-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called eata_pio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_FUTURE_DOMAIN</term>
<nutsynopsis>
	"Future Domain 16xx SCSI/AHA-2920A support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ISA || PCI) && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for Future Domain's 16-bit SCSI host adapters
(TMC-1660/1680, TMC-1650/1670, TMC-3260, TMC-1610M/MER/MEX) and
other adapters based on the Future Domain chipsets (Quantum
ISA-200S, ISA-250MG; Adaptec AHA-2920A; and at least one IBM board).
It is explained in section 3.7 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

NOTE: Newer Adaptec AHA-2920C boards use the Adaptec AIC-7850 chip
and should use the aic7xxx driver ("Adaptec AIC7xxx chipset SCSI
controller support"). This Future Domain driver works with the older
Adaptec AHA-2920A boards with a Future Domain chip on them.

To compile this driver as a module, choose M here: the
module will be called fdomain.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_FD_MCS</term>
<nutsynopsis>
	"Future Domain MCS-600/700 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA_LEGACY && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for Future Domain MCS 600/700 MCA SCSI adapters.
Some PS/2 computers are equipped with IBM Fast SCSI Adapter/A which
is identical to the MCS 700 and hence also supported by this driver.
This driver also supports the Reply SB16/SCSI card (the SCSI part).
It supports multiple adapters in the same system.

To compile this driver as a module, choose M here: the
module will be called fd_mcs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_GDTH</term>
<nutsynopsis>
	"Intel/ICP (former GDT SCSI Disk Array) RAID Controller support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ISA || EISA || PCI) && SCSI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Formerly called GDT SCSI Disk Array Controller Support.

This is a driver for RAID/SCSI Disk Array Controllers (EISA/ISA/PCI) 
manufactured by Intel Corporation/ICP vortex GmbH. It is documented
in the kernel source in <file:drivers/scsi/gdth.c> and
<file:drivers/scsi/gdth.h.>

To compile this driver as a module, choose M here: the
module will be called gdth.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_GENERIC_NCR5380</term>
<nutsynopsis>
	"Generic NCR5380/53c400 SCSI PIO support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the old NCR 53c80 series of SCSI controllers
on boards using PIO. Most boards such as the Trantor T130 fit this
category, along with a large number of ISA 8bit controllers shipped
for free with SCSI scanners. If you have a PAS16, T128 or DMX3191
you should select the specific driver for that card rather than
generic 5380 support.

It is explained in section 3.8 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  If it doesn't work out
of the box, you may have to change some settings in
<file:drivers/scsi/g_NCR5380.h>.

To compile this driver as a module, choose M here: the
module will be called g_NCR5380.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_GENERIC_NCR5380_MMIO</term>
<nutsynopsis>
	"Generic NCR5380/53c400 SCSI MMIO support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the old NCR 53c80 series of SCSI controllers
on boards using memory mapped I/O. 
It is explained in section 3.8 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  If it doesn't work out
of the box, you may have to change some settings in
<file:drivers/scsi/g_NCR5380.h>.

To compile this driver as a module, choose M here: the
module will be called g_NCR5380_mmio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_GENERIC_NCR53C400</term>
<nutsynopsis>
	"Enable NCR53c400 extensions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_GENERIC_NCR5380</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables certain optimizations for the NCR53c400 SCSI cards.
You might as well try it out.  Note that this driver will only probe
for the Trantor T130B in its default configuration; you might have
to pass a command line option to the kernel at boot time if it does
not detect your card.  See the file
<file:Documentation/scsi/g_NCR5380.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IBMMCA</term>
<nutsynopsis>
	"IBMMCA SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA_LEGACY && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the IBM SCSI adapter found in many of the PS/2
series computers.  These machines have an MCA bus, so you need to
answer Y to "MCA support" as well and read
<file:Documentation/mca.txt>.

If the adapter isn't found during boot (a common problem for models
56, 57, 76, and 77) you'll need to use the 'ibmmcascsi=<pun>' kernel
option, where <pun> is the id of the SCSI subsystem (usually 7, but
if that doesn't work check your reference diskette).  Owners of
model 95 with a LED-matrix-display can in addition activate some
activity info like under OS/2, but more informative, by setting
'ibmmcascsi=display' as an additional kernel parameter.  Try "man
bootparam" or see the documentation of your boot loader about how to
pass options to the kernel.

To compile this driver as a module, choose M here: the
module will be called ibmmca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMMCA_SCSI_ORDER_STANDARD</term>
<nutsynopsis>
	"Standard SCSI-order"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_IBMMCA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
In the PC-world and in most modern SCSI-BIOS-setups, SCSI-hard disks
are assigned to the drive letters, starting with the lowest SCSI-id
(physical number -- pun) to be drive C:, as seen from DOS and
similar operating systems. When looking into papers describing the
ANSI-SCSI-standard, this assignment of drives appears to be wrong.
The SCSI-standard follows a hardware-hierarchy which says that id 7
has the highest priority and id 0 the lowest. Therefore, the host
adapters are still today everywhere placed as SCSI-id 7 by default.
In the SCSI-standard, the drive letters express the priority of the
disk. C: should be the hard disk, or a partition on it, with the
highest priority. This must therefore be the disk with the highest
SCSI-id (e.g. 6) and not the one with the lowest! IBM-BIOS kept the
original definition of the SCSI-standard as also industrial- and
process-control-machines, like VME-CPUs running under realtime-OSes
(e.g. LynxOS, OS9) do.

If you like to run Linux on your MCA-machine with the same
assignment of hard disks as seen from e.g. DOS or OS/2 on your
machine, which is in addition conformant to the SCSI-standard, you
must say Y here. This is also necessary for MCA-Linux users who want
to keep downward compatibility to older releases of the
IBM-MCA-SCSI-driver (older than driver-release 2.00 and older than
June 1997).

If you like to have the lowest SCSI-id assigned as drive C:, as
modern SCSI-BIOSes do, which does not conform to the standard, but
is widespread and common in the PC-world of today, you must say N
here. If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMMCA_SCSI_DEV_RESET</term>
<nutsynopsis>
	"Reset SCSI-devices at boottime"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_IBMMCA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
By default, SCSI-devices are reset when the machine is powered on.
However, some devices exist, like special-control-devices,
SCSI-CNC-machines, SCSI-printer or scanners of older type, that do
not reset when switched on. If you say Y here, each device connected
to your SCSI-bus will be issued a reset-command after it has been
probed, while the kernel is booting. This may cause problems with
more modern devices, like hard disks, which do not appreciate these
reset commands, and can cause your system to hang. So say Y only if
you know that one of your older devices needs it; N is the safe
answer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IPS</term>
<nutsynopsis>
	"IBM ServeRAID support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the IBM ServeRAID hardware RAID controllers.
See <http://www.developer.ibm.com/welcome/netfinity/serveraid.html>
for more information.  If this driver does not work correctly
without modification please contact the author by email at
<ipslinux@adaptec.com>.

To compile this driver as a module, choose M here: the
module will be called ips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IBMVSCSI</term>
<nutsynopsis>
	"IBM Virtual SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && (PPC_PSERIES || PPC_ISERIES)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the IBM POWER Virtual SCSI Client

To compile this driver as a module, choose M here: the
module will be called ibmvscsic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_INITIO</term>
<nutsynopsis>
	"Initio 9100U(W) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the Initio 91XXU(W) SCSI host adapter.  Please
read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called initio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_INIA100</term>
<nutsynopsis>
	"Initio INI-A100U2W support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the Initio INI-A100U2W SCSI host adapter.
Please read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called a100u2w.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_PPA</term>
<nutsynopsis>
	"IOMEGA parallel port (ppa - older drives)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports older versions of IOMEGA's parallel port ZIP
drive (a 100 MB removable media device).

Note that you can say N here if you have the SCSI version of the ZIP
drive: it will be supported automatically if you said Y to the
generic "SCSI disk support", above.

If you have the ZIP Plus drive or a more recent parallel port ZIP
drive (if the supplied cable with the drive is labeled "AutoDetect")
then you should say N here and Y to "IOMEGA parallel port (imm -
newer drives)", below.

For more information about this driver and how to use it you should
read the file <file:Documentation/scsi/ppa.txt>.  You should also read
the SCSI-HOWTO, which is available from
<http://www.tldp.org/docs.html#howto>.  If you use this driver,
you will still be able to use the parallel port for other tasks,
such as a printer; it is safe to compile both drivers into the
kernel.

To compile this driver as a module, choose M here: the
module will be called ppa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IMM</term>
<nutsynopsis>
	"IOMEGA parallel port (imm - newer drives)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports newer versions of IOMEGA's parallel port ZIP
drive (a 100 MB removable media device).

Note that you can say N here if you have the SCSI version of the ZIP
drive: it will be supported automatically if you said Y to the
generic "SCSI disk support", above.

If you have the ZIP Plus drive or a more recent parallel port ZIP
drive (if the supplied cable with the drive is labeled "AutoDetect")
then you should say Y here; if you have an older ZIP drive, say N
here and Y to "IOMEGA Parallel Port (ppa - older drives)", above.

For more information about this driver and how to use it you should
read the file <file:Documentation/scsi/ppa.txt>.  You should also read
the SCSI-HOWTO, which is available from
<http://www.tldp.org/docs.html#howto>.  If you use this driver,
you will still be able to use the parallel port for other tasks,
such as a printer; it is safe to compile both drivers into the
kernel.

To compile this driver as a module, choose M here: the
module will be called imm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IZIP_EPP16</term>
<nutsynopsis>
	"ppa/imm option - Use slow (but safe) EPP-16"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && PARPORT && (SCSI_PPA || SCSI_IMM)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
EPP (Enhanced Parallel Port) is a standard for parallel ports which
allows them to act as expansion buses that can handle up to 64
peripheral devices.

Some parallel port chipsets are slower than their motherboard, and
so we have to control the state of the chipset's FIFO queue every
now and then to avoid data loss. This will be done if you say Y
here.

Generally, saying Y is the safe option and slows things down a bit.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IZIP_SLOW_CTR</term>
<nutsynopsis>
	"ppa/imm option - Assume slow parport control register"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && PARPORT && (SCSI_PPA || SCSI_IMM)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some parallel ports are known to have excessive delays between
changing the parallel port control register and good data being
available on the parallel port data/status register. This option
forces a small delay (1.0 usec to be exact) after changing the
control register to let things settle out. Enabling this option may
result in a big drop in performance but some very old parallel ports
(found in 386 vintage machines) will not work properly.

Generally, saying N is fine.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C406A</term>
<nutsynopsis>
	"NCR53c406a SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the NCR53c406a SCSI host adapter.  For user
configurable parameters, check out <file:drivers/scsi/NCR53c406a.c>
in the kernel source.  Also read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called NCR53c406.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR_D700</term>
<nutsynopsis>
	"NCR Dual 700 MCA SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the MicroChannel Dual 700 card produced by
NCR and commonly used in 345x/35xx/4100 class machines.  It always
tries to negotiate sync and uses tag command queueing.

Unless you have an NCR manufactured machine, the chances are that
you do not have this SCSI card, so say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_LASI700</term>
<nutsynopsis>
	"HP Lasi SCSI support for 53c700/710"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GSC && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the SCSI controller in the Lasi chip found in
many PA-RISC workstations & servers.  If you do not know whether you
have a Lasi chip, it is safe to say "Y" here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>53C700_LE_ON_BE</term>
	<para>
	default value
	<literal>y if SCSI && SCSI_LASI700</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SYM53C8XX_2</term>
<nutsynopsis>
	"SYM53C8XX Version 2 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the whole NCR53C8XX/SYM53C8XX family of
PCI-SCSI controllers.  It also supports the subset of LSI53C10XX
Ultra-160 controllers that are based on the SYM53C8XX SCRIPTS
language.  It does not support LSI53C10XX Ultra-320 PCI-X SCSI
controllers; you need to use the Fusion MPT driver for that.

Please read <file:Documentation/scsi/sym53c8xx_2.txt> for more
information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SYM53C8XX_DMA_ADDRESSING_MODE</term>
<nutsynopsis>
	"DMA addressing mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_SYM53C8XX_2</literal>
	</para>

	<para>
	default value
	<literal>1 if SCSI && SCSI_SYM53C8XX_2</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option only applies to PCI-SCSI chips that are PCI DAC
capable (875A, 895A, 896, 1010-33, 1010-66, 1000).

When set to 0, the driver will program the chip to only perform
32-bit DMA.  When set to 1, the chip will be able to perform DMA
to addresses up to 1TB.  When set to 2, the driver supports the
full 64-bit DMA address range, but can only address 16 segments
of 4 GB each.  This limits the total addressable range to 64 GB.

Most machines with less than 4GB of memory should use a setting
of 0 for best performance.  If your machine has 4GB of memory
or more, you should set this option to 1 (the default).

The still experimental value 2 (64 bit DMA addressing with 16
x 4GB segments limitation) can be used on systems that require
PCI address bits past bit 39 to be set for the addressing of
memory using PCI DAC cycles.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SYM53C8XX_DEFAULT_TAGS</term>
<nutsynopsis>
	"default tagged command queue depth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_SYM53C8XX_2</literal>
	</para>

	<para>
	default value
	<literal>16 if SCSI && SCSI_SYM53C8XX_2</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the default value of the command queue depth the
driver will announce to the generic SCSI layer for devices
that support tagged command queueing. This value can be changed
from the boot command line.  This is a soft limit that cannot
exceed CONFIG_SCSI_SYM53C8XX_MAX_TAGS.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SYM53C8XX_MAX_TAGS</term>
<nutsynopsis>
	"maximum number of queued commands"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_SYM53C8XX_2</literal>
	</para>

	<para>
	default value
	<literal>64 if SCSI && SCSI_SYM53C8XX_2</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option allows you to specify the maximum number of commands
that can be queued to any device, when tagged command queuing is
possible. The driver supports up to 256 queued commands per device.
This value is used as a compiled-in hard limit.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SYM53C8XX_IOMAPPED</term>
<nutsynopsis>
	"use port IO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_SYM53C8XX_2</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the driver will use port IO to access
the card.  This is significantly slower then using memory
mapped IO.  Most people should answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IPR</term>
<nutsynopsis>
	"IBM Power Linux RAID adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the IBM Power Linux family RAID adapters.
This includes IBM pSeries 5712, 5703, 5709, and 570A, as well
as IBM iSeries 5702, 5703, 5709, and 570A.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IPR_TRACE</term>
<nutsynopsis>
	"enable driver internal trace"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_IPR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the driver will trace all commands issued
to the adapter. Performance impact is minimal. Trace can be
dumped using /sys/bus/class/scsi_host/hostXX/trace.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_IPR_DUMP</term>
<nutsynopsis>
	"enable adapter dump support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_IPR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the driver will support adapter crash dump.
If you enable this support, the iprdump daemon can be used
to capture adapter failure analysis information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ZALON</term>
<nutsynopsis>
	"Zalon SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GSC && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Zalon is a GSC/HSC bus interface chip that sits between the
PA-RISC processor and the NCR 53c720 SCSI controller on C100,
C110, J200, J210 and some D, K & R-class machines.  It's also
used on the add-in Bluefish, Barracuda & Shrike SCSI cards.
Say Y here if you have one of these machines or cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR_Q720</term>
<nutsynopsis>
	"NCR Quad 720 MCA SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the MicroChannel Quad 720 card produced by
NCR and commonly used in 345x/35xx/4100 class machines.  It always
tries to negotiate sync and uses tag command queueing.

Unless you have an NCR manufactured machine, the chances are that
you do not have this SCSI card, so say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C8XX_DEFAULT_TAGS</term>
<nutsynopsis>
	"  default tagged command queue depth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>

	<para>
	default value
	<literal>8 if SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
"Tagged command queuing" is a feature of SCSI-2 which improves
performance: the host adapter can send several SCSI commands to a
device's queue even if previous commands haven't finished yet.
Because the device is intelligent, it can optimize its operations
(like head positioning) based on its own request queue. Some SCSI
devices don't implement this properly; if you want to disable this
feature, enter 0 or 1 here (it doesn't matter which).

The default value is 8 and should be supported by most hard disks.
This value can be overridden from the boot command line using the
'tags' option as follows (example):
'ncr53c8xx=tags:4/t2t3q16/t0u2q10' will set default queue depth to
4, set queue depth to 16 for target 2 and target 3 on controller 0
and set queue depth to 10 for target 0 / lun 2 on controller 1.

The normal answer therefore is to go with the default 8 and to use
a boot command line option for devices that need to use a different
command queue depth.

There is no safe option other than using good SCSI devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C8XX_MAX_TAGS</term>
<nutsynopsis>
	"  maximum number of queued commands"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>

	<para>
	default value
	<literal>32 if SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option allows you to specify the maximum number of commands
that can be queued to any device, when tagged command queuing is
possible. The default value is 32. Minimum is 2, maximum is 64.
Modern hard disks are able to support 64 tags and even more, but
do not seem to be faster when more than 32 tags are being used.

So, the normal answer here is to go with the default value 32 unless
you are using very large hard disks with large cache (>= 1 MB) that
are able to take advantage of more than 32 tagged commands.

There is no safe option and the default answer is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C8XX_SYNC</term>
<nutsynopsis>
	"  synchronous transfers frequency in MHz"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>

	<para>
	default value
	<literal>20 if SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The SCSI Parallel Interface-2 Standard defines 5 classes of transfer
rates: FAST-5, FAST-10, FAST-20, FAST-40 and FAST-80.  The numbers
are respectively the maximum data transfer rates in mega-transfers
per second for each class.  For example, a FAST-20 Wide 16 device is
able to transfer data at 20 million 16 bit packets per second for a
total rate of 40 MB/s.

You may specify 0 if you want to only use asynchronous data
transfers. This is the safest and slowest option. Otherwise, specify
a value between 5 and 80, depending on the capability of your SCSI
controller.  The higher the number, the faster the data transfer.
Note that 80 should normally be ok since the driver decreases the
value automatically according to the controller's capabilities.

Your answer to this question is ignored for controllers with NVRAM,
since the driver will get this information from the user set-up.  It
also can be overridden using a boot setup option, as follows
(example): 'ncr53c8xx=sync:12' will allow the driver to negotiate
for FAST-20 synchronous data transfer (20 mega-transfers per
second).

The normal answer therefore is not to go with the default but to
select the maximum value 80 allowing the driver to use the maximum
value supported by each controller. If this causes problems with
your SCSI devices, you should come back and decrease the value.

There is no safe option other than using good cabling, right
terminations and SCSI conformant devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C8XX_PROFILE</term>
<nutsynopsis>
	"  enable profiling"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && (SCSI_ZALON || SCSI_NCR_Q720)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option allows you to enable profiling information gathering.
These statistics are not very accurate due to the low frequency
of the kernel clock (100 Hz on i386) and have performance impact
on systems that use very fast devices.

The normal answer therefore is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C8XX_NO_DISCONNECT</term>
<nutsynopsis>
	"  not allow targets to disconnect"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS=0</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option is only provided for safety if you suspect some SCSI
device of yours to not support properly the target-disconnect
feature. In that case, you would say Y here. In general however, to
not allow targets to disconnect is not reasonable if there is more
than 1 device on a SCSI bus. The normal answer therefore is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_MCA_53C9X</term>
<nutsynopsis>
	"NCR MCA 53C9x SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCA_LEGACY && SCSI && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Some MicroChannel machines, notably the NCR 35xx line, use a SCSI
controller based on the NCR 53C94.  This driver will allow use of
the controller on the 3550, and very possibly others.

To compile this driver as a module, choose M here: the
module will be called mca_53c9x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_PAS16</term>
<nutsynopsis>
	"PAS16 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for a SCSI host adapter.  It is explained in section
3.10 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  If it doesn't work out
of the box, you may have to change some settings in
<file:drivers/scsi/pas16.h>.

To compile this driver as a module, choose M here: the
module will be called pas16.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_PSI240I</term>
<nutsynopsis>
	"PSI240i support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the PSI240i EIDE interface card which acts as a
SCSI host adapter.  Please read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called psi240i.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGIC_FAS</term>
<nutsynopsis>
	"Qlogic FAS SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the ISA, VLB, and PCMCIA versions of the Qlogic
FastSCSI! cards as well as any other card based on the FASXX chip
(including the Control Concepts SCSI/IDE/SIO/PIO/FDC cards).

This driver does NOT support the PCI versions of these cards. The
PCI versions are supported by the Qlogic ISP driver ("Qlogic ISP
SCSI support"), below.

Information about this driver is contained in
<file:Documentation/scsi/qlogicfas.txt>.  You should also read the
SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called qlogicfas.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGIC_ISP</term>
<nutsynopsis>
	"Qlogic ISP SCSI support (old driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver works for all QLogic PCI SCSI host adapters (IQ-PCI,
IQ-PCI-10, IQ_PCI-D) except for the PCI-basic card.  (This latter
card is supported by the "AM53/79C974 PCI SCSI" driver.)

If you say Y here, make sure to choose "BIOS" at the question "PCI
access mode".

Please read the file <file:Documentation/scsi/qlogicisp.txt>.  You
should also read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called qlogicisp.

These days the hardware is also supported by the more modern qla1280
driver.  In doubt use that one instead of qlogicisp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGIC_FC</term>
<nutsynopsis>
	"Qlogic ISP FC SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the QLogic ISP2100 SCSI-FCP host adapter.

To compile this driver as a module, choose M here: the
module will be called qlogicfc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGIC_FC_FIRMWARE</term>
<nutsynopsis>
	"Include loadable firmware in driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_QLOGIC_FC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y to include ISP2X00 Fabric Initiator/Target Firmware, with
expanded LUN addressing and FcTape (FCP-2) support, in the
qlogicfc driver. This is required on some platforms.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGIC_1280</term>
<nutsynopsis>
	"Qlogic QLA 1240/1x80/1x160 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you have a QLogic ISP1240/1x80/1x160 SCSI host adapter.

To compile this driver as a module, choose M here: the
module will be called qla1280.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGIC_1280_1040</term>
<nutsynopsis>
	"Qlogic QLA 1020/1040 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_QLOGIC_1280 && SCSI_QLOGIC_ISP!=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a QLogic ISP1020/1040 SCSI host adapter and
do not want to use the old driver.  This option enables support in
the qla1280 driver for those host adapters.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLOGICPTI</term>
<nutsynopsis>
	"PTI Qlogic, ISP Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SBUS && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports SBUS SCSI controllers from PTI or QLogic. These
controllers are known under Solaris as qpti and in the openprom as
PTI,ptisp or QLGC,isp. Note that PCI QLogic SCSI controllers are
driven by a different driver.

To compile this driver as a module, choose M here: the
module will be called qlogicpti.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA2XXX</term>
	<para>
	default value
	<literal>SCSI && PCI if SCSI && PCI</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA21XX</term>
<nutsynopsis>
	"QLogic ISP2100 host adapter family support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_QLA2XXX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the QLogic 21xx (ISP2100) host adapter family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA22XX</term>
<nutsynopsis>
	"QLogic ISP2200 host adapter family support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_QLA2XXX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the QLogic 22xx (ISP2200) host adapter family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA2300</term>
<nutsynopsis>
	"QLogic ISP2300 host adapter family support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_QLA2XXX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the QLogic 2300 (ISP2300 and ISP2312) host
adapter family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA2322</term>
<nutsynopsis>
	"QLogic ISP2322 host adapter family support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_QLA2XXX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the QLogic 2322 (ISP2322) host adapter family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA6312</term>
<nutsynopsis>
	"QLogic ISP63xx host adapter family support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_QLA2XXX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the QLogic 63xx (ISP6312 and ISP6322) host
adapter family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_QLA24XX</term>
<nutsynopsis>
	"QLogic ISP24xx host adapter family support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && SCSI_QLA2XXX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the QLogic 24xx (ISP2422 and ISP2432) host
adapter family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_LPFC</term>
<nutsynopsis>
	"Emulex LightPulse Fibre Channel Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This lpfc driver supports the Emulex LightPulse
Family of Fibre Channel PCI host adapters.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SEAGATE</term>
<nutsynopsis>
	"Seagate ST-02 and Future Domain TMC-8xx SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 && ISA && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These are 8-bit SCSI controllers; the ST-01 is also supported by
this driver.  It is explained in section 3.9 of the SCSI-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.  If it
doesn't work out of the box, you may have to change some settings in
<file:drivers/scsi/seagate.h>.

To compile this driver as a module, choose M here: the
module will be called seagate.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SIM710</term>
<nutsynopsis>
	"Simple 53c710 SCSI support (Compaq, NCR machines)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(EISA || MCA) && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver for NCR53c710 based SCSI host adapters.

It currently supports Compaq EISA cards and NCR MCA cards
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>53C700_IO_MAPPED</term>
	<para>
	default value
	<literal>y if SCSI && SCSI_SIM710</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SYM53C416</term>
<nutsynopsis>
	"Symbios 53c416 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the sym53c416 SCSI host adapter, the SCSI
adapter that comes with some HP scanners. This driver requires that
the sym53c416 is configured first using some sort of PnP
configuration program (e.g. isapnp) or by a PnP aware BIOS. If you
are using isapnp then you need to compile this driver as a module
and then load it using insmod after isapnp has run. The parameters
of the configured card(s) should be passed to the driver. The format
is:

insmod sym53c416 sym53c416=<base>,<irq> [sym53c416_1=<base>,<irq>]

To compile this driver as a module, choose M here: the
module will be called sym53c416.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DC395x</term>
<nutsynopsis>
	"Tekram DC395(U/UW/F) and DC315(U) SCSI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports PCI SCSI host adapters based on the ASIC
TRM-S1040 chip, e.g Tekram DC395(U/UW/F) and DC315(U) variants.

This driver works, but is still in experimental status. So better
have a bootable disk and a backup in case of emergency.

Documentation can be found in <file:Documentation/scsi/dc395x.txt>.

To compile this driver as a module, choose M here: the
module will be called dc395x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DC390T</term>
<nutsynopsis>
	"Tekram DC390(T) and Am53/79C974 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports PCI SCSI host adapters based on the Am53C974A
chip, e.g. Tekram DC390(T), DawiControl 2974 and some onboard
PCscsi/PCnet (Am53/79C974) solutions.

Documentation can be found in <file:Documentation/scsi/tmscsim.txt>.

Note that this driver does NOT support Tekram DC390W/U/F, which are
based on NCR/Symbios chips. Use "NCR53C8XX SCSI support" for those.

To compile this driver as a module, choose M here: the
module will be called tmscsim.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_T128</term>
<nutsynopsis>
	"Trantor T128/T128F/T228 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for a SCSI host adapter. It is explained in section
3.11 of the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  If it doesn't work out
of the box, you may have to change some settings in
<file:drivers/scsi/t128.h>.  Note that Trantor was purchased by
Adaptec, and some former Trantor products are being sold under the
Adaptec name.

To compile this driver as a module, choose M here: the
module will be called t128.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_U14_34F</term>
<nutsynopsis>
	"UltraStor 14F/34F support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && SCSI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the UltraStor 14F and 34F SCSI-2 host adapters.
The source at <file:drivers/scsi/u14-34f.c> contains some
information about this hardware.  If the driver doesn't work out of
the box, you may have to change some settings in
<file: drivers/scsi/u14-34f.c>.  Read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  Note that there is also
another driver for the same hardware: "UltraStor SCSI support",
below.  You should say Y to both only if you want 24F support as
well.

To compile this driver as a module, choose M here: the
module will be called u14-34f.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_U14_34F_TAGGED_QUEUE</term>
<nutsynopsis>
	"enable tagged command queueing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_U14_34F</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a feature of SCSI-2 which improves performance: the host
adapter can send several SCSI commands to a device's queue even if
previous commands haven't finished yet.
This is equivalent to the "u14-34f=tc:y" boot option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_U14_34F_LINKED_COMMANDS</term>
<nutsynopsis>
	"enable elevator sorting"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_U14_34F</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables elevator sorting for all probed SCSI disks and
CD-ROMs. It definitely reduces the average seek distance when doing
random seeks, but this does not necessarily result in a noticeable
performance improvement: your mileage may vary...
This is equivalent to the "u14-34f=lc:y" boot option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_U14_34F_MAX_TAGS</term>
<nutsynopsis>
	"maximum number of queued commands"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_U14_34F</literal>
	</para>

	<para>
	default value
	<literal>8 if SCSI && SCSI_U14_34F</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This specifies how many SCSI commands can be maximally queued for
each probed SCSI device. You should reduce the default value of 8
only if you have disks with buggy or limited tagged command support.
Minimum is 2 and maximum is 14. This value is also the window size
used by the elevator sorting option above. The effective value used
by the driver for each probed SCSI device is reported at boot time.
This is equivalent to the "u14-34f=mq:8" boot option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ULTRASTOR</term>
<nutsynopsis>
	"UltraStor SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 && ISA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the UltraStor 14F, 24F and 34F SCSI-2 host
adapter family.  This driver is explained in section 3.12 of the
SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  If it doesn't work out
of the box, you may have to change some settings in
<file:drivers/scsi/ultrastor.h>.

Note that there is also another driver for the same hardware:
"UltraStor 14F/34F support", above.

To compile this driver as a module, choose M here: the
module will be called ultrastor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NSP32</term>
<nutsynopsis>
	"Workbit NinjaSCSI-32Bi/UDE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the Workbit NinjaSCSI-32Bi/UDE PCI/Cardbus
SCSI host adapter. Please read the SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called nsp32.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_DEBUG</term>
<nutsynopsis>
	"SCSI debugging host simulator"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a host adapter simulator that can simulate multiple hosts
each with multiple dummy SCSI devices (disks). It defaults to one
host adapter with one dummy SCSI disk. Each dummy disk uses kernel
RAM as storage (i.e. it is a ramdisk). To save space when multiple
dummy disks are simulated, they share the same kernel RAM for 
their storage. See <http://www.torque.net/sg/sdebug.html> for more
information. This driver is primarily of use to those testing the
SCSI and block subsystems. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_MESH</term>
<nutsynopsis>
	"MESH (Power Mac internal SCSI) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC32 && PPC_PMAC && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Many Power Macintoshes and clones have a MESH (Macintosh Enhanced
SCSI Hardware) SCSI bus adaptor (the 7200 doesn't, but all of the
other Power Macintoshes do). Say Y to include support for this SCSI
adaptor.

To compile this driver as a module, choose M here: the
module will be called mesh.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_MESH_SYNC_RATE</term>
<nutsynopsis>
	"maximum synchronous transfer rate (MB/s) (0 = async)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_MESH</literal>
	</para>

	<para>
	default value
	<literal>5 if SCSI && SCSI_MESH</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
On Power Macintoshes (and clones) where the MESH SCSI bus adaptor
drives a bus which is entirely internal to the machine (such as the
7500, 7600, 8500, etc.), the MESH is capable of synchronous
operation at up to 10 MB/s. On machines where the SCSI bus
controlled by the MESH can have external devices connected, it is
usually rated at 5 MB/s. 5 is a safe value here unless you know the
MESH SCSI bus is internal only; in that case you can say 10. Say 0
to disable synchronous operation.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_MESH_RESET_DELAY_MS</term>
<nutsynopsis>
	"initial bus reset delay (ms) (0 = no reset)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_MESH</literal>
	</para>

	<para>
	default value
	<literal>4000 if SCSI && SCSI_MESH</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_MAC53C94</term>
<nutsynopsis>
	"53C94 (Power Mac external SCSI) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC32 && PPC_PMAC && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
On Power Macintoshes (and clones) with two SCSI buses, the external
SCSI bus is usually controlled by a 53C94 SCSI bus adaptor. Older
machines which only have one SCSI bus, such as the 7200, also use
the 53C94. Say Y to include support for the 53C94.

To compile this driver as a module, choose M here: the
module will be called mac53c94.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ACORNSCSI_3</term>
<nutsynopsis>
	"Acorn SCSI card (aka30) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Acorn SCSI card (aka30). If you have an
Acorn system with one of these, say Y. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ACORNSCSI_TAGGED_QUEUE</term>
<nutsynopsis>
	"Support SCSI 2 Tagged queueing"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_ACORNSCSI_3</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable tagged queuing support on the Acorn SCSI card.

This is a feature of SCSI-2 which improves performance: the host
adapter can send several SCSI commands to a device's queue even if
previous commands haven't finished yet. Some SCSI devices don't
implement this properly, so the safe answer is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ACORNSCSI_SYNC</term>
<nutsynopsis>
	"Support SCSI 2 Synchronous Transfers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && SCSI_ACORNSCSI_3</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable synchronous transfer negotiation with all
targets on the Acorn SCSI card.

In general, this improves performance; however some SCSI devices
don't implement it properly, so the safe answer is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ARXESCSI</term>
<nutsynopsis>
	"ARXE SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Around 1991, Arxe Systems Limited released a high density floppy
disc interface for the Acorn Archimedes range, to allow the use of
HD discs from the then new A5000 on earlier models. This interface
was either sold on its own or with an integral SCSI controller.
Technical details on this NCR53c94-based device are available at
<http://www.cryton.demon.co.uk/acornbits/scsi_arxe.html>
Say Y here to compile in support for the SCSI controller.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_CUMANA_2</term>
<nutsynopsis>
	"CumanaSCSI II support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Cumana SCSI II card. If you have an
Acorn system with one of these, say Y. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_EESOXSCSI</term>
<nutsynopsis>
	"EESOX support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the EESOX SCSI card. If you have an Acorn
system with one of these, say Y, otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_POWERTECSCSI</term>
<nutsynopsis>
	"PowerTec support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Powertec SCSI card on Acorn systems. If
you have one of these, say Y. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "The following drivers are not fully supported"
<para>
	depends on
	<literal>SCSI!=n && ARCH_ACORN && EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>SCSI_CUMANA_1</term>
<nutsynopsis>
	"CumanaSCSI I support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && EXPERIMENTAL && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Cumana SCSI I card. If you have an
Acorn system with one of these, say Y. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_ECOSCSI</term>
<nutsynopsis>
	"EcoScsi support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && EXPERIMENTAL && (ARCH_ARC || ARCH_A5K) && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the EcoSCSI card -- a small card that sits
in the Econet socket. If you have an Acorn system with one of these,
say Y. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_OAK1</term>
<nutsynopsis>
	"Oak SCSI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && EXPERIMENTAL && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Oak SCSI card. If you have an Acorn
system with one of these, say Y. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JAZZ_ESP</term>
<nutsynopsis>
	"MIPS JAZZ FAS216 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MACH_JAZZ && SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the driver for the onboard SCSI host adapter of MIPS Magnum
4000, Acer PICA, Olivetti M700-10 and a few other identical OEM
systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>A3000_SCSI</term>
<nutsynopsis>
	"A3000 WD33C93A support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AMIGA && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Amiga 3000 and have SCSI devices connected to the
built-in SCSI controller, say Y. Otherwise, say N.

To compile this driver as a module, choose M here: the
module will be called wd33c93.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>A2091_SCSI</term>
<nutsynopsis>
	"A2091/A590 WD33C93A support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Commodore A2091 SCSI controller, say Y. Otherwise,
say N.

To compile this driver as a module, choose M here: the
module will be called wd33c93.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GVP11_SCSI</term>
<nutsynopsis>
	"GVP Series II WD33C93A support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Great Valley Products Series II SCSI controller,
answer Y. Also say Y if you have a later model of GVP SCSI
controller (such as the GVP A4008 or a Combo board). Otherwise,
answer N. This driver does NOT work for the T-Rex series of
accelerators from TekMagic and GVP-M.

To compile this driver as a module, choose M here: the
module will be called gvp11.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CYBERSTORM_SCSI</term>
<nutsynopsis>
	"CyberStorm SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Amiga with an original (MkI) Phase5 Cyberstorm
accelerator board and the optional Cyberstorm SCSI controller,
answer Y. Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CYBERSTORMII_SCSI</term>
<nutsynopsis>
	"CyberStorm Mk II SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Amiga with a Phase5 Cyberstorm MkII accelerator board
and the optional Cyberstorm SCSI controller, say Y. Otherwise,
answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLZ2060_SCSI</term>
<nutsynopsis>
	"Blizzard 2060 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Amiga with a Phase5 Blizzard 2060 accelerator board
and want to use the onboard SCSI controller, say Y. Otherwise,
answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLZ1230_SCSI</term>
<nutsynopsis>
	"Blizzard 1230IV/1260 SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Amiga 1200 with a Phase5 Blizzard 1230IV or Blizzard
1260 accelerator, and the optional SCSI module, say Y. Otherwise,
say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FASTLANE_SCSI</term>
<nutsynopsis>
	"Fastlane SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have the Phase5 Fastlane Z3 SCSI controller, or plan to use
one in the near future, say Y to this question. Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_AMIGA7XX</term>
<nutsynopsis>
	"Amiga NCR53c710 SCSI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AMIGA && SCSI && EXPERIMENTAL && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for various NCR53c710-based SCSI controllers on the Amiga.
This includes:
  - the builtin SCSI controller on the Amiga 4000T,
  - the Amiga 4091 Zorro III SCSI-2 controller,
  - the MacroSystem Development's WarpEngine Amiga SCSI-2 controller
    (info at
    <http://www.lysator.liu.se/amiga/ar/guide/ar310.guide?FEATURE5>),
  - the SCSI controller on the Phase5 Blizzard PowerUP 603e+
    accelerator card for the Amiga 1200,
  - the SCSI controller on the GVP Turbo 040/060 accelerator.
Note that all of the above SCSI controllers, except for the builtin
SCSI controller on the Amiga 4000T, reside on the Zorro expansion
bus, so you also have to enable Zorro bus support if you want to use
them.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OKTAGON_SCSI</term>
<nutsynopsis>
	"BSC Oktagon SCSI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZORRO && SCSI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have the BSC Oktagon SCSI disk controller for the Amiga, say
Y to this question.  If you're in doubt about whether you have one,
see the picture at
<http://amiga.resource.cx/exp/search.pl?product=oktagon>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_SCSI</term>
<nutsynopsis>
	"Atari native SCSI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Atari with built-in NCR5380 SCSI controller (TT,
Falcon, ...) say Y to get it supported. Of course also, if you have
a compatible SCSI controller (e.g. for Medusa).

To compile this driver as a module, choose M here: the
module will be called atari_scsi.

This driver supports both styles of NCR integration into the
system: the TT style (separate DMA), and the Falcon style (via
ST-DMA, replacing ACSI).  It does NOT support other schemes, like
in the Hades (without DMA).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_SCSI_TOSHIBA_DELAY</term>
<nutsynopsis>
	"Long delays for Toshiba CD-ROMs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && ATARI_SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option increases the delay after a SCSI arbitration to
accommodate some flaky Toshiba CD-ROM drives. Say Y if you intend to
use a Toshiba CD-ROM drive; otherwise, the option is not needed and
would impact performance a bit, so say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_SCSI_RESET_BOOT</term>
<nutsynopsis>
	"Reset SCSI-devices at boottime"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && ATARI_SCSI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Reset the devices on your Atari whenever it boots.  This makes the
boot process fractionally longer but may assist recovery from errors
that leave the devices with SCSI operations partway completed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TT_DMA_EMUL</term>
<nutsynopsis>
	"Hades SCSI DMA emulator"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && ATARI_SCSI && HADES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables code which emulates the TT SCSI DMA chip on the
Hades. This increases the SCSI transfer rates at least ten times
compared to PIO transfers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAC_SCSI</term>
<nutsynopsis>
	"Macintosh NCR5380 SCSI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MAC && SCSI=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the NCR 5380 SCSI controller included on most of the 68030
based Macintoshes.  If you have one of these say Y and read the
SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_MAC_ESP</term>
<nutsynopsis>
	"Macintosh NCR53c9[46] SCSI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MAC && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the NCR 53c9x SCSI controller found on most of the 68040
based Macintoshes.  If you have one of these say Y and read the
SCSI-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the
module will be called mac_esp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MVME147_SCSI</term>
<nutsynopsis>
	"WD33C93 SCSI driver for MVME147"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MVME147 && SCSI=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the on-board SCSI controller on the Motorola MVME147
single-board computer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MVME16x_SCSI</term>
<nutsynopsis>
	"NCR53C710 SCSI driver for MVME16x"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MVME16x && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Motorola MVME162, 166, 167, 172 and 177 boards use the NCR53C710
SCSI controller chip.  Almost everyone using one of these boards
will want to say Y to this question.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BVME6000_SCSI</term>
<nutsynopsis>
	"NCR53C710 SCSI driver for BVME6000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BVME6000 && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The BVME4000 and BVME6000 boards from BVM Ltd use the NCR53C710
SCSI controller chip.  Almost everyone using one of these boards
will want to say Y to this question.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_NCR53C7xx_FAST</term>
<nutsynopsis>
	"allow FAST-SCSI [10MHz]"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI && (SCSI_AMIGA7XX || MVME16x_SCSI || BVME6000_SCSI)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will enable 10MHz FAST-SCSI transfers with your host
adapter. Some systems have problems with that speed, so it's safest
to say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUN3_SCSI</term>
<nutsynopsis>
	"Sun3 NCR5380 SCSI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SUN3 && SCSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option will enable support for the OBIO (onboard io) NCR5380
SCSI controller found in the Sun 3/50 and 3/60, as well as for
"Sun3" type VME scsi controllers also based on the NCR5380.
General Linux information on the Sun 3 series (now discontinued)
is at <http://www.angelfire.com/ca2/tech68k/sun3.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUN3X_ESP</term>
<nutsynopsis>
	"Sun3x ESP SCSI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SUN3X && SCSI=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The ESP was an on-board SCSI controller used on Sun 3/80
machines.  Say Y here to compile in support for it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCSI_SUNESP</term>
<nutsynopsis>
	"Sparc ESP Scsi Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SBUS && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the Sun ESP SCSI host adapter. The ESP
chipset is present in most SPARC SBUS-based computers.

To compile this driver as a module, choose M here: the
module will be called esp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZFCP</term>
<nutsynopsis>
	"FCP host bus adapter driver for IBM eServer zSeries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && QDIO && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to access SCSI devices attached to your IBM eServer
zSeries by means of Fibre Channel interfaces say Y.
For details please refer to the documentation provided by IBM at
<http://oss.software.ibm.com/developerworks/opensource/linux390>

This driver is also available as a module. This module will be
called zfcp. If you want to compile it as a module, say M here
and read <file:Documentation/modules.txt>.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "PCMCIA SCSI adapter support"
<para>
	depends on
	<literal>SCSI!=n && PCMCIA!=n && MODULES</literal>
	</para>


<nutentry>
	<term>PCMCIA_AHA152X</term>
<nutsynopsis>
	"Adaptec AHA152X PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && PCMCIA!=n && m && MODULES && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach this type of PCMCIA SCSI host
adapter to your computer.

To compile this driver as a module, choose M here: the
module will be called aha152x_cs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_FDOMAIN</term>
<nutsynopsis>
	"Future Domain PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && PCMCIA!=n && m && MODULES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach this type of PCMCIA SCSI host
adapter to your computer.

To compile this driver as a module, choose M here: the
module will be called fdomain_cs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_NINJA_SCSI</term>
<nutsynopsis>
	"NinjaSCSI-3 / NinjaSCSI-32Bi (16bit) PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && PCMCIA!=n && m && MODULES && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you intend to attach this type of PCMCIA SCSI host adapter to
your computer, say Y here and read
<file:Documentation/scsi/NinjaSCSI.txt>.

Supported cards:

NinjaSCSI-3: (version string: "WBT","NinjaSCSI-3","R1.0")
  IO-DATA     PCSC-FP
  ALPHA DATA  AD-PCS201
  CyQ've      SFC-201  
  LOGITECH    LPM-SCSI2E
  Pioneer PCR-PR24's card
  I-O DATA CDPS-PX24's card (PCSC-F)
  Panasonic KXL-RW10AN CD-RW's card
  etc.

NinjaSCSI-32Bit (in 16bit mode):
  [Workbit (version string: "WORKBIT","UltraNinja-16","1")]
  Jazz SCP050
  [I-O DATA (OEM) (version string: "IO DATA","CBSC16       ","1")]
  I-O DATA CBSC-II
  [Kyusyu Matsushita Kotobuki (OEM)
     (version string: "KME    ","SCSI-CARD-001","1")]
  KME KXL-820AN's card
  HP M820e CDRW's card
  etc.

To compile this driver as a module, choose M here: the
module will be called nsp_cs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_QLOGIC</term>
<nutsynopsis>
	"Qlogic PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && PCMCIA!=n && m && MODULES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach this type of PCMCIA SCSI host
adapter to your computer.

To compile this driver as a module, choose M here: the
module will be called qlogic_cs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_SYM53C500</term>
<nutsynopsis>
	"Symbios 53c500 PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCSI!=n && PCMCIA!=n && m && MODULES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a New Media Bus Toaster or other PCMCIA
SCSI adapter based on the Symbios 53c500 controller.

To compile this driver as a module, choose M here: the
module will be called sym53c500_cs.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Old CD-ROM drivers (not SCSI, not IDE)"
<para>
	depends on
	<literal>ISA</literal>
	</para>


<nutentry>
	<term>CD_NO_IDESCSI</term>
<nutsynopsis>
	"Support non-SCSI/IDE/ATAPI CDROM drives"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a CD-ROM drive that is neither SCSI nor IDE/ATAPI, say Y
here, otherwise N. Read the CD-ROM-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about these CD-ROM drives. If you are unsure what you
have, say Y and find out whether you have one of the following
drives.

For each of these drivers, a <file:Documentation/cdrom/{driver_name}>
exists. Especially in cases where you do not know exactly which kind
of drive you have you should read there. Most of these drivers use a
file drivers/cdrom/{driver_name}.h where you can define your
interface parameters and switch some internal goodies.

To compile these CD-ROM drivers as a module, choose M instead of Y.

If you want to use any of these CD-ROM drivers, you also have to
answer Y or M to "ISO 9660 CD-ROM file system support" below (this
answer will get "defaulted" for you if you enable any of the Linux
CD-ROM drivers).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AZTCD</term>
<nutsynopsis>
	"Aztech/Orchid/Okano/Wearnes/TXC/CyDROM  CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is your driver if you have an Aztech CDA268-01A, Orchid
CD-3110, Okano or Wearnes CDD110, Conrad TXC, or CyCD-ROM CR520 or
CR540 CD-ROM drive.  This driver -- just like all these CD-ROM
drivers -- is NOT for CD-ROM drives with IDE/ATAPI interfaces, such
as Aztech CDA269-031SE. Please read the file
<file:Documentation/cdrom/aztcd>.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called aztcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GSCD</term>
<nutsynopsis>
	"Goldstar R420 CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If this is your CD-ROM drive, say Y here.  As described in the file
<file:Documentation/cdrom/gscd>, you might have to change a setting
in the file <file:drivers/cdrom/gscd.h> before compiling the
kernel.  Please read the file <file:Documentation/cdrom/gscd>.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called gscd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SBPCD</term>
<nutsynopsis>
	"Matsushita/Panasonic/Creative, Longshine, TEAC CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports most of the drives which use the Panasonic or
Sound Blaster interface.  Please read the file
<file:Documentation/cdrom/sbpcd>.

The Matsushita CR-521, CR-522, CR-523, CR-562, CR-563 drives
(sometimes labeled "Creative"), the Creative Labs CD200, the
Longshine LCS-7260, the "IBM External ISA CD-ROM" (in fact a CR-56x
model), the TEAC CD-55A fall under this category.  Some other
"electrically compatible" drives (Vertos, Genoa, some Funai models)
are currently not supported; for the Sanyo H94A drive currently a
separate driver (asked later) is responsible.  Most drives have a
uniquely shaped faceplate, with a caddyless motorized drawer, but
without external brand markings.  The older CR-52x drives have a
caddy and manual loading/eject, but still no external markings.  The
driver is able to do an extended auto-probing for interface
addresses and drive types; this can help to find facts in cases you
are not sure, but can consume some time during the boot process if
none of the supported drives gets found.  Once your drive got found,
you should enter the reported parameters into
<file:drivers/cdrom/sbpcd.h> and set "DISTRIBUTION 0" there.

This driver can support up to four CD-ROM controller cards, and each
card can support up to four CD-ROM drives; if you say Y here, you
will be asked how many controller cards you have.  If compiled as a
module, only one controller card (but with up to four drives) is
usable.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called sbpcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCDX</term>
<nutsynopsis>
	"Mitsumi CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Use this driver if you want to be able to use your Mitsumi LU-005,
FX-001 or FX-001D CD-ROM drive.

Please read the file <file:Documentation/cdrom/mcdx>.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called mcdx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OPTCD</term>
<nutsynopsis>
	"Optics Storage DOLPHIN 8000AT CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the 'DOLPHIN' drive with a 34-pin Sony
compatible interface. It also works with the Lasermate CR328A. If
you have one of those, say Y. This driver does not work for the
Optics Storage 8001 drive; use the IDE-ATAPI CD-ROM driver for that
one. Please read the file <file:Documentation/cdrom/optcd>.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called optcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CM206</term>
<nutsynopsis>
	"Philips/LMS CM206 CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Philips/LMS CD-ROM drive cm206 in combination with a
cm260 host adapter card, say Y here. Please also read the file
<file:Documentation/cdrom/cm206>.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called cm206.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SJCD</term>
<nutsynopsis>
	"Sanyo CDR-H94A CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If this is your CD-ROM drive, say Y here and read the file
<file:Documentation/cdrom/sjcd>. You should then also say Y or M to
"ISO 9660 CD-ROM file system support" below, because that's the
file system used on CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called sjcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISP16_CDI</term>
<nutsynopsis>
	"ISP16/MAD16/Mozart soft configurable cdrom interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These are sound cards with built-in cdrom interfaces using the OPTi
82C928 or 82C929 chips. Say Y here to have them detected and
possibly configured at boot time. In addition, You'll have to say Y
to a driver for the particular cdrom drive you have attached to the
card. Read <file:Documentation/cdrom/isp16> for details.

To compile this driver as a module, choose M here: the
module will be called isp16.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CDU31A</term>
<nutsynopsis>
	"Sony CDU31A/CDU33A CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These CD-ROM drives have a spring-pop-out caddyless drawer, and a
rectangular green LED centered beneath it.  NOTE: these CD-ROM
drives will not be auto detected by the kernel at boot time; you
have to provide the interface address as an option to the kernel at
boot time as described in <file:Documentation/cdrom/cdu31a> or fill
in your parameters into <file:drivers/cdrom/cdu31a.c>.  Try "man
bootparam" or see the documentation of your boot loader (lilo or
loadlin) about how to pass options to the kernel.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called cdu31a.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CDU535</term>
<nutsynopsis>
	"Sony CDU535 CDROM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && CD_NO_IDESCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the older Sony CDU-535 and CDU-531 CD-ROM
drives. Please read the file <file:Documentation/cdrom/sonycd535>.

If you say Y here, you should also say Y or M to "ISO 9660 CD-ROM
file system support" below, because that's the file system used on
CD-ROMs.

To compile this driver as a module, choose M here: the
module will be called sonycd535.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Multi-device support (RAID and LVM)"

<nutentry>
	<term>MD</term>
<nutsynopsis>
	"Multiple devices driver support (RAID and LVM)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support multiple physical spindles through a single logical device.
Required for RAID and logical volume management.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_MD</term>
<nutsynopsis>
	"RAID support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver lets you combine several hard disk partitions into one
logical block device. This can be used to simply append one
partition to another one or to combine several redundant hard disks
into a RAID1/4/5 device so as to provide protection against hard
disk failures. This is called "Software RAID" since the combining of
the partitions is done by the kernel. "Hardware RAID" means that the
combining is done by a dedicated controller; if you have such a
controller, you do not need to say Y here.

More information about Software RAID on Linux is contained in the
Software RAID mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. There you will also learn
where to get the supporting user space utilities raidtools.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_LINEAR</term>
<nutsynopsis>
	"Linear (append) mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, then your multiple devices driver will be able to
use the so-called linear mode, i.e. it will combine the hard disk
partitions by simply appending one to the other.

To compile this as a module, choose M here: the module
will be called linear.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_RAID0</term>
<nutsynopsis>
	"RAID-0 (striping) mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, then your multiple devices driver will be able to
use the so-called raid0 mode, i.e. it will combine the hard disk
partitions into one logical device in such a fashion as to fill them
up evenly, one chunk here and one chunk there. This will increase
the throughput rate if the partitions reside on distinct disks.

Information about Software RAID on Linux is contained in the
Software-RAID mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. There you will also
learn where to get the supporting user space utilities raidtools.

To compile this as a module, choose M here: the module
will be called raid0.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_RAID1</term>
<nutsynopsis>
	"RAID-1 (mirroring) mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A RAID-1 set consists of several disk drives which are exact copies
of each other.  In the event of a mirror failure, the RAID driver
will continue to use the operational mirrors in the set, providing
an error free MD (multiple device) to the higher levels of the
kernel.  In a set with N drives, the available space is the capacity
of a single drive, and the set protects against a failure of (N - 1)
drives.

Information about Software RAID on Linux is contained in the
Software-RAID mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  There you will also
learn where to get the supporting user space utilities raidtools.

If you want to use such a RAID-1 set, say Y.  To compile this code
as a module, choose M here: the module will be called raid1.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_RAID10</term>
<nutsynopsis>
	"RAID-10 (mirrored striping) mode (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
RAID-10 provides a combination of striping (RAID-0) and
mirroring (RAID-1) with easier configuration and more flexable
layout.
Unlike RAID-0, but like RAID-1, RAID-10 requires all devices to
be the same size (or at least, only as much as the smallest device
will be used).
RAID-10 provides a variety of layouts that provide different levels
of redundancy and performance.

RAID-10 requires mdadm-1.7.0 or later, available at:

ftp://ftp.kernel.org/pub/linux/utils/raid/mdadm/

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_RAID5</term>
<nutsynopsis>
	"RAID-4/RAID-5 mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A RAID-5 set of N drives with a capacity of C MB per drive provides
the capacity of C * (N - 1) MB, and protects against a failure
of a single drive. For a given sector (row) number, (N - 1) drives
contain data sectors, and one drive contains the parity protection.
For a RAID-4 set, the parity blocks are present on a single drive,
while a RAID-5 set distributes the parity across the drives in one
of the available parity distribution methods.

Information about Software RAID on Linux is contained in the
Software-RAID mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. There you will also
learn where to get the supporting user space utilities raidtools.

If you want to use such a RAID-4/RAID-5 set, say Y.  To
compile this code as a module, choose M here: the module
will be called raid5.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_RAID6</term>
<nutsynopsis>
	"RAID-6 mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A RAID-6 set of N drives with a capacity of C MB per drive
provides the capacity of C * (N - 2) MB, and protects
against a failure of any two drives. For a given sector
(row) number, (N - 2) drives contain data sectors, and two
drives contains two independent redundancy syndromes.  Like
RAID-5, RAID-6 distributes the syndromes across the drives
in one of the available parity distribution methods.

RAID-6 requires mdadm-1.5.0 or later, available at:

ftp://ftp.kernel.org/pub/linux/utils/raid/mdadm/

If you want to use such a RAID-6 set, say Y.  To compile
this code as a module, choose M here: the module will be
called raid6.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_MULTIPATH</term>
<nutsynopsis>
	"Multipath I/O support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multipath-IO is the ability of certain devices to address the same
physical disk over multiple 'IO paths'. The code ensures that such
paths can be defined and handled at runtime, and ensures that a
transparent failover to the backup path(s) happens if a IO errors
arrives on the primary path.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MD_FAULTY</term>
<nutsynopsis>
	"Faulty test module for MD"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The "faulty" module allows for a block device that occasionally returns
read or write errors.  It is useful for testing.

In unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BLK_DEV_DM</term>
<nutsynopsis>
	"Device mapper support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Device-mapper is a low level volume manager.  It works by allowing
people to specify mappings for ranges of logical sectors.  Various
mapping types are available, in addition people may write their own
modules containing custom mappings if they wish.

Higher level volume managers such as LVM2 use this driver.

To compile this as a module, choose M here: the module will be
called dm-mod.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM_CRYPT</term>
<nutsynopsis>
	"Crypt target support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_DM && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This device-mapper target allows you to create a device that
transparently encrypts the data on it. You'll need to activate
the ciphers you're going to use in the cryptoapi configuration.

Information on how to use dm-crypt can be found on

<http://www.saout.de/misc/dm-crypt/>

To compile this code as a module, choose M here: the module will
be called dm-crypt.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM_SNAPSHOT</term>
<nutsynopsis>
	"Snapshot target (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_DM && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Allow volume managers to take writeable snapshots of a device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM_MIRROR</term>
<nutsynopsis>
	"Mirror target (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_DM && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Allow volume managers to mirror logical volumes, also
needed for live data migration tools such as 'pvmove'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM_ZERO</term>
<nutsynopsis>
	"Zero target (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_DM && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A target that discards writes, and returns all zeroes for
reads.  Useful in some recovery situations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM_MULTIPATH</term>
<nutsynopsis>
	"Multipath target (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BLK_DEV_DM && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Allow volume managers to support multipath hardware.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM_MULTIPATH_EMC</term>
<nutsynopsis>
	"EMC CX/AX multipath support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Multipath support for EMC CX/AX series hardware.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Fusion MPT device support"

<nutentry>
	<term>FUSION</term>
	<para>
	default value
	<literal>n</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSION_SPI</term>
<nutsynopsis>
	"Fusion MPT ScsiHost drivers for SPI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SCSI HOST support for a parallel SCSI host adapters.

List of supported controllers:

LSI53C1020
LSI53C1020A
LSI53C1030
LSI53C1035
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSION_FC</term>
<nutsynopsis>
	"Fusion MPT ScsiHost drivers for FC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SCSI HOST support for a Fiber Channel host adapters.

List of supported controllers:

LSIFC909
LSIFC919
LSIFC919X
LSIFC929
LSIFC929X
LSIFC929XL
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSION_SAS</term>
<nutsynopsis>
	"Fusion MPT ScsiHost drivers for SAS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && SCSI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SCSI HOST support for a SAS host adapters.

List of supported controllers:

LSISAS1064
LSISAS1066
LSISAS1068
LSISAS1064E
LSISAS1066E
LSISAS1068E
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSION_MAX_SGE</term>
<nutsynopsis>
	"Maximum number of scatter gather entries (16 - 128)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FUSION</literal>
	</para>

	<para>
	default value
	<literal>128 if FUSION</literal>
	</para>


  unknown prop 7!
	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option allows you to specify the maximum number of scatter-
gather entries per I/O. The driver default is 128, which matches
SCSI_MAX_PHYS_SEGMENTS. However, it may decreased down to 16.
Decreasing this parameter will reduce memory requirements
on a per controller instance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSION_CTL</term>
<nutsynopsis>
	"Fusion MPT misc device (ioctl) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FUSION_SPI || FUSION_FC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Fusion MPT misc device driver provides specialized control
of MPT adapters via system ioctl calls.  Use of ioctl calls to
the MPT driver requires that you create and use a misc device
node ala:
mknod /dev/mptctl c 10 240

One use of this ioctl interface is to perform an upgrade (reflash)
of the MPT adapter firmware.  Refer to readme file(s) distributed
with the Fusion MPT linux driver for additional details.

If enabled by saying M to this, a driver named: mptctl
will be compiled.

If unsure whether you really want or need this, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSION_LAN</term>
<nutsynopsis>
	"Fusion MPT LAN driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FUSION_FC && NET_FC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module supports LAN IP traffic over Fibre Channel port(s)
on Fusion MPT compatible hardware (LSIFC9xx chips).
The physical interface used is defined in RFC 2625.
Please refer to that document for details.

Installing this driver requires the knowledge to configure and
activate a new network interface, "fc0", using standard Linux tools.

If enabled by saying M to this, a driver named: mptlan
will be compiled.

If unsure whether you really want or need this, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "IEEE 1394 (FireWire) support"

<nutentry>
	<term>IEEE1394</term>
<nutsynopsis>
	"IEEE 1394 (FireWire) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI || BROKEN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
IEEE 1394 describes a high performance serial bus, which is also
known as FireWire(tm) or i.Link(tm) and is used for connecting all
sorts of devices (most notably digital video cameras) to your
computer.

If you have FireWire hardware and want to use it, say Y here.  This
is the core support only, you will also need to select a driver for
your IEEE 1394 adapter.

To compile this driver as a module, say M here: the
module will be called ieee1394.
	</para>

</nutentrybody>
</nutentry>

comment "Subsystem Options"
<para>
	depends on
	<literal>IEEE1394</literal>
	</para>


<nutentry>
	<term>IEEE1394_VERBOSEDEBUG</term>
<nutsynopsis>
	"Excessive debugging output"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will get very verbose debugging logs from
the subsystem which includes a dump of the header of every sent
and received packet.  This can amount to a high amount of data
collected in a very short time which is usually also saved to
disk by the system logging daemons.

Say Y if you really want or need the debugging output, everyone
else says N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_OUI_DB</term>
<nutsynopsis>
	"OUI Database built-in"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, then an OUI list (vendor unique ID's) will be
compiled into the ieee1394 module. This doesn't really do much
except being able to display the vendor of a hardware node. The
downside is that it adds about 300k to the size of the module,
or kernel (depending on whether you compile ieee1394 as a
module, or static in the kernel).

This option is not needed for userspace programs like gscanbus
to show this information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_EXTRA_CONFIG_ROMS</term>
<nutsynopsis>
	"Build in extra config rom entries for certain functionality"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some IEEE1394 functionality depends on extra config rom entries
being available in the host adapters CSR. These options will
allow you to choose which ones.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_CONFIG_ROM_IP1394</term>
<nutsynopsis>
	"IP-1394 Entry"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394_EXTRA_CONFIG_ROMS && IEEE1394</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Adds an entry for using IP-over-1394. If you want to use your
IEEE1394 bus as a network for IP systems (including interacting
with MacOSX and WinXP IP-over-1394), enable this option and the
eth1394 option below.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_EXPORT_FULL_API</term>
<nutsynopsis>
	"Export all symbols of ieee1394's API"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394</literal>
	</para>

	<para>
	default value
	<literal>n if IEEE1394</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Export all symbols of ieee1394's driver programming interface, even
those that are not currently used by the standard IEEE 1394 drivers.

This option does not affect the interface to userspace applications.
Say Y here if you want to compile externally developed drivers that
make extended use of ieee1394's API. It is otherwise safe to say N.
	</para>

</nutentrybody>
</nutentry>

comment "Device Drivers"
<para>
	depends on
	<literal>IEEE1394</literal>
	</para>



comment "Texas Instruments PCILynx requires I2C"
<para>
	depends on
	<literal>IEEE1394 && I2C=n</literal>
	</para>


<nutentry>
	<term>IEEE1394_PCILYNX</term>
<nutsynopsis>
	"Texas Instruments PCILynx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && IEEE1394 && I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an IEEE-1394 controller with the Texas
Instruments PCILynx chip.  Note: this driver is written for revision
2 of this chip and may not work with revision 0.

To compile this driver as a module, say M here: the
module will be called pcilynx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_OHCI1394</term>
<nutsynopsis>
	"OHCI-1394 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && IEEE1394</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable this driver if you have an IEEE 1394 controller based on the
OHCI-1394 specification. The current driver is only tested with OHCI
chipsets made by Texas Instruments and NEC. Most third-party vendors
use one of these chipsets.  It should work with any OHCI-1394
compliant card, however.

To compile this driver as a module, say M here: the
module will be called ohci1394.
	</para>

</nutentrybody>
</nutentry>

comment "Protocol Drivers"
<para>
	depends on
	<literal>IEEE1394</literal>
	</para>


<nutentry>
	<term>IEEE1394_VIDEO1394</term>
<nutsynopsis>
	"OHCI-1394 Video support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394 && IEEE1394_OHCI1394</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables video device usage for OHCI-1394 cards.  Enable
this option only if you have an IEEE 1394 video device connected to
an OHCI-1394 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_SBP2</term>
<nutsynopsis>
	"SBP-2 support (Harddisks etc.)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394 && SCSI && (PCI || BROKEN)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables you to use SBP-2 devices connected to your IEEE
1394 bus.  SBP-2 devices include harddrives and DVD devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_SBP2_PHYS_DMA</term>
<nutsynopsis>
	"Enable Phys DMA support for SBP2 (Debug)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394 && IEEE1394_SBP2</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_ETH1394</term>
<nutsynopsis>
	"Ethernet over 1394"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394 && EXPERIMENTAL && INET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver implements a functional majority of RFC 2734: IPv4 over
1394.  It will provide IP connectivity with implementations of RFC
2734 found on other operating systems.  It will not communicate with
older versions of this driver found in stock kernels prior to 2.6.3.
This driver is still considered experimental.  It does not yet support
MCAP, therefore multicast support is significantly limited.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_DV1394</term>
<nutsynopsis>
	"OHCI-DV I/O support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394 && IEEE1394_OHCI1394</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver allows you to transmit and receive DV (digital video)
streams on an OHCI-1394 card using a simple frame-oriented
interface.

The user-space API for dv1394 is documented in dv1394.h.

To compile this driver as a module, say M here: the
module will be called dv1394.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_RAWIO</term>
<nutsynopsis>
	"Raw IEEE1394 I/O support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want support for the raw device. This is generally
a good idea, so you should say Y here. The raw device enables
direct communication of user programs with the IEEE 1394 bus and
thus with the attached peripherals.

To compile this driver as a module, say M here: the
module will be called raw1394.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_CMP</term>
<nutsynopsis>
	"IEC61883-1 Plug support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the Connection Management Procedures
(IEC61883-1) driver, which implements input and output plugs.

To compile this driver as a module, say M here: the
module will be called cmp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IEEE1394_AMDTP</term>
<nutsynopsis>
	"IEC61883-6 (Audio transmission) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IEEE1394 && IEEE1394_OHCI1394 && IEEE1394_CMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables the Audio & Music Data Transmission Protocol
(IEC61883-6) driver, which implements audio transmission over
IEEE1394.

The userspace interface is documented in amdtp.h.

To compile this driver as a module, say M here: the
module will be called amdtp.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "I2O device support"

<nutentry>
	<term>I2O</term>
<nutsynopsis>
	"I2O support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Intelligent Input/Output (I2O) architecture allows hardware
drivers to be split into two parts: an operating system specific
module called the OSM and an hardware specific module called the
HDM. The OSM can talk to a whole range of HDM's, and ideally the
HDM's are not OS dependent. This allows for the same HDM driver to
be used under different operating systems if the relevant OSM is in
place. In order for this to work, you need to have an I2O interface
adapter card in your computer. This card contains a special I/O
processor (IOP), thus allowing high speeds since the CPU does not
have to deal with I/O.

If you say Y here, you will get a choice of interface adapter
drivers and OSM's with the following questions.

To compile this support as a module, choose M here: the
modules will be called i2o_core.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_EXT_ADAPTEC</term>
<nutsynopsis>
	"Enable Adaptec extensions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O</literal>
	</para>

	<para>
	default value
	<literal>y if I2O</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y for support of raidutils for Adaptec I2O controllers. You also
have to say Y to "I2O Configuration support", "I2O SCSI OSM" below
and to "SCSI generic support" under "SCSI device configuration".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_EXT_ADAPTEC_DMA64</term>
<nutsynopsis>
	"Enable 64-bit DMA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)</literal>
	</para>

	<para>
	default value
	<literal>y if I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y for support of 64-bit DMA transfer mode on Adaptec I2O
controllers.
Note: You need at least firmware version 3709.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_CONFIG</term>
<nutsynopsis>
	"I2O Configuration support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y for support of the configuration interface for the I2O adapters.
If you have a RAID controller from Adaptec and you want to use the
raidutils to manage your RAID array, you have to say Y here.

To compile this support as a module, choose M here: the
module will be called i2o_config.

Note: If you want to use the new API you have to download the
i2o_config patch from http://i2o.shadowconnect.com/
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_CONFIG_OLD_IOCTL</term>
<nutsynopsis>
	"Enable ioctls (OBSOLETE)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O_CONFIG</literal>
	</para>

	<para>
	default value
	<literal>y if I2O_CONFIG</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enables old ioctls.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_BUS</term>
<nutsynopsis>
	"I2O Bus Adapter OSM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include support for the I2O Bus Adapter OSM. The Bus Adapter OSM
provides access to the busses on the I2O controller. The main purpose
is to rescan the bus to find new devices.

To compile this support as a module, choose M here: the
module will be called i2o_bus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_BLOCK</term>
<nutsynopsis>
	"I2O Block OSM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include support for the I2O Block OSM. The Block OSM presents disk
and other structured block devices to the operating system. If you
are using an RAID controller, you could access the array only by
the Block OSM driver. But it is possible to access the single disks
by the SCSI OSM driver, for example to monitor the disks.

To compile this support as a module, choose M here: the
module will be called i2o_block.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_SCSI</term>
<nutsynopsis>
	"I2O SCSI OSM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Allows direct SCSI access to SCSI devices on a SCSI or FibreChannel
I2O controller. You can use both the SCSI and Block OSM together if
you wish. To access a RAID array, you must use the Block OSM driver.
But you could use the SCSI OSM driver to monitor the single disks.

To compile this support as a module, choose M here: the
module will be called i2o_scsi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2O_PROC</term>
<nutsynopsis>
	"I2O /proc support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2O</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and to "/proc file system support", you will be
able to read I2O related information from the virtual directory
/proc/i2o.

To compile this support as a module, choose M here: the
module will be called i2o_proc.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Macintosh device drivers"
<para>
	depends on
	<literal>PPC || MAC</literal>
	</para>


<nutentry>
	<term>ADB</term>
<nutsynopsis>
	"Apple Desktop Bus (ADB) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && (MAC || PPC_PMAC && PPC32)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Apple Desktop Bus (ADB) support is for support of devices which
are connected to an ADB port.  ADB devices tend to have 4 pins.
If you have an Apple Macintosh prior to the iMac, an iBook or
PowerBook, or a "Blue and White G3", you probably want to say Y
here.  Otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_MACII</term>
<nutsynopsis>
	"Include Mac II ADB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB && MAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if want your kernel to support Macintosh systems that use
the Mac II style ADB.  This includes the II, IIx, IIcx, SE/30, IIci,
Quadra 610, Quadra 650, Quadra 700, Quadra 800, Centris 610 and
Centris 650.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_MACIISI</term>
<nutsynopsis>
	"Include Mac IIsi ADB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB && MAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if want your kernel to support Macintosh systems that use
the Mac IIsi style ADB.  This includes the IIsi, IIvi, IIvx, Classic
II, LC, LC II, LC III, Performa 460, and the Performa 600.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_IOP</term>
<nutsynopsis>
	"Include IOP (IIfx/Quadra 9x0) ADB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB && MAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The I/O Processor (IOP) is an Apple custom IC designed to provide
intelligent support for I/O controllers.  It is described at
<http://www.angelfire.com/ca2/dev68k/iopdesc.html> to enable direct
support for it, say 'Y' here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_PMU68K</term>
<nutsynopsis>
	"Include PMU (Powerbook) ADB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB && MAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if want your kernel to support the m68k based Powerbooks.
This includes the PowerBook 140, PowerBook 145, PowerBook 150,
PowerBook 160, PowerBook 165, PowerBook 165c, PowerBook 170,
PowerBook 180, PowerBook, 180c, PowerBook 190cs, PowerBook 520,
PowerBook Duo 210, PowerBook Duo 230, PowerBook Duo 250,
PowerBook Duo 270c, PowerBook Duo 280 and PowerBook Duo 280c.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_CUDA</term>
<nutsynopsis>
	"Support for CUDA based Macs and PowerMacs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && (ADB || PPC_PMAC) && !PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This provides support for CUDA based Macintosh and Power Macintosh
systems.  This includes many m68k based Macs (Color Classic, Mac TV,
Performa 475, Performa 520, Performa 550, Performa 575,
Performa 588, Quadra 605, Quadra 630, Quadra/Centris 660AV, and
Quadra 840AV), most OldWorld PowerMacs, the first generation iMacs,
the Blue&White G3 and the "Yikes" G4 (PCI Graphics).  All later
models should use CONFIG_ADB_PMU instead.  It is safe to say Y here
even if your machine doesn't have a CUDA.

If unsure say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_PMU</term>
<nutsynopsis>
	"Support for PMU  based PowerMacs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && PPC_PMAC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
On PowerBooks, iBooks, and recent iMacs and Power Macintoshes, the
PMU is an embedded microprocessor whose primary function is to
control system power, and battery charging on the portable models.
The PMU also controls the ADB (Apple Desktop Bus) which connects to
the keyboard and mouse on some machines, as well as the non-volatile
RAM and the RTC (real time clock) chip.  Say Y to enable support for
this device; you should do so if your machine is one of those
mentioned above.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PMAC_SMU</term>
<nutsynopsis>
	"Support for SMU  based PowerMacs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option adds support for the newer G5 iMacs and PowerMacs based
on the "SMU" system control chip which replaces the old PMU.
If you don't know, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PMAC_APM_EMU</term>
<nutsynopsis>
	"APM emulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && PPC_PMAC && PPC32 && PM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PMAC_MEDIABAY</term>
<nutsynopsis>
	"Support PowerBook hotswap media bay"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && PPC_PMAC && PPC32</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option adds support for older PowerBook's hotswap media bay
that can contains batteries, floppy drives, or IDE devices. PCI
devices are not fully supported in the bay as I never had one to
try with
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PMAC_BACKLIGHT</term>
<nutsynopsis>
	"Backlight control for LCD screens"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB_PMU && (BROKEN || !PPC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to build in code to manage the LCD backlight on a
Macintosh PowerBook.  With this code, the backlight will be turned
on and off appropriately on power-management and lid-open/lid-closed
events; also, the PowerBook button device will be enabled so you can
change the screen brightness.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADB_MACIO</term>
<nutsynopsis>
	"Include MacIO (CHRP) ADB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB && PPC_CHRP && !PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include direct support for the ADB controller in the
Hydra chip used on PowerPC Macintoshes of the CHRP type.  (The Hydra
also includes a MESH II SCSI controller, DBDMA controller, VIA chip,
OpenPIC controller and two RS422/Geoports.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_ADBHID</term>
<nutsynopsis>
	"Support for ADB input devices (keyboard, mice, ...)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB && INPUT=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to have ADB (Apple Desktop Bus) HID devices
such as keyboards, mice, joysticks, trackpads  or graphic tablets
handled by the input layer.  If you say Y here, make sure to say Y to
the corresponding drivers "Keyboard support" (CONFIG_INPUT_KEYBDEV),
"Mouse Support" (CONFIG_INPUT_MOUSEDEV) and "Event interface
support" (CONFIG_INPUT_EVDEV) as well.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAC_EMUMOUSEBTN</term>
<nutsynopsis>
	"Support for mouse button 2+3 emulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && INPUT_ADBHID</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This provides generic support for emulating the 2nd and 3rd mouse
button with keypresses.  If you say Y here, the emulation is still
disabled by default.  The emulation is controlled by these sysctl
entries:
/proc/sys/dev/mac_hid/mouse_button_emulation
/proc/sys/dev/mac_hid/mouse_button2_keycode
/proc/sys/dev/mac_hid/mouse_button3_keycode

If you have an Apple machine with a 1-button mouse, say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>THERM_WINDTUNNEL</term>
<nutsynopsis>
	"Support for thermal management on Windtunnel G4s"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && I2C && I2C_KEYWEST && PPC_PMAC && !PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides some thermostat and fan control for the desktop
G4 "Windtunnel"
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>THERM_ADT746X</term>
<nutsynopsis>
	"Support for thermal mgmnt on laptops with ADT 746x chipset"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && I2C && I2C_KEYWEST && PPC_PMAC && !PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides some thermostat and fan control for the
iBook G4, and the ATI based aluminium PowerBooks, allowing slighlty
better fan behaviour by default, and some manual control.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>THERM_PM72</term>
<nutsynopsis>
	"Support for thermal management on PowerMac G5"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && I2C && I2C_KEYWEST && PPC_PMAC64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides thermostat and fan control for the desktop
G5 machines. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ANSLCD</term>
<nutsynopsis>
	"Support for ANS LCD display"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(PPC || MAC) && ADB_CUDA && PPC_PMAC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Network device support"

<nutentry>
	<term>NETDEVICES</term>
<nutsynopsis>
	"Network device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
You can say N here if you don't intend to connect your Linux box to
any other computer at all.

You'll have to say Y if your computer contains a network card that
you want to use under Linux. If you are going to run SLIP or PPP over
telephone line or null modem cable you need say Y here. Connecting
two machines with parallel ports using PLIP needs this, as well as
AX.25/KISS for sending Internet traffic over amateur radio links.

See also "The Linux Network Administrator's Guide" by Olaf Kirch and
Terry Dawson. Available at <http://www.tldp.org/guides.html>.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DUMMY</term>
<nutsynopsis>
	"Dummy net driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is essentially a bit-bucket device (i.e. traffic you send to
this device is consigned into oblivion) with a configurable IP
address. It is most commonly used in order to make your currently
inactive SLIP address seem like a real address for local programs.
If you use SLIP or PPP, you might want to say Y here. Since this
thing often comes in handy, the default is Y. It won't enlarge your
kernel either. What a deal. Read about it in the Network
Administrator's Guide, available from
<http://www.tldp.org/docs.html#guide>.

To compile this driver as a module, choose M here: the module
will be called dummy.  If you want to use more than one dummy
device at a time, you need to compile this driver as a module.
Instead of 'dummy', the devices will then be called 'dummy0',
'dummy1' etc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BONDING</term>
<nutsynopsis>
	"Bonding driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say 'Y' or 'M' if you wish to be able to 'bond' multiple Ethernet
Channels together. This is called 'Etherchannel' by Cisco,
'Trunking' by Sun, 802.3ad by the IEEE, and 'Bonding' in Linux.

The driver supports multiple bonding modes to allow for both high
perfomance and high availability operation.

Refer to <file:Documentation/networking/bonding.txt> for more
information.

To compile this driver as a module, choose M here: the module
will be called bonding.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EQUALIZER</term>
<nutsynopsis>
	"EQL (serial line load balancing) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have two serial connections to some other computer (this
usually requires two modems and two telephone lines) and you use
SLIP (the protocol for sending Internet traffic over telephone
lines) or PPP (a better SLIP) on them, you can make them behave like
one double speed connection using this driver.  Naturally, this has
to be supported at the other end as well, either with a similar EQL
Linux driver or with a Livingston Portmaster 2e.

Say Y if you want this and read
<file:Documentation/networking/eql.txt>.  You may also want to read
section 6.2 of the NET-3-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the module
will be called eql.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TUN</term>
<nutsynopsis>
	"Universal TUN/TAP device driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TUN/TAP provides packet reception and transmission for user space
programs.  It can be viewed as a simple Point-to-Point or Ethernet
device, which instead of receiving packets from a physical media,
receives them from user space program and instead of sending packets
via physical media writes them to the user space program.

When a program opens /dev/net/tun, driver creates and registers
corresponding net device tunX or tapX.  After a program closed above
devices, driver will automatically delete tunXX or tapXX device and
all routes corresponding to it.

Please read <file:Documentation/networking/tuntap.txt> for more
information.

To compile this driver as a module, choose M here: the module
will be called tun.

If you don't know what to use this for, you don't need it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SB1000</term>
<nutsynopsis>
	"General Instruments Surfboard 1000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PNP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the General Instrument (also known as
NextLevel) SURFboard 1000 internal
cable modem. This is an ISA card which is used by a number of cable
TV companies to provide cable modem access. It's a one-way
downstream-only cable modem, meaning that your upstream net link is
provided by your regular phone modem.

At present this driver only compiles as a module, so say M here if
you have this card. The module will be called sb1000. Then read
<file:Documentation/networking/README.sb1000> for information on how
to use this module, as it needs special ppp scripts for establishing
a connection. Further documentation and the necessary scripts can be
found at:

<http://www.jacksonville.net/~fventuri/>
<http://home.adelphia.net/~siglercm/sb1000.html>
<http://linuxpower.cx/~cable/>

If you don't have this card, of course say N.
	</para>

</nutentrybody>
</nutentry>

menu "ARCnet devices"
<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI)</literal>
	</para>


<nutentry>
	<term>ARCNET</term>
<nutsynopsis>
	"ARCnet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network card of this type, say Y and check out the
(arguably) beautiful poetry in
<file:Documentation/networking/arcnet.txt>.

You need both this driver, and the driver for the particular ARCnet
chipset of your card. If you don't know, then it's probably a
COM90xx type card, so say Y (or M) to "ARCnet COM90xx chipset
support" below.

You might also want to have a look at the Ethernet-HOWTO, available
from <http://www.tldp.org/docs.html#howto>(even though ARCnet
is not really Ethernet).

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called arcnet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_1201</term>
<nutsynopsis>
	"Enable standard ARCNet packet format (RFC 1201)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use RFC1201 with your ARCnet card via the virtual
arc0 device.  You need to say Y here to communicate with
industry-standard RFC1201 implementations, like the arcether.com
packet driver or most DOS/Windows ODI drivers.  Please read the
ARCnet documentation in <file:Documentation/networking/arcnet.txt>
for more information about using arc0.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_1051</term>
<nutsynopsis>
	"Enable old ARCNet packet format (RFC 1051)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use RFC1051 with your ARCnet card via the virtual
arc0s device. You only need arc0s if you want to talk to ARCnet
software complying with the "old" standard, specifically, the DOS
arcnet.com packet driver, Amigas running AmiTCP, and some variants
of NetBSD. You do not need to say Y here to communicate with
industry-standard RFC1201 implementations, like the arcether.com
packet driver or most DOS/Windows ODI drivers. RFC1201 is included
automatically as the arc0 device. Please read the ARCnet
documentation in <file:Documentation/networking/arcnet.txt> for more
information about using arc0e and arc0s.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_RAW</term>
<nutsynopsis>
	"Enable raw mode packet interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ARCnet "raw mode" packet encapsulation, no soft headers.  Unlikely
to work unless talking to a copy of the same Linux arcnet driver,
but perhaps marginally faster in that case.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_CAP</term>
<nutsynopsis>
	"Enable CAP mode packet interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ARCnet "cap mode" packet encapsulation. Used to get the hardware
acknowledge back to userspace. After the initial protocol byte every
packet is stuffed with an extra 4 byte "cookie" which doesn't
actually appear on the network. After transmit the driver will send
back a packet with protocol byte 0 containing the status of the
transmition:
   0=no hardware acknowledge
   1=excessive nak
   2=transmition accepted by the reciever hardware

Received packets are also stuffed with the extra 4 bytes but it will
be random data.

Cap only listens to protocol 1-8.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_COM90xx</term>
<nutsynopsis>
	"ARCnet COM90xx (normal) chipset driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the chipset driver for the standard COM90xx cards. If you
have always used the old ARCnet driver without knowing what type of
card you had, this is probably the one for you.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called com90xx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_COM90xxIO</term>
<nutsynopsis>
	"ARCnet COM90xx (IO mapped) chipset driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the chipset driver for the COM90xx cards, using them in
IO-mapped mode instead of memory-mapped mode. This is slower than
the normal driver. Only use it if your card doesn't support shared
memory.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called com90io.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_RIM_I</term>
<nutsynopsis>
	"ARCnet COM90xx (RIM I) chipset driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is yet another chipset driver for the COM90xx cards, but this
time only using memory-mapped mode, and no IO ports at all. This
driver is completely untested, so if you have one of these cards,
please mail <dwmw2@infradead.org>, especially if it works!

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called arc-rimi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_COM20020</term>
<nutsynopsis>
	"ARCnet COM20020 chipset driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the new COM20020 chipset. It supports such
things as promiscuous mode, so packet sniffing is possible, and
extra diagnostic information.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called com20020.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_COM20020_ISA</term>
<nutsynopsis>
	"Support for COM20020 on ISA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET_COM20020 && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_COM20020_PCI</term>
<nutsynopsis>
	"Support for COM20020 on PCI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (ISA || PCI) && ARCNET_COM20020 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "PHY device support"
<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>


<nutentry>
	<term>PHYLIB</term>
<nutsynopsis>
	"PHY Device support and infrastructure"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && NET_ETHERNET && (BROKEN || !ARCH_S390)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Ethernet controllers are usually attached to PHY
devices.  This option provides infrastructure for
managing PHY devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PHYCONTROL</term>
<nutsynopsis>
	"  Support for automatically handling PHY state changes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Adds code to perform all the work for keeping PHY link
state (speed/duplex/etc) up-to-date.  Also handles
interrupts.
	</para>

</nutentrybody>
</nutentry>

comment "MII PHY device drivers"
<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>


<nutentry>
	<term>MARVELL_PHY</term>
<nutsynopsis>
	"Drivers for Marvell PHYs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Currently has a driver for the 88E1011S
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DAVICOM_PHY</term>
<nutsynopsis>
	"Drivers for Davicom PHYs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Currently supports dm9161e and dm9131
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QSEMI_PHY</term>
<nutsynopsis>
	"Drivers for Quality Semiconductor PHYs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Currently supports the qs6612
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LXT_PHY</term>
<nutsynopsis>
	"Drivers for the Intel LXT PHYs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Currently supports the lxt970, lxt971
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CICADA_PHY</term>
<nutsynopsis>
	"Drivers for the Cicada PHYs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PHYLIB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Currently supports the cis8204
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Ethernet (10 or 100Mbit)"
<para>
	depends on
	<literal>NETDEVICES && !UML</literal>
	</para>


<nutentry>
	<term>NET_ETHERNET</term>
<nutsynopsis>
	"Ethernet (10 or 100Mbit)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Ethernet (also called IEEE 802.3 or ISO 8802-2) is the most common
type of Local Area Network (LAN) in universities and companies.

Common varieties of Ethernet are: 10BASE-2 or Thinnet (10 Mbps over
coaxial cable, linking computers in a chain), 10BASE-T or twisted
pair (10 Mbps over twisted pair cable, linking computers to central
hubs), 10BASE-F (10 Mbps over optical fiber links, using hubs),
100BASE-TX (100 Mbps over two twisted pair cables, using hubs),
100BASE-T4 (100 Mbps over 4 standard voice-grade twisted pair
cables, using hubs), 100BASE-FX (100 Mbps over optical fiber links)
[the 100BASE varieties are also known as Fast Ethernet], and Gigabit
Ethernet (1 Gbps over optical fiber or short copper links).

If your Linux machine will be connected to an Ethernet and you have
an Ethernet network interface card (NIC) installed in your computer,
say Y here and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. You will then also have
to say Y to the driver for your particular NIC.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about Ethernet network cards. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MII</term>
<nutsynopsis>
	"Generic Media Independent Interface device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Most ethernet controllers have MII transceiver either as an external
or internal device.  It is safe to say Y or M here even if your
ethernet card lack MII.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARM_AM79C961A</term>
<nutsynopsis>
	"ARM EBSA110 AM79C961A support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_EBSA110</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to compile a kernel for the EBSA-110, then you should
always answer Y to this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARM_ETHER1</term>
<nutsynopsis>
	"Acorn Ether1 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Acorn system with one of these (AKA25) network cards,
you should say Y to this option if you wish to use it with Linux.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARM_ETHER3</term>
<nutsynopsis>
	"Acorn/ANT Ether3 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Acorn system with one of these network cards, you
should say Y to this option if you wish to use it with Linux.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARM_ETHERH</term>
<nutsynopsis>
	"I-cubed EtherH/ANT EtherM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Acorn system with one of these network cards, you
should say Y to this option if you wish to use it with Linux.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARM_ETHER00</term>
<nutsynopsis>
	"Altera Ether00 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_CAMELOT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for Altera's ether00 ethernet mac IP core. Say
Y here if you want to build support for this into the kernel. It
is also available as a module (say M here) that can be inserted/
removed from the kernel at the same time as the PLD is configured.
If this driver is running on an epxa10 development board then it
will generate a suitable hw address based on the board serial
number (MTD support is required for this). Otherwise you will
need to set a suitable hw address using ifconfig.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MACE</term>
<nutsynopsis>
	"MACE (Power Mac ethernet) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Power Macintoshes and clones with Ethernet built-in on the
motherboard will usually use a MACE (Medium Access Control for
Ethernet) interface. Say Y to include support for the MACE chip.

To compile this driver as a module, choose M here: the module
will be called mace.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MACE_AAUI_PORT</term>
<nutsynopsis>
	"Use AAUI port instead of TP by default"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && MACE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some Apple machines (notably the Apple Network Server) which use the
MACE ethernet chip have an Apple AUI port (small 15-pin connector),
instead of an 8-pin RJ45 connector for twisted-pair ethernet.  Say
Y here if you have such a machine.  If unsure, say N.
The driver will default to AAUI on ANS anyway, and if you use it as
a module, you can provide the port_aaui=0|1 to force the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BMAC</term>
<nutsynopsis>
	"BMAC (G3 ethernet) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y for support of BMAC Ethernet interfaces. These are used on G3
computers.

To compile this driver as a module, choose M here: the module
will be called bmac.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OAKNET</term>
<nutsynopsis>
	"National DP83902AV (Oak ethernet) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PPC && BROKEN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if your machine has this type of Ethernet network card.

To compile this driver as a module, choose M here: the module
will be called oaknet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARIADNE</term>
<nutsynopsis>
	"Ariadne support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ZORRO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Village Tronic Ariadne Ethernet adapter, say Y.
Otherwise, say N.

To compile this driver as a module, choose M here: the module
will be called ariadne.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>A2065</term>
<nutsynopsis>
	"A2065 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ZORRO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Commodore A2065 Ethernet adapter, say Y. Otherwise,
say N.

To compile this driver as a module, choose M here: the module
will be called a2065.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HYDRA</term>
<nutsynopsis>
	"Hydra support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ZORRO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Hydra Ethernet adapter, say Y. Otherwise, say N.

To compile this driver as a module, choose M here: the module
will be called hydra.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZORRO8390</term>
<nutsynopsis>
	"Zorro NS8390-based Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ZORRO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for Zorro Ethernet cards using an NS8390-compatible
chipset, like the Village Tronic Ariadne II and the Individual
Computers X-Surf Ethernet cards. If you have such a card, say Y.
Otherwise, say N.

To compile this driver as a module, choose M here: the module
will be called zorro8390.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APNE</term>
<nutsynopsis>
	"PCMCIA NE2000 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && AMIGA_PCMCIA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a PCMCIA NE2000 compatible adapter, say Y.  Otherwise,
say N.

To compile this driver as a module, choose M here: the module
will be called apne.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APOLLO_ELPLUS</term>
<nutsynopsis>
	"Apollo 3c505 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && APOLLO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M here if your Apollo has a 3Com 3c505 ISA Ethernet card.
If you don't have one made for Apollos, you can use one from a PC,
except that your Apollo won't be able to boot from it (because the
code in the ROM will be for a PC).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAC8390</term>
<nutsynopsis>
	"Macintosh NS 8390 based ethernet cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MAC</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want to include a driver to support Nubus or LC-PDS
Ethernet cards using an NS8390 chipset or its equivalent, say Y
and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAC89x0</term>
<nutsynopsis>
	"Macintosh CS89x0 based ethernet cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MAC && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for CS89x0 chipset based Ethernet cards.  If you have a
Nubus or LC-PDS network (Ethernet) card of this type, say Y and
read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  This module will
be called mac89x0.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MACSONIC</term>
<nutsynopsis>
	"Macintosh SONIC based ethernet (onboard, NuBus, LC, CS)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MAC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for NatSemi SONIC based Ethernet devices.  This includes
the onboard Ethernet in many Quadras as well as some LC-PDS,
a few Nubus and all known Comm Slot Ethernet cards.  If you have
one of these say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  This module will
be called macsonic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MACMACE</term>
<nutsynopsis>
	"Macintosh (AV) onboard MACE ethernet (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MAC && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the onboard AMD 79C940 MACE Ethernet controller used in
the 660AV and 840AV Macintosh.  If you have one of these Macintoshes
say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MVME147_NET</term>
<nutsynopsis>
	"MVME147 (Lance) Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MVME147</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the on-board Ethernet interface on the Motorola MVME147
single-board computer.  Say Y here to include the
driver for this chip in your kernel.
To compile this driver as a module, choose M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MVME16x_NET</term>
<nutsynopsis>
	"MVME16x Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MVME16x</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the Ethernet interface on the Motorola
MVME162, 166, 167, 172 and 177 boards.  Say Y here to include the
driver for this chip in your kernel.
To compile this driver as a module, choose M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BVME6000_NET</term>
<nutsynopsis>
	"BVME6000 Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && BVME6000</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the Ethernet interface on BVME4000 and
BVME6000 VME boards.  Say Y here to include the driver for this chip
in your kernel.
To compile this driver as a module, choose M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARILANCE</term>
<nutsynopsis>
	"Atari Lance support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ATARI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to include support for several Atari Ethernet adapters based
on the AMD Lance chipset: RieblCard (with or without battery), or
PAMCard VME (also the version by Rhotron, with different addresses).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_BIONET</term>
<nutsynopsis>
	"BioNet-100 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to include support for BioData's BioNet-100 Ethernet adapter
for the ACSI port. The driver works (has to work...) with a polled
I/O scheme, so it's rather slow :-(
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_PAMSNET</term>
<nutsynopsis>
	"PAMsNet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to include support for the PAMsNet Ethernet adapter for the
ACSI port ("ACSI node"). The driver works (has to work...) with a
polled I/O scheme, so it's rather slow :-(
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUN3LANCE</term>
<nutsynopsis>
	"Sun3/Sun3x on-board LANCE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (SUN3 || SUN3X)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Most Sun3 and Sun3x motherboards (including the 3/50, 3/60 and 3/80)
featured an AMD Lance 10Mbit Ethernet controller on board; say Y
here to compile in the Linux driver for this and enable Ethernet.
General Linux information on the Sun 3 and 3x series (now
discontinued) is at
<http://www.angelfire.com/ca2/tech68k/sun3.html>.

If you're not building a kernel for a Sun 3, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUN3_82586</term>
<nutsynopsis>
	"Sun3 on-board Intel 82586 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SUN3</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver enables support for the on-board Intel 82586 based
Ethernet adapter found on Sun 3/1xx and 3/2xx motherboards.  Note
that this driver does not support 82586-based adapters on additional
VME boards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPLANCE</term>
<nutsynopsis>
	"HP on-board LANCE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && DIO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want to use the builtin "LANCE" Ethernet controller on an
HP300 machine, say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LASI_82596</term>
<nutsynopsis>
	"Lasi ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PARISC && GSC_LASI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the on-board Intel 82596 ethernet controller
built into Hewlett-Packard PA-RISC machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MIPS_JAZZ_SONIC</term>
<nutsynopsis>
	"MIPS JAZZ onboard SONIC Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MACH_JAZZ</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the onboard card of MIPS Magnum 4000,
Acer PICA, Olivetti M700-10 and a few other identical OEM systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MIPS_GT96100ETH</term>
<nutsynopsis>
	"MIPS GT96100 Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MIPS_GT96100</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support the Ethernet subsystem on your GT96100 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MIPS_AU1X00_ENET</term>
<nutsynopsis>
	"MIPS AU1000 Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SOC_AU1X00</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an Alchemy Semi AU1X00 based system
say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_SB1250_MAC</term>
<nutsynopsis>
	"SB1250 Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SIBYTE_SB1xxx_SOC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_IOC3_ETH</term>
<nutsynopsis>
	"SGI IOC3 Ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PCI && SGI_IP27 && BROKEN</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_IOC3_ETH_HW_RX_CSUM</term>
<nutsynopsis>
	"Receive hardware checksums"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && SGI_IOC3_ETH && INET</literal>
	</para>

	<para>
	default value
	<literal>y if NETDEVICES && !UML && SGI_IOC3_ETH && INET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The SGI IOC3 network adapter supports TCP and UDP checksums in
hardware to offload processing of these checksums from the CPU.  At
the moment only acceleration of IPv4 is supported.  This option
enables offloading for checksums on receive.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_IOC3_ETH_HW_TX_CSUM</term>
<nutsynopsis>
	"Transmit hardware checksums"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && SGI_IOC3_ETH && INET</literal>
	</para>

	<para>
	default value
	<literal>y if NETDEVICES && !UML && SGI_IOC3_ETH && INET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The SGI IOC3 network adapter supports TCP and UDP checksums in
hardware to offload processing of these checksums from the CPU.  At
the moment only acceleration of IPv4 is supported.  This option
enables offloading for checksums on transmit.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_O2MACE_ETH</term>
<nutsynopsis>
	"SGI O2 MACE Fast Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SGI_IP32=y</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>STNIC</term>
<nutsynopsis>
	"National DP83902AV  support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SUPERH</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for cards based on the National Semiconductor DP83902AV
ST-NIC Serial Network Interface Controller for Twisted Pair.  This
is a 10Mbit/sec Ethernet controller.  Product overview and specs at
<http://www.national.com/pf/DP/DP83902A.html>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNLANCE</term>
<nutsynopsis>
	"Sun LANCE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SBUS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the "le" interface present on all 32-bit Sparc
systems, on some older Ultra systems and as an Sbus option.  These
cards are based on the AMD Lance chipset, which is better known
via the NE2100 cards.

To compile this driver as a module, choose M here: the module
will be called sunlance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HAPPYMEAL</term>
<nutsynopsis>
	"Sun Happy Meal 10/100baseT support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (SBUS || PCI)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the "hme" interface present on most Ultra
systems and as an option on older Sbus systems. This driver supports
both PCI and Sbus devices. This driver also supports the "qfe" quad
100baseT device available in both PCI and Sbus configurations.

To compile this driver as a module, choose M here: the module
will be called sunhme.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNBMAC</term>
<nutsynopsis>
	"Sun BigMAC 10/100baseT support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SBUS && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the "be" interface available as an Sbus option.
This is Sun's older 100baseT Ethernet device.

To compile this driver as a module, choose M here: the module
will be called sunbmac.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNQE</term>
<nutsynopsis>
	"Sun QuadEthernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SBUS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the "qe" 10baseT Ethernet device, available as
an Sbus option. Note that this is not the same as Quad FastEthernet
"qfe" which is supported by the Happy Meal driver instead.

To compile this driver as a module, choose M here: the module
will be called sunqe.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNGEM</term>
<nutsynopsis>
	"Sun GEM support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Sun GEM chip, aka Sun GigabitEthernet/P 2.0.  See also
<http://www.sun.com/products-n-solutions/hardware/docs/pdf/806-3985-10.pdf>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CASSINI</term>
<nutsynopsis>
	"Sun Cassini support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Sun Cassini chip, aka Sun GigaSwift Ethernet. See also
<http://www.sun.com/products-n-solutions/hardware/docs/pdf/817-4341-10.pdf>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_VENDOR_3COM</term>
<nutsynopsis>
	"3COM cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA || PCI)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a network (Ethernet) card belonging to this class, say Y
and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about 3COM cards. If you say Y, you will be asked for
your specific card in the following questions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EL1</term>
<nutsynopsis>
	"3c501 \"EtherLink\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  Also, consider buying a
new card, since the 3c501 is slow, broken, and obsolete: you will
have problems.  Some people suggest to ping ("man ping") a nearby
machine every minute ("man cron") when using this card.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c501.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EL2</term>
<nutsynopsis>
	"3c503 \"EtherLink II\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c503.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ELPLUS</term>
<nutsynopsis>
	"3c505 \"EtherLink Plus\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && ISA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Information about this network (Ethernet) card can be found in
<file:Documentation/networking/3c505.txt>.  If you have a card of
this type, say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c505.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EL16</term>
<nutsynopsis>
	"3c507 \"EtherLink 16\" support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && ISA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c507.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EL3</term>
<nutsynopsis>
	"3c509/3c529 (MCA)/3c579 \"EtherLink III\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && (ISA || EISA || MCA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card belonging to the 3Com
EtherLinkIII series, say Y and read the Ethernet-HOWTO, available
from <http://www.tldp.org/docs.html#howto>.

If your card is not working you may need to use the DOS
setup disk to disable Plug & Play mode, and to select the default
media type.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c509.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>3C515</term>
<nutsynopsis>
	"3c515 ISA \"Fast EtherLink\""
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a 3Com ISA EtherLink XL "Corkscrew" 3c515 Fast Ethernet
network card, say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c515.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ELMC</term>
<nutsynopsis>
	"3c523 \"EtherLink/MC\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && MCA_LEGACY</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c523.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ELMC_II</term>
<nutsynopsis>
	"3c527 \"EtherLink/MC 32\" support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && MCA && MCA_LEGACY</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called 3c527.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VORTEX</term>
<nutsynopsis>
	"3c590/3c900 series (592/595/597) \"Vortex/Boomerang\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && (PCI || EISA)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables driver support for a large number of 10mbps and
10/100mbps EISA, PCI and PCMCIA 3Com network cards:

"Vortex"    (Fast EtherLink 3c590/3c592/3c595/3c597) EISA and PCI
"Boomerang" (EtherLink XL 3c900 or 3c905)            PCI
"Cyclone"   (3c540/3c900/3c905/3c980/3c575/3c656)    PCI and Cardbus
"Tornado"   (3c905)                                  PCI
"Hurricane" (3c555/3cSOHO)                           PCI

If you have such a card, say Y and read the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>. More
specific information is in
<file:Documentation/networking/vortex.txt> and in the comments at
the beginning of <file:drivers/net/3c59x.c>.

To compile this support as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TYPHOON</term>
<nutsynopsis>
	"3cr990 series \"Typhoon\" support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_3COM && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables driver support for the 3cr990 series of cards:

3C990-TX, 3CR990-TX-95, 3CR990-TX-97, 3CR990-FX-95, 3CR990-FX-97,
3CR990SVR, 3CR990SVR95, 3CR990SVR97, 3CR990-FX-95 Server,
3CR990-FX-97 Server, 3C990B-TX-M, 3C990BSVR

If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called typhoon.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LANCE</term>
<nutsynopsis>
	"AMD LANCE and PCnet (AT1500 and NE2100) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ISA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. Some LinkSys cards are
of this type.

To compile this driver as a module, choose M here: the module
will be called lance.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_VENDOR_SMC</term>
<nutsynopsis>
	"Western Digital/SMC cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA || EISA || MAC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a network (Ethernet) card belonging to this class, say Y
and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about Western Digital cards. If you say Y, you will be
asked for your specific card in the following questions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WD80x3</term>
<nutsynopsis>
	"WD80*3 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_SMC && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called wd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ULTRAMCA</term>
<nutsynopsis>
	"SMC Ultra MCA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_SMC && MCA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type and are running
an MCA based system (PS/2), say Y and read the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called smc-mca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ULTRA</term>
<nutsynopsis>
	"SMC Ultra support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_SMC && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Important: There have been many reports that, with some motherboards
mixing an SMC Ultra and an Adaptec AHA154x SCSI card (or compatible,
such as some BusLogic models) causes corruption problems with many
operating systems. The Linux smc-ultra driver has a work-around for
this but keep it in mind if you have such a SCSI card and have
problems.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called smc-ultra.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ULTRA32</term>
<nutsynopsis>
	"SMC Ultra32 EISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_SMC && EISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called smc-ultra32.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMC91X</term>
<nutsynopsis>
	"SMC 91C9x/91C1xxx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for SMC's 91x series of Ethernet chipsets,
including the SMC91C94 and the SMC91C111. Say Y if you want it
compiled into the kernel, and read the file
<file:Documentation/networking/smc9.txt>  and the Ethernet-HOWTO,
available from  <http://www.linuxdoc.org/docs.html#howto>.

This driver is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called smc91x.  If you want to compile it as a
module, say M here and read <file:Documentation/modules.txt> as well
as <file:Documentation/networking/net-modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMC9194</term>
<nutsynopsis>
	"SMC 9194 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_SMC && (ISA || MAC && BROKEN)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the SMC9xxx based Ethernet cards. Choose this
option if you have a DELL laptop with the docking station, or
another SMC9192/9194 based chipset.  Say Y if you want it compiled
into the kernel, and read the file
<file:Documentation/networking/smc9.txt> and the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called smc9194.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM9000</term>
<nutsynopsis>
	"DM9000 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && ARM && NET_ETHERNET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for DM9000 chipset.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called dm9000.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_VENDOR_RACAL</term>
<nutsynopsis>
	"Racal-Interlan (Micom) NI cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a network (Ethernet) card belonging to this class, such
as the NI5010, NI5210 or NI6210, say Y and read the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about NI cards. If you say Y, you will be asked for
your specific card in the following questions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NI5010</term>
<nutsynopsis>
	"NI5010 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. Note that this is still
experimental code.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ni5010.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NI52</term>
<nutsynopsis>
	"NI5210 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_RACAL && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ni52.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NI65</term>
<nutsynopsis>
	"NI6510 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_VENDOR_RACAL && ISA && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ni65.
	</para>

</nutentrybody>
</nutentry>

menu "Tulip family network device support"
<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS)</literal>
	</para>


<nutentry>
	<term>NET_TULIP</term>
<nutsynopsis>
	"\"Tulip\" family network device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This selects the "Tulip" family of EISA/PCI network cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DE2104X</term>
<nutsynopsis>
	"Early DECchip Tulip (dc2104x) PCI support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is developed for the SMC EtherPower series Ethernet
cards and also works with cards based on the DECchip
21040 (Tulip series) chips.  Some LinkSys PCI cards are
of this type.  (If your card is NOT SMC EtherPower 10/100 PCI
(smc9332dst), you can also try the driver for "Generic DECchip"
cards, below.  However, most people with a network card of this type
will say Y here.) Do read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called de2104x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TULIP</term>
<nutsynopsis>
	"DECchip Tulip (dc2114x) PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is developed for the SMC EtherPower series Ethernet
cards and also works with cards based on the DECchip 
21140 (Tulip series) chips.  Some LinkSys PCI cards are
of this type.  (If your card is NOT SMC EtherPower 10/100 PCI
(smc9332dst), you can also try the driver for "Generic DECchip"
cards, above.  However, most people with a network card of this type
will say Y here.) Do read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called tulip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TULIP_MWI</term>
<nutsynopsis>
	"New bus configuration (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This configures your Tulip card specifically for the card and
system cache line size type you are using.

This is experimental code, not yet tested on many boards.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TULIP_MMIO</term>
<nutsynopsis>
	"Use PCI shared mem for NIC registers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use PCI shared memory for the NIC registers, rather than going through
the Tulip's PIO (programmed I/O ports).  Faster, but could produce
obscure bugs if your mainboard has memory controller timing issues.
If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TULIP_NAPI</term>
<nutsynopsis>
	"Use NAPI RX polling "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TULIP_NAPI_HW_MITIGATION</term>
<nutsynopsis>
	"Use Interrupt Mitigation "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP_NAPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use HW to reduce RX interrupts. Not strict necessary since NAPI reduces
RX interrupts but itself. Although this reduces RX interrupts even at
low levels traffic at the cost of a small latency.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DE4X5</term>
<nutsynopsis>
	"Generic DECchip & DIGITAL EtherWORKS PCI/EISA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && (PCI || EISA)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the DIGITAL series of PCI/EISA Ethernet cards.
These include the DE425, DE434, DE435, DE450 and DE500 models.  If
you have a network card of this type, say Y and read the
Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. More specific
information is contained in
<file:Documentation/networking/de4x5.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called de4x5.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WINBOND_840</term>
<nutsynopsis>
	"Winbond W89c840 Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the Winbond W89c840 chip.  It also works with 
the TX9882 chip on the Compex RL100-ATX board.
More specific information and updates are available from
<http://www.scyld.com/network/drivers.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DM9102</term>
<nutsynopsis>
	"Davicom DM910x/DM980x support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for DM9102(A)/DM9132/DM9801 compatible PCI cards from
Davicom (<http://www.davicom.com.tw/>).  If you have such a network
(Ethernet) card, say Y.  Some information is contained in the file
<file:Documentation/networking/dmfe.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called dmfe.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ULI526X</term>
<nutsynopsis>
	"ULi M526x controller support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for ULi M5261/M5263 10/100M Ethernet Controller
(<http://www.uli.com.tw/>).

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called uli526x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_XIRCOM</term>
<nutsynopsis>
	"Xircom CardBus support (new driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the Digital "Tulip" Ethernet CardBus adapters.
It should work with most DEC 21*4*-based chips/ethercards, as well
as with work-alike chips from Lite-On (PNIC) and Macronix (MXIC) and
ASIX.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called xircom_cb.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_XIRTULIP</term>
<nutsynopsis>
	"Xircom Tulip-like CardBus support (old driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS && BROKEN_ON_SMP</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the Digital "Tulip" Ethernet CardBus adapters.
It should work with most DEC 21*4*-based chips/ethercards, as well
as with work-alike chips from Lite-On (PNIC) and Macronix (MXIC) and
ASIX.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will
be called xircom_tulip_cb.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>AT1700</term>
<nutsynopsis>
	"AT1700/1720 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called at1700.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEPCA</term>
<nutsynopsis>
	"DEPCA, DE10x, DE200, DE201, DE202, DE422 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto> as well as
<file:drivers/net/depca.c>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called depca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HP100</term>
<nutsynopsis>
	"HP 10/100VG PCLAN (ISA, EISA, PCI) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || PCI)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called hp100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_ISA</term>
<nutsynopsis>
	"Other ISA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If your network (Ethernet) card hasn't been mentioned yet and its
bus system (that's the way the cards talks to the other components
of your computer) is ISA (as opposed to EISA, VLB or PCI), say Y.
Make sure you know the name of your card. Read the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

If unsure, say Y.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the remaining ISA network card questions. If you say Y, you will be
asked for your specific card in the following questions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>E2100</term>
<nutsynopsis>
	"Cabletron E21xx support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called e2100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EWRK3</term>
<nutsynopsis>
	"EtherWORKS 3 (DE203, DE204, DE205) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the DE203, DE204 and DE205 network (Ethernet)
cards. If this is for you, say Y and read
<file:Documentation/networking/ewrk3.txt> in the kernel source as
well as the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ewrk3.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EEXPRESS</term>
<nutsynopsis>
	"EtherExpress 16 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an EtherExpress16 network (Ethernet) card, say Y and
read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  Note that the Intel
EtherExpress16 card used to be regarded as a very poor choice
because the driver was very unreliable. We now have a new driver
that should do better.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called eexpress.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EEXPRESS_PRO</term>
<nutsynopsis>
	"EtherExpressPro support/EtherExpress 10 (i82595) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y. This
driver supports intel i82595{FX,TX} based boards. Note however
that the EtherExpress PRO/100 Ethernet card has its own separate
driver.  Please read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called eepro.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPLAN_PLUS</term>
<nutsynopsis>
	"HP PCLAN+ (27247B and 27252A) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called hp-plus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPLAN</term>
<nutsynopsis>
	"HP PCLAN (27245 and other 27xxx series) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called hp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LP486E</term>
<nutsynopsis>
	"LP486E on board Ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the 82596-based on-board Ethernet controller
for the Panther motherboard, which is one of the two shipped in the
Intel Professional Workstation.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ETH16I</term>
<nutsynopsis>
	"ICL EtherTeam 16i/32 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called eth16i.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NE2000</term>
<nutsynopsis>
	"NE2000/NE1000 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && (NET_ISA || Q40 && m && MODULES || M32R)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  Many Ethernet cards
without a specific driver are compatible with NE2000.

If you have a PCI NE2000 card however, say N here and Y to "PCI
NE2000 support", above. If you have a NE2000 card and are running on
an MCA system (a bus system used on some IBM PS/2 computers and
laptops), say N here and Y to "NE/2 (ne2000 MCA version) support",
below.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ne.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZNET</term>
<nutsynopsis>
	"Zenith Z-Note support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA && EXPERIMENTAL && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Zenith Z-Note notebook computer has a built-in network
(Ethernet) card, and this is the Linux driver for it. Note that the
IBM Thinkpad 300 is compatible with the Z-Note and is also supported
by this driver. Read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SEEQ8005</term>
<nutsynopsis>
	"SEEQ8005 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ISA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the SEEQ 8005 network (Ethernet) card.  If this
is for you, read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called seeq8005.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SKMC</term>
<nutsynopsis>
	"SKnet MCA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MCA && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These are Micro Channel Ethernet adapters. You need to say Y to "MCA
support" in order to use this driver.  Supported cards are the SKnet
Junior MC2 and the SKnet MC2(+).  The driver automatically
distinguishes between the two cards. Note that using multiple boards
of different type hasn't been tested with this driver.  Say Y if you
have one of these Ethernet adapters.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called sk_mca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NE2_MCA</term>
<nutsynopsis>
	"NE/2 (ne2000 MCA version) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MCA_LEGACY</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ne2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMLANA</term>
<nutsynopsis>
	"IBM LAN Adapter/A support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MCA && MCA_LEGACY</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a Micro Channel Ethernet adapter.  You need to set
CONFIG_MCA to use this driver.  It is both available as an in-kernel
driver and as a module.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The only
currently supported card is the IBM LAN Adapter/A for Ethernet.  It
will both support 16K and 32K memory windows, however a 32K window
gives a better security against packet losses.  Usage of multiple
boards with this driver should be possible, but has not been tested
up to now due to lack of hardware.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMVETH</term>
<nutsynopsis>
	"IBM LAN Virtual Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PPC_PSERIES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports virtual ethernet adapters on newer IBM iSeries
and pSeries systems.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module will
be called ibmveth.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_EMAC</term>
<nutsynopsis>
	"IBM PPC4xx EMAC driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && 4xx</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports the IBM PPC4xx EMAC family of on-chip
Ethernet controllers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_EMAC_ERRMSG</term>
<nutsynopsis>
	"Verbose error messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && IBM_EMAC && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_EMAC_RXB</term>
<nutsynopsis>
	"Number of receive buffers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && IBM_EMAC</literal>
	</para>

	<para>
	default value
	<literal>128 if NETDEVICES && !UML && IBM_EMAC && IBM_EMAC4</literal>
	</para>


	<para>
	default value
	<literal>64 if NETDEVICES && !UML && IBM_EMAC</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_EMAC_TXB</term>
<nutsynopsis>
	"Number of transmit buffers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && IBM_EMAC</literal>
	</para>

	<para>
	default value
	<literal>128 if NETDEVICES && !UML && IBM_EMAC && IBM_EMAC4</literal>
	</para>


	<para>
	default value
	<literal>8 if NETDEVICES && !UML && IBM_EMAC</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_EMAC_FGAP</term>
<nutsynopsis>
	"Frame gap"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && IBM_EMAC</literal>
	</para>

	<para>
	default value
	<literal>8 if NETDEVICES && !UML && IBM_EMAC</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_EMAC_SKBRES</term>
<nutsynopsis>
	"Skb reserve amount"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && IBM_EMAC</literal>
	</para>

	<para>
	default value
	<literal>0 if NETDEVICES && !UML && IBM_EMAC</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_PCI</term>
<nutsynopsis>
	"EISA, VLB, PCI and on board controllers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || PCI)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is another class of network cards which attach directly to the
bus. If you have one of those, say Y and read the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about this class of network cards. If you say Y, you
will be asked for your specific card in the following questions. If
you are unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCNET32</term>
<nutsynopsis>
	"AMD PCnet32 PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a PCnet32 or PCnetPCI based network (Ethernet) card,
answer Y here and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called pcnet32.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AMD8111_ETH</term>
<nutsynopsis>
	"AMD 8111 (new PCI lance) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an AMD 8111-based PCI lance ethernet card,
answer Y here and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called amd8111e.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AMD8111E_NAPI</term>
<nutsynopsis>
	"Enable NAPI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && AMD8111_ETH</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADAPTEC_STARFIRE</term>
<nutsynopsis>
	"Adaptec Starfire/DuraLAN support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Adaptec Starfire (or DuraLAN) PCI network
adapter. The DuraLAN chip is used on the 64 bit PCI boards from
Adaptec e.g. the ANA-6922A. The older 32 bit boards use the tulip
driver.

To compile this driver as a module, choose M here: the module
will be called starfire.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADAPTEC_STARFIRE_NAPI</term>
<nutsynopsis>
	"Use Rx Polling (NAPI) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && ADAPTEC_STARFIRE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AC3200</term>
<nutsynopsis>
	"Ansel Communications EISA 3200 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && (ISA || EISA) && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called ac3200.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APRICOT</term>
<nutsynopsis>
	"Apricot Xen-II on board Ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) controller of this type, say Y and
read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called apricot.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>B44</term>
<nutsynopsis>
	"Broadcom 4400 ethernet support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) controller of this type, say Y and
read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called b44.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FORCEDETH</term>
<nutsynopsis>
	"Reverse Engineered nForce Ethernet support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) controller of this type, say Y and
read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called forcedeth.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CS89x0</term>
<nutsynopsis>
	"CS89x0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && (NET_PCI && (ISA || ARCH_IXDP2X01) || ARCH_PNX0105)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for CS89x0 chipset based Ethernet cards. If you have a
network (Ethernet) card of this type, say Y and read the
Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto> as well as
<file:Documentation/networking/cs89x0.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called cs89x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TC35815</term>
<nutsynopsis>
	"TOSHIBA TC35815 Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI && TOSHIBA_JMR3927</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DGRS</term>
<nutsynopsis>
	"Digi Intl. RightSwitch SE-X support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && (PCI || EISA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the Digi International RightSwitch series of
PCI/EISA Ethernet switch cards. These include the SE-4 and the SE-6
models.  If you have a network card of this type, say Y and read the
Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  More specific
information is contained in <file:Documentation/networking/dgrs.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called dgrs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EEPRO100</term>
<nutsynopsis>
	"EtherExpressPro/100 support (eepro100, original Becker driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Intel EtherExpress PRO/100 PCI network (Ethernet)
card, say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called eepro100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>E100</term>
<nutsynopsis>
	"Intel(R) PRO/100+ support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Intel(R) PRO/100 family of adapters.
To verify that your adapter is supported, find the board ID number 
on the adapter. Look for a label that has a barcode and a number 
in the format 123456-001 (six digits hyphen three digits). 

Use the above information and the Adapter & Driver ID Guide at:

<http://support.intel.com/support/network/adapter/pro100/21397.htm>

to identify the adapter.

For the latest Intel PRO/100 network driver for Linux, see:

<http://appsr.intel.com/scripts-df/support_intel.asp>

More specific information on configuring the driver is in 
<file:Documentation/networking/e100.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called e100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LNE390</term>
<nutsynopsis>
	"Mylex EISA LNE390A/B support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called lne390.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FEALNX</term>
<nutsynopsis>
	"Myson MTD-8xx PCI Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the Mysom MTD-800 family of PCI-based Ethernet
cards. Specifications and data at
<http://www.myson.com.hk/mtd/datasheet/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NATSEMI</term>
<nutsynopsis>
	"National Semiconductor DP8381x series PCI Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the National Semiconductor DP83810 series,
which is used in cards from PureData, NetGear, Linksys
and others, including the 83815 chip.
More specific information and updates are available from
<http://www.scyld.com/network/natsemi.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NE2K_PCI</term>
<nutsynopsis>
	"PCI NE2000 and clones support (see help)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for NE2000 compatible PCI cards. It will not work
with ISA NE2000 cards (they have their own driver, "NE2000/NE1000
support" below). If you have a PCI NE2000 network (Ethernet) card,
say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

This driver also works for the following NE2000 clone cards:
RealTek RTL-8029  Winbond 89C940  Compex RL2000  KTI ET32P2
NetVin NV5000SC   Via 86C926      SureCom NE34   Winbond
Holtek HT80232    Holtek HT80229

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called ne2k-pci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NE3210</term>
<nutsynopsis>
	"Novell/Eagle/Microdyne NE3210 EISA support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.  Note that this driver
will NOT WORK for NE3200 cards as they are completely different.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called ne3210.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ES3210</term>
<nutsynopsis>
	"Racal-Interlan EISA ES3210 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a network (Ethernet) card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called es3210.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8139CP</term>
<nutsynopsis>
	"RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Fast Ethernet PCI network cards based on
the RTL8139C+ chips. If you have one of those, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the module
will be called 8139cp.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8139TOO</term>
<nutsynopsis>
	"RealTek RTL-8129/8130/8139 PCI Fast Ethernet Adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Fast Ethernet PCI network cards based on
the RTL 8129/8130/8139 chips. If you have one of those, say Y and
read the Ethernet-HOWTO <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the module
will be called 8139too.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8139TOO_PIO</term>
<nutsynopsis>
	"Use PIO instead of MMIO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && 8139TOO</literal>
	</para>

	<para>
	default value
	<literal>y if NETDEVICES && !UML && 8139TOO</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This instructs the driver to use programmed I/O ports (PIO) instead
of PCI shared memory (MMIO).  This can possibly solve some problems
in case your mainboard has memory consistency issues.  If unsure,
say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8139TOO_TUNE_TWISTER</term>
<nutsynopsis>
	"Support for uncommon RTL-8139 rev. K (automatic channel equalization)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && 8139TOO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This implements a function which might come in handy in case you
are using low quality on long cabling. It is required for RealTek
RTL-8139 revision K boards, and totally unused otherwise.  It tries
to match the transceiver to the cable characteristics. This is
experimental since hardly documented by the manufacturer.
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8139TOO_8129</term>
<nutsynopsis>
	"Support for older RTL-8129/8130 boards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && 8139TOO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for the older and uncommon RTL-8129 and
RTL-8130 chips, which support MII via an external transceiver,
instead of an internal one.  Disabling this option will save some
memory by making the code size smaller.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8139_OLD_RX_RESET</term>
<nutsynopsis>
	"Use older RX-reset method"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && 8139TOO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The 8139too driver was recently updated to contain a more rapid
reset sequence, in the face of severe receive errors.  This "new"
RX-reset method should be adequate for all boards.  But if you
experience problems, you can enable this option to restore the
old RX-reset behavior.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SIS900</term>
<nutsynopsis>
	"SiS 900/7016 PCI Fast Ethernet Adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Fast Ethernet PCI network cards based on
the SiS 900 and SiS 7016 chips. The SiS 900 core is also embedded in
SiS 630 and SiS 540 chipsets.  If you have one of those, say Y and
read the Ethernet-HOWTO, available at
<http://www.tldp.org/docs.html#howto>.  Please read
<file:Documentation/networking/sis900.txt> and comments at the
beginning of <file:drivers/net/sis900.c> for more information.

This driver also supports AMD 79C901 HomePNA so that you can use
your phone line as a network cable.

To compile this driver as a module, choose M here: the module
will be called sis900.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EPIC100</term>
<nutsynopsis>
	"SMC EtherPower II"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the SMC EtherPower II 9432 PCI Ethernet NIC,
which is based on the SMC83c17x (EPIC/100).
More specific information and updates are available from
<http://www.scyld.com/network/epic100.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNDANCE</term>
<nutsynopsis>
	"Sundance Alta support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the Sundance "Alta" chip.
More specific information and updates are available from
<http://www.scyld.com/network/sundance.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNDANCE_MMIO</term>
<nutsynopsis>
	"Use MMIO instead of PIO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && SUNDANCE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable memory-mapped I/O for interaction with Sundance NIC registers.
Do NOT enable this by default, PIO (enabled when MMIO is disabled)
is known to solve bugs on certain chips.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TLAN</term>
<nutsynopsis>
	"TI ThunderLAN support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && (PCI || EISA) && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a PCI Ethernet network card based on the ThunderLAN chip
which is supported by this driver, say Y and read the
Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Devices currently supported by this driver are Compaq Netelligent,
Compaq NetFlex and Olicom cards.  Please read the file
<file:Documentation/networking/tlan.txt> for more details.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module
will be called tlan.

Please email feedback to <torben.mathiasen@compaq.com>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIA_RHINE</term>
<nutsynopsis>
	"VIA Rhine support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a VIA "Rhine" based network card (Rhine-I (VT86C100A),
Rhine-II (VT6102), or Rhine-III (VT6105)), say Y here. Rhine-type
Ethernet functions can also be found integrated on South Bridges
(e.g. VT8235).

To compile this driver as a module, choose M here. The module
will be called via-rhine.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIA_RHINE_MMIO</term>
<nutsynopsis>
	"Use MMIO instead of PIO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && VIA_RHINE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This instructs the driver to use PCI shared memory (MMIO) instead of
programmed I/O ports (PIO). Enabling this gives an improvement in
processing time in parts of the driver.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LAN_SAA9730</term>
<nutsynopsis>
	"Philips SAA9730 Ethernet support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && EXPERIMENTAL && MIPS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The SAA9730 is a combined multimedia and peripheral controller used
in thin clients, Internet access terminals, and diskless
workstations.
See <http://www.semiconductors.philips.com/pip/SAA9730_flyer_1>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_POCKET</term>
<nutsynopsis>
	"Pocket and portable adapters"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && PARPORT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Cute little network (Ethernet) devices which attach to the parallel
port ("pocket adapters"), commonly used with laptops. If you have
one of those, say Y and read the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

If you want to plug a network (or some other) card into the PCMCIA
(or PC-card) slot of your laptop instead (PCMCIA is the standard for
credit card size extension cards used by all modern laptops), you
need the pcmcia-cs package (location contained in the file
<file:Documentation/Changes>) and you can say N here.

Laptop users should read the Linux Laptop home page at
<http://www.linux-on-laptops.com/> or
Tuxmobil - Linux on Mobile Computers at <http://www.tuxmobil.org/>.

Note that the answer to this question doesn't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about this class of network devices. If you say Y, you
will be asked for your specific device in the following questions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATP</term>
<nutsynopsis>
	"AT-LAN-TEC/RealTek pocket adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_POCKET && PARPORT && X86</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a network (Ethernet) device which attaches to your parallel
port. Read <file:drivers/net/atp.c> as well as the Ethernet-HOWTO,
available from <http://www.tldp.org/docs.html#howto>, if you
want to use this.  If you intend to use this driver, you should have
said N to the "Parallel printer support", because the two drivers
don't like each other.

To compile this driver as a module, choose M here: the module
will be called atp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DE600</term>
<nutsynopsis>
	"D-Link DE600 pocket adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_POCKET && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a network (Ethernet) device which attaches to your parallel
port. Read <file:Documentation/networking/DLINK.txt> as well as the
Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, if you want to use
this. It is possible to have several devices share a single parallel
port and it is safe to compile the corresponding drivers into the
kernel.

To compile this driver as a module, choose M here: the module
will be called de600.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DE620</term>
<nutsynopsis>
	"D-Link DE620 pocket adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_POCKET && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a network (Ethernet) device which attaches to your parallel
port. Read <file:Documentation/networking/DLINK.txt> as well as the
Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, if you want to use
this. It is possible to have several devices share a single parallel
port and it is safe to compile the corresponding drivers into the
kernel.

To compile this driver as a module, choose M here: the module
will be called de620.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGISEEQ</term>
<nutsynopsis>
	"SGI Seeq ethernet controller support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && SGI_IP22</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Seeq based Ethernet network card. This is
used in many Silicon Graphics machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DECLANCE</term>
<nutsynopsis>
	"DEC LANCE ethernet controller support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && MACH_DECSTATION</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the series of Ethernet controllers produced by
DEC (now Compaq) based on the AMD Lance chipset, including the
DEPCA series.  (This chipset is better known via the NE2100 cards.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>68360_ENET</term>
<nutsynopsis>
	"Motorola 68360 ethernet controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && M68360</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the built-in ethernet controller of
the Motorola 68360 processor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FEC</term>
<nutsynopsis>
	"FEC ethernet controller (of ColdFire CPUs)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && (M523x || M527x || M5272 || M528x)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the built-in 10/100 Fast ethernet
controller on some Motorola ColdFire processors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FEC2</term>
<nutsynopsis>
	"Second FEC ethernet controller (on some ColdFire CPUs)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && FEC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the second built-in 10/100 Fast
ethernet controller on some Motorola ColdFire processors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NE_H8300</term>
<nutsynopsis>
	"NE2000 compatible support for H8/300"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && H8300 && NET_ETHERNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the NE2000 compatible
controller on the Renesas H8/300 processor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FEC_8XX</term>
<nutsynopsis>
	"Motorola 8xx FEC driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_ETHERNET && 8xx && (NETTA || NETPHONE)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FEC_8XX_GENERIC_PHY</term>
<nutsynopsis>
	"Support any generic PHY"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && FEC_8XX</literal>
	</para>

	<para>
	default value
	<literal>y if NETDEVICES && !UML && FEC_8XX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FEC_8XX_DM9161_PHY</term>
<nutsynopsis>
	"Support DM9161 PHY"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && FEC_8XX</literal>
	</para>

	<para>
	default value
	<literal>n if NETDEVICES && !UML && FEC_8XX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Ethernet (1000 Mbit)"
<para>
	depends on
	<literal>NETDEVICES && !UML</literal>
	</para>


<nutentry>
	<term>ACENIC</term>
<nutsynopsis>
	"Alteon AceNIC/3Com 3C985/NetGear GA620 Gigabit support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Alteon AceNIC, 3Com 3C985(B), NetGear
GA620, SGI Gigabit or Farallon PN9000-SX PCI Gigabit Ethernet
adapter. The driver allows for using the Jumbo Frame option (9000
bytes/frame) however it requires that your switches can handle this
as well. To enable Jumbo Frames, add `mtu 9000' to your ifconfig
line.

To compile this driver as a module, choose M here: the
module will be called acenic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACENIC_OMIT_TIGON_I</term>
<nutsynopsis>
	"Omit support for old Tigon I based AceNICs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && ACENIC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you only have Tigon II based AceNICs and want to leave
out support for the older Tigon I based cards which are no longer
being sold (ie. the original Alteon AceNIC and 3Com 3C985 (non B
version)).  This will reduce the size of the driver object by
app. 100KB.  If you are not sure whether your card is a Tigon I or a
Tigon II, say N here.

The safe and default value for this is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DL2K</term>
<nutsynopsis>
	"D-Link DL2000-based Gigabit Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports D-Link 2000-based gigabit ethernet cards, which
includes
D-Link DGE-550T Gigabit Ethernet Adapter.
D-Link DL2000-based Gigabit Ethernet Adapter.

To compile this driver as a module, choose M here: the
module will be called dl2k.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>E1000</term>
<nutsynopsis>
	"Intel(R) PRO/1000 Gigabit Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Intel(R) PRO/1000 gigabit ethernet family of
adapters.  For more information on how to identify your adapter, go 
to the Adapter & Driver ID Guide at:

<http://support.intel.com/support/network/adapter/pro100/21397.htm>

For general information and support, go to the Intel support
website at:

<http://support.intel.com>

More specific information on configuring the driver is in 
<file:Documentation/networking/e1000.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called e1000.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>E1000_NAPI</term>
<nutsynopsis>
	"Use Rx Polling (NAPI)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && E1000</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MYRI_SBUS</term>
<nutsynopsis>
	"MyriCOM Gigabit Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && SBUS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports MyriCOM Sbus gigabit Ethernet cards.

To compile this driver as a module, choose M here: the module
will be called myri_sbus.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NS83820</term>
<nutsynopsis>
	"National Semiconduct DP83820 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the National Semiconductor DP83820 series
of gigabit ethernet MACs.  Cards using this chipset include
the D-Link DGE-500T, PureData's PDP8023Z-TG, SMC's SMC9462TX,
SOHO-GA2000T, SOHO-GA2500T.  The driver supports the use of
zero copy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HAMACHI</term>
<nutsynopsis>
	"Packet Engines Hamachi GNIC-II support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Gigabit Ethernet card of this type, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called hamachi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>YELLOWFIN</term>
<nutsynopsis>
	"Packet Engines Yellowfin Gigabit-NIC support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Packet Engines G-NIC PCI Gigabit Ethernet
adapter or the SYM53C885 Ethernet controller. The Gigabit adapter is
used by the Beowulf Linux cluster project.  See
<http://cesdis.gsfc.nasa.gov/linux/drivers/yellowfin.html> for more
information about this driver in particular and Beowulf in general.

To compile this driver as a module, choose M here: the module
will be called yellowfin.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>R8169</term>
<nutsynopsis>
	"Realtek 8169 gigabit ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Realtek 8169 PCI Gigabit Ethernet adapter.

To compile this driver as a module, choose M here: the module
will be called r8169.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>R8169_NAPI</term>
<nutsynopsis>
	"Use Rx and Tx Polling (NAPI) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && R8169 && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>R8169_VLAN</term>
<nutsynopsis>
	"VLAN support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && R8169 && VLAN_8021Q</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here for the r8169 driver to support the functions required
by the kernel 802.1Q code.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SIS190</term>
<nutsynopsis>
	"SiS190/SiS191 gigabit ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a SiS 190 PCI Fast Ethernet adapter or
a SiS 191 PCI Gigabit Ethernet adapter. Both are expected to
appear in lan on motherboard designs which are based on SiS 965
and SiS 966 south bridge.

To compile this driver as a module, choose M here: the module
will be called sis190.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SKGE</term>
<nutsynopsis>
	"New SysKonnect GigaEthernet support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver support the Marvell Yukon or SysKonnect SK-98xx/SK-95xx
and related Gigabit Ethernet adapters. It is a new smaller driver
with better performance and more complete ethtool support.

It does not support the link failover and network management 
features that "portable" vendor supplied sk98lin driver does.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SK98LIN</term>
<nutsynopsis>
	"Marvell Yukon Chipset / SysKonnect SK-98xx Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Marvell Yukon or SysKonnect SK-98xx/SK-95xx
compliant Gigabit Ethernet Adapter. The following adapters are supported
by this driver:
  - 3Com 3C940 Gigabit LOM Ethernet Adapter
  - 3Com 3C941 Gigabit LOM Ethernet Adapter
  - Allied Telesyn AT-2970LX Gigabit Ethernet Adapter
  - Allied Telesyn AT-2970LX/2SC Gigabit Ethernet Adapter
  - Allied Telesyn AT-2970SX Gigabit Ethernet Adapter
  - Allied Telesyn AT-2970SX/2SC Gigabit Ethernet Adapter
  - Allied Telesyn AT-2970TX Gigabit Ethernet Adapter
  - Allied Telesyn AT-2970TX/2TX Gigabit Ethernet Adapter
  - Allied Telesyn AT-2971SX Gigabit Ethernet Adapter
  - Allied Telesyn AT-2971T Gigabit Ethernet Adapter
  - Belkin Gigabit Desktop Card 10/100/1000Base-T Adapter, Copper RJ-45
  - DGE-530T Gigabit Ethernet Adapter
  - EG1032 v2 Instant Gigabit Network Adapter
  - EG1064 v2 Instant Gigabit Network Adapter
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Abit)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Albatron)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Asus)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (ECS)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Epox)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Foxconn)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Gigabyte)
  - Marvell 88E8001 Gigabit LOM Ethernet Adapter (Iwill)
  - Marvell 88E8050 Gigabit LOM Ethernet Adapter (Intel)
  - Marvell RDK-8001 Adapter
  - Marvell RDK-8002 Adapter
  - Marvell RDK-8003 Adapter
  - Marvell RDK-8004 Adapter
  - Marvell RDK-8006 Adapter
  - Marvell RDK-8007 Adapter
  - Marvell RDK-8008 Adapter
  - Marvell RDK-8009 Adapter
  - Marvell RDK-8010 Adapter
  - Marvell RDK-8011 Adapter
  - Marvell RDK-8012 Adapter
  - Marvell RDK-8052 Adapter
  - Marvell Yukon Gigabit Ethernet 10/100/1000Base-T Adapter (32 bit)
  - Marvell Yukon Gigabit Ethernet 10/100/1000Base-T Adapter (64 bit)
  - N-Way PCI-Bus Giga-Card 1000/100/10Mbps(L)
  - SK-9521 10/100/1000Base-T Adapter
  - SK-9521 V2.0 10/100/1000Base-T Adapter
  - SK-9821 Gigabit Ethernet Server Adapter (SK-NET GE-T)
  - SK-9821 V2.0 Gigabit Ethernet 10/100/1000Base-T Adapter
  - SK-9822 Gigabit Ethernet Server Adapter (SK-NET GE-T dual link)
  - SK-9841 Gigabit Ethernet Server Adapter (SK-NET GE-LX)
  - SK-9841 V2.0 Gigabit Ethernet 1000Base-LX Adapter
  - SK-9842 Gigabit Ethernet Server Adapter (SK-NET GE-LX dual link)
  - SK-9843 Gigabit Ethernet Server Adapter (SK-NET GE-SX)
  - SK-9843 V2.0 Gigabit Ethernet 1000Base-SX Adapter
  - SK-9844 Gigabit Ethernet Server Adapter (SK-NET GE-SX dual link)
  - SK-9851 V2.0 Gigabit Ethernet 1000Base-SX Adapter
  - SK-9861 Gigabit Ethernet Server Adapter (SK-NET GE-SX Volition)
  - SK-9861 V2.0 Gigabit Ethernet 1000Base-SX Adapter
  - SK-9862 Gigabit Ethernet Server Adapter (SK-NET GE-SX Volition dual link)
  - SK-9871 Gigabit Ethernet Server Adapter (SK-NET GE-ZX)
  - SK-9871 V2.0 Gigabit Ethernet 1000Base-ZX Adapter
  - SK-9872 Gigabit Ethernet Server Adapter (SK-NET GE-ZX dual link)
  - SMC EZ Card 1000 (SMC9452TXV.2)

The adapters support Jumbo Frames.
The dual link adapters support link-failover and dual port features.
Both Marvell Yukon and SysKonnect SK-98xx/SK-95xx adapters support 
the scatter-gather functionality with sendfile(). Please refer to 
<file:Documentation/networking/sk98lin.txt> for more information about
optional driver parameters.
Questions concerning this driver may be addressed to:
    <linux@syskonnect.de>

If you want to compile this driver as a module ( = code which can be
inserted in and removed from the running kernel whenever you want),
say M here and read <file:Documentation/kbuild/modules.txt>. The module will
be called sk98lin. This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIA_VELOCITY</term>
<nutsynopsis>
	"VIA Velocity support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && NET_PCI && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a VIA "Velocity" based network card say Y here.

To compile this driver as a module, choose M here. The module
will be called via-velocity.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TIGON3</term>
<nutsynopsis>
	"Broadcom Tigon3 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Broadcom Tigon3 based gigabit Ethernet cards.

To compile this driver as a module, choose M here: the module
will be called tg3.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BNX2</term>
<nutsynopsis>
	"Broadcom NetXtremeII support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Broadcom NetXtremeII gigabit Ethernet cards.

To compile this driver as a module, choose M here: the module
will be called bnx2.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPIDER_NET</term>
<nutsynopsis>
	"Spider Gigabit Ethernet driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI && PPC_BPA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Gigabit Ethernet chips present on the
Cell Processor-Based Blades from IBM.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GIANFAR</term>
<nutsynopsis>
	"Gianfar Ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && (85xx || 83xx)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Gigabit TSEC on the MPC85xx 
family of chips, and the FEC on the 8540
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GFAR_NAPI</term>
<nutsynopsis>
	"NAPI Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && GIANFAR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MV643XX_ETH</term>
<nutsynopsis>
	"MV-643XX Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && (MOMENCO_OCELOT_C || MOMENCO_JAGUAR_ATX || MV64360 || MOMENCO_OCELOT_3 || PPC_MULTIPLATFORM)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the gigabit Ethernet on the Marvell MV643XX
chipset which is used in the Momenco Ocelot C and Jaguar ATX and
Pegasos II, amongst other PPC and MIPS boards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MV643XX_ETH_0</term>
<nutsynopsis>
	"MV-643XX Port 0"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && MV643XX_ETH</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for Port 0 of the Marvell MV643XX Gigabit
Ethernet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MV643XX_ETH_1</term>
<nutsynopsis>
	"MV-643XX Port 1"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && MV643XX_ETH</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for Port 1 of the Marvell MV643XX Gigabit
Ethernet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MV643XX_ETH_2</term>
<nutsynopsis>
	"MV-643XX Port 2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && MV643XX_ETH</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for Port 2 of the Marvell MV643XX Gigabit
Ethernet.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Ethernet (10000 Mbit)"
<para>
	depends on
	<literal>NETDEVICES && !UML</literal>
	</para>


<nutentry>
	<term>CHELSIO_T1</term>
<nutsynopsis>
	"Chelsio 10Gb Ethernet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Chelsio N110 and N210 models 10Gb Ethernet
cards. More information about adapter features and performance
tuning is in <file:Documentation/networking/cxgb.txt>.

For general information about Chelsio and our products, visit
our website at <http://www.chelsio.com>.

For customer support, please visit our customer support page at
<http://www.chelsio.com/support.htm>.

Please send feedback to <linux-bugs@chelsio.com>.

To compile this driver as a module, choose M here: the module
will be called cxgb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IXGB</term>
<nutsynopsis>
	"Intel(R) PRO/10GbE support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Intel(R) PRO/10GbE family of
adapters.  For more information on how to identify your adapter, go
to the Adapter & Driver ID Guide at:

<http://support.intel.com/support/network/adapter/pro100/21397.htm>

For general information and support, go to the Intel support
website at:

<http://support.intel.com>

More specific information on configuring the driver is in 
<file:Documentation/networking/ixgb.txt>.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module
will be called ixgb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IXGB_NAPI</term>
<nutsynopsis>
	"Use Rx Polling (NAPI) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && IXGB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>S2IO</term>
<nutsynopsis>
	"S2IO 10Gbe XFrame NIC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the 10Gbe XFrame NIC of S2IO. 
For help regarding driver compilation, installation and 
tuning please look into ~/drivers/net/s2io/README.txt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>S2IO_NAPI</term>
<nutsynopsis>
	"Use Rx Polling (NAPI) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && S2IO && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NAPI is a new driver API designed to reduce CPU and interrupt load
when the driver is receiving lots of packets from the card. It is
still somewhat experimental and thus not yet enabled by default.

If your estimated Rx load is 10kpps or more, or if the card will be
deployed on potentially unfriendly networks (e.g. in a firewall),
then say Y here.

See <file:Documentation/networking/NAPI_HOWTO.txt> for more
information.

If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>2BUFF_MODE</term>
<nutsynopsis>
	"Use 2 Buffer Mode on Rx side."
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && !UML && S2IO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
On enabling the 2 buffer mode, the received frame will be
split into 2 parts before being DMA'ed to the hosts memory.
The parts are the ethernet header and ethernet payload. 
This is useful on systems where DMA'ing to to unaligned 
physical memory loactions comes with a heavy price.
If not sure please say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Token Ring devices"
<para>
	depends on
	<literal>!UML && NETDEVICES</literal>
	</para>


<nutentry>
	<term>TR</term>
<nutsynopsis>
	"Token Ring driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && (PCI || ISA || MCA || CCW)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Token Ring is IBM's way of communication on a local network; the
rest of the world uses Ethernet. To participate on a Token Ring
network, you need a special Token ring network card. If you are
connected to such a Token Ring network and want to use your Token
Ring card under Linux, say Y here and to the driver for your
particular card below and read the Token-Ring mini-HOWTO, available
from <http://www.tldp.org/docs.html#howto>. Most people can
say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMTR</term>
<nutsynopsis>
	"IBM Tropic chipset based adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && (ISA || MCA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for all IBM Token Ring cards that don't use DMA. If
you have such a beast, say Y and read the Token-Ring mini-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

Warning: this driver will almost definitely fail if more than one
active Token Ring card is present.

To compile this driver as a module, choose M here: the module will be
called ibmtr.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMOL</term>
<nutsynopsis>
	"IBM Olympic chipset PCI adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for all non-Lanstreamer IBM PCI Token Ring Cards.
Specifically this is all IBM PCI, PCI Wake On Lan, PCI II, PCI II
Wake On Lan, and PCI 100/16/4 adapters.

If you have such an adapter, say Y and read the Token-Ring
mini-HOWTO, available from <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the module will be
called olympic.

Also read <file:Documentation/networking/olympic.txt> or check the
Linux Token Ring Project site for the latest information at
<http://www.linuxtr.net/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMLS</term>
<nutsynopsis>
	"IBM Lanstreamer chipset PCI adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && PCI && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for IBM Lanstreamer PCI Token Ring Cards.

If you have such an adapter, say Y and read the Token-Ring
mini-HOWTO, available from <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the module will be
called lanstreamer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>3C359</term>
<nutsynopsis>
	"3Com 3C359 Token Link Velocity XL adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the 3Com PCI Velocity XL cards, specifically
the 3Com 3C359, please note this is not for the 3C339 cards, you
should use the tms380 driver instead.

If you have such an adapter, say Y and read the Token-Ring
mini-HOWTO, available from <http://www.tldp.org/docs.html#howto>.

To compile this driver as a module, choose M here: the module will be
called 3c359.

Also read the file <file:Documentation/networking/3c359.txt> or check the 
Linux Token Ring Project site for the latest information at
<http://www.linuxtr.net>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TMS380TR</term>
<nutsynopsis>
	"Generic TMS380 Token Ring ISA/PCI adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides generic support for token ring adapters
based on the Texas Instruments TMS380 series chipsets.  This
includes the SysKonnect TR4/16(+) ISA (SK-4190), SysKonnect
TR4/16(+) PCI (SK-4590), SysKonnect TR4/16 PCI (SK-4591),
Compaq 4/16 PCI, Thomas-Conrad TC4048 4/16 PCI, and several
Madge adapters.  If you say Y here, you will be asked to select
which cards to support below.  If you're using modules, each
class of card will be supported by a separate module.

If you have such an adapter and would like to use it, say Y and
read the Token-Ring mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

Also read the file <file:Documentation/networking/tms380tr.txt> or
check <http://www.auk.cx/tms380tr/>.

To compile this driver as a module, choose M here: the module will be
called tms380tr.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TMSPCI</term>
<nutsynopsis>
	"Generic TMS380 PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && TMS380TR && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This tms380 module supports generic TMS380-based PCI cards.

These cards are known to work:
- Compaq 4/16 TR PCI
- SysKonnect TR4/16 PCI (SK-4590/SK-4591)
- Thomas-Conrad TC4048 PCI 4/16
- 3Com Token Link Velocity

To compile this driver as a module, choose M here: the module will be
called tmspci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SKISA</term>
<nutsynopsis>
	"SysKonnect TR4/16 ISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && TMS380TR && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This tms380 module supports SysKonnect TR4/16 ISA cards.

These cards are known to work:
- SysKonnect TR4/16 ISA (SK-4190)

To compile this driver as a module, choose M here: the module will be
called skisa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PROTEON</term>
<nutsynopsis>
	"Proteon ISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && TMS380TR && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This tms380 module supports Proteon ISA cards.

These cards are known to work:
- Proteon 1392
- Proteon 1392 plus

To compile this driver as a module, choose M here: the module will be
called proteon.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ABYSS</term>
<nutsynopsis>
	"Madge Smart 16/4 PCI Mk2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && TMS380TR && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This tms380 module supports the Madge Smart 16/4 PCI Mk2
cards (51-02).

To compile this driver as a module, choose M here: the module will be
called abyss.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MADGEMC</term>
<nutsynopsis>
	"Madge Smart 16/4 Ringnode MicroChannel"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && TMS380TR && MCA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This tms380 module supports the Madge Smart 16/4 MC16 and MC32
MicroChannel adapters.

To compile this driver as a module, choose M here: the module will be
called madgemc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMCTR</term>
<nutsynopsis>
	"SMC ISA/MCA adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the ISA and MCA SMC Token Ring cards,
specifically SMC TokenCard Elite (8115T) and SMC TokenCard Elite/A
(8115T/A) adapters.

If you have such an adapter and would like to use it, say Y or M and
read the Token-Ring mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto> and the file
<file:Documentation/networking/smctr.txt>.

To compile this driver as a module, choose M here: the module will be
called smctr.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Wireless LAN (non-hamradio)"
<para>
	depends on
	<literal>!UML && NETDEVICES</literal>
	</para>


<nutentry>
	<term>NET_RADIO</term>
<nutsynopsis>
	"Wireless LAN drivers (non-hamradio) & Wireless Extensions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for wireless LANs and everything having to do with radio,
but not with amateur radio or FM broadcasting.

Saying Y here also enables the Wireless Extensions (creates
/proc/net/wireless and enables iwconfig access). The Wireless
Extension is a generic API allowing a driver to expose to the user
space configuration and statistics specific to common Wireless LANs.
The beauty of it is that a single set of tool can support all the
variations of Wireless LANs, regardless of their type (as long as
the driver supports Wireless Extension). Another advantage is that
these parameters may be changed on the fly without restarting the
driver (or Linux). If you wish to use Wireless Extensions with
wireless PCMCIA (PC-) cards, you need to say Y here; you can fetch
the tools from
<http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html>.

Some user-level drivers for scarab devices which don't require
special kernel support are available from
<ftp://shadow.cabi.net/pub/Linux/>.
	</para>

</nutentrybody>
</nutentry>

comment "Obsolete Wireless cards support (pre-802.11)"
<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && (INET || ISA || PCMCIA)</literal>
	</para>


<nutentry>
	<term>STRIP</term>
<nutsynopsis>
	"STRIP (Metricom starmode radio IP)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you have a Metricom radio and intend to use Starmode Radio
IP. STRIP is a radio protocol developed for the MosquitoNet project
(on the WWW at <http://mosquitonet.stanford.edu/>) to send Internet
traffic using Metricom radios.  Metricom radios are small, battery
powered, 100kbit/sec packet radio transceivers, about the size and
weight of a cellular telephone. (You may also have heard them called
"Metricom modems" but we avoid the term "modem" because it misleads
many people into thinking that you can plug a Metricom modem into a
phone line and use it as a modem.)

You can use STRIP on any Linux machine with a serial port, although
it is obviously most useful for people with laptop computers. If you
think you might get a Metricom radio in the future, there is no harm
in saying Y to STRIP now, except that it makes the kernel a bit
bigger.

To compile this as a module, choose M here: the module will be
called strip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARLAN</term>
<nutsynopsis>
	"Aironet Arlan 655 & IC2200 DS support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && ISA && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Aironet makes Arlan, a class of wireless LAN adapters. These use the
www.Telxon.com chip, which is also used on several similar cards.
This driver is tested on the 655 and IC2200 series cards. Look at
<http://www.ylenurme.ee/~elmer/655/> for the latest information.

The driver is built as two modules, arlan and arlan-proc. The latter
is the /proc interface and is not needed most of time.

On some computers the card ends up in non-valid state after some
time. Use a ping-reset script to clear it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WAVELAN</term>
<nutsynopsis>
	"AT&T/Lucent old WaveLAN & DEC RoamAbout DS ISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Lucent WaveLAN (formerly NCR and AT&T; or DEC RoamAbout DS) is
a Radio LAN (wireless Ethernet-like Local Area Network) using the
radio frequencies 900 MHz and 2.4 GHz.

This driver support the ISA version of the WaveLAN card.  A separate
driver for the PCMCIA (PC-card) hardware is available in David
Hinds' pcmcia-cs package (see the file <file:Documentation/Changes>
for location).

If you want to use an ISA WaveLAN card under Linux, say Y and read
the Ethernet-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. Some more specific
information is contained in
<file:Documentation/networking/wavelan.txt> and in the source code
<file:drivers/net/wavelan.p.h>.

You will also need the wireless tools package available from
<http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html>.
Please read the man pages contained therein.

To compile this driver as a module, choose M here: the module will be
called wavelan.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_WAVELAN</term>
<nutsynopsis>
	"AT&T/Lucent old WaveLAN Pcmcia wireless support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach an AT&T/Lucent Wavelan PCMCIA
(PC-card) wireless Ethernet networking card to your computer.  This
driver is for the non-IEEE-802.11 Wavelan cards.

To compile this driver as a module, choose M here: the module will be
called wavelan_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_NETWAVE</term>
<nutsynopsis>
	"Xircom Netwave AirSurfer Pcmcia wireless support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach this type of PCMCIA (PC-card)
wireless Ethernet networking card to your computer.

To compile this driver as a module, choose M here: the module will be
called netwave_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "Wireless 802.11 Frequency Hopping cards support"
<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA</literal>
	</para>


<nutentry>
	<term>PCMCIA_RAYCS</term>
<nutsynopsis>
	"Aviator/Raytheon 2.4MHz wireless support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach an Aviator/Raytheon PCMCIA
(PC-card) wireless Ethernet networking card to your computer.
Please read the file <file:Documentation/networking/ray_cs.txt> for
details.

To compile this driver as a module, choose M here: the module will be
called ray_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "Wireless 802.11b ISA/PCI cards support"
<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && (ISA || PCI || PPC_PMAC || PCMCIA)</literal>
	</para>


<nutentry>
	<term>IPW2100</term>
<nutsynopsis>
	"Intel PRO/Wireless 2100 Network Connection"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCI && IEEE80211</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A driver for the Intel PRO/Wireless 2100 Network 
Connection 802.11b wireless network adapter.

See <file:Documentation/networking/README.ipw2100> for information on
the capabilities currently enabled in this driver and for tips
for debugging issues and problems.

In order to use this driver, you will need a firmware image for it.
You can obtain the firmware from
<http://ipw2100.sf.net/>.  Once you have the firmware image, you 
will need to place it in /etc/firmware.

You will also very likely need the Wireless Tools in order to
configure your card:

<http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html>.

If you want to compile the driver as a module ( = code which can be
inserted in and remvoed from the running kernel whenever you want),
say M here and read <file:Documentation/modules.txt>.  The module
will be called ipw2100.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPW2100_MONITOR</term>
<nutsynopsis>
	"Enable promiscuous mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && IPW2100</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enables promiscuous/monitor mode support for the ipw2100 driver.
With this feature compiled into the driver, you can switch to 
promiscuous mode via the Wireless Tool's Monitor mode.  While in this
mode, no packets can be sent.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPW_DEBUG</term>
<nutsynopsis>
	"Enable full debugging output in IPW2100 module."
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && IPW2100</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will enable debug tracing output for the IPW2200.  

This will result in the kernel module being ~100k larger.  You can 
control which debug output is sent to the kernel log by setting the 
value in 

/sys/bus/pci/drivers/ipw2200/debug_level

This entry will only exist if this option is enabled.

To set a value, simply echo an 8-byte hex value to the same file:

% echo 0x00000FFO > /sys/bus/pci/drivers/ipw2200/debug_level

You can find the list of debug mask values in 
drivers/net/wireless/ipw2200.h

If you are not trying to debug or develop the IPW2200 driver, you 
most likely want to say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPW2200</term>
<nutsynopsis>
	"Intel PRO/Wireless 2200BG and 2915ABG Network Connection"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && IEEE80211 && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A driver for the Intel PRO/Wireless 2200BG and 2915ABG Network
Connection adapters. 

See <file:Documentation/networking/README.ipw2200> for 
information on the capabilities currently enabled in this 
driver and for tips for debugging issues and problems.

In order to use this driver, you will need a firmware image for it.
You can obtain the firmware from
<http://ipw2200.sf.net/>.  See the above referenced README.ipw2200 
for information on where to install the firmare images.

You will also very likely need the Wireless Tools in order to
configure your card:

<http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html>.

If you want to compile the driver as a module ( = code which can be
inserted in and remvoed from the running kernel whenever you want),
say M here and read <file:Documentation/modules.txt>.  The module
will be called ipw2200.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPW_DEBUG</term>
<nutsynopsis>
	"Enable full debugging output in IPW2200 module."
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && IPW2200</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will enable debug tracing output for the IPW2200.  

This will result in the kernel module being ~100k larger.  You can 
control which debug output is sent to the kernel log by setting the 
value in 

/sys/bus/pci/drivers/ipw2200/debug_level

This entry will only exist if this option is enabled.

To set a value, simply echo an 8-byte hex value to the same file:

% echo 0x00000FFO > /sys/bus/pci/drivers/ipw2200/debug_level

You can find the list of debug mask values in 
drivers/net/wireless/ipw2200.h

If you are not trying to debug or develop the IPW2200 driver, you 
most likely want to say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIRO</term>
<nutsynopsis>
	"Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && ISA && (PCI || BROKEN)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the standard Linux driver to support Cisco/Aironet ISA and
PCI 802.11 wireless cards.
It supports the new 802.11b cards from Cisco (Cisco 34X, Cisco 35X
- with or without encryption) as well as card before the Cisco
aquisition (Aironet 4500, Aironet 4800, Aironet 4800B).

This driver support both the standard Linux Wireless Extensions
and Cisco proprietary API, so both the Linux Wireless Tools and the
Cisco Linux utilities can be used to configure the card.

The driver can be compiled as a module and will be named "airo".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HERMES</term>
<nutsynopsis>
	"Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && (PPC_PMAC || PCI || PCMCIA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A driver for 802.11b wireless cards based based on the "Hermes" or
Intersil HFA384x (Prism 2) MAC controller.  This includes the vast
majority of the PCMCIA 802.11b cards (which are nearly all rebadges)
- except for the Cisco/Aironet cards.  Cards supported include the
Apple Airport (not a PCMCIA card), WavelanIEEE/Orinoco,
Cabletron/EnteraSys Roamabout, ELSA AirLancer, MELCO Buffalo, Avaya,
IBM High Rate Wireless, Farralon Syyline, Samsung MagicLAN, Netgear
MA401, LinkSys WPC-11, D-Link DWL-650, 3Com AirConnect, Intel
PRO/Wireless, and Symbol Spectrum24 High Rate amongst others.

This option includes the guts of the driver, but in order to
actually use a card you will also need to enable support for PCMCIA
Hermes cards, PLX9052 based PCI adaptors or the Apple Airport below.

You will also very likely also need the Wireless Tools in order to
configure your card and that /etc/pcmcia/wireless.opts works :
<http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APPLE_AIRPORT</term>
<nutsynopsis>
	"Apple Airport support (built-in)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PPC_PMAC && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the Airport 802.11b wireless Ethernet hardware
built into the Macintosh iBook and other recent PowerPC-based
Macintosh machines. This is essentially a Lucent Orinoco card with 
a non-standard interface
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PLX_HERMES</term>
<nutsynopsis>
	"Hermes in PLX9052 based PCI adaptor support (Netgear MA301 etc.)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for PCMCIA cards supported by the "Hermes" (aka
orinoco) driver when used in PLX9052 based PCI adaptors.  These
adaptors are not a full PCMCIA controller but act as a more limited
PCI <-> PCMCIA bridge.  Several vendors sell such adaptors so that
802.11b PCMCIA cards can be used in desktop machines.  The Netgear
MA301 is such an adaptor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TMD_HERMES</term>
<nutsynopsis>
	"Hermes in TMD7160 based PCI adaptor support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for PCMCIA cards supported by the "Hermes" (aka
orinoco) driver when used in TMD7160 based PCI adaptors.  These
adaptors are not a full PCMCIA controller but act as a more limited
PCI <-> PCMCIA bridge.  Several vendors sell such adaptors so that
802.11b PCMCIA cards can be used in desktop machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NORTEL_HERMES</term>
<nutsynopsis>
	"Nortel emobility PCI adaptor support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for PCMCIA cards supported by the "Hermes" (aka
orinoco) driver when used in Nortel emobility PCI adaptors.  These
adaptors are not full PCMCIA controllers, but act as a more limited
PCI <-> PCMCIA bridge.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_HERMES</term>
<nutsynopsis>
	"Prism 2.5 PCI 802.11b adaptor support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for PCI and mini-PCI 802.11b wireless NICs based on
the Prism 2.5 chipset.  These are true PCI cards, not the 802.11b
PCMCIA cards bundled with PCI<->PCMCIA adaptors which are also
common.  Some of the built-in wireless adaptors in laptops are of
this variety.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATMEL</term>
<nutsynopsis>
	"Atmel at76c50x chipset  802.11b support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A driver 802.11b wireless cards based on the Atmel fast-vnet
chips. This driver supports standard Linux wireless extensions. 

Many  cards based on this chipset do not have flash memory
and need their firmware loaded at start-up. If yours is 
one of these, you will need to provide a firmware image
to be loaded into the card by the driver. The Atmel
firmware package can be downloaded from
<http://www.thekelleys.org.uk/atmel>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCI_ATMEL</term>
<nutsynopsis>
	"Atmel at76c506 PCI cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && ATMEL && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for PCI and mini-PCI cards containing the
Atmel at76c506 chip.
	</para>

</nutentrybody>
</nutentry>

comment "Wireless 802.11b Pcmcia/Cardbus cards support"
<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA</literal>
	</para>


<nutentry>
	<term>PCMCIA_HERMES</term>
<nutsynopsis>
	"Hermes PCMCIA card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A driver for "Hermes" chipset based PCMCIA wireless adaptors, such
as the Lucent WavelanIEEE/Orinoco cards and their OEM (Cabletron/
EnteraSys RoamAbout 802.11, ELSA Airlancer, Melco Buffalo and
others).  It should also be usable on various Prism II based cards
such as the Linksys, D-Link and Farallon Skyline.  It should also
work on Symbol cards such as the 3Com AirConnect and Ericsson WLAN.

To use your PC-cards, you will need supporting software from David
Hinds' pcmcia-cs package (see the file <file:Documentation/Changes>
for location).  You also want to check out the PCMCIA-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

You will also very likely also need the Wireless Tools in order to
configure your card and that /etc/pcmcia/wireless.opts works:
<http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_SPECTRUM</term>
<nutsynopsis>
	"Symbol Spectrum24 Trilogy PCMCIA card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA && HERMES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>

This is a driver for 802.11b cards using RAM-loadable Symbol
firmware, such as Symbol Wireless Networker LA4100, CompactFlash
cards by Socket Communications and Intel PRO/Wireless 2011B.

This driver requires firmware download on startup.  Utilities
for downloading Symbol firmware are available at
<http://sourceforge.net/projects/orinoco/>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AIRO_CS</term>
<nutsynopsis>
	"Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCMCIA && (BROKEN || !M32R)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the standard Linux driver to support Cisco/Aironet PCMCIA
802.11 wireless cards.  This driver is the same as the Aironet
driver part of the Linux Pcmcia package.
It supports the new 802.11b cards from Cisco (Cisco 34X, Cisco 35X
- with or without encryption) as well as card before the Cisco
aquisition (Aironet 4500, Aironet 4800, Aironet 4800B). It also
supports OEM of Cisco such as the DELL TrueMobile 4800 and Xircom
802.11b cards.

This driver support both the standard Linux Wireless Extensions
and Cisco proprietary API, so both the Linux Wireless Tools and the
Cisco Linux utilities can be used to configure the card.

To use your PC-cards, you will need supporting software from David
Hinds' pcmcia-cs package (see the file <file:Documentation/Changes>
for location).  You also want to check out the PCMCIA-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_ATMEL</term>
<nutsynopsis>
	"Atmel at76c502/at76c504 PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && ATMEL && PCMCIA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for PCMCIA cards containing the
Atmel at76c502 and at76c504 chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_WL3501</term>
<nutsynopsis>
	"Planet WL3501 PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && EXPERIMENTAL && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A driver for WL3501 PCMCIA 802.11 wireless cards made by Planet.
It has basic support for Linux wireless extensions and initial
micro support for ethtool.
	</para>

</nutentrybody>
</nutentry>

comment "Prism GT/Duette 802.11(a/b/g) PCI/Cardbus support"
<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO && PCI</literal>
	</para>


<nutentry>
	<term>PRISM54</term>
<nutsynopsis>
	"Intersil Prism GT/Duette/Indigo PCI/Cardbus"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && NET_RADIO && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable PCI and Cardbus support for the following chipset based cards:

ISL3880 - Prism GT            802.11 b/g
ISL3877 - Prism Indigo        802.11 a
ISL3890 - Prism Duette        802.11 a/b/g

For a complete list of supported cards visit <http://prism54.org>.
Here is the latest confirmed list of supported cards:

3com OfficeConnect 11g Cardbus Card aka 3CRWE154G72 (version 1)
Allnet ALL0271 PCI Card
Compex WL54G Cardbus Card
Corega CG-WLCB54GT Cardbus Card
D-Link Air Plus Xtreme G A1 Cardbus Card aka DWL-g650
I-O Data WN-G54/CB Cardbus Card
Kobishi XG-300 aka Z-Com Cardbus Card
Netgear WG511 Cardbus Card
Ovislink WL-5400PCI PCI Card
Peabird WLG-PCI PCI Card
Sitecom WL-100i Cardbus Card
Sitecom WL-110i PCI Card
SMC2802W -    EZ Connect g 2.4GHz 54 Mbps Wireless PCI Card
SMC2835W -    EZ Connect g 2.4GHz 54 Mbps Wireless Cardbus Card
SMC2835W-V2 - EZ Connect g 2.4GHz 54 Mbps Wireless Cardbus Card
Z-Com XG-900 PCI Card
Zyxel G-100 Cardbus Card

If you enable this you will need a firmware file as well.
You will need to copy this to /usr/lib/hotplug/firmware/isl3890.
You can get this non-GPL'd firmware file from the Prism54 project page:
<http://prism54.org>
You will also need the /etc/hotplug/firmware.agent script from
a current hotplug package.

Note: You need a motherboard with DMA support to use any of these cards 

If you want to compile the driver as a module ( = code which can be
inserted in and removed from the running kernel whenever you want),
say M here and read <file:Documentation/modules.txt>.  The module
will be called prism54.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOSTAP</term>
<nutsynopsis>
	"IEEE 802.11 for Host AP (Prism2/2.5/3 and WEP/TKIP/CCMP)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_RADIO</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Shared driver code for IEEE 802.11b wireless cards based on
Intersil Prism2/2.5/3 chipset. This driver supports so called
Host AP mode that allows the card to act as an IEEE 802.11
access point.

See <http://hostap.epitest.fi/> for more information about the
Host AP driver configuration and tools. This site includes
information and tools (hostapd and wpa_supplicant) for WPA/WPA2
support.

This option includes the base Host AP driver code that is shared by
different hardware models. You will also need to enable support for
PLX/PCI/CS version of the driver to actually use the driver.

The driver can be compiled as a module and it will be called
"hostap.ko".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOSTAP_FIRMWARE</term>
<nutsynopsis>
	"Support downloading firmware images with Host AP driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && HOSTAP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Configure Host AP driver to include support for firmware image
download. Current version supports only downloading to volatile, i.e.,
RAM memory. Flash upgrade is not yet supported.

Firmware image downloading needs user space tool, prism2_srec. It is
available from http://hostap.epitest.fi/.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOSTAP_PLX</term>
<nutsynopsis>
	"Host AP driver for Prism2/2.5/3 in PLX9052 PCI adaptors"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && HOSTAP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Host AP driver's version for Prism2/2.5/3 PC Cards in PLX9052 based
PCI adaptors.

"Host AP support for Prism2/2.5/3 IEEE 802.11b" is required for this
driver and its help text includes more information about the Host AP
driver.

The driver can be compiled as a module and will be named
"hostap_plx.ko".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOSTAP_PCI</term>
<nutsynopsis>
	"Host AP driver for Prism2.5 PCI adaptors"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCI && HOSTAP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Host AP driver's version for Prism2.5 PCI adaptors.

"Host AP support for Prism2/2.5/3 IEEE 802.11b" is required for this
driver and its help text includes more information about the Host AP
driver.

The driver can be compiled as a module and will be named
"hostap_pci.ko".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOSTAP_CS</term>
<nutsynopsis>
	"Host AP driver for Prism2/2.5/3 PC Cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCMCIA!=n && HOSTAP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Host AP driver's version for Prism2/2.5/3 PC Cards.

"Host AP support for Prism2/2.5/3 IEEE 802.11b" is required for this
driver and its help text includes more information about the Host AP
driver.

The driver can be compiled as a module and will be named
"hostap_cs.ko".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_WIRELESS</term>
	<para>
	default value
	<literal>y if !UML && NETDEVICES && NET_RADIO && (ISA || PCI || PPC_PMAC || PCMCIA)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "PCMCIA network device support"
<para>
	depends on
	<literal>!UML && NETDEVICES && PCMCIA!=n</literal>
	</para>


<nutentry>
	<term>NET_PCMCIA</term>
<nutsynopsis>
	"PCMCIA network device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you would like to include support for any PCMCIA or CardBus
network adapters, then say Y to the driver for your particular card
below.  PCMCIA- or PC-cards are credit-card size devices often used
with laptops computers; CardBus is the newer and faster version of
PCMCIA.

To use your PC-cards, you will need supporting software from David
Hinds' pcmcia-cs package (see the file <file:Documentation/Changes>
for location).  You also want to check out the PCMCIA-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_3C589</term>
<nutsynopsis>
	"3Com 3c589 PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach a 3Com 3c589 or compatible PCMCIA
(PC-card) Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called 3c589_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_3C574</term>
<nutsynopsis>
	"3Com 3c574 PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach a 3Com 3c574 or compatible PCMCIA
(PC-card) Fast Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called 3c574_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_FMVJ18X</term>
<nutsynopsis>
	"Fujitsu FMV-J18x PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach a Fujitsu FMV-J18x or compatible
PCMCIA (PC-card) Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called fmvj18x_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_PCNET</term>
<nutsynopsis>
	"NE2000 compatible PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach an NE2000 compatible PCMCIA
(PC-card) Ethernet or Fast Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called pcnet_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_NMCLAN</term>
<nutsynopsis>
	"New Media PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach a New Media Ethernet or LiveWire
PCMCIA (PC-card) Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called nmclan_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_SMC91C92</term>
<nutsynopsis>
	"SMC 91Cxx PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach an SMC 91Cxx compatible PCMCIA
(PC-card) Ethernet or Fast Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called smc91c92_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_XIRC2PS</term>
<nutsynopsis>
	"Xircom 16-bit PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach a Xircom 16-bit PCMCIA (PC-card)
Ethernet or Fast Ethernet card to your computer.

To compile this driver as a module, choose M here: the module will be
called xirc2ps_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_AXNET</term>
<nutsynopsis>
	"Asix AX88190 PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach an Asix AX88190-based PCMCIA
(PC-card) Fast Ethernet card to your computer.  These cards are
nearly NE2000 compatible but need a separate driver due to a few
misfeatures.

To compile this driver as a module, choose M here: the module will be
called axnet_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ARCNET_COM20020_CS</term>
<nutsynopsis>
	"COM20020 ARCnet PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && ARCNET_COM20020 && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach this type of ARCnet PCMCIA card
to your computer.

To compile this driver as a module, choose M here: the module will be
called com20020_cs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PCMCIA_IBMTR</term>
<nutsynopsis>
	"IBM PCMCIA tokenring adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!UML && NETDEVICES && NET_PCMCIA && IBMTR!=y && TR && PCMCIA && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach this type of Token Ring PCMCIA
card to your computer. You then also need to say Y to "Token Ring
driver support".

To compile this driver as a module, choose M here: the module will be
called ibmtr_cs.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Wan interfaces"
<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>


<nutentry>
	<term>WAN</term>
<nutsynopsis>
	"Wan interfaces support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Wide Area Networks (WANs), such as X.25, Frame Relay and leased
lines, are used to interconnect Local Area Networks (LANs) over vast
distances with data transfer rates significantly higher than those
achievable with commonly used asynchronous modem connections.

Usually, a quite expensive external device called a `WAN router' is
needed to connect to a WAN. As an alternative, a relatively
inexpensive WAN interface card can allow your Linux box to directly
connect to a WAN.

If you have one of those cards and wish to use it under Linux,
say Y here and also to the WAN driver for your card.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HOSTESS_SV11</term>
<nutsynopsis>
	"Comtrol Hostess SV-11 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && ISA && m && MODULES && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for Comtrol Hostess SV-11 network card which
operates on low speed synchronous serial links at up to
256Kbps, supporting PPP and Cisco HDLC.

The driver will be compiled as a module: the
module will be called hostess_sv11.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>COSA</term>
<nutsynopsis>
	"COSA/SRP sync serial boards support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && ISA && m && MODULES && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for COSA and SRP synchronous serial boards.

These boards allow to connect synchronous serial devices (for example
base-band modems, or any other device with the X.21, V.24, V.35 or
V.36 interface) to your Linux box. The cards can work as the
character device, synchronous PPP network device, or the Cisco HDLC
network device.

You will need user-space utilities COSA or SRP boards for downloading
the firmware to the cards and to set them up. Look at the
<http://www.fi.muni.cz/~kas/cosa/> for more information. You can also
read the comment at the top of the <file:drivers/net/wan/cosa.c> for
details about the cards and the driver itself.

The driver will be compiled as a module: the
module will be called cosa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DSCC4</term>
<nutsynopsis>
	"Etinc PCISYNC serial board support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && PCI && m && MODULES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for Etinc PCISYNC boards based on the Infineon (ex. Siemens)
DSCC4 chipset.

This is supposed to work with the four port card. Take a look at
<http://www.cogenit.fr/dscc4/> for further information about the
driver.

To compile this driver as a module, choose M here: the
module will be called dscc4.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DSCC4_PCISYNC</term>
<nutsynopsis>
	"Etinc PCISYNC features"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && DSCC4</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Due to Etinc's design choice for its PCISYNC cards, some operations
are only allowed on specific ports of the DSCC4. This option is the
only way for the driver to know that it shouldn't return a success
code for these operations.

Please say Y if your card is an Etinc's PCISYNC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DSCC4_PCI_RST</term>
<nutsynopsis>
	"Hard reset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && DSCC4</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Various DSCC4 bugs forbid any reliable software reset of the ASIC.
As a replacement, some vendors provide a way to assert the PCI #RST
pin of DSCC4 through the GPIO port of the card. If you choose Y,
the driver will make use of this feature before module removal
(i.e. rmmod). The feature is known to be available on Commtech's
cards. Contact your manufacturer for details.

Say Y if your card supports this feature.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LANMEDIA</term>
<nutsynopsis>
	"LanMedia Corp. SSI/V.35, T1/E1, HSSI, T3 boards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the following Lan Media family of serial boards:

- LMC 1000 board allows you to connect synchronous serial devices
(for example base-band modems, or any other device with the X.21,
V.24, V.35 or V.36 interface) to your Linux box.

- LMC 1200 with on board DSU board allows you to connect your Linux
box directly to a T1 or E1 circuit.

- LMC 5200 board provides a HSSI interface capable of running up to
52 Mbits per second.

- LMC 5245 board connects directly to a T3 circuit saving the
additional external hardware.

To change setting such as syncPPP vs Cisco HDLC or clock source you
will need lmcctl.  It is available at <ftp://ftp.lanmedia.com/>
(broken link).

To compile this driver as a module, choose M here: the
module will be called lmc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SEALEVEL_4021</term>
<nutsynopsis>
	"Sealevel Systems 4021 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && ISA && m && MODULES && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Sealevel Systems ACB 56 serial I/O adapter.

The driver will be compiled as a module: the
module will be called sealevel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYNCLINK_SYNCPPP</term>
<nutsynopsis>
	"SyncLink HDLC/SYNCPPP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enables HDLC/SYNCPPP support for the SyncLink WAN driver.

Normally the SyncLink WAN driver works with the main PPP driver
<file:drivers/net/ppp_generic.c> and pppd program.
HDLC/SYNCPPP support allows use of the Cisco HDLC/PPP driver
<file:drivers/net/wan/syncppp.c>. The SyncLink WAN driver (in
character devices) must also be enabled.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC</term>
<nutsynopsis>
	"Generic HDLC layer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to this option if your Linux box contains a WAN (Wide Area
Network) card supported by this driver and you are planning to
connect the box to a WAN.

You will need supporting software from
<http://www.kernel.org/pub/linux/utils/net/hdlc/>.
Generic HDLC driver currently supports raw HDLC, Cisco HDLC, Frame
Relay, synchronous Point-to-Point Protocol (PPP) and X.25.

To compile this driver as a module, choose M here: the
module will be called hdlc.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC_RAW</term>
<nutsynopsis>
	"Raw HDLC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generic HDLC driver supporting raw HDLC over WAN connections.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC_RAW_ETH</term>
<nutsynopsis>
	"Raw HDLC Ethernet device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generic HDLC driver supporting raw HDLC Ethernet device emulation
over WAN connections.

You will need it for Ethernet over HDLC bridges.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC_CISCO</term>
<nutsynopsis>
	"Cisco HDLC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generic HDLC driver supporting Cisco HDLC over WAN connections.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC_FR</term>
<nutsynopsis>
	"Frame Relay support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generic HDLC driver supporting Frame Relay over WAN connections.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC_PPP</term>
<nutsynopsis>
	"Synchronous Point-to-Point Protocol (PPP) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generic HDLC driver supporting PPP over WAN connections.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HDLC_X25</term>
<nutsynopsis>
	"X.25 protocol support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && (LAPB=m && HDLC=m || LAPB=y)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Generic HDLC driver supporting X.25 over WAN connections.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "X.25/LAPB support is disabled"
<para>
	depends on
	<literal>NETDEVICES && WAN && HDLC && (LAPB!=m || HDLC!=m) && LAPB!=y</literal>
	</para>


<nutentry>
	<term>PCI200SYN</term>
<nutsynopsis>
	"Goramo PCI200SYN support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for PCI200SYN cards by Goramo sp. j.

If you have such a card, say Y here and see
<http://www.kernel.org/pub/linux/utils/net/hdlc/>.

To compile this as a module, choose M here: the
module will be called pci200syn.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANXL</term>
<nutsynopsis>
	"SBE Inc. wanXL support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for wanXL PCI cards by SBE Inc.

If you have such a card, say Y here and see
<http://www.kernel.org/pub/linux/utils/net/hdlc/>.

To compile this as a module, choose M here: the
module will be called wanxl.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANXL_BUILD_FIRMWARE</term>
<nutsynopsis>
	"rebuild wanXL firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WANXL && !PREVENT_FIRMWARE_BUILD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows you to rebuild firmware run by the QUICC processor.
It requires as68k, ld68k and hexdump programs.

You should never need this option, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PC300</term>
<nutsynopsis>
	"Cyclades-PC300 support (RS-232/V.35, X.21, T1/E1 boards)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the Cyclades-PC300 synchronous communication boards.

These boards provide synchronous serial interfaces to your
Linux box (interfaces currently available are RS-232/V.35, X.21 and
T1/E1). If you wish to support Multilink PPP, please select the
option later and read the file README.mlppp provided by PC300
package.

To compile this as a module, choose M here: the module
will be called pc300.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PC300_MLPPP</term>
<nutsynopsis>
	"Cyclades-PC300 MLPPP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Multilink PPP over the PC300 synchronous communication boards.
	</para>

</nutentrybody>
</nutentry>

comment "Cyclades-PC300 MLPPP support is disabled."
<para>
	depends on
	<literal>NETDEVICES && WAN && HDLC && PC300 && (PPP=n || !PPP_MULTILINK || PPP_SYNC_TTY=n || !HDLC_PPP)</literal>
	</para>



comment "Refer to the file README.mlppp, provided by PC300 package."
<para>
	depends on
	<literal>NETDEVICES && WAN && HDLC && PC300 && (PPP=n || !PPP_MULTILINK || PPP_SYNC_TTY=n || !HDLC_PPP)</literal>
	</para>


<nutentry>
	<term>N2</term>
<nutsynopsis>
	"SDL RISCom/N2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for RISCom/N2 single or dual channel ISA cards by
SDL Communications Inc.

If you have such a card, say Y here and see
<http://www.kernel.org/pub/linux/utils/net/hdlc/>.

Note that N2csu and N2dds cards are not supported by this driver.

To compile this driver as a module, choose M here: the module
will be called n2.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>C101</term>
<nutsynopsis>
	"Moxa C101 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for C101 SuperSync ISA cards by Moxa Technologies Co., Ltd.

If you have such a card, say Y here and see
<http://www.kernel.org/pub/linux/utils/net/hdlc/>.

To compile this driver as a module, choose M here: the
module will be called c101.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FARSYNC</term>
<nutsynopsis>
	"FarSync T-Series support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HDLC && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the FarSync T-Series X.21 (and V.35/V.24) cards by
FarSite Communications Ltd.

Synchronous communication is supported on all ports at speeds up to
8Mb/s (128K on V.24) using synchronous PPP, Cisco HDLC, raw HDLC,
Frame Relay or X.25/LAPB.

If you want the module to be automatically loaded when the interface
is referenced then you should add "alias hdlcX farsync" to
/etc/modprobe.conf for each interface, where X is 0, 1, 2, ..., or
simply use "alias hdlc* farsync" to indicate all of them.

To compile this driver as a module, choose M here: the
module will be called farsync.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DLCI</term>
<nutsynopsis>
	"Frame Relay DLCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Frame Relay protocol.

Frame Relay is a fast low-cost way to connect to a remote Internet
access provider or to form a private wide area network. The one
physical line from your box to the local "switch" (i.e. the entry
point to the Frame Relay network, usually at the phone company) can
carry several logical point-to-point connections to other computers
connected to the Frame Relay network. For a general explanation of
the protocol, check out <http://www.mplsforum.org/>.

To use frame relay, you need supporting hardware (called FRAD) and
certain programs from the net-tools package as explained in
<file:Documentation/networking/framerelay.txt>.

To compile this driver as a module, choose M here: the
module will be called dlci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DLCI_COUNT</term>
<nutsynopsis>
	"Max open DLCI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && DLCI</literal>
	</para>

	<para>
	default value
	<literal>24 if NETDEVICES && DLCI</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Maximal number of logical point-to-point frame relay connections
(the identifiers of which are called DCLIs) that the driver can
handle.

The default is probably fine.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DLCI_MAX</term>
<nutsynopsis>
	"Max DLCI per device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && DLCI</literal>
	</para>

	<para>
	default value
	<literal>8 if NETDEVICES && DLCI</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
How many logical point-to-point frame relay connections (the
identifiers of which are called DCLIs) should be handled by each
of your hardware frame relay access devices.

Go with the default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SDLA</term>
<nutsynopsis>
	"SDLA (Sangoma S502/S508) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && DLCI && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the Sangoma S502A, S502E, and S508 Frame Relay Access
Devices.

These are multi-protocol cards, but only Frame Relay is supported
by the driver at this time. Please read
<file:Documentation/networking/framerelay.txt>.

To compile this driver as a module, choose M here: the
module will be called sdla.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WAN_ROUTER_DRIVERS</term>
<nutsynopsis>
	"WAN router drivers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && WAN_ROUTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect LAN to WAN via Linux box.

Select driver your card and remember to say Y to "Wan Router."
You will need the wan-tools package which is available from
<ftp://ftp.sangoma.com/>. For more information read:
<file:Documentation/networking/wan-router.txt>.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about WAN router drivers.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VENDOR_SANGOMA</term>
<nutsynopsis>
	"Sangoma WANPIPE(tm) multiprotocol cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN_ROUTER_DRIVERS && WAN_ROUTER && (PCI || ISA) && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for S514-PCI/ISA Synchronous Data Link Adapters (SDLA).

WANPIPE from Sangoma Technologies Inc. <http://www.sangoma.com/>
is a family of intelligent multiprotocol WAN adapters with data
transfer rates up to 4Mbps. Cards support:

- X.25, Frame Relay, PPP, Cisco HDLC protocols.

- API for protocols like HDLC (LAPB), HDLC Streaming, X.25,
Frame Relay and BiSync.

- Ethernet Bridging over Frame Relay protocol.

- MULTILINK PPP

- Async PPP (Modem Dialup)

The next questions will ask you about the protocols you want
the driver to support.

If you have one or more of these cards, say M to this option;
and read <file:Documentation/networking/wan-router.txt>.

To compile this driver as a module, choose M here: the
module will be called wanpipe.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANPIPE_CHDLC</term>
<nutsynopsis>
	"WANPIPE Cisco HDLC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && VENDOR_SANGOMA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect a WANPIPE card to a leased line using the Cisco HDLC.

- Supports Dual Port Cisco HDLC on the S514-PCI/S508-ISA cards
which allows user to build applications using the HDLC streaming API.

- CHDLC Streaming MULTILINK PPP that can bind multiple WANPIPE T1
cards into a single logical channel.

Say Y and the Cisco HDLC support, HDLC streaming API and
MULTILINK PPP will be included in the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANPIPE_FR</term>
<nutsynopsis>
	"WANPIPE Frame Relay support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && VENDOR_SANGOMA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect a WANPIPE card to a Frame Relay network, or use Frame Felay
API to develop custom applications.

Contains the Ethernet Bridging over Frame Relay feature, where
a WANPIPE frame relay link can be directly connected to the Linux
kernel bridge. The Frame Relay option is supported on S514-PCI
and S508-ISA cards.

Say Y and the Frame Relay support will be included in the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANPIPE_X25</term>
<nutsynopsis>
	"WANPIPE X.25 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && VENDOR_SANGOMA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect a WANPIPE card to an X.25 network.

Includes the X.25 API support for custom applications over the
X.25 protocol. The X.25 option is supported on S514-PCI and
S508-ISA cards.

Say Y and the X.25 support will be included in the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANPIPE_PPP</term>
<nutsynopsis>
	"WANPIPE PPP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && VENDOR_SANGOMA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect a WANPIPE card to a leased line using Point-to-Point
Protocol (PPP).

The PPP option is supported on S514-PCI/S508-ISA cards.

Say Y and the PPP support will be included in the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WANPIPE_MULTPPP</term>
<nutsynopsis>
	"WANPIPE Multi-Port PPP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && VENDOR_SANGOMA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect a WANPIPE card to a leased line using Point-to-Point
Protocol (PPP).

Uses in-kernel SyncPPP protocol over the Sangoma HDLC Streaming
adapter. In this case each Sangoma adapter port can support an
independent PPP connection. For example, a single Quad-Port PCI
adapter can support up to four independent PPP links. The PPP
option is supported on S514-PCI/S508-ISA cards.

Say Y and the Multi-Port PPP support will be included in the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CYCLADES_SYNC</term>
<nutsynopsis>
	"Cyclom 2X(tm) cards (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN_ROUTER_DRIVERS && (PCI || ISA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Cyclom 2X from Cyclades Corporation <http://www.cyclades.com/> is an
intelligent multiprotocol WAN adapter with data transfer rates up to
512 Kbps. These cards support the X.25 and SNA related protocols.

While no documentation is available at this time please grab the
wanconfig tarball in
<http://www.conectiva.com.br/~acme/cycsyn-devel/> (with minor changes
to make it compile with the current wanrouter include files; efforts
are being made to use the original package available at
<ftp://ftp.sangoma.com/>).

Feel free to contact me or the cycsyn-devel mailing list at
<acme@conectiva.com.br> and <cycsyn-devel@bazar.conectiva.com.br> for
additional details, I hope to have documentation available as soon as
possible. (Cyclades Brazil is writing the Documentation).

The next questions will ask you about the protocols you want the
driver to support (for now only X.25 is supported).

If you have one or more of these cards, say Y to this option.

To compile this driver as a module, choose M here: the
module will be called cyclomx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CYCLOMX_X25</term>
<nutsynopsis>
	"Cyclom 2X X.25 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && CYCLADES_SYNC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Connect a Cyclom 2X card to an X.25 network.

Enabling X.25 support will enlarge your kernel by about 11 kB.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LAPBETHER</term>
<nutsynopsis>
	"LAPB over Ethernet driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && LAPB && X25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for a pseudo device (typically called /dev/lapb0) which allows
you to open an LAPB point-to-point connection to some other computer
on your Ethernet network.

In order to do this, you need to say Y or M to the driver for your
Ethernet card as well as to "LAPB Data Link Driver".

To compile this driver as a module, choose M here: the
module will be called lapbether.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X25_ASY</term>
<nutsynopsis>
	"X.25 async driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && LAPB && X25</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Send and receive X.25 frames over regular asynchronous serial
lines such as telephone lines equipped with ordinary modems.

Experts should note that this driver doesn't currently comply with
the asynchronous HDLS framing protocols in CCITT recommendation X.25.

To compile this driver as a module, choose M here: the
module will be called x25_asy.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SBNI</term>
<nutsynopsis>
	"Granch SBNI12 Leased Line adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && WAN && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for ISA SBNI12-xx cards which are low cost alternatives to
leased line modems.

You can find more information and last versions of drivers and
utilities at <http://www.granch.ru/>. If you have any question you
can send email to <sbni@granch.ru>.

To compile this driver as a module, choose M here: the
module will be called sbni.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SBNI_MULTILINE</term>
<nutsynopsis>
	"Multiple line feature support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && SBNI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Schedule traffic for some parallel lines, via SBNI12 adapters.

If you have two computers connected with two parallel lines it's
possible to increase transfer rate nearly twice. You should have
a program named 'sbniconfig' to configure adapters.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ATM drivers"
<para>
	depends on
	<literal>NETDEVICES && ATM</literal>
	</para>


<nutentry>
	<term>ATM_TCP</term>
<nutsynopsis>
	"ATM over TCP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && INET && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ATM over TCP driver. Useful mainly for development and for
experiments. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_LANAI</term>
<nutsynopsis>
	"Efficient Networks Speedstream 3010"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Supports ATM cards based on the Efficient Networks "Lanai"
chipset such as the Speedstream 3010 and the ENI-25p.  The
Speedstream 3060 is currently not supported since we don't
have the code to drive the on-board Alcatel DSL chipset (yet).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI</term>
<nutsynopsis>
	"Efficient Networks ENI155P"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the Efficient Networks ENI155p series and SMC ATM
Power155 155 Mbps ATM adapters. Both, the versions with 512KB and
2MB on-board RAM (Efficient calls them "C" and "S", respectively),
and the FPGA and the ASIC Tonga versions of the board are supported.
The driver works with MMF (-MF or ...F) and UTP-5 (-U5 or ...D)
adapters.

To compile this driver as a module, choose M here: the module will
be called eni.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_DEBUG</term>
<nutsynopsis>
	"Enable extended debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extended debugging records various events and displays that list
when an inconsistency is detected. This mechanism is faster than
generally using printks, but still has some impact on performance.
Note that extended debugging may create certain race conditions
itself. Enable this ONLY if you suspect problems with the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_TUNE_BURST</term>
<nutsynopsis>
	"Fine-tune burst settings"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
In order to obtain good throughput, the ENI NIC can transfer
multiple words of data per PCI bus access cycle. Such a multi-word
transfer is called a burst.

The default settings for the burst sizes are suitable for most PCI
chipsets. However, in some cases, large bursts may overrun buffers
in the PCI chipset and cause data corruption. In such cases, large
bursts must be disabled and only (slower) small bursts can be used.
The burst sizes can be set independently in the send (TX) and
receive (RX) direction.

Note that enabling many different burst sizes in the same direction
may increase the cost of setting up a transfer such that the
resulting throughput is lower than when using only the largest
available burst size.

Also, sometimes larger bursts lead to lower throughput, e.g. on an
Intel 440FX board, a drop from 135 Mbps to 103 Mbps was observed
when going from 8W to 16W bursts.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_TX_16W</term>
<nutsynopsis>
	"Enable 16W TX bursts (discouraged)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst sixteen words at once in the send direction. This may work
with recent PCI chipsets, but is known to fail with older chipsets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_TX_8W</term>
<nutsynopsis>
	"Enable 8W TX bursts (recommended)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst eight words at once in the send direction. This is the default
setting.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_TX_4W</term>
<nutsynopsis>
	"Enable 4W TX bursts (optional)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst four words at once in the send direction. You may want to try
this if you have disabled 8W bursts. Enabling 4W if 8W is also set
may or may not improve throughput.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_TX_2W</term>
<nutsynopsis>
	"Enable 2W TX bursts (optional)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst two words at once in the send direction. You may want to try
this if you have disabled 4W and 8W bursts. Enabling 2W if 4W or 8W
are also set may or may not improve throughput.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_RX_16W</term>
<nutsynopsis>
	"Enable 16W RX bursts (discouraged)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst sixteen words at once in the receive direction. This may work
with recent PCI chipsets, but is known to fail with older chipsets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_RX_8W</term>
<nutsynopsis>
	"Enable 8W RX bursts (discouraged)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst eight words at once in the receive direction. This may work
with recent PCI chipsets, but is known to fail with older chipsets,
such as the Intel Neptune series.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_RX_4W</term>
<nutsynopsis>
	"Enable 4W RX bursts (recommended)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst four words at once in the receive direction. This is the
default setting. Enabling 4W if 8W is also set may or may not
improve throughput.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ENI_BURST_RX_2W</term>
<nutsynopsis>
	"Enable 2W RX bursts (optional)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ENI_TUNE_BURST</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Burst two words at once in the receive direction. You may want to
try this if you have disabled 4W and 8W bursts. Enabling 2W if 4W or
8W are also set may or may not improve throughput.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FIRESTREAM</term>
<nutsynopsis>
	"Fujitsu FireStream (FS50/FS155) "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the Fujitsu FireStream 155 (MB86697) and
FireStream 50 (MB86695) ATM PCI chips.

To compile this driver as a module, choose M here: the module will
be called firestream.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ZATM</term>
<nutsynopsis>
	"ZeitNet ZN1221/ZN1225"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the ZeitNet ZN1221 (MMF) and ZN1225 (UTP-5) 155 Mbps ATM
adapters.

To compile this driver as a module, choose M here: the module will
be called zatm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_ZATM_DEBUG</term>
<nutsynopsis>
	"Enable extended debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_ZATM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extended debugging records various events and displays that list
when an inconsistency is detected. This mechanism is faster than
generally using printks, but still has some impact on performance.
Note that extended debugging may create certain race conditions
itself. Enable this ONLY if you suspect problems with the driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_NICSTAR</term>
<nutsynopsis>
	"IDT 77201 (NICStAR) (ForeRunnerLE)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The NICStAR chipset family is used in a large number of ATM NICs for
25 and for 155 Mbps, including IDT cards and the Fore ForeRunnerLE
series. Say Y if you have one of those.

To compile this driver as a module, choose M here: the module will
be called nicstar.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_NICSTAR_USE_SUNI</term>
<nutsynopsis>
	"Use suni PHY driver (155Mbps)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_NICSTAR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the S-UNI and compatible PHYsical layer chips. These are
found in most 155Mbps NICStAR based ATM cards, namely in the
ForeRunner LE155 cards. This driver provides detection of cable~
removal and reinsertion and provides some statistics. This driver
doesn't have removal capability when compiled as a module, so if you
need that capability don't include S-UNI support (it's not needed to
make the card work).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_NICSTAR_USE_IDT77105</term>
<nutsynopsis>
	"Use IDT77015 PHY driver (25Mbps)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_NICSTAR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the PHYsical layer chip in ForeRunner LE25 cards. In
addition to cable removal/reinsertion detection, this driver allows
you to control the loopback mode of the chip via a dedicated IOCTL.
This driver is required for proper handling of temporary carrier
loss, so if you have a 25Mbps NICStAR based ATM card you must say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_IDT77252</term>
<nutsynopsis>
	"IDT 77252 (NICStAR II)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Driver for the IDT 77252 ATM PCI chips.

To compile this driver as a module, choose M here: the module will
be called idt77252.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_IDT77252_DEBUG</term>
<nutsynopsis>
	"Enable debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_IDT77252</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Somewhat useful debugging messages are available. The choice of
messages is controlled by a bitmap.  This may be specified as a
module argument.  See the file <file:drivers/atm/idt77252.h> for
the meanings of the bits in the mask.

When active, these messages can have a significant impact on the
speed of the driver, and the size of your syslog files! When
inactive, they will have only a modest impact on performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_IDT77252_RCV_ALL</term>
<nutsynopsis>
	"Receive ALL cells in raw queue"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_IDT77252</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable receiving of all cells on the ATM link, that do not match
an open connection in the raw cell queue of the driver.  Useful
for debugging or special applications only, so the safe answer is N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_IDT77252_USE_SUNI</term>
	<para>
	default value
	<literal>y if NETDEVICES && ATM && ATM_IDT77252</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_AMBASSADOR</term>
<nutsynopsis>
	"Madge Ambassador (Collage PCI 155 Server)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for ATMizer based ATM card produced by Madge
Networks Ltd. Say Y (or M to compile as a module named ambassador)
here if you have one of these cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_AMBASSADOR_DEBUG</term>
<nutsynopsis>
	"Enable debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_AMBASSADOR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Somewhat useful debugging messages are available. The choice of
messages is controlled by a bitmap.  This may be specified as a
module argument (kernel command line argument as well?), changed
dynamically using an ioctl (not yet) or changed by sending the
string "Dxxxx" to VCI 1023 (where x is a hex digit).  See the file
<file:drivers/atm/ambassador.h> for the meanings of the bits in the
mask.

When active, these messages can have a significant impact on the
speed of the driver, and the size of your syslog files! When
inactive, they will have only a modest impact on performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_HORIZON</term>
<nutsynopsis>
	"Madge Horizon [Ultra] (Collage PCI 25 and Collage PCI 155 Client)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Horizon chipset ATM adapter cards once
produced by Madge Networks Ltd. Say Y (or M to compile as a module
named horizon) here if you have one of these cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_HORIZON_DEBUG</term>
<nutsynopsis>
	"Enable debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_HORIZON</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Somewhat useful debugging messages are available. The choice of
messages is controlled by a bitmap.  This may be specified as a
module argument (kernel command line argument as well?), changed
dynamically using an ioctl (not yet) or changed by sending the
string "Dxxxx" to VCI 1023 (where x is a hex digit).  See the file
<file:drivers/atm/horizon.h> for the meanings of the bits in the
mask.

When active, these messages can have a significant impact on the
speed of the driver, and the size of your syslog files! When
inactive, they will have only a modest impact on performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_IA</term>
<nutsynopsis>
	"Interphase ATM PCI x575/x525/x531"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Interphase (i)ChipSAR adapter cards
which include a variety of variants in term of the size of the
control memory (128K-1KVC, 512K-4KVC), the size of the packet
memory (128K, 512K, 1M), and the PHY type (Single/Multi mode OC3,
UTP155, UTP25, DS3 and E3). Go to:
      <http://www.iphase.com/products/ClassSheet.cfm?ClassID=ATM>
for more info about the cards. Say Y (or M to compile as a module
named iphase) here if you have one of these cards.

See the file <file:Documentation/networking/iphase.txt> for further
details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_IA_DEBUG</term>
<nutsynopsis>
	"Enable debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_IA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Somewhat useful debugging messages are available. The choice of
messages is controlled by a bitmap. This may be specified as a
module argument (kernel command line argument as well?), changed
dynamically using an ioctl (Get the debug utility, iadbg, from
<ftp://ftp.iphase.com/pub/atm/pci/>).

See the file <file:drivers/atm/iphase.h> for the meanings of the
bits in the mask.

When active, these messages can have a significant impact on the
speed of the driver, and the size of your syslog files! When
inactive, they will have only a modest impact on performance.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_MAYBE</term>
<nutsynopsis>
	"FORE Systems 200E-series"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (PCI || SBUS) && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the FORE Systems 200E-series ATM adapter
cards. It simultaneously supports PCA-200E and SBA-200E models
on PCI and SBUS hosts. Say Y (or M to compile as a module
named fore_200e) here if you have one of these ATM adapters.

Note that the driver will actually be compiled only if you
additionally enable the support for PCA-200E and/or SBA-200E
cards.

See the file <file:Documentation/networking/fore200e.txt> for
further details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_PCA</term>
<nutsynopsis>
	"PCA-200E support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_FORE200E_MAYBE && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want your PCA-200E cards to be probed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_PCA_DEFAULT_FW</term>
<nutsynopsis>
	"Use default PCA-200E firmware (normally enabled)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_FORE200E_PCA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use the default PCA-200E firmware data shipped with the driver.

Normal users do not have to deal with the firmware stuff, so
they should say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_PCA_FW</term>
<nutsynopsis>
	"Pathname of user-supplied binary firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW</literal>
	</para>

	<para>
	default value
	<literal> if NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
This defines the pathname of an alternative PCA-200E binary
firmware image supplied by the user. This pathname may be
absolute or relative to the drivers/atm directory.

The driver comes with an adequate firmware image, so normal users do
not have to supply an alternative one. They just say Y to "Use
default PCA-200E firmware" instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_SBA</term>
<nutsynopsis>
	"SBA-200E support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_FORE200E_MAYBE && SBUS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want your SBA-200E cards to be probed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_SBA_DEFAULT_FW</term>
<nutsynopsis>
	"Use default SBA-200E firmware (normally enabled)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_FORE200E_SBA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use the default SBA-200E firmware data shipped with the driver.

Normal users do not have to deal with the firmware stuff, so
they should say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_SBA_FW</term>
<nutsynopsis>
	"Pathname of user-supplied binary firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW</literal>
	</para>

	<para>
	default value
	<literal> if NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
This defines the pathname of an alternative SBA-200E binary
firmware image supplied by the user. This pathname may be
absolute or relative to the drivers/atm directory.

The driver comes with an adequate firmware image, so normal users do
not have to supply an alternative one. They just say Y to "Use
default SBA-200E firmware", above.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_USE_TASKLET</term>
<nutsynopsis>
	"Defer interrupt work to a tasklet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)</literal>
	</para>

	<para>
	default value
	<literal>n if NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This defers work to be done by the interrupt handler to a
tasklet instead of hanlding everything at interrupt time.  This
may improve the responsive of the host.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_TX_RETRY</term>
<nutsynopsis>
	"Maximum number of tx retries"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)</literal>
	</para>

	<para>
	default value
	<literal>16 if NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Specifies the number of times the driver attempts to transmit
a message before giving up, if the transmit queue of the ATM card
is transiently saturated.

Saturation of the transmit queue may occur only under extreme
conditions, e.g. when a fast host continuously submits very small
frames (<64 bytes) or raw AAL0 cells (48 bytes) to the ATM adapter.

Note that under common conditions, it is unlikely that you encounter
a saturation of the transmit queue, so the retry mechanism never
comes into play.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E_DEBUG</term>
<nutsynopsis>
	"Debugging level (0-3)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)</literal>
	</para>

	<para>
	default value
	<literal>0 if NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Specifies the level of debugging messages issued by the driver.
The verbosity of the driver increases with the value of this
parameter.

When active, these messages can have a significant impact on
the performances of the driver, and the size of your syslog files!
Keep the debugging level to 0 during normal operations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_FORE200E</term>
	<para>
	default value
	<literal>m if NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA) && ATM_FORE200E_MAYBE!=y</literal>
	</para>


	<para>
	default value
	<literal>y if NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA) && ATM_FORE200E_MAYBE=y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_HE</term>
<nutsynopsis>
	"ForeRunner HE Series"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PCI && ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Marconi ForeRunner HE-series ATM adapter
cards. It simultaneously supports the 155 and 622 versions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATM_HE_USE_SUNI</term>
<nutsynopsis>
	"Use S/UNI PHY driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && ATM_HE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the S/UNI-Ultra and S/UNI-622 found in the ForeRunner
HE cards.  This driver provides carrier detection some statistics.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "S/390 network device drivers"
<para>
	depends on
	<literal>NETDEVICES && ARCH_S390</literal>
	</para>


<nutentry>
	<term>LCS</term>
<nutsynopsis>
	"Lan Channel Station Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && NETDEVICES && (NET_ETHERNET || TR || FDDI)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to use LCS networking  on IBM S/390
or zSeries. This device driver supports Token Ring (IEEE 802.5),
FDDI (IEEE 802.7) and Ethernet. 
This option is also available as a module which will be
called lcs.ko. If you do not know what it is, it's safe to say "Y".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CTC</term>
<nutsynopsis>
	"CTC device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to use channel-to-channel networking
on IBM S/390 or zSeries. This device driver supports real CTC
coupling using ESCON. It also supports virtual CTCs when running
under VM. It will use the channel device configuration if this is
available.  This option is also available as a module which will be
called ctc.ko.  If you do not know what it is, it's safe to say "Y".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IUCV</term>
<nutsynopsis>
	"IUCV support (VM only)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to use inter-user communication
under VM or VIF. If unsure, say "Y" to enable a fast communication
link between VM guests. At boot time the user ID of the guest needs
to be passed to the kernel. Note that both kernels need to be
compiled with this option and both need to be booted with the user ID
of the other VM guest.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETIUCV</term>
<nutsynopsis>
	"IUCV network device support (VM only)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && IUCV && NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to use inter-user communication
vehicle networking under VM or VIF. It enables a fast communication
link between VM guests. Using ifconfig a point-to-point connection
can be established to the Linux for zSeries and S7390 system
running on the other VM guest. This option is also available
as a module which will be called netiucv.ko. If unsure, say "Y".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMSGIUCV</term>
<nutsynopsis>
	"IUCV special message support (VM only)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ARCH_S390 && IUCV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Select this option if you want to be able to receive SMSG messages
from other VM guest systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CLAW</term>
<nutsynopsis>
	"CLAW device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports channel attached CLAW devices.
CLAW is Common Link Access for Workstation.  Common devices
that use CLAW are RS/6000s, Cisco Routers (CIP) and 3172 devices.
To compile as a module choose M here:  The module will be called
claw.ko to compile into the kernel choose Y
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QETH</term>
<nutsynopsis>
	"Gigabit Ethernet device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S390 && NETDEVICES && IP_MULTICAST && QDIO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the IBM S/390 and zSeries OSA Express adapters
in QDIO mode (all media types), HiperSockets interfaces and VM GuestLAN
interfaces in QDIO and HIPER mode.

For details please refer to the documentation provided by IBM at   
<http://www10.software.ibm.com/developerworks/opensource/linux390>

To compile this driver as a module, choose M here: the
module will be called qeth.ko.
	</para>

</nutentrybody>
</nutentry>

comment "Gigabit Ethernet default settings"
<para>
	depends on
	<literal>NETDEVICES && ARCH_S390 && QETH</literal>
	</para>


<nutentry>
	<term>QETH_IPV6</term>
<nutsynopsis>
	"IPv6 support for gigabit ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ARCH_S390 && (QETH=IPV6 || QETH && IPV6=y)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If CONFIG_QETH is switched on, this option will include IPv6
support in the qeth device driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QETH_VLAN</term>
<nutsynopsis>
	"VLAN support for gigabit ethernet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ARCH_S390 && (QETH=VLAN_8021Q || QETH && VLAN_8021Q=y)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If CONFIG_QETH is switched on, this option will include IEEE
802.1q VLAN support in the qeth device driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QETH_PERF_STATS</term>
<nutsynopsis>
	"Performance statistics in /proc"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ARCH_S390 && QETH</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
When switched on, this option will add a file in the proc-fs
(/proc/qeth_perf_stats) containing performance statistics. It
may slightly impact performance, so this is only recommended for
internal tuning of the device driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CCWGROUP</term>
	<para>
	default value
	<literal>LCS || CTC || QETH if NETDEVICES && ARCH_S390</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>ISERIES_VETH</term>
<nutsynopsis>
	"iSeries Virtual Ethernet driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPC_ISERIES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FDDI</term>
<nutsynopsis>
	"FDDI driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && (PCI || EISA)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Fiber Distributed Data Interface is a high speed local area network
design; essentially a replacement for high speed Ethernet. FDDI can
run over copper or fiber. If you are connected to such a network and
want a driver for the FDDI card in your computer, say Y here (and
then also Y to the driver for your FDDI card, below). Most people
will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEFXX</term>
<nutsynopsis>
	"Digital DEFEA and DEFPA adapter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && FDDI && (PCI || EISA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is support for the DIGITAL series of EISA (DEFEA) and PCI
(DEFPA) controllers which can connect you to a local FDDI network.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SKFP</term>
<nutsynopsis>
	"SysKonnect FDDI PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && FDDI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a SysKonnect FDDI PCI adapter.
The following adapters are supported by this driver:
- SK-5521 (SK-NET FDDI-UP)
- SK-5522 (SK-NET FDDI-UP DAS)
- SK-5541 (SK-NET FDDI-FP)
- SK-5543 (SK-NET FDDI-LP)
- SK-5544 (SK-NET FDDI-LP DAS)
- SK-5821 (SK-NET FDDI-UP64)
- SK-5822 (SK-NET FDDI-UP64 DAS)
- SK-5841 (SK-NET FDDI-FP64)
- SK-5843 (SK-NET FDDI-LP64)
- SK-5844 (SK-NET FDDI-LP64 DAS)
- Netelligent 100 FDDI DAS Fibre SC
- Netelligent 100 FDDI SAS Fibre SC
- Netelligent 100 FDDI DAS UTP
- Netelligent 100 FDDI SAS UTP
- Netelligent 100 FDDI SAS Fibre MIC

Read <file:Documentation/networking/skfp.txt> for information about
the driver.

Questions concerning this driver can be addressed to:
<linux@syskonnect.de>

To compile this driver as a module, choose M here: the module
will be called skfp.  This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HIPPI</term>
<nutsynopsis>
	"HIPPI driver support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && EXPERIMENTAL && INET && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
HIgh Performance Parallel Interface (HIPPI) is a 800Mbit/sec and
1600Mbit/sec dual-simplex switched or point-to-point network. HIPPI
can run over copper (25m) or fiber (300m on multi-mode or 10km on
single-mode). HIPPI networks are commonly used for clusters and to
connect to super computers. If you are connected to a HIPPI network
and have a HIPPI network card in your computer that you want to use
under Linux, say Y here (you must also remember to enable the driver
for your HIPPI card below). Most people will say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ROADRUNNER</term>
<nutsynopsis>
	"Essential RoadRunner HIPPI PCI adapter support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && HIPPI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if this is your PCI HIPPI network card.

To compile this driver as a module, choose M here: the module
will be called rrunner.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ROADRUNNER_LARGE_RINGS</term>
<nutsynopsis>
	"Use large TX/RX rings (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ROADRUNNER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the RoadRunner driver will preallocate up to 2 MB
of additional memory to allow for fastest operation, both for
transmitting and receiving. This memory cannot be used by any other
kernel code or by user space programs. Say Y here only if you have
the memory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PLIP</term>
<nutsynopsis>
	"PLIP (parallel port) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
PLIP (Parallel Line Internet Protocol) is used to create a
reasonably fast mini network consisting of two (or, rarely, more)
local machines.  A PLIP link from a Linux box is a popular means to
install a Linux distribution on a machine which doesn't have a
CD-ROM drive (a minimal system has to be transferred with floppies
first). The kernels on both machines need to have this PLIP option
enabled for this to work.

The PLIP driver has two modes, mode 0 and mode 1.  The parallel
ports (the connectors at the computers with 25 holes) are connected
with "null printer" or "Turbo Laplink" cables which can transmit 4
bits at a time (mode 0) or with special PLIP cables, to be used on
bidirectional parallel ports only, which can transmit 8 bits at a
time (mode 1); you can find the wiring of these cables in
<file:Documentation/networking/PLIP.txt>.  The cables can be up to
15m long.  Mode 0 works also if one of the machines runs DOS/Windows
and has some PLIP software installed, e.g. the Crynwr PLIP packet
driver (<http://oak.oakland.edu/simtel.net/msdos/pktdrvr-pre.html>)
and winsock or NCSA's telnet.

If you want to use PLIP, say Y and read the PLIP mini-HOWTO as well
as the NET-3-HOWTO, both available from
<http://www.tldp.org/docs.html#howto>.  Note that the PLIP
protocol has been changed and this PLIP driver won't work together
with the PLIP support in Linux versions 1.0.x.  This option enlarges
your kernel by about 8 KB.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>.  The module will be
called plip.  If unsure, say Y or M, in case you buy a laptop
later.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP</term>
<nutsynopsis>
	"PPP (point-to-point protocol) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
PPP (Point to Point Protocol) is a newer and better SLIP.  It serves
the same purpose: sending Internet traffic over telephone (and other
serial) lines.  Ask your access provider if they support it, because
otherwise you can't use it; most Internet access providers these
days support PPP rather than SLIP.

To use PPP, you need an additional program called pppd as described
in the PPP-HOWTO, available at
<http://www.tldp.org/docs.html#howto>.  Make sure that you have
the version of pppd recommended in <file:Documentation/Changes>.
The PPP option enlarges your kernel by about 16 KB.

There are actually two versions of PPP: the traditional PPP for
asynchronous lines, such as regular analog phone lines, and
synchronous PPP which can be used over digital ISDN lines for
example.  If you want to use PPP over phone lines or other
asynchronous serial lines, you need to say Y (or M) here and also to
the next option, "PPP support for async serial ports".  For PPP over
synchronous lines, you should say Y (or M) here and to "Support
synchronous PPP", below.

If you said Y to "Version information on all symbols" above, then
you cannot compile the PPP driver into the kernel; you can then only
compile it as a module. To compile this driver as a module, choose M
here and read <file:Documentation/networking/net-modules.txt>.
The module will be called ppp_generic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP_MULTILINK</term>
<nutsynopsis>
	"PPP multilink support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPP && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
PPP multilink is a protocol (defined in RFC 1990) which allows you
to combine several (logical or physical) lines into one logical PPP
connection, so that you can utilize your full bandwidth.

This has to be supported at the other end as well and you need a
version of the pppd daemon which understands the multilink protocol.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP_FILTER</term>
<nutsynopsis>
	"PPP filtering"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to be able to filter the packets passing over
PPP interfaces.  This allows you to control which packets count as
activity (i.e. which packets will reset the idle timer or bring up
a demand-dialled link) and which packets are to be dropped entirely.
You need to say Y here if you wish to use the pass-filter and
active-filter options to pppd.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP_ASYNC</term>
<nutsynopsis>
	"PPP support for async serial ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPP</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y (or M) here if you want to be able to use PPP over standard
asynchronous serial ports, such as COM1 or COM2 on a PC.  If you use
a modem (not a synchronous or ISDN modem) to contact your ISP, you
need this option.

To compile this driver as a module, choose M here.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP_SYNC_TTY</term>
<nutsynopsis>
	"PPP support for sync tty ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y (or M) here if you want to be able to use PPP over synchronous
(HDLC) tty devices, such as the SyncLink adapter. These devices
are often used for high-speed leased lines like T1/E1.

To compile this driver as a module, choose M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP_DEFLATE</term>
<nutsynopsis>
	"PPP Deflate compression"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPP</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Deflate compression method for PPP, which uses the
Deflate algorithm (the same algorithm that gzip uses) to compress
each PPP packet before it is sent over the wire.  The machine at the
other end of the PPP link (usually your ISP) has to support the
Deflate compression method as well for this to be useful.  Even if
they don't support it, it is safe to say Y here.

To compile this driver as a module, choose M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPP_BSDCOMP</term>
<nutsynopsis>
	"PPP BSD-Compress compression"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && PPP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the BSD-Compress compression method for PPP, which uses
the LZW compression method to compress each PPP packet before it is
sent over the wire. The machine at the other end of the PPP link
(usually your ISP) has to support the BSD-Compress compression
method as well for this to be useful. Even if they don't support it,
it is safe to say Y here.

The PPP Deflate compression method ("PPP Deflate compression",
above) is preferable to BSD-Compress, because it compresses better
and is patent-free.

Note that the BSD compression code will always be compiled as a
module; it is called bsd_comp and will show up in the directory
modules once you have said "make modules". If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPPOE</term>
<nutsynopsis>
	"PPP over Ethernet (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && EXPERIMENTAL && PPP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for PPP over Ethernet.

This driver requires the latest version of pppd from the CVS
repository at cvs.samba.org.  Alternatively, see the 
RoaringPenguin package (<http://www.roaringpenguin.com/pppoe>)
which contains instruction on how to use this driver (under 
the heading "Kernel mode PPPoE").
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPPOATM</term>
<nutsynopsis>
	"PPP over ATM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && ATM && PPP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support PPP (Point to Point Protocol) encapsulated in ATM frames.
This implementation does not yet comply with section 8 of RFC2364,
which can lead to bad results if the ATM peer loses state and
changes its encapsulation unilaterally.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SLIP</term>
<nutsynopsis>
	"SLIP (serial line) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you intend to use SLIP or CSLIP (compressed SLIP) to
connect to your Internet service provider or to connect to some
other local Unix box or if you want to configure your Linux box as a
Slip/CSlip server for other people to dial in. SLIP (Serial Line
Internet Protocol) is a protocol used to send Internet traffic over
serial connections such as telephone lines or null modem cables;
nowadays, the protocol PPP is more commonly used for this same
purpose.

Normally, your access provider has to support SLIP in order for you
to be able to use it, but there is now a SLIP emulator called SLiRP
around (available from
<ftp://ibiblio.org/pub/Linux/system/network/serial/>) which
allows you to use SLIP over a regular dial up shell connection. If
you plan to use SLiRP, make sure to say Y to CSLIP, below. The
NET-3-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, explains how to
configure SLIP. Note that you don't need this option if you just
want to run term (term is a program which gives you almost full
Internet connectivity if you have a regular dial up shell account on
some Internet connected Unix computer. Read
<http://www.bart.nl/~patrickr/term-howto/Term-HOWTO.html>). SLIP
support will enlarge your kernel by about 4 KB. If unsure, say N.

To compile this driver as a module, choose M here and read
<file:Documentation/networking/net-modules.txt>. The module will be
called slip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SLIP_COMPRESSED</term>
<nutsynopsis>
	"CSLIP compressed headers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && SLIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This protocol is faster than SLIP because it uses compression on the
TCP/IP headers (not on the data itself), but it has to be supported
on both ends. Ask your access provider if you are not sure and
answer Y, just in case. You will still be able to use plain SLIP. If
you plan to use SLiRP, the SLIP emulator (available from
<ftp://ibiblio.org/pub/Linux/system/network/serial/>) which
allows you to use SLIP over a regular dial up shell connection, you
definitely want to say Y here. The NET-3-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, explains how to configure
CSLIP. This won't enlarge your kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SLIP_SMART</term>
<nutsynopsis>
	"Keepalive and linefill"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && SLIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Adds additional capabilities to the SLIP driver to support the
RELCOM line fill and keepalive monitoring. Ideal on poor quality
analogue lines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SLIP_MODE_SLIP6</term>
<nutsynopsis>
	"Six bit SLIP encapsulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && SLIP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Just occasionally you may need to run IP over hostile serial
networks that don't pass all control characters or are only seven
bit. Saying Y here adds an extra mode you can use with SLIP:
"slip6". In this mode, SLIP will only send normal ASCII symbols over
the serial device. Naturally, this has to be supported at the other
end of the link as well. It's good enough, for example, to run IP
over the async ports of a Camtec JNT Pad. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_FC</term>
<nutsynopsis>
	"Fibre Channel driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && SCSI && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Fibre Channel is a high speed serial protocol mainly used to connect
large storage devices to the computer; it is compatible with and
intended to replace SCSI.

If you intend to use Fibre Channel, you need to have a Fibre channel
adaptor card in your computer; say Y here and to the driver for your
adaptor below. You also should have said Y to "SCSI support" and
"SCSI generic support".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SHAPER</term>
<nutsynopsis>
	"Traffic Shaper (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The traffic shaper is a virtual network device that allows you to
limit the rate of outgoing data flow over some other network device.
The traffic that you want to slow down can then be routed through
these virtual devices. See
<file:Documentation/networking/shaper.txt> for more information.

An alternative to this traffic shaper is the experimental
Class-Based Queueing (CBQ) scheduling support which you get if you
say Y to "QoS and/or fair queueing" above.

To set up and configure shaper devices, you need the shapecfg
program, available from <ftp://shadow.cabi.net/pub/Linux/> in the
shaper package.

To compile this driver as a module, choose M here: the module
will be called shaper.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETCONSOLE</term>
<nutsynopsis>
	"Network console logging support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETDEVICES && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to log kernel messages over the network, enable this.
See <file:Documentation/networking/netconsole.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETPOLL</term>
	<para>
	default value
	<literal>NETCONSOLE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETPOLL_RX</term>
<nutsynopsis>
	"Netpoll support for trapping incoming packets"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETPOLL</literal>
	</para>

	<para>
	default value
	<literal>n if NETPOLL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NETPOLL_TRAP</term>
<nutsynopsis>
	"Netpoll traffic trapping"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NETPOLL</literal>
	</para>

	<para>
	default value
	<literal>n if NETPOLL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NET_POLL_CONTROLLER</term>
	<para>
	default value
	<literal>NETPOLL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ISDN subsystem"

<nutentry>
	<term>ISDN</term>
<nutsynopsis>
	"ISDN support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ISDN ("Integrated Services Digital Networks", called RNIS in France)
is a special type of fully digital telephone service; it's mostly
used to connect to your Internet service provider (with SLIP or
PPP).  The main advantage is that the speed is higher than ordinary
modem/telephone connections, and that you can have voice
conversations while downloading stuff.  It only works if your
computer is equipped with an ISDN card and both you and your service
provider purchased an ISDN line from the phone company.  For
details, read <http://www.alumni.caltech.edu/~dank/isdn/> on the WWW.

Select this option if you want your kernel to support ISDN.
	</para>

</nutentrybody>
</nutentry>

menu "Old ISDN4Linux"
<para>
	depends on
	<literal>NET && ISDN</literal>
	</para>


<nutentry>
	<term>ISDN_I4L</term>
<nutsynopsis>
	"Old ISDN4Linux (obsolete)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver allows you to use an ISDN-card for networking
connections and as dialin/out device.  The isdn-tty's have a built
in AT-compatible modem emulator.  Network devices support autodial,
channel-bundling, callback and caller-authentication without having
a daemon running.  A reduced T.70 protocol is supported with tty's
suitable for German BTX.  On D-Channel, the protocols EDSS1
(Euro-ISDN) and 1TR6 (German style) are supported.  See
<file:Documentation/isdn/README> for more information.

ISDN support in the linux kernel is moving towards a new API,
called CAPI (Common ISDN Application Programming Interface).
Therefore the old ISDN4Linux layer is becoming obsolete. It is 
still usable, though, if you select this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_PPP</term>
<nutsynopsis>
	"Support synchronous PPP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Over digital connections such as ISDN, there is no need to
synchronize sender and recipient's clocks with start and stop bits
as is done over analog telephone lines. Instead, one can use
"synchronous PPP". Saying Y here will include this protocol. This
protocol is used by Cisco and Sun for example. So you want to say Y
here if the other end of your ISDN connection supports it. You will
need a special version of pppd (called ipppd) for using this
feature. See <file:Documentation/isdn/README.syncppp> and
<file:Documentation/isdn/syncPPP.FAQ> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_PPP_VJ</term>
<nutsynopsis>
	"Use VJ-compression with synchronous PPP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_PPP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables Van Jacobson header compression for synchronous PPP.
Say Y if the other end of the connection supports it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_MPP</term>
<nutsynopsis>
	"Support generic MP (RFC 1717)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_PPP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
With synchronous PPP enabled, it is possible to increase throughput
by bundling several ISDN-connections, using this protocol. See
<file:Documentation/isdn/README.syncppp> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPPP_FILTER</term>
<nutsynopsis>
	"Filtering for synchronous PPP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_PPP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to be able to filter the packets passing over
IPPP interfaces.  This allows you to control which packets count as
activity (i.e. which packets will reset the idle timer or bring up
a demand-dialled link) and which packets are to be dropped entirely.
You need to say Y here if you wish to use the pass-filter and
active-filter options to ipppd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_PPP_BSDCOMP</term>
<nutsynopsis>
	"Support BSD compression"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_PPP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the BSD-Compress compression method for PPP, which uses
the LZW compression method to compress each PPP packet before it is
sent over the wire. The machine at the other end of the PPP link
(usually your ISP) has to support the BSD-Compress compression
method as well for this to be useful. Even if they don't support it,
it is safe to say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_AUDIO</term>
<nutsynopsis>
	"Support audio via ISDN"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the modem-emulator will support a subset of the
EIA Class 8 Voice commands. Using a getty with voice-support
(mgetty+sendfax by <gert@greenie.muc.de> with an extension, available
with the ISDN utility package for example), you will be able to use
your Linux box as an ISDN-answering machine. Of course, this must be
supported by the lowlevel driver also. Currently, the HiSax driver
is the only voice-supporting driver. See
<file:Documentation/isdn/README.audio> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_TTY_FAX</term>
<nutsynopsis>
	"Support AT-Fax Class 1 and 2 commands"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_AUDIO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the modem-emulator will support a subset of the
Fax Class 1 and 2 commands. Using a getty with fax-support
(mgetty+sendfax, hylafax), you will be able to use your Linux box as
an ISDN-fax-machine. This must be supported by the lowlevel driver
also. See <file:Documentation/isdn/README.fax> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_X25</term>
<nutsynopsis>
	"X.25 PLP on top of ISDN"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && X25</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This feature provides the X.25 protocol over ISDN connections.
See <file:Documentation/isdn/README.x25> for more information
if you are thinking about using this.
	</para>

</nutentrybody>
</nutentry>

menu "ISDN feature submodules"
<para>
	depends on
	<literal>NET && ISDN_I4L && ISDN</literal>
	</para>


<nutentry>
	<term>ISDN_DRV_LOOP</term>
<nutsynopsis>
	"isdnloop support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN_I4L && ISDN && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides a virtual ISDN card. Its primary purpose is
testing of linklevel features or configuration without getting
charged by your service-provider for lots of phone calls.
You need will need the loopctrl utility from the latest isdn4k-utils
package to set up this driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVERSION</term>
<nutsynopsis>
	"Support isdn diversion services"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option allows you to use some supplementary diversion
services in conjunction with the HiSax driver on an EURO/DSS1
line.

Supported options are CD (call deflection), CFU (Call forward
unconditional), CFB (Call forward when busy) and CFNR (call forward
not reachable). Additionally the actual CFU, CFB and CFNR state may
be interrogated.

The use of CFU, CFB, CFNR and interrogation may be limited to some
countries. The keypad protocol is still not implemented. CD should
work in all countries if the service has been subscribed to.

Please read the file <file:Documentation/isdn/README.diversion>.
	</para>

</nutentrybody>
</nutentry>

endmenu

comment "ISDN4Linux hardware drivers"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L</literal>
	</para>



menu "Passive cards"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L</literal>
	</para>


<nutentry>
	<term>ISDN_DRV_HISAX</term>
<nutsynopsis>
	"HiSax SiemensChipSet driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver supporting the Siemens chipset on various
ISDN-cards (like AVM A1, Elsa ISDN cards, Teles S0-16.0, Teles
S0-16.3, Teles S0-8, Teles/Creatix PnP, ITK micro ix1 and many
compatibles).

HiSax is just the name of this driver, not the name of any hardware.

If you have a card with such a chipset, you should say Y here and
also to the configuration option of the driver for your particular
card, below.
	</para>

</nutentrybody>
</nutentry>

comment "D-channel protocol features"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX!=n</literal>
	</para>


<nutentry>
	<term>HISAX_EURO</term>
<nutsynopsis>
	"HiSax Support for EURO/DSS1"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y or N according to the D-channel protocol which your local
telephone service company provides.

The call control protocol E-DSS1 is used in most European countries.
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DE_AOC</term>
<nutsynopsis>
	"Support for german chargeinfo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want that the HiSax hardware driver sends messages to the
upper level of the isdn code on each AOCD (Advice Of Charge, During
the call -- transmission of the fee information during a call) and
on each AOCE (Advice Of Charge, at the End of the call --
transmission of fee information at the end of the call), say Y here.
This works only in Germany.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NO_SENDCOMPLETE</term>
<nutsynopsis>
	"Disable sending complete"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have trouble with some ugly exchanges or you live in
Australia select this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NO_LLC</term>
<nutsynopsis>
	"Disable sending low layer compatibility"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have trouble with some ugly exchanges try to select this
option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NO_KEYPAD</term>
<nutsynopsis>
	"Disable keypad protocol option"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you like to send special dial strings including * or # without
using the keypad protocol, select this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_1TR6</term>
<nutsynopsis>
	"HiSax Support for german 1TR6"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y or N according to the D-channel protocol which your local
telephone service company provides.

1TR6 is an old call control protocol which was used in Germany
before E-DSS1 was established. Nowadays, all new lines in Germany
use E-DSS1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NI1</term>
<nutsynopsis>
	"HiSax Support for US NI1"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable this if you like to use ISDN in US on a NI1 basic rate
interface.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_MAX_CARDS</term>
<nutsynopsis>
	"Maximum number of cards supported by HiSax"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	default value
	<literal>8 if NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option allows you to specify the maximum number of cards which
the HiSax driver will be able to handle.  
	</para>

</nutentrybody>
</nutentry>

comment "HiSax supported cards"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX!=n</literal>
	</para>


<nutentry>
	<term>HISAX_16_0</term>
<nutsynopsis>
	"Teles 16.0/8.0"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Teles ISDN-cards S0-16.0, S0-8
and many compatibles.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port/shmem settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_16_3</term>
<nutsynopsis>
	"Teles 16.3 or PNP or PCMCIA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Teles ISDN-cards S0-16.3 the
Teles/Creatix PnP and the Teles PCMCIA.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_TELESPCI</term>
<nutsynopsis>
	"Teles PCI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC64 && !PPC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Teles PCI.
See <file:Documentation/isdn/README.HiSax> on how to configure it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_S0BOX</term>
<nutsynopsis>
	"Teles S0Box"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Teles/Creatix parallel port
S0BOX.  See <file:Documentation/isdn/README.HiSax> on how to
configure it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_AVM_A1</term>
<nutsynopsis>
	"AVM A1 (Fritz)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the AVM A1 (aka "Fritz").

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_FRITZPCI</term>
<nutsynopsis>
	"AVM PnP/PCI (Fritz!PnP/PCI)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the AVM "Fritz!PnP" and "Fritz!PCI".
See <file:Documentation/isdn/README.HiSax> on how to configure it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_AVM_A1_PCMCIA</term>
<nutsynopsis>
	"AVM A1 PCMCIA (Fritz)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the AVM A1 "Fritz!PCMCIA").
See <file:Documentation/isdn/README.HiSax> on how to configure it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_ELSA</term>
<nutsynopsis>
	"Elsa cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Elsa Mircolink ISA cards, for the
Elsa Quickstep series cards and Elsa PCMCIA.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_IX1MICROR2</term>
<nutsynopsis>
	"ITK ix1-micro Revision 2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the ITK ix1-micro Revision 2 card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_DIEHLDIVA</term>
<nutsynopsis>
	"Eicon.Diehl Diva cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Eicon.Diehl Diva none PRO
versions passive ISDN cards.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_ASUSCOM</term>
<nutsynopsis>
	"ASUSCOM ISA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the AsusCom and their OEM versions
passive ISDN ISA cards.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_TELEINT</term>
<nutsynopsis>
	"TELEINT cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the TELEINT SA1 semiactiv ISDN card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HFCS</term>
<nutsynopsis>
	"HFC-S based cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the HFC-S 2BDS0 based cards, like
teles 16.3c.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_SEDLBAUER</term>
<nutsynopsis>
	"Sedlbauer cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Sedlbauer passive ISDN cards.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using the different cards, a different D-channel protocol, or
non-standard IRQ/port settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_SPORTSTER</term>
<nutsynopsis>
	"USR Sportster internal TA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the USR Sportster internal TA card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_MIC</term>
<nutsynopsis>
	"MIC card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the ITH MIC card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NETJET</term>
<nutsynopsis>
	"NETjet card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC64 && !PPC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the NetJet from Traverse
Technologies.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NETJET_U</term>
<nutsynopsis>
	"NETspider U card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC64 && !PPC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Netspider U interface ISDN card
from Traverse Technologies.
See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_NICCY</term>
<nutsynopsis>
	"Niccy PnP/PCI card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Dr. Neuhaus Niccy PnP or PCI.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_ISURF</term>
<nutsynopsis>
	"Siemens I-Surf card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Siemens I-Talk/I-Surf card with
ISAR chip.
See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HSTSAPHIR</term>
<nutsynopsis>
	"HST Saphir card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the HST Saphir card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_BKM_A4T</term>
<nutsynopsis>
	"Telekom A4T card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Telekom A4T card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_SCT_QUADRO</term>
<nutsynopsis>
	"Scitel Quadro card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Scitel Quadro card.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_GAZEL</term>
<nutsynopsis>
	"Gazel cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Gazel cards.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HFC_PCI</term>
<nutsynopsis>
	"HFC PCI-Bus cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC64 && !PPC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the HFC-S PCI 2BDS0 based cards.

For more informations see under
<file:Documentation/isdn/README.hfc-pci>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_W6692</term>
<nutsynopsis>
	"Winbond W6692 based cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for Winbond W6692 based PCI ISDN cards.

See <file:Documentation/isdn/README.HiSax> on how to configure it
using a different D-channel protocol, or non-standard IRQ/port
settings.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HFC_SX</term>
<nutsynopsis>
	"HFC-S+, HFC-SP, HFC-PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the HFC-S+, HFC-SP and HFC-PCMCIA
cards. This code is not finished yet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_ENTERNOW_PCI</term>
<nutsynopsis>
	"Formula-n enter:now PCI card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC64 && !PPC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the Formula-n enter:now PCI
ISDN card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_AMD7930</term>
<nutsynopsis>
	"Am7930 (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL && (SPARC32 || SPARC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the AMD7930 chips on some SPARCs.
This code is not finished yet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_DEBUG</term>
<nutsynopsis>
	"HiSax debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables debugging code in the new-style HiSax drivers, i.e.
the ST5481 USB driver currently. 
If in doubt, say yes.
	</para>

</nutentrybody>
</nutentry>

comment "HiSax PCMCIA card service modules"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>


<nutentry>
	<term>HISAX_SEDLBAUER_CS</term>
<nutsynopsis>
	"Sedlbauer PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the PCMCIA client driver for the Sedlbauer Speed Star
and Speed Star II cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_ELSA_CS</term>
<nutsynopsis>
	"ELSA PCMCIA MicroLink cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the PCMCIA client driver for the Elsa PCMCIA MicroLink
card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_AVM_A1_CS</term>
<nutsynopsis>
	"AVM A1 PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the PCMCIA client driver for the AVM A1 / Fritz!Card
PCMCIA cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_TELES_CS</term>
<nutsynopsis>
	"TELES PCMCIA cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the PCMCIA client driver for the Teles PCMCIA cards.
	</para>

</nutentrybody>
</nutentry>

comment "HiSax sub driver modules"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX</literal>
	</para>


<nutentry>
	<term>HISAX_ST5481</term>
<nutsynopsis>
	"ST5481 USB ISDN modem (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for ST5481 based USB ISDN adapters,
e.g. the BeWan Gazel 128 USB
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HFCUSB</term>
<nutsynopsis>
	"HFC USB based ISDN modems (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for HFC USB based ISDN modems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HFC4S8S</term>
<nutsynopsis>
	"HFC-4S/8S based ISDN cards (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for HFC-4S/8S based ISDN cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_FRITZ_PCIPNP</term>
<nutsynopsis>
	"AVM Fritz!Card PCI/PCIv2/PnP support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the driver for the AVM Fritz!Card PCI,
Fritz!Card PCI v2 and Fritz!Card PnP.
(the latter also needs you to select "ISA Plug and Play support"
from the menu "Plug and Play configuration")
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_HDLC</term>
	<para>
	default value
	<literal>y if NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_ST5481</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HISAX_AVM_A1_PCMCIA</term>
	<para>
	default value
	<literal>y if NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables HiSax support for the AVM A1 "Fritz!PCMCIA").
See <file:Documentation/isdn/README.HiSax> on how to configure it.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Active cards"
<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L</literal>
	</para>


<nutentry>
	<term>ISDN_DRV_ICN</term>
<nutsynopsis>
	"ICN 2B and 4B support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for two kinds of ISDN-cards made by a German
company called ICN.  2B is the standard version for a single ISDN
line with two B-channels, 4B supports two ISDN lines.  For running
this card, additional firmware is necessary, which has to be
downloaded into the card using a utility which is distributed
separately.  See <file:Documentation/isdn/README> and
<file:Documentation/isdn/README.icn> for more
information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_PCBIT</term>
<nutsynopsis>
	"PCBIT-D support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISA && (BROKEN || !PPC)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the PCBIT ISDN-card.  This card is
manufactured in Portugal by Octal.  For running this card,
additional firmware is necessary, which has to be downloaded into
the card using a utility which is distributed separately.  See
<file:Documentation/isdn/README> and
<file:Documentation/isdn/README.pcbit> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_SC</term>
<nutsynopsis>
	"Spellcaster support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Spellcaster BRI ISDN boards.  This
driver currently builds only in a modularized version.
To build it, choose M here: the module will be called sc.
See <file:Documentation/isdn/README.sc> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_ACT2000</term>
<nutsynopsis>
	"IBM Active 2000 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an IBM Active 2000 ISDN card. In order to use
this card, additional firmware is necessary, which has to be loaded
into the card using a utility which is part of the latest
isdn4k-utils package. Please read the file
<file:Documentation/isdn/README.act2000> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HYSDN</term>
<nutsynopsis>
	"Hypercope HYSDN cards (Champ, Ergo, Metro) support (module only)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && m && MODULES && PROC_FS && PCI && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have one of Hypercope's active PCI ISDN cards
Champ, Ergo and Metro. You will then get a module called hysdn.
Please read the file <file:Documentation/isdn/README.hysdn> for more
information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HYSDN_CAPI</term>
<nutsynopsis>
	"HYSDN CAPI 2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_I4L && HYSDN && ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you like to use Hypercope's CAPI 2.0 interface.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

comment "CAPI subsystem"
<para>
	depends on
	<literal>NET && ISDN</literal>
	</para>


<nutentry>
	<term>ISDN_CAPI</term>
<nutsynopsis>
	"CAPI2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISDN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides the CAPI (Common ISDN Application Programming
Interface, a standard making it easy for programs to access ISDN
hardware, see <http://www.capi.org/>.  This is needed for AVM's set
of active ISDN controllers like B1, T1, M1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_VERBOSE_REASON</term>
<nutsynopsis>
	"Verbose reason code reporting (kernel size +=7K)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the AVM B1 driver will give verbose reasons for
disconnecting. This will increase the size of the kernel by 7 KB. If
unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_CAPI_MIDDLEWARE</term>
<nutsynopsis>
	"CAPI2.0 Middleware support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISDN_CAPI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will enhance the capabilities of the /dev/capi20
interface.  It will provide a means of moving a data connection,
established via the usual /dev/capi20 interface to a special tty
device.  If you want to use pppd with pppdcapiplugin to dial up to
your ISP, say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_CAPI_CAPI20</term>
<nutsynopsis>
	"CAPI2.0 /dev/capi support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option will provide the CAPI 2.0 interface to userspace
applications via /dev/capi20. Applications should use the
standardized libcapi20 to access this functionality.  You should say
Y/M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_CAPI_CAPIFS_BOOL</term>
<nutsynopsis>
	"CAPI2.0 filesystem support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_CAPI_CAPIFS</term>
	<para>
	default value
	<literal>ISDN_CAPI_CAPI20 if ISDN_CAPI_CAPIFS_BOOL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option provides a special file system, similar to /dev/pts with
device nodes for the special ttys established by using the
middleware extension above. If you want to use pppd with
pppdcapiplugin to dial up to your ISP, say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_CAPI_CAPIDRV</term>
<nutsynopsis>
	"CAPI2.0 capidrv interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISDN_CAPI && ISDN_I4L</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option provides the glue code to hook up CAPI driven cards to
the legacy isdn4linux link layer.  If you have a card which is
supported by a CAPI driver, but still want to use old features like
ippp interfaces or ttyI emulation, say Y/M here.
	</para>

</nutentrybody>
</nutentry>

comment "CAPI hardware drivers"
<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI</literal>
	</para>



menu "Active AVM cards"
<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI!=n</literal>
	</para>


<nutentry>
	<term>CAPI_AVM</term>
<nutsynopsis>
	"Support AVM cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable support for AVM active ISDN cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_B1ISA</term>
<nutsynopsis>
	"AVM B1 ISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && CAPI_AVM && ISDN_CAPI && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the ISA version of the AVM B1 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_B1PCI</term>
<nutsynopsis>
	"AVM B1 PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the PCI version of the AVM B1 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_B1PCIV4</term>
<nutsynopsis>
	"AVM B1 PCI V4 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI && ISDN_DRV_AVMB1_B1PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable support for the V4 version of AVM B1 PCI card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_T1ISA</term>
<nutsynopsis>
	"AVM T1/T1-B ISA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && CAPI_AVM && ISDN_CAPI && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the AVM T1 T1B card.
Note: This is a PRI card and handle 30 B-channels.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_B1PCMCIA</term>
<nutsynopsis>
	"AVM B1/M1/M2 PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && CAPI_AVM && ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the PCMCIA version of the AVM B1 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_AVM_CS</term>
<nutsynopsis>
	"AVM B1/M1/M2 PCMCIA cs module"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI!=n && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable the PCMCIA client driver for the AVM B1/M1/M2
PCMCIA cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_T1PCI</term>
<nutsynopsis>
	"AVM T1/T1-B PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the AVM T1 T1B card.
Note: This is a PRI card and handle 30 B-channels.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DRV_AVMB1_C4</term>
<nutsynopsis>
	"AVM C4/C2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the AVM C4/C2 PCI cards.
These cards handle 4/2 BRI ISDN lines (8/4 channels).
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Active Eicon DIVA Server cards"
<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI!=n</literal>
	</para>


<nutentry>
	<term>CAPI_EICON</term>
<nutsynopsis>
	"Support Eicon cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable support for Eicon Networks active ISDN cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVAS</term>
<nutsynopsis>
	"Support Eicon DIVA Server cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI!=n && CAPI_EICON && PROC_FS && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Eicon Networks DIVA Server PCI ISDN card.
In order to use this card, additional firmware is necessary, which
has to be downloaded into the card using the divactrl utility.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVAS_BRIPCI</term>
<nutsynopsis>
	"DIVA Server BRI/PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI && ISDN_DIVAS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable support for DIVA Server BRI-PCI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVAS_PRIPCI</term>
<nutsynopsis>
	"DIVA Server PRI/PCI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI && ISDN_DIVAS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable support for DIVA Server PRI-PCI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVAS_DIVACAPI</term>
<nutsynopsis>
	"DIVA CAPI2.0 interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_DIVAS && ISDN_CAPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
You need this to provide the CAPI interface
for DIVA Server cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVAS_USERIDI</term>
<nutsynopsis>
	"DIVA User-IDI interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI!=n && ISDN_DIVAS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for user-mode IDI interface.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISDN_DIVAS_MAINT</term>
<nutsynopsis>
	"DIVA Maint driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && ISDN && ISDN_CAPI!=n && ISDN_DIVAS && m && MODULES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable Divas Maintainance driver.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Telephony Support"

<nutentry>
	<term>PHONE</term>
<nutsynopsis>
	"Linux telephony support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a telephony card, which for example allows
you to use a regular phone for voice-over-IP applications.

Note: this has nothing to do with modems.  You do not need to say Y
here in order to be able to use a modem under Linux.

To compile this driver as a module, choose M here: the
module will be called phonedev.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PHONE_IXJ</term>
<nutsynopsis>
	"QuickNet Internet LineJack/PhoneJack support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PHONE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say M if you have a telephony card manufactured by Quicknet
Technologies, Inc.  These include the Internet PhoneJACK and
Internet LineJACK Telephony Cards. You will get a module called
ixj.

For the ISA versions of these products, you can configure the
cards using the isapnp tools (pnpdump/isapnp) or you can use the
isapnp support.  Please read <file:Documentation/telephony/ixj.txt>.

For more information on these cards, see Quicknet's web site at:
<http://www.quicknet.net/>.

If you do not have any Quicknet telephony cards, you can safely
say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PHONE_IXJ_PCMCIA</term>
<nutsynopsis>
	"QuickNet Internet LineJack/PhoneJack PCMCIA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PHONE_IXJ && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to configure in PCMCIA service support for the Quicknet
cards manufactured by Quicknet Technologies, Inc.  This changes the
card initialization code to work with the card manager daemon.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Input device support"

<nutentry>
	<term>INPUT</term>
<nutsynopsis>
	"Generic input layer (needed for keyboard, mouse, ...)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have any input device (mouse, keyboard, tablet,
joystick, steering wheel ...) connected to your system and want
it to be available to applications. This includes standard PS/2
keyboard and mouse.

Say N here if you have a headless (no monitor, no keyboard) system.

More information is available: <file:Documentation/input/input.txt>

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called input.
	</para>

</nutentrybody>
</nutentry>

comment "Userland interfaces"
<para>
	depends on
	<literal>INPUT</literal>
	</para>


<nutentry>
	<term>INPUT_MOUSEDEV</term>
<nutsynopsis>
	"Mouse interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want your mouse to be accessible as char devices
13:32+ - /dev/input/mouseX and 13:63 - /dev/input/mice as an
emulated IntelliMouse Explorer PS/2 mouse. That way, all user space
programs (including SVGAlib, GPM and X) will be able to use your
mouse.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called mousedev.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_MOUSEDEV_PSAUX</term>
<nutsynopsis>
	"Provide legacy /dev/psaux device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSEDEV</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_MOUSEDEV</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want your mouse also be accessible as char device
10:1 - /dev/psaux. The data available through /dev/psaux is exactly
the same as the data from /dev/input/mice.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_MOUSEDEV_SCREEN_X</term>
<nutsynopsis>
	"Horizontal screen resolution"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSEDEV</literal>
	</para>

	<para>
	default value
	<literal>1024 if INPUT && INPUT_MOUSEDEV</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
If you're using a digitizer, or a graphic tablet, and want to use
it as a mouse then the mousedev driver needs to know the X window
screen resolution you are using to correctly scale the data. If
you're not using a digitizer, this value is ignored.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_MOUSEDEV_SCREEN_Y</term>
<nutsynopsis>
	"Vertical screen resolution"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSEDEV</literal>
	</para>

	<para>
	default value
	<literal>768 if INPUT && INPUT_MOUSEDEV</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
If you're using a digitizer, or a graphic tablet, and want to use
it as a mouse then the mousedev driver needs to know the X window
screen resolution you are using to correctly scale the data. If
you're not using a digitizer, this value is ignored.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_JOYDEV</term>
<nutsynopsis>
	"Joystick interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want your joystick or gamepad to be
accessible as char device 13:0+ - /dev/input/jsX device.

If unsure, say Y.

More information is available: <file:Documentation/input/joystick.txt>

To compile this driver as a module, choose M here: the
module will be called joydev.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_TSDEV</term>
<nutsynopsis>
	"Touchscreen interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an application that only can understand the
Compaq touchscreen protocol for absolute pointer data. This is
useful namely for embedded configurations.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called tsdev.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_TSDEV_SCREEN_X</term>
<nutsynopsis>
	"Horizontal screen resolution"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TSDEV</literal>
	</para>

	<para>
	default value
	<literal>240 if INPUT && INPUT_TSDEV</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_TSDEV_SCREEN_Y</term>
<nutsynopsis>
	"Vertical screen resolution"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TSDEV</literal>
	</para>

	<para>
	default value
	<literal>320 if INPUT && INPUT_TSDEV</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_EVDEV</term>
<nutsynopsis>
	"Event interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want your input device events be accessible
under char device 13:64+ - /dev/input/eventX in a generic way.

To compile this driver as a module, choose M here: the
module will be called evdev.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_EVBUG</term>
<nutsynopsis>
	"Event debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a problem with the input subsystem and
want all events (keypresses, mouse movements), to be output to
the system log. While this is useful for debugging, it's also
a security threat - your keypresses include your passwords, of
course.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called evbug.
	</para>

</nutentrybody>
</nutentry>

comment "Input Device Drivers"
<para>
	depends on
	<literal>INPUT</literal>
	</para>


<nutentry>
	<term>INPUT_KEYBOARD</term>
  unknown prop 3!
	<para>
	default value
	<literal>y if INPUT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here, and a list of supported keyboards will be displayed.
This option doesn't affect the kernel.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_ATKBD</term>
<nutsynopsis>
	"AT keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && !PC</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_KEYBOARD</literal>
	</para>


  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a standard AT or PS/2 keyboard. Usually
you'll need this, unless you have a different type keyboard (USB, ADB
or other). This also works for AT and PS/2 keyboards connected over a
PS/2 to serial converter.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called atkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_ATKBD_HP_KEYCODES</term>
<nutsynopsis>
	"Use HP keyboard scancodes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a PA-RISC machine and want to use an AT or
PS/2 keyboard, and your keyboard uses keycodes that are specific to
PA-RISC keyboards.

Say N if you use a standard keyboard.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_ATKBD_RDI_KEYCODES</term>
<nutsynopsis>
	"Use PrecisionBook keyboard scancodes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES</literal>
	</para>

	<para>
	default value
	<literal>n if INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an RDI PrecisionBook, say Y here if you want to use its
built-in keyboard (as opposed to an external keyboard).

The PrecisionBook has five keys that conflict with those used by most
AT and PS/2 keyboards. These are as follows:

  PrecisionBook    Standard AT or PS/2

  F1               F12
  Left Ctrl        Left Alt
  Caps Lock        Left Ctrl
  Right Ctrl       Caps Lock
  Left             102nd key (the key to the right of Left Shift)

If you say N here, and use the PrecisionBook keyboard, then each key
in the left-hand column will be interpreted as the corresponding key
in the right-hand column.

If you say Y here, and use an external keyboard, then each key in the
right-hand column will be interpreted as the key shown in the
left-hand column.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_SUNKBD</term>
<nutsynopsis>
	"Sun Type 4 and Type 5 keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a Sun Type 4 or Type 5 keyboard,
connected either to the Sun keyboard connector or to an serial
(RS-232) port via a simple adapter.

To compile this driver as a module, choose M here: the
module will be called sunkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_LKKBD</term>
<nutsynopsis>
	"DECstation/VAXstation LK201/LK401 keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a LK201 or LK401 style serial
keyboard. This keyboard is also useable on PCs if you attach
it with the inputattach program. The connector pinout is
described within lkkbd.c.

To compile this driver as a module, choose M here: the
module will be called lkkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_LOCOMO</term>
<nutsynopsis>
	"LoCoMo Keyboard Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && SHARP_LOCOMO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you are running Linux on a Sharp Zaurus Collie or Poodle based PDA

To compile this driver as a module, choose M here: the
module will be called locomokbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_XTKBD</term>
<nutsynopsis>
	"XT keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the old IBM PC/XT keyboard (or
compatible) on your system. This is only possible with a
parallel port keyboard adapter, you cannot connect it to the
keyboard port on a PC that runs Linux.

To compile this driver as a module, choose M here: the
module will be called xtkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_NEWTON</term>
<nutsynopsis>
	"Newton keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Newton keyboard on a serial port.

To compile this driver as a module, choose M here: the
module will be called newtonkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_CORGI</term>
<nutsynopsis>
	"Corgi keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && PXA_SHARPSL</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_KEYBOARD && PXA_SHARPSL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable the keyboard on the Sharp Zaurus SL-C7xx 
series of PDAs.

To compile this driver as a module, choose M here: the 
module will be called corgikbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_SPITZ</term>
<nutsynopsis>
	"Spitz keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && PXA_SHARPSL</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_KEYBOARD && PXA_SHARPSL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable the keyboard on the Sharp Zaurus SL-C1000,
SL-C3000 and Sl-C3100 series of PDAs.

To compile this driver as a module, choose M here: the
module will be called spitzkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_MAPLE</term>
<nutsynopsis>
	"Maple bus keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a DreamCast console running Linux and have
a keyboard attached to its Maple bus.

To compile this driver as a module, choose M here: the
module will be called maple_keyb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_AMIGA</term>
<nutsynopsis>
	"Amiga keyboard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && AMIGA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you are running Linux on any AMIGA and have a keyboard
attached.

To compile this driver as a module, choose M here: the
module will be called amikbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_HIL_OLD</term>
<nutsynopsis>
	"HP HIL keyboard support (simple driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && GSC</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_KEYBOARD && GSC</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The "Human Interface Loop" is a older, 8-channel USB-like
controller used in several Hewlett Packard models. This driver
was adapted from the one written for m68k/hp300, and implements
support for a keyboard attached to the HIL port, but not for
any other types of HIL input devices like mice or tablets.
However, it has been thoroughly tested and is stable.

If you want full HIL support including support for multiple
keyboards, mices and tablets, you have to enable the
"HP System Device Controller i8042 Support" in the input/serio
submenu.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYBOARD_HIL</term>
<nutsynopsis>
	"HP HIL keyboard support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_KEYBOARD && GSC</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_KEYBOARD && GSC</literal>
	</para>


  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The "Human Interface Loop" is a older, 8-channel USB-like
controller used in several Hewlett Packard models.
This driver implements support for HIL-keyboards attached
to your machine, so normally you should say Y here.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>INPUT_MOUSE</term>
  unknown prop 3!
	<para>
	default value
	<literal>y if INPUT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here, and a list of supported mice will be displayed.
This option doesn't affect the kernel.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_PS2</term>
<nutsynopsis>
	"PS/2 mouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_MOUSE</literal>
	</para>


  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a PS/2 mouse connected to your system. This
includes the standard 2 or 3-button PS/2 mouse, as well as PS/2
mice with wheels and extra buttons, Microsoft, Logitech or Genius
compatible.

Synaptics TouchPad users might be interested in a specialized
XFree86 driver at:
      <http://w1.894.telia.com/~u89404340/touchpad/index.html>
and a new version of GPM at:
      <http://www.geocities.com/dt_or/gpm/gpm.html>
to take advantage of the advanced features of the touchpad.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called psmouse.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_SERIAL</term>
<nutsynopsis>
	"Serial mouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a serial (RS-232, COM port) mouse connected
to your system. This includes Sun, MouseSystems, Microsoft,
Logitech and all other compatible serial mice.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called sermouse.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_INPORT</term>
<nutsynopsis>
	"InPort/MS/ATIXL busmouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an InPort, Microsoft or ATI XL busmouse.
They are rather rare these days.

To compile this driver as a module, choose M here: the
module will be called inport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_ATIXL</term>
<nutsynopsis>
	"ATI XL variant"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && MOUSE_INPORT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if your mouse is of the ATI XL variety.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_LOGIBM</term>
<nutsynopsis>
	"Logitech busmouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Logitech busmouse.
They are rather rare these days.

To compile this driver as a module, choose M here: the
module will be called logibm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_PC110PAD</term>
<nutsynopsis>
	"IBM PC110 touchpad"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you have the IBM PC-110 micro-notebook and want its
touchpad supported.

To compile this driver as a module, choose M here: the
module will be called pc110pad.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_MAPLE</term>
<nutsynopsis>
	"Maple bus mouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && SH_DREAMCAST && MAPLE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you have a DreamCast console and a mouse attached to
its Maple bus.

To compile this driver as a module, choose M here: the
module will be called maplemouse.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_AMIGA</term>
<nutsynopsis>
	"Amiga mouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && AMIGA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Amiga and want its native mouse
supported by the kernel.

To compile this driver as a module, choose M here: the
module will be called amimouse.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_RISCPC</term>
<nutsynopsis>
	"Acorn RiscPC mouse"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && ARCH_ACORN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the Acorn RiscPC computer and want its
native mouse supported.

To compile this driver as a module, choose M here: the
module will be called rpcmouse.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_VSXXXAA</term>
<nutsynopsis>
	"DEC VSXXX-AA/GA mouse and VSXXX-AB tablet"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y (or M) if you want to use a DEC VSXXX-AA (hockey
puck) or a VSXXX-GA (rectangular) mouse. Theses mice are
typically used on DECstations or VAXstations, but can also
be used on any box capable of RS232 (with some adaptor
described in the source file). This driver also works with the
digitizer (VSXXX-AB) DEC produced.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOUSE_HIL</term>
<nutsynopsis>
	"HIL pointers (mice etc)."
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MOUSE && GSC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support HIL pointers.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>INPUT_JOYSTICK</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a joystick, 6dof controller, gamepad, steering wheel,
weapon control system or something like that you can say Y here
and the list of supported devices will be displayed. This option
doesn't affect the kernel.

Please read the file <file:Documentation/input/joystick.txt> which
contains more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_ANALOG</term>
<nutsynopsis>
	"Classic PC analog joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a joystick that connects to the PC
gameport. In addition to the usual PC analog joystick, this driver
supports many extensions, including joysticks with throttle control,
with rudders, additional hats and buttons compatible with CH
Flightstick Pro, ThrustMaster FCS, 6 and 8 button gamepads, or
Saitek Cyborg joysticks.

Please read the file <file:Documentation/input/joystick.txt> which
contains more information.

To compile this driver as a module, choose M here: the
module will be called analog.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_A3D</term>
<nutsynopsis>
	"Assasin 3D and MadCatz Panther devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an FPGaming or MadCatz controller using the
A3D protocol over the PC gameport.

To compile this driver as a module, choose M here: the
module will be called a3d.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_ADI</term>
<nutsynopsis>
	"Logitech ADI digital joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Logitech controller using the ADI
protocol over the PC gameport.

To compile this driver as a module, choose M here: the
module will be called adi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_COBRA</term>
<nutsynopsis>
	"Creative Labs Blaster Cobra gamepad"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Creative Labs Blaster Cobra gamepad.

To compile this driver as a module, choose M here: the
module will be called cobra.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_GF2K</term>
<nutsynopsis>
	"Genius Flight2000 Digital joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Genius Flight2000 or MaxFighter digitally
communicating joystick or gamepad.

To compile this driver as a module, choose M here: the
module will be called gf2k.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_GRIP</term>
<nutsynopsis>
	"Gravis GrIP joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Gravis controller using the GrIP protocol
over the PC gameport.

To compile this driver as a module, choose M here: the
module will be called grip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_GRIP_MP</term>
<nutsynopsis>
	"Gravis GrIP MultiPort"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the original Gravis GrIP MultiPort, a hub
that connects to the gameport and you connect gamepads to it.

To compile this driver as a module, choose M here: the
module will be called grip_mp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_GUILLEMOT</term>
<nutsynopsis>
	"Guillemot joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Guillemot joystick using a digital
protocol over the PC gameport.

To compile this driver as a module, choose M here: the
module will be called guillemot.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_INTERACT</term>
<nutsynopsis>
	"InterAct digital joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an InterAct gameport or joystick
communicating digitally over the gameport.

To compile this driver as a module, choose M here: the
module will be called interact.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_SIDEWINDER</term>
<nutsynopsis>
	"Microsoft SideWinder digital joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Microsoft controller using the Digital
Overdrive protocol over PC gameport.

To compile this driver as a module, choose M here: the
module will be called sidewinder.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_TMDC</term>
<nutsynopsis>
	"ThrustMaster DirectConnect joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a ThrustMaster controller using the
DirectConnect (BSP) protocol over the PC gameport.

To compile this driver as a module, choose M here: the
module will be called tmdc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_IFORCE</term>
<nutsynopsis>
	"I-Force devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an I-Force joystick or steering wheel

You also must choose at least one of the two options below.

To compile this driver as a module, choose M here: the
module will be called iforce.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_IFORCE_USB</term>
<nutsynopsis>
	"I-Force USB joysticks and wheels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE=m || USB=y) && USB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have an I-Force joystick or steering wheel
connected to your USB port.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_IFORCE_232</term>
<nutsynopsis>
	"I-Force Serial joysticks and wheels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE=m || SERIO=y) && SERIO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have an I-Force joystick or steering wheel
connected to your serial (COM) port.

You will need an additional utility called inputattach, see
<file:Documentation/input/joystick.txt>
and <file:Documentation/input/ff.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_WARRIOR</term>
<nutsynopsis>
	"Logitech WingMan Warrior joystick"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Logitech WingMan Warrior joystick connected
to your computer's serial port.

To compile this driver as a module, choose M here: the
module will be called warrior.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_MAGELLAN</term>
<nutsynopsis>
	"LogiCad3d Magellan/SpaceMouse 6dof controllers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Magellan or Space Mouse 6DOF controller
connected to your computer's serial port.

To compile this driver as a module, choose M here: the
module will be called magellan.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_SPACEORB</term>
<nutsynopsis>
	"SpaceTec SpaceOrb/Avenger 6dof controllers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a SpaceOrb 360 or SpaceBall Avenger 6DOF
controller connected to your computer's serial port.

To compile this driver as a module, choose M here: the
module will be called spaceorb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_SPACEBALL</term>
<nutsynopsis>
	"SpaceTec SpaceBall 6dof controllers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a SpaceTec SpaceBall 2003/3003/4000 FLX
controller connected to your computer's serial port. For the
SpaceBall 4000 USB model, use the USB HID driver.

To compile this driver as a module, choose M here: the
module will be called spaceball.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_STINGER</term>
<nutsynopsis>
	"Gravis Stinger gamepad"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Gravis Stinger connected to one of your
serial ports.

To compile this driver as a module, choose M here: the
module will be called stinger.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_TWIDJOY</term>
<nutsynopsis>
	"Twiddler as a joystick"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Handykey Twiddler connected to your
computer's serial port and want to use it as a joystick.

To compile this driver as a module, choose M here: the
module will be called twidjoy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_DB9</term>
<nutsynopsis>
	"Multisystem, Sega Genesis, Saturn joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Sega Master System gamepad, Sega Genesis
gamepad, Sega Saturn gamepad, or a Multisystem -- Atari, Amiga,
Commodore, Amstrad CPC joystick connected to your parallel port.
For more information on how to use the driver please read
<file:Documentation/input/joystick-parport.txt>.

To compile this driver as a module, choose M here: the
module will be called db9.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_GAMECON</term>
<nutsynopsis>
	"Multisystem, NES, SNES, N64, PSX joysticks and gamepads"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Nintendo Entertainment System gamepad,
Super Nintendo Entertainment System gamepad, Nintendo 64 gamepad,
Sony PlayStation gamepad or a Multisystem -- Atari, Amiga,
Commodore, Amstrad CPC joystick connected to your parallel port.
For more information on how to use the driver please read
<file:Documentation/input/joystick-parport.txt>.

To compile this driver as a module, choose M here: the
module will be called gamecon.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_TURBOGRAFX</term>
<nutsynopsis>
	"Multisystem joysticks via TurboGraFX device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the TurboGraFX interface by Steffen Schwenke,
and want to use it with Multisystem -- Atari, Amiga, Commodore,
Amstrad CPC joystick. For more information on how to use the driver
please read <file:Documentation/input/joystick-parport.txt>.

To compile this driver as a module, choose M here: the
module will be called turbografx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_AMIGA</term>
<nutsynopsis>
	"Amiga joysticks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK && AMIGA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Amiga with a digital joystick connected
to it.

To compile this driver as a module, choose M here: the
module will be called amijoy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOYSTICK_JOYDUMP</term>
<nutsynopsis>
	"Gameport data dumper"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_JOYSTICK</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to dump data from your joystick into the system
log for debugging purposes. Say N if you are making a production
configuration or aren't sure.

To compile this driver as a module, choose M here: the
module will be called joydump.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>INPUT_TOUCHSCREEN</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here, and a list of supported touchscreens will be displayed.
This option doesn't affect the kernel.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_BITSY</term>
<nutsynopsis>
	"Compaq iPAQ H3600 (Bitsy) touchscreen"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the h3600 (Bitsy) touchscreen.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called h3600_ts_input.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_CORGI</term>
<nutsynopsis>
	"SharpSL (Corgi and Spitz series) touchscreen driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable the driver for the touchscreen on the 
Sharp SL-C7xx and SL-Cxx00 series of PDAs.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called corgi_ts.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_GUNZE</term>
<nutsynopsis>
	"Gunze AHL-51S touchscreen"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the Gunze AHL-51 touchscreen connected to
your system.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called gunze.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_ELO</term>
<nutsynopsis>
	"Elo serial touchscreens"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Elo serial touchscreen connected to
your system.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called elo.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_MTOUCH</term>
<nutsynopsis>
	"MicroTouch serial touchscreens"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a MicroTouch (3M) serial touchscreen connected to
your system.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called mtouch.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_MK712</term>
<nutsynopsis>
	"ICS MicroClock MK712 touchscreen"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the ICS MicroClock MK712 touchscreen
controller chip in your system.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called mk712.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TOUCHSCREEN_HP600</term>
<nutsynopsis>
	"HP Jornada 680/690 touchscreen"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_TOUCHSCREEN && SH_HP600 && SH_ADC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a HP Jornada 680 or 690 and want to
support the built-in touchscreen.

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called hp680_ts_input.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>INPUT_MISC</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here, and a list of miscellaneous input drivers will be displayed.
Everything that didn't fit into the other categories is here. This option
doesn't affect the kernel.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_PCSPKR</term>
<nutsynopsis>
	"PC Speaker support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MISC && (ALPHA || X86 || X86_64 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want the standard PC Speaker to be used for
bells and whistles.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called pcspkr.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_SPARCSPKR</term>
<nutsynopsis>
	"SPARC Speaker support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MISC && PCI && (SPARC32 || SPARC64)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want the standard Speaker on Sparc PCI systems
to be used for bells and whistles.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called sparcspkr.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_M68K_BEEP</term>
<nutsynopsis>
	"M68k Beeper support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MISC && M68K</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INPUT_UINPUT</term>
<nutsynopsis>
	"User level driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MISC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to support user level drivers for input
subsystem accessible under char device 10:223 - /dev/input/uinput.

To compile this driver as a module, choose M here: the
module will be called uinput.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HP_SDC_RTC</term>
<nutsynopsis>
	"HP SDC Real Time Clock"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && INPUT_MISC && GSC</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to support the built-in real time clock
of the HP SDC controller.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Hardware I/O ports"

<nutentry>
	<term>SERIO</term>
<nutsynopsis>
	"Serial I/O support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED || !X86</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Yes here if you have any input device that uses serial I/O to
communicate with the system. This includes the
              * standard AT keyboard and PS/2 mouse *
as well as serial mice, Sun keyboards, some joysticks and 6dof
devices and more.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called serio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_I8042</term>
<nutsynopsis>
	"i8042 PC Keyboard controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && (EMBEDDED || !X86)</literal>
	</para>

	<para>
	default value
	<literal>y if SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
i8042 is the chip over which the standard AT keyboard and PS/2
mouse are connected to the computer. If you use these devices,
you'll need to say Y here.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called i8042.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_SERPORT</term>
<nutsynopsis>
	"Serial port line discipline"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO</literal>
	</para>

	<para>
	default value
	<literal>y if SERIO</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you plan to use an input device (mouse, joystick,
tablet, 6dof) that communicates over the RS232 serial (COM) port.

More information is available: <file:Documentation/input/input.txt>

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called serport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_CT82C710</term>
<nutsynopsis>
	"ct82c710 Aux port controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Texas Instruments TravelMate notebook
equipped with the ct82c710 chip and want to use a mouse connected
to the "QuickPort".

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called ct82c710.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_Q40KBD</term>
<nutsynopsis>
	"Q40 keyboard controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && Q40</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_PARKBD</term>
<nutsynopsis>
	"Parallel port keyboard adapter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you built a simple parallel port adapter to attach
an additional AT keyboard, XT keyboard or PS/2 mouse.

More information is available: <file:Documentation/input/input.txt>

If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called parkbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_RPCKBD</term>
<nutsynopsis>
	"Acorn RiscPC keyboard controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && (ARCH_ACORN || ARCH_CLPS7500)</literal>
	</para>

	<para>
	default value
	<literal>y if SERIO && (ARCH_ACORN || ARCH_CLPS7500)</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have the Acorn RiscPC and want to use an AT
keyboard connected to its keyboard controller.

To compile this driver as a module, choose M here: the
module will be called rpckbd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_AMBAKMI</term>
<nutsynopsis>
	"AMBA KMI keyboard controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && ARM_AMBA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_SA1111</term>
<nutsynopsis>
	"Intel SA1111 keyboard controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && SA1111</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_GSCPS2</term>
<nutsynopsis>
	"HP GSC PS/2 keyboard and PS/2 mouse controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && GSC</literal>
	</para>

	<para>
	default value
	<literal>y if SERIO && GSC</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides support for the PS/2 ports on PA-RISC machines
over which HP PS/2 keyboards and PS/2 mice may be connected.
If you use these devices, you'll need to say Y here.

It's safe to enable this driver, so if unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called gscps2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HP_SDC</term>
<nutsynopsis>
	"HP System Device Controller i8042 Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GSC && SERIO</literal>
	</para>

	<para>
	default value
	<literal>y if GSC && SERIO</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables supports for the the "System Device
Controller", an i8042 carrying microcode to manage a
few miscellanous devices on some Hewlett Packard systems.
The SDC itself contains a 10ms resolution timer/clock capable
of delivering interrupts on a periodic and one-shot basis.
The SDC may also be connected to a battery-backed real-time
clock, a basic audio waveform generator, and an HP-HIL Master
Link Controller serving up to seven input devices.

By itself this option is rather useless, but enabling it will
enable selection of drivers for the abovementioned devices.
It is, however, incompatible with the old, reliable HIL keyboard
driver, and the new HIL driver is experimental, so if you plan
to use a HIL keyboard as your primary keyboard, you may wish
to keep using that driver until the new HIL drivers have had
more testing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HIL_MLC</term>
<nutsynopsis>
	"HIL MLC Support (needed for HIL input devices)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && HP_SDC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_PCIPS2</term>
<nutsynopsis>
	"PCI PS/2 keyboard and PS/2 mouse controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Mobility Docking station with PS/2
keyboard and mice ports.

To compile this driver as a module, choose M here: the
module will be called pcips2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_MACEPS2</term>
<nutsynopsis>
	"SGI O2 MACE PS/2 controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && SGI_IP32</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have SGI O2 workstation and want to use its
PS/2 ports.

To compile this driver as a module, choose M here: the
module will be called maceps2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_LIBPS2</term>
<nutsynopsis>
	"PS/2 driver library"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO && EMBEDDED</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you are using a driver for device connected
to a PS/2 port, such as PS/2 mouse or standard AT keyboard.

To compile this driver as a module, choose M here: the
module will be called libps2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIO_RAW</term>
<nutsynopsis>
	"Raw access to serio ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to have raw access to serio ports, such as
AUX ports on i8042 keyboard controller. Each serio port that is
bound to this driver will be accessible via a char device with
major 10 and dynamically allocated minor. The driver will try
allocating minor 1 (that historically corresponds to /dev/psaux)
first. To bind this driver to a serio port use sysfs interface:

    echo -n "serio_raw" > /sys/bus/serio/devices/serioX/drvctl

To compile this driver as a module, choose M here: the
module will be called serio_raw.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GAMEPORT</term>
<nutsynopsis>
	"Gameport support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Gameport support is for the standard 15-pin PC gameport. If you
have a joystick, gamepad, gameport card, a soundcard with a gameport
or anything else that uses the gameport, say Y or M here and also to
at least one of the hardware specific drivers.

For Ensoniq AudioPCI (ES1370), AudioPCI 97 (ES1371), ESS Solo1,
S3 SonicVibes, Trident 4DWave, SiS7018, and ALi 5451 gameport
support is provided by the sound drivers, so you won't need any
from the below listed modules. You still need to say Y here.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called gameport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GAMEPORT_NS558</term>
<nutsynopsis>
	"Classic ISA and PnP gameport support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GAMEPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an ISA or PnP gameport.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called ns558.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GAMEPORT_L4</term>
<nutsynopsis>
	"PDPI Lightning 4 gamecard support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GAMEPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a PDPI Lightning 4 gamecard.

To compile this driver as a module, choose M here: the
module will be called lightning.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GAMEPORT_EMU10K1</term>
<nutsynopsis>
	"SB Live and Audigy gameport support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GAMEPORT && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a SoundBlaster Live! or SoundBlaster
Audigy card and want to use its gameport.

To compile this driver as a module, choose M here: the
module will be called emu10k1-gp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GAMEPORT_FM801</term>
<nutsynopsis>
	"ForteMedia FM801 gameport support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GAMEPORT && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Character devices"

<nutentry>
	<term>VT</term>
<nutsynopsis>
	"Virtual terminal"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if !VIOCONS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will get support for terminal devices with
display and keyboard devices. These are called "virtual" because you
can run several virtual terminals (also called virtual consoles) on
one physical terminal. This is rather useful, for example one
virtual terminal can collect system messages and warnings, another
one can be used for a text-mode user session, and a third could run
an X session, all in parallel. Switching between virtual terminals
is done with certain key combinations, usually Alt-<function key>.

The setterm command ("man setterm") can be used to change the
properties (such as colors or beeping) of a virtual terminal. The
man page console_codes(4) ("man console_codes") contains the special
character sequences that can be used to change those properties
directly. The fonts used on virtual terminals can be changed with
the setfont ("man setfont") command and the key bindings are defined
with the loadkeys ("man loadkeys") command.

You need at least one virtual terminal device in order to make use
of your keyboard and monitor. Therefore, only people configuring an
embedded system would want to say N here in order to save some
memory; the only way to log into such a system is then via a serial
or network connection.

If unsure, say Y, or else you won't be able to do much with your new
shiny Linux system :-)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VT_CONSOLE</term>
<nutsynopsis>
	"Support for console on virtual terminal"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y if VT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The system console is the device which receives all kernel messages
and warnings and which allows logins in single user mode. If you
answer Y here, a virtual terminal (the device used to interact with
a physical terminal) can be used as system console. This is the most
common mode of operations, so you should say Y here unless you want
the kernel messages be output only to a serial port (in which case
you should say Y to "Console on serial port", below).

If you do say Y here, by default the currently visible virtual
terminal (/dev/tty0) will be used as system console. You can change
that with a kernel command line option such as "console=tty3" which
would use the third virtual terminal as system console. (Try "man
bootparam" or see the documentation of your boot loader (lilo or
loadlin) about how to pass options to the kernel at boot time.)

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HW_CONSOLE</term>
	<para>
	default value
	<literal>y if VT && !S390 && !UML</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_NONSTANDARD</term>
<nutsynopsis>
	"Non-standard serial port support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have any non-standard serial boards -- boards
which aren't supported using the standard "dumb" serial driver.
This includes intelligent serial boards such as Cyclades,
Digiboards, etc. These are usually used for systems that need many
serial ports because they serve many terminals or dial-in
connections.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about non-standard serial boards.

Most people can say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>COMPUTONE</term>
<nutsynopsis>
	"Computone IntelliPort Plus serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the entire family of Intelliport II/Plus
controllers with the exception of the MicroChannel controllers and
products previous to the Intelliport II. These are multiport cards,
which give you many serial ports. You would need something like this
to connect more than two modems to your Linux box, for instance in
order to become a dial-in server. If you have a card like that, say
Y here and read <file:Documentation/computone.txt>.

To compile this driver as modules, choose M here: the
modules will be called ip2 and ip2main.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ROCKETPORT</term>
<nutsynopsis>
	"Comtrol RocketPort support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Comtrol RocketPort and RocketModem PCI boards.   
These boards provide 2, 4, 8, 16, or 32 high-speed serial ports or
modems.  For information about the RocketPort/RocketModem  boards
and this driver read <file:Documentation/rocket.txt>.

To compile this driver as a module, choose M here: the
module will be called rocket.

If you want to compile this driver into the kernel, say Y here.  If
you don't have a Comtrol RocketPort/RocketModem card installed, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CYCLADES</term>
<nutsynopsis>
	"Cyclades async mux support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports Cyclades Z and Y multiserial boards.
You would need something like this to connect more than two modems to
your Linux box, for instance in order to become a dial-in server.

For information about the Cyclades-Z card, read
<file:drivers/char/README.cycladesZ>.

To compile this driver as a module, choose M here: the
module will be called cyclades.

If you haven't heard about it, it's safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CYZ_INTR</term>
<nutsynopsis>
	"Cyclades-Z interrupt mode operation (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && CYCLADES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Cyclades-Z family of multiport cards allows 2 (two) driver op
modes: polling and interrupt. In polling mode, the driver will check
the status of the Cyclades-Z ports every certain amount of time
(which is called polling cycle and is configurable). In interrupt
mode, it will use an interrupt line (IRQ) in order to check the
status of the Cyclades-Z ports. The default op mode is polling. If
unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DIGIEPCA</term>
<nutsynopsis>
	"Digiboard Intelligent Async Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for Digi International's Xx, Xeve, and Xem series
of cards which provide multiple serial ports. You would need
something like this to connect more than two modems to your Linux
box, for instance in order to become a dial-in server. This driver
supports the original PC (ISA) boards as well as PCI, and EISA. If
you have a card like this, say Y here and read the file
<file:Documentation/digiepca.txt>.

To compile this driver as a module, choose M here: the
module will be called epca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ESPSERIAL</term>
<nutsynopsis>
	"Hayes ESP serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && ISA && BROKEN_ON_SMP && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver which supports Hayes ESP serial ports.  Both single
port cards and multiport cards are supported.  Make sure to read
<file:Documentation/hayes-esp.txt>.

To compile this driver as a module, choose M here: the
module will be called esp.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOXA_INTELLIO</term>
<nutsynopsis>
	"Moxa Intellio support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Moxa Intellio multiport serial card.

To compile this driver as a module, choose M here: the
module will be called moxa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MOXA_SMARTIO</term>
<nutsynopsis>
	"Moxa SmartIO support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Moxa SmartIO multiport serial card.

This driver can also be built as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called mxser. If you want to do that, say M
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISI</term>
<nutsynopsis>
	"Multi-Tech multiport card support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Multi-Tech cards which provide several
serial ports.  The driver is experimental and can currently only be
built as a module. The module will be called isicom.
If you want to do that, choose M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYNCLINK</term>
<nutsynopsis>
	"Microgate SyncLink card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && PCI && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Provides support for the SyncLink ISA and PCI multiprotocol serial
adapters. These adapters support asynchronous and HDLC bit
synchronous communication up to 10Mbps (PCI adapter).

This driver can only be built as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called synclink.  If you want to do that, say M
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYNCLINKMP</term>
<nutsynopsis>
	"SyncLink Multiport support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the SyncLink Multiport (2 or 4 ports)
serial adapter, running asynchronous and HDLC communications up
to 2.048Mbps. Each ports is independently selectable for
RS-232, V.35, RS-449, RS-530, and X.21

This driver may be built as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called synclinkmp.  If you want to do that, say M
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>N_HDLC</term>
<nutsynopsis>
	"HDLC line discipline support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Allows synchronous HDLC communications with tty device drivers that
support synchronous HDLC such as the Microgate SyncLink adapter.

This driver can only be built as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called n_hdlc. If you want to do that, say M
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RISCOM8</term>
<nutsynopsis>
	"SDL RISCom/8 card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the SDL Communications RISCom/8 multiport card,
which gives you many serial ports. You would need something like
this to connect more than two modems to your Linux box, for instance
in order to become a dial-in server. If you have a card like that,
say Y here and read the file <file:Documentation/riscom8.txt>.

Also it's possible to say M here and compile this driver as kernel
loadable module; the module will be called riscom8.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPECIALIX</term>
<nutsynopsis>
	"Specialix IO8+ card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Specialix IO8+ multiport card (both the
ISA and the PCI version) which gives you many serial ports. You
would need something like this to connect more than two modems to
your Linux box, for instance in order to become a dial-in server.

If you have a card like that, say Y here and read the file
<file:Documentation/specialix.txt>. Also it's possible to say M here
and compile this driver as kernel loadable module which will be
called specialix.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SPECIALIX_RTSCTS</term>
<nutsynopsis>
	"Specialix DTR/RTS pin is RTS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SPECIALIX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Specialix IO8+ card can only support either RTS or DTR. If you
say N here, the driver will use the pin as "DTR" when the tty is in
software handshake mode.  If you say Y here or hardware handshake is
on, it will always be RTS.  Read the file
<file:Documentation/specialix.txt> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SX</term>
<nutsynopsis>
	"Specialix SX (and SI) card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the SX and SI multiport serial cards.
Please read the file <file:Documentation/sx.txt> for details.

This driver can only be built as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called sx. If you want to do that, say M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RIO</term>
<nutsynopsis>
	"Specialix RIO system support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Specialix RIO, a smart serial card which
drives an outboard box that can support up to 128 ports.  Product
information is at <http://www.perle.com/support/documentation.html#multiport>.
There are both ISA and PCI versions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RIO_OLDPCI</term>
<nutsynopsis>
	"Support really old RIO/PCI cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>RIO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Older RIO PCI cards need some initialization-time configuration to
determine the IRQ and some control addresses.  If you have a RIO and
this doesn't seem to work, try setting this to Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>STALDRV</term>
<nutsynopsis>
	"Stallion multiport serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Stallion cards give you many serial ports.  You would need something
like this to connect more than two modems to your Linux box, for
instance in order to become a dial-in server.  If you say Y here,
you will be asked for your specific card model in the next
questions.  Make sure to read <file:Documentation/stallion.txt> in
this case.  If you have never heard about all this, it's safe to
say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>STALLION</term>
<nutsynopsis>
	"Stallion EasyIO or EC8/32 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>STALDRV && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an EasyIO or EasyConnection 8/32 multiport Stallion
card, then this is for you; say Y.  Make sure to read
<file:Documentation/stallion.txt>.

To compile this driver as a module, choose M here: the
module will be called stallion.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISTALLION</term>
<nutsynopsis>
	"Stallion EC8/64, ONboard, Brumby support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>STALDRV && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an EasyConnection 8/64, ONboard, Brumby or Stallion
serial multiport card, say Y here. Make sure to read
<file:Documentation/stallion.txt>.

To compile this driver as a module, choose M here: the
module will be called istallion.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AU1000_UART</term>
<nutsynopsis>
	"Enable Au1000 UART Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_NONSTANDARD && MIPS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an Alchemy AU1000 processor (MIPS based) and you want
to use serial ports, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AU1000_SERIAL_CONSOLE</term>
<nutsynopsis>
	"Enable Au1000 serial console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AU1000_UART</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an Alchemy AU1000 processor (MIPS based) and you want
to use a console on a serial port, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QTRONIX_KEYBOARD</term>
<nutsynopsis>
	"Enable Qtronix 990P Keyboard Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IT8712</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Images of Qtronix keyboards are at
<http://www.qtronix.com/keyboard.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IT8172_CIR</term>
	<para>
	default value
	<literal>y if QTRONIX_KEYBOARD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IT8172_SCR0</term>
<nutsynopsis>
	"Enable Smart Card Reader 0 Support "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IT8712</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support smart-card reader 0 (SCR0) on the Integrated
Technology Express, Inc. ITE8172 SBC.  Vendor page at
<http://www.ite.com.tw/ia/brief_it8172bsp.htm>; picture of the
board at <http://www.mvista.com/partners/semiconductor/ite.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IT8172_SCR1</term>
<nutsynopsis>
	"Enable Smart Card Reader 1 Support "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IT8712</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support smart-card reader 1 (SCR1) on the Integrated
Technology Express, Inc. ITE8172 SBC.  Vendor page at
<http://www.ite.com.tw/ia/brief_it8172bsp.htm>; picture of the
board at <http://www.mvista.com/partners/semiconductor/ite.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>A2232</term>
<nutsynopsis>
	"Commodore A2232 serial support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && ZORRO && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option supports the 2232 7-port serial card shipped with the
Amiga 2000 and other Zorro-bus machines, dating from 1989.  At
a max of 19,200 bps, the ports are served by a 6551 ACIA UART chip
each, plus a 8520 CIA, and a master 6502 CPU and buffer as well. The
ports were connected with 8 pin DIN connectors on the card bracket,
for which 8 pin to DB25 adapters were supplied. The card also had
jumpers internally to toggle various pinning configurations.

This driver can be built as a module; but then "generic_serial"
will also be built as a module. This has to be loaded before
"ser_a2232". If you want to do this, answer M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_SNSC</term>
<nutsynopsis>
	"SGI Altix system controller communication support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IA64_SGI_SN2 || IA64_GENERIC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an SGI Altix and you want to enable system
controller communication from user space (you want this!),
say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_TIOCX</term>
<nutsynopsis>
	"SGI TIO CX driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IA64_SGI_SN2 || IA64_GENERIC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an SGI Altix and you have fpga devices attached
to your TIO, say Y here, otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_MBCS</term>
<nutsynopsis>
	"SGI FPGA Core Services driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SGI_TIOCX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an SGI Altix with an attached SABrick
say Y or M here, otherwise say N.
	</para>

</nutentrybody>
</nutentry>

menu "Serial drivers"

<nutentry>
	<term>SERIAL_8250</term>
<nutsynopsis>
	"8250/16550 and compatible serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BROKEN || !SPARC64 && !SPARC32</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This selects whether you want to include the driver for the standard
serial ports.  The standard answer is Y.  People who might say N
here are those that are setting up dedicated Ethernet WWW/FTP
servers, or users that have one of the various bus mice instead of a
serial mouse and don't intend to use their machine's standard serial
port for anything.  (Note that the Cyclades and Stallion multi
serial port drivers do not need this driver built in for them to
work.)

To compile this driver as a module, choose M here: the
module will be called serial.
[WARNING: Do not compile this driver as a module if you are using
non-standard serial ports, since the configuration information will
be lost when the driver is unloaded.  This limitation may be lifted
in the future.]

BTW1: If you have a mouseman serial mouse which is not recognized by
the X window system, try running gpm first.

BTW2: If you intend to use a software modem (also called Winmodem)
under Linux, forget it.  These modems are crippled and require
proprietary drivers which are only available under Windows.

Most people will say Y or M here, so that they can use serial mice,
modems and similar devices connecting to the standard serial ports.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_CONSOLE</term>
<nutsynopsis>
	"Console on 8250/16550 and compatible serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, it will be possible to use a serial port as the
system console (the system console is the device which receives all
kernel messages and warnings and which allows logins in single user
mode). This could be useful if some terminal or printer is connected
to that serial port.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyS1". (Try "man bootparam" or see the documentation of
your boot loader (grub or lilo or loadlin) about how to pass options
to the kernel at boot time.)

If you don't have a VGA card installed and you say Y here, the
kernel will automatically use the first serial line, /dev/ttyS0, as
system console.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_CS</term>
<nutsynopsis>
	"8250/16550 PCMCIA device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCMCIA && SERIAL_8250</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable support for 16-bit PCMCIA serial devices,
including serial port cards, modems, and the modem functions of
multi-function Ethernet/modem cards. (PCMCIA- or PC-cards are
credit-card size devices often used with laptops.)

To compile this driver as a module, choose M here: the
module will be called serial_cs.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_ACPI</term>
<nutsynopsis>
	"8250/16550 device discovery via ACPI namespace"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ACPI && SERIAL_8250</literal>
	</para>

	<para>
	default value
	<literal>y if ACPI && SERIAL_8250 && IA64</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to enable serial port discovery via the ACPI
namespace, say Y here.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_NR_UARTS</term>
<nutsynopsis>
	"Maximum number of 8250/16550 serial ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250</literal>
	</para>

	<para>
	default value
	<literal>4 if SERIAL_8250</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Set this to the number of serial ports you want the driver
to support.  This includes any ports discovered via ACPI or
PCI enumeration and any ports that may be added at run-time
via hot-plug, or any ISA multi-port serial cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_EXTENDED</term>
<nutsynopsis>
	"Extended 8250/16550 serial driver options"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you wish to use any non-standard features of the standard "dumb"
driver, say Y here. This includes HUB6 support, shared serial
interrupts, special multiport support, support for more than the
four COM 1/2/3/4 boards, etc.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about serial driver options. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_MANY_PORTS</term>
<nutsynopsis>
	"Support more than 4 legacy serial ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250_EXTENDED && !IA64</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have dumb serial boards other than the four
standard COM 1/2/3/4 ports. This may happen if you have an AST
FourPort, Accent Async, Boca (read the Boca mini-HOWTO, available
from <http://www.tldp.org/docs.html#howto>), or other custom
serial port hardware which acts similar to standard serial port
hardware. If you only use the standard COM 1/2/3/4 ports, you can
say N here to save some memory. You can also say Y if you have an
"intelligent" multiport card such as Cyclades, Digiboards, etc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_SHARE_IRQ</term>
<nutsynopsis>
	"Support for sharing serial interrupts"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250_EXTENDED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some serial boards have hardware support which allows multiple dumb
serial ports on the same board to share a single IRQ. To enable
support for this in the serial driver, say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_DETECT_IRQ</term>
<nutsynopsis>
	"Autodetect IRQ on standard ports (unsafe)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250_EXTENDED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the kernel to try to guess which IRQ
to use for your serial port.

This is considered unsafe; it is far better to configure the IRQ in
a boot script using the setserial command.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_RSA</term>
<nutsynopsis>
	"Support RSA serial ports"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250_EXTENDED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
::: To be written :::
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_FOURPORT</term>
<nutsynopsis>
	"Support Fourport cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250!=n && ISA && SERIAL_8250_MANY_PORTS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an AST FourPort serial board.

To compile this driver as a module, choose M here: the module
will be called 8250_fourport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_ACCENT</term>
<nutsynopsis>
	"Support Accent cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250!=n && ISA && SERIAL_8250_MANY_PORTS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Accent Async serial board.

To compile this driver as a module, choose M here: the module
will be called 8250_accent.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_BOCA</term>
<nutsynopsis>
	"Support Boca cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250!=n && ISA && SERIAL_8250_MANY_PORTS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Boca serial board.  Please read the Boca
mini-HOWTO, avaialble from <http://www.tldp.org/docs.html#howto>

To compile this driver as a module, choose M here: the module
will be called 8250_boca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_HUB6</term>
<nutsynopsis>
	"Support Hub6 cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250!=n && ISA && SERIAL_8250_MANY_PORTS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a HUB6 serial board.

To compile this driver as a module, choose M here: the module
will be called 8250_hub6.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_MCA</term>
<nutsynopsis>
	"Support 8250-type ports on MCA buses"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_8250!=n && MCA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a MCA serial ports.

To compile this driver as a module, choose M here: the module
will be called 8250_mca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_8250_ACORN</term>
<nutsynopsis>
	"Acorn expansion card serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_ACORN && SERIAL_8250</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an Atomwide Serial card or Serial Port card for an Acorn
system, say Y to this option.  The driver can handle 1, 2, or 3 port
cards.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

comment "Non-8250 serial port support"

<nutentry>
	<term>SERIAL_AMBA_PL010</term>
<nutsynopsis>
	"ARM AMBA PL010 serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM_AMBA && (BROKEN || !ARCH_VERSATILE)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This selects the ARM(R) AMBA(R) PrimeCell PL010 UART.  If you have
an Integrator/AP or Integrator/PP2 platform, say Y or M here.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_AMBA_PL010_CONSOLE</term>
<nutsynopsis>
	"Support for console on AMBA serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_AMBA_PL010=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you wish to use an AMBA PrimeCell UART as the system
console (the system console is the device which receives all kernel
messages and warnings and which allows logins in single user mode).

Even if you say Y here, the currently visible framebuffer console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyAM0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_AMBA_PL011</term>
<nutsynopsis>
	"ARM AMBA PL011 serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM_AMBA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This selects the ARM(R) AMBA(R) PrimeCell PL011 UART.  If you have
an Integrator/PP2, Integrator/CP or Versatile platform, say Y or M
here.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_AMBA_PL011_CONSOLE</term>
<nutsynopsis>
	"Support for console on AMBA serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_AMBA_PL011=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you wish to use an AMBA PrimeCell UART as the system
console (the system console is the device which receives all kernel
messages and warnings and which allows logins in single user mode).

Even if you say Y here, the currently visible framebuffer console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyAM0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CLPS711X</term>
<nutsynopsis>
	"CLPS711X serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_CLPS711X</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
::: To be written :::
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CLPS711X_CONSOLE</term>
<nutsynopsis>
	"Support for console on CLPS711X serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CLPS711X=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyCL1". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_S3C2410</term>
<nutsynopsis>
	"Samsung S3C2410 Serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_S3C2410</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the on-chip UARTs on the Samsung S3C2410X CPU,
providing /dev/ttySAC0, 1 and 2 (note, some machines may not
provide all of these ports, depending on how the serial port
pins are configured.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_S3C2410_CONSOLE</term>
<nutsynopsis>
	"Support for console on S3C2410 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_S3C2410=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allow selection of the S3C2410 on-board serial ports for use as
an virtual console.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttySACx". (Try "man bootparam" or see the documentation of
your boot loader about how to pass options to the kernel at
boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_DZ</term>
<nutsynopsis>
	"DECstation DZ serial driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MACH_DECSTATION && 32BIT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
DZ11-family serial controllers for VAXstations, including the
DC7085, M7814, and M7819.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_DZ_CONSOLE</term>
<nutsynopsis>
	"Support console on DECstation DZ serial driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_DZ</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, it will be possible to use a serial port as the
system console (the system console is the device which receives all
kernel messages and warnings and which allows logins in single user
mode).  Note that the firmware uses ttyS0 as the serial console on
the Maxine and ttyS2 on the others.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_21285</term>
<nutsynopsis>
	"DC21285 serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && FOOTBRIDGE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a machine based on a 21285 (Footbridge) StrongARM(R)/
PCI bridge you can enable its onboard serial port by enabling this
option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_21285_CONSOLE</term>
<nutsynopsis>
	"Console on DC21285 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_21285=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have enabled the serial port on the 21285 footbridge you can
make it the console by answering Y to this option.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyFB". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_UART00</term>
<nutsynopsis>
	"Excalibur serial port (uart00) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_CAMELOT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the hard logic uart on Excalibur. This
driver also supports soft logic implementations of this uart core.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_UART00_CONSOLE</term>
<nutsynopsis>
	"Support for console on Excalibur serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_UART00</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to support a serial console on an Excalibur
hard logic uart or uart00 IP core.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyS1". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MPSC</term>
<nutsynopsis>
	"Marvell MPSC serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC32 && MV64X60</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the Marvell MPSC serial controller.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MPSC_CONSOLE</term>
<nutsynopsis>
	"Support for console on Marvell MPSC serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_MPSC</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to support a serial console on a Marvell MPSC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_PXA</term>
<nutsynopsis>
	"PXA serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_PXA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a machine based on an Intel XScale PXA2xx CPU you
can enable its onboard serial ports by enabling this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_PXA_CONSOLE</term>
<nutsynopsis>
	"Console on PXA serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_PXA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have enabled the serial port on the Intel XScale PXA
CPU you can make it the console by answering Y to this option.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttySA0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SA1100</term>
<nutsynopsis>
	"SA1100 serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_SA1100</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a machine based on a SA1100/SA1110 StrongARM(R) CPU you
can enable its onboard serial port by enabling this option.
Please read <file:Documentation/arm/SA1100/serial_UART> for further
info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SA1100_CONSOLE</term>
<nutsynopsis>
	"Console on SA1100 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_SA1100</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have enabled the serial port on the SA1100/SA1110 StrongARM
CPU you can make it the console by answering Y to this option.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttySA0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_IMX</term>
<nutsynopsis>
	"IMX serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_IMX</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a machine based on a Motorola IMX CPU you
can enable its onboard serial port by enabling this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_IMX_CONSOLE</term>
<nutsynopsis>
	"Console on IMX serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_IMX</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have enabled the serial port on the Motorola IMX
CPU you can make it the console by answering Y to this option.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttySA0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNCORE</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if SPARC32 || SPARC64</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNZILOG</term>
<nutsynopsis>
	"Sun Zilog8530 serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SPARC32 || SPARC64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Zilog8530 serial ports found on many Sparc
systems.  Say Y or M if you want to be able to these serial ports.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNZILOG_CONSOLE</term>
<nutsynopsis>
	"Console on Sun Zilog8530 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_SUNZILOG=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you would like to be able to use the Zilog8530 serial port
on your Sparc system as the console, you can do so by answering
Y to this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNSU</term>
<nutsynopsis>
	"Sun SU serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(SPARC32 || SPARC64) && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the 8250 serial ports that run the keyboard and
mouse on (PCI) UltraSPARC systems.  Say Y or M if you want to be able
to these serial ports.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNSU_CONSOLE</term>
<nutsynopsis>
	"Console on Sun SU serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_SUNSU=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you would like to be able to use the SU serial port
on your Sparc system as the console, you can do so by answering
Y to this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MUX</term>
<nutsynopsis>
	"Serial MUX support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARISC</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if PARISC</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y here will enable the hardware MUX serial driver for
the Nova and K class systems.  The hardware MUX is not 8250/16550 
compatible therefore the /dev/ttyB0 device is shared between the 
Serial MUX and the PDC software console.  The following steps 
need to be completed to use the Serial MUX:

  1. create the device entry (mknod /dev/ttyB0 c 11 0)
  2. Edit the /etc/inittab to start a getty listening on /dev/ttyB0
  3. Add device ttyB0 to /etc/securetty (if you want to log on as
       root on this console.)
  4. Change the kernel command console parameter to: console=ttyB0
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MUX_CONSOLE</term>
<nutsynopsis>
	"Support for console on serial MUX"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_MUX</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if SERIAL_MUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PDC_CONSOLE</term>
<nutsynopsis>
	"PDC software console support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARISC && !SERIAL_MUX && VT</literal>
	</para>

	<para>
	default value
	<literal>n if PARISC && !SERIAL_MUX && VT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Saying Y here will enable the software based PDC console to be 
used as the system console.  This is useful for machines in 
which the hardware based console has not been written yet.  The
following steps must be competed to use the PDC console:

  1. create the device entry (mknod /dev/ttyB0 c 11 0)
  2. Edit the /etc/inittab to start a getty listening on /dev/ttyB0
  3. Add device ttyB0 to /etc/securetty (if you want to log on as
       root on this console.)
  4. Change the kernel command console parameter to: console=ttyB0
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNSAB</term>
<nutsynopsis>
	"Sun Siemens SAB82532 serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(SPARC32 || SPARC64) && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Siemens SAB82532 DUSCC serial ports on newer
(PCI) UltraSPARC systems.  Say Y or M if you want to be able to these
serial ports.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SUNSAB_CONSOLE</term>
<nutsynopsis>
	"Console on Sun Siemens SAB82532 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_SUNSAB=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you would like to be able to use the SAB82532 serial port
on your Sparc system as the console, you can do so by answering
Y to this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_IP22_ZILOG</term>
<nutsynopsis>
	"IP22 Zilog8530 serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SGI_IP22</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Zilog8530 serial ports found on SGI IP22
systems.  Say Y or M if you want to be able to these serial ports.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_IP22_ZILOG_CONSOLE</term>
<nutsynopsis>
	"Console on IP22 Zilog8530 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_IP22_ZILOG=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>V850E_UART</term>
<nutsynopsis>
	"NEC V850E on-chip UART support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>V850E_UARTB</term>
	<para>
	default value
	<literal>y if V850E_UART && V850E_ME2</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>V850E_UART_CONSOLE</term>
<nutsynopsis>
	"Use NEC V850E on-chip UART for console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>V850E_UART</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SH_SCI</term>
<nutsynopsis>
	"SH SCI(F) serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SUPERH || H8300</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SH_SCI_CONSOLE</term>
<nutsynopsis>
	"Support for console on SH SCI(F)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_SH_SCI=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_AU1X00</term>
<nutsynopsis>
	"Enable Au1x00 UART Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MIPS && SOC_AU1X00</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an Alchemy AU1X00 processor (MIPS based) and you want
to use serial ports, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_AU1X00_CONSOLE</term>
<nutsynopsis>
	"Enable Au1x00 serial console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_AU1X00</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an Alchemy AU1X00 processor (MIPS based) and you want
to use a console on a serial port, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CORE</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CORE_CONSOLE</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_68328</term>
<nutsynopsis>
	"68328 serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>M68328 || M68EZ328 || M68VZ328</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports the built-in serial port of the Motorola 68328
(standard, EZ and VZ varities).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_68328_RTS_CTS</term>
<nutsynopsis>
	"Support RTS/CTS on 68328 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_68328</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_COLDFIRE</term>
<nutsynopsis>
	"ColdFire serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>COLDFIRE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports the built-in serial ports of the Motorola ColdFire
family of CPUs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_68360_SMC</term>
<nutsynopsis>
	"68360 SMC uart support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>M68360</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports the SMC serial ports of the Motorola 68360 CPU.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_68360_SCC</term>
<nutsynopsis>
	"68360 SCC uart support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>M68360</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports the SCC serial ports of the Motorola 68360 CPU.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_68360</term>
	<para>
	default value
	<literal>y if SERIAL_68360_SMC || SERIAL_68360_SCC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_PMACZILOG</term>
<nutsynopsis>
	"PowerMac z85c30 ESCC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC_OF && PPC_PMAC</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the Zilog z85C30 serial ports found on
PowerMac machines.
Say Y or M if you want to be able to these serial ports.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_PMACZILOG_CONSOLE</term>
<nutsynopsis>
	"Console on PowerMac z85c30 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_PMACZILOG=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you would like to be able to use the z85c30 serial port
on your PowerMac as the console, you can do so by answering
Y to this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_LH7A40X</term>
<nutsynopsis>
	"Sharp LH7A40X embedded UART support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM && ARCH_LH7A40X</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the three on-board UARTs of the
Sharp LH7A40X series CPUs.  Choose Y or M.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_LH7A40X_CONSOLE</term>
<nutsynopsis>
	"Support for console on Sharp LH7A40X serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_LH7A40X=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you wish to use one of the serial ports as the
system console--the system console is the device which
receives all kernel messages and warnings and which allows
logins in single user mode.

Even if you say Y here, the currently visible framebuffer console
(/dev/tty0) will still be used as the default system console, but
you can alter that using a kernel command line, for example
"console=ttyAM1".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM</term>
<nutsynopsis>
	"CPM SCC/SMC serial port support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CPM2 || 8xx</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the SCC and SMC serial ports on Motorola 
embedded PowerPC that contain a CPM1 (8xx) or CPM2 (8xxx)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_CONSOLE</term>
<nutsynopsis>
	"Support for console on CPM SCC/SMC serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you wish to use a SCC or SMC CPM UART as the system
console (the system console is the device which receives all kernel
messages and warnings and which allows logins in single user mode).

Even if you say Y here, the currently visible framebuffer console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyCPM0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_SCC1</term>
<nutsynopsis>
	"Support for SCC1 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select the is option to use SCC1 as a serial port
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_SCC2</term>
<nutsynopsis>
	"Support for SCC2 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select the is option to use SCC2 as a serial port
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_SCC3</term>
<nutsynopsis>
	"Support for SCC3 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select the is option to use SCC3 as a serial port
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_SCC4</term>
<nutsynopsis>
	"Support for SCC4 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select the is option to use SCC4 as a serial port
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_SMC1</term>
<nutsynopsis>
	"Support for SMC1 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select the is option to use SMC1 as a serial port
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_CPM_SMC2</term>
<nutsynopsis>
	"Support for SMC2 serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_CPM=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select the is option to use SMC2 as a serial port
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SGI_L1_CONSOLE</term>
<nutsynopsis>
	"SGI Altix L1 serial console support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IA64_GENERIC || IA64_SGI_SN2</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have an SGI Altix and you would like to use the system
controller serial port as your console (you want this!),
say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MPC52xx</term>
<nutsynopsis>
	"Freescale MPC52xx family PSC serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC_MPC52xx</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This drivers support the MPC52xx PSC serial ports. If you would
like to use them, you must answer Y or M to this option. Not that
for use as console, it must be included in kernel and not as a
module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MPC52xx_CONSOLE</term>
<nutsynopsis>
	"Console on a Freescale MPC52xx family PSC serial port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_MPC52xx=y</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Select this options if you'd like to use one of the PSC serial port
of the Freescale MPC52xx family as a console.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_MPC52xx_CONSOLE_BAUD</term>
<nutsynopsis>
	"Freescale MPC52xx family PSC serial port baud"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_MPC52xx_CONSOLE</literal>
	</para>

	<para>
	default value
	<literal>9600 if SERIAL_MPC52xx_CONSOLE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Select the MPC52xx console baud rate.
This value is only used if the bootloader doesn't pass in the
console baudrate
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_ICOM</term>
<nutsynopsis>
	"IBM Multiport Serial Adapter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && (PPC_ISERIES || PPC_PSERIES)</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for a family of multiport serial adapters
including 2 port RVX, 2 port internal modem, 4 port internal
modem and a split 1 port RVX and 1 port internal modem.

This driver can also be built as a module.  If so, the module
will be called icom.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_M32R_SIO</term>
<nutsynopsis>
	"M32R SIO I/F"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>M32R</literal>
	</para>

	<para>
	default value
	<literal>y if M32R</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the M32R serial controller.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_M32R_SIO_CONSOLE</term>
<nutsynopsis>
	"use SIO console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_M32R_SIO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to support a serial console.

If you use an M3T-M32700UT or an OPSPUT platform,
please say also y for SERIAL_M32R_PLDSIO.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_M32R_PLDSIO</term>
<nutsynopsis>
	"M32R SIO I/F on a PLD"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_M32R_SIO && (PLAT_OPSPUT || PALT_USRV || PLAT_M32700UT)</literal>
	</para>

	<para>
	default value
	<literal>n if SERIAL_M32R_SIO && (PLAT_OPSPUT || PALT_USRV || PLAT_M32700UT)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the M32R serial controller
on a PLD (Programmable Logic Device).

If you use an M3T-M32700UT or an OPSPUT platform,
please say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_TXX9</term>
<nutsynopsis>
	"TMPTX39XX/49XX SIO support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HAS_TXX9_SERIAL && BROKEN</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>y if HAS_TXX9_SERIAL && BROKEN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HAS_TXX9_SERIAL</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_TXX9_CONSOLE</term>
<nutsynopsis>
	"TMPTX39XX/49XX SIO Console support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_TXX9</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_TXX9_STDSERIAL</term>
<nutsynopsis>
	"TX39XX/49XX SIO act as standard serial"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!SERIAL_8250 && SERIAL_TXX9</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_VR41XX</term>
<nutsynopsis>
	"NEC VR4100 series Serial Interface Unit support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CPU_VR41XX</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a NEC VR4100 series processor and you want to use
Serial Interface Unit(SIU) or Debug Serial Interface Unit(DSIU)
(not include VR4111/VR4121 DSIU), say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_VR41XX_CONSOLE</term>
<nutsynopsis>
	"Enable NEC VR4100 series Serial Interface Unit console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SERIAL_VR41XX</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a NEC VR4100 series processor and you want to use
a console on a serial port, say Y.  Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_JSM</term>
<nutsynopsis>
	"Digi International NEO PCI Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for Digi International's Neo series
of cards which provide multiple serial ports. You would need
something like this to connect more than two modems to your Linux
box, for instance in order to become a dial-in server. This driver
supports PCI boards only.
If you have a card like this, say Y here and read the file
<file:Documentation/jsm.txt>.

To compile this driver as a module, choose M here: the
module will be called jsm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SERIAL_SGI_IOC4</term>
<nutsynopsis>
	"SGI IOC4 controller serial support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have an SGI Altix with an IOC4 based Base IO card
and wish to use the serial ports on this card, say Y.
Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>UNIX98_PTYS</term>
<nutsynopsis>
	"Unix98 PTY support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
A pseudo terminal (PTY) is a software device consisting of two
halves: a master and a slave. The slave device behaves identical to
a physical terminal; the master device is used by a process to
read data from and write data to the slave, thereby emulating a
terminal. Typical programs for the master side are telnet servers
and xterms.

Linux has traditionally used the BSD-like names /dev/ptyxx for
masters and /dev/ttyxx for slaves of pseudo terminals. This scheme
has a number of problems. The GNU C library glibc 2.1 and later,
however, supports the Unix98 naming standard: in order to acquire a
pseudo terminal, a process opens /dev/ptmx; the number of the pseudo
terminal is then made available to the process and the pseudo
terminal slave can be accessed as /dev/pts/<number>. What was
traditionally /dev/ttyp2 will then be /dev/pts/2, for example.

All modern Linux systems use the Unix98 ptys.  Say Y unless
you're on an embedded system and want to conserve memory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LEGACY_PTYS</term>
<nutsynopsis>
	"Legacy (BSD) PTY support"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
A pseudo terminal (PTY) is a software device consisting of two
halves: a master and a slave. The slave device behaves identical to
a physical terminal; the master device is used by a process to
read data from and write data to the slave, thereby emulating a
terminal. Typical programs for the master side are telnet servers
and xterms.

Linux has traditionally used the BSD-like names /dev/ptyxx
for masters and /dev/ttyxx for slaves of pseudo
terminals. This scheme has a number of problems, including
security.  This option enables these legacy devices; on most
systems, it is safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LEGACY_PTY_COUNT</term>
<nutsynopsis>
	"Maximum number of legacy PTY in use"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>LEGACY_PTYS</literal>
	</para>

  unknown prop 7!
	<para>
	default value
	<literal>256 if LEGACY_PTYS</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The maximum number of legacy PTYs that can be used at any one time.
The default is 256, and should be more than enough.  Embedded
systems may want to reduce this to save memory.

When not in use, each legacy PTY occupies 12 bytes on 32-bit
architectures and 24 bytes on 64-bit architectures.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PRINTER</term>
<nutsynopsis>
	"Parallel printer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you intend to attach a printer to the parallel port of your Linux
box (as opposed to using a serial printer; if the connector at the
printer has 9 or 25 holes ["female"], then it's serial), say Y.
Also read the Printing-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

It is possible to share one parallel port among several devices
(e.g. printer and ZIP drive) and it is safe to compile the
corresponding drivers into the kernel.

To compile this driver as a module, choose M here and read
<file:Documentation/parport.txt>.  The module will be called lp.

If you have several parallel ports, you can specify which ports to
use with the "lp" kernel command line option.  (Try "man bootparam"
or see the documentation of your boot loader (lilo or loadlin) about
how to pass options to the kernel at boot time.)  The syntax of the
"lp" command line option can be found in <file:drivers/char/lp.c>.

If you have more than 8 printers, you need to increase the LP_NO
macro in lp.c and the PARPORT_MAX macro in parport.h.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LP_CONSOLE</term>
<nutsynopsis>
	"Support for console on line printer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PRINTER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want kernel messages to be printed out as they occur, you
can have a console on the printer. This option adds support for
doing that; to actually get it to happen you need to pass the
option "console=lp0" to the kernel at boot time.

If the printer is out of paper (or off, or unplugged, or too
busy..) the kernel will stall until the printer is ready again.
By defining CONSOLE_LP_STRICT to 0 (at your own risk) you
can make the kernel continue when this happens,
but it'll lose the kernel messages.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PPDEV</term>
<nutsynopsis>
	"Support for user-space parallel port device drivers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y to this adds support for /dev/parport device nodes.  This
is needed for programs that want portable access to the parallel
port, for instance deviceid (which displays Plug-and-Play device
IDs).

This is the parallel port equivalent of SCSI generic support (sg).
It is safe to say N to this -- it is not needed for normal printing
or parallel port CD-ROM/disk support.

To compile this driver as a module, choose M here: the
module will be called ppdev.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TIPAR</term>
<nutsynopsis>
	"Texas Instruments parallel link cable support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you own a Texas Instruments graphing calculator and use a
parallel link cable, then you might be interested in this driver.

If you enable this driver, you will be able to communicate with
your calculator through a set of device nodes under /dev. The
main advantage of this driver is that you don't have to be root
to use this precise link cable (depending on the permissions on
the device nodes, though).

To compile this driver as a module, choose M here: the
module will be called tipar.

If you don't know what a parallel link cable is or what a Texas
Instruments graphing calculator is, then you probably don't need this
driver.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HVC_CONSOLE</term>
<nutsynopsis>
	"pSeries Hypervisor Virtual Console support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC_PSERIES</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
pSeries machines when partitioned support a hypervisor virtual
console. This driver allows each pSeries partition to have a console
which is accessed via the HMC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HVCS</term>
<nutsynopsis>
	"IBM Hypervisor Virtual Console Server support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC_PSERIES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Partitionable IBM Power5 ppc64 machines allow hosting of
firmware virtual consoles from one Linux partition by
another Linux partition.  This driver allows console data
from Linux partitions to be accessed through TTY device
interfaces in the device tree of a Linux partition running
this driver.

To compile this driver as a module, choose M here: the
module will be called hvcs.ko.  Additionally, this module
will depend on arch specific APIs exported from hvcserver.ko
which will also be compiled when this driver is built as a
module.
	</para>

</nutentrybody>
</nutentry>

menu "IPMI"

<nutentry>
	<term>IPMI_HANDLER</term>
<nutsynopsis>
	"IPMI top-level message handler"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the central IPMI message handler, required for IPMI
to work.

IPMI is a standard for managing sensors (temperature,
voltage, etc.) in a system.

See <file:Documentation/IPMI.txt> for more details on the driver.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPMI_PANIC_EVENT</term>
<nutsynopsis>
	"Generate a panic event to all BMCs on a panic"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IPMI_HANDLER</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
When a panic occurs, this will cause the IPMI message handler to
generate an IPMI event describing the panic to each interface
registered with the message handler.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPMI_PANIC_STRING</term>
<nutsynopsis>
	"Generate OEM events containing the panic string"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IPMI_PANIC_EVENT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
When a panic occurs, this will cause the IPMI message handler to
generate IPMI OEM type f0 events holding the IPMB address of the
panic generator (byte 4 of the event), a sequence number for the
string (byte 5 of the event) and part of the string (the rest of the
event).  Bytes 1, 2, and 3 are the normal usage for an OEM event.
You can fetch these events and use the sequence numbers to piece the
string together.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPMI_DEVICE_INTERFACE</term>
<nutsynopsis>
	"Device interface for IPMI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IPMI_HANDLER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This provides an IOCTL interface to the IPMI message handler so
userland processes may use IPMI.  It supports poll() and select().
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPMI_SI</term>
<nutsynopsis>
	"IPMI System Interface handler"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IPMI_HANDLER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Provides a driver for System Interfaces (KCS, SMIC, BT).
Currently, only KCS and SMIC are supported.  If
you are using IPMI, you should probably say "y" here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPMI_WATCHDOG</term>
<nutsynopsis>
	"IPMI Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IPMI_HANDLER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the IPMI watchdog timer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IPMI_POWEROFF</term>
<nutsynopsis>
	"IPMI Poweroff"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IPMI_HANDLER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables a function to power off the system with IPMI if
the IPMI management controller is capable of this.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Watchdog Cards"

<nutentry>
	<term>WATCHDOG</term>
<nutsynopsis>
	"Watchdog Timer Support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here (and to one of the following options) and create a
character special file /dev/watchdog with major number 10 and minor
number 130 using mknod ("man mknod"), you will get a watchdog, i.e.:
subsequently opening the file and then failing to write to it for
longer than 1 minute will result in rebooting the machine. This
could be useful for a networked machine that needs to come back
online as fast as possible after a lock-up. There's both a watchdog
implementation entirely in software (which can sometimes fail to
reboot the machine) and a driver for hardware watchdog boards, which
are more robust and can also keep track of the temperature inside
your computer. For details, read <file:Documentation/watchdog/watchdog.txt>
in the kernel source.

The watchdog is usually used together with the watchdog daemon
which is available from
<ftp://ibiblio.org/pub/Linux/system/daemons/watchdog/>. This daemon can
also monitor NFS connections and can reboot the machine when the process
table is full.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WATCHDOG_NOWAYOUT</term>
<nutsynopsis>
	"Disable watchdog shutdown on close"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The default watchdog behaviour (which you get if you say N here) is
to stop the timer if the process managing it closes the file
/dev/watchdog. It's always remotely possible that this process might
get killed. If you say Y here, the watchdog cannot be stopped once
it has been started.
	</para>

</nutentrybody>
</nutentry>

comment "Watchdog Device Drivers"
<para>
	depends on
	<literal>WATCHDOG</literal>
	</para>


<nutentry>
	<term>SOFT_WATCHDOG</term>
<nutsynopsis>
	"Software watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A software monitoring watchdog. This will fail to reboot your system
from some situations that the hardware watchdog will recover
from. Equally it's a lot cheaper to install.

To compile this driver as a module, choose M here: the
module will be called softdog.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>21285_WATCHDOG</term>
<nutsynopsis>
	"DC21285 watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && FOOTBRIDGE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Intel Footbridge chip contains a builtin watchdog circuit. Say Y
here if you wish to use this. Alternatively say M to compile the
driver as a module, which will be called wdt285.

This driver does not work on all machines. In particular, early CATS
boards have hardware problems that will cause the machine to simply
lock up if the watchdog fires.

"If in doubt, leave it out" - say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>977_WATCHDOG</term>
<nutsynopsis>
	"NetWinder WB83C977 watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the WB977 watchdog included in
NetWinder machines. Alternatively say M to compile the driver as
a module, which will be called wdt977.

Not sure? It's safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IXP2000_WATCHDOG</term>
<nutsynopsis>
	"IXP2000 Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ARCH_IXP2000</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if to include support for the watchdog timer
in the Intel IXP2000(2400, 2800, 2850) network processors.
This driver can be built as a module by choosing M. The module
will be called ixp2000_wdt.

Say N if you are unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IXP4XX_WATCHDOG</term>
<nutsynopsis>
	"IXP4xx Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ARCH_IXP4XX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if to include support for the watchdog timer
in the Intel IXP4xx network processors. This driver can
be built as a module by choosing M. The module will
be called ixp4xx_wdt.

Note: The internal IXP4xx watchdog does a soft CPU reset
which doesn't reset any peripherals. There are circumstances
where the watchdog will fail to reset the board correctly
(e.g., if the boot ROM is in an unreadable state).

Say N if you are unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>S3C2410_WATCHDOG</term>
<nutsynopsis>
	"S3C2410 Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ARCH_S3C2410</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Watchdog timer block in the Samsung S3C2410 chips. This will
reboot the system when the timer expires with the watchdog
enabled.

The driver is limited by the speed of the system's PCLK
signal, so with reasonbaly fast systems (PCLK around 50-66MHz)
then watchdog intervals of over approximately 20seconds are
unavailable.

The driver can be built as a module by choosing M, and will
be called s3c2410_wdt
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SA1100_WATCHDOG</term>
<nutsynopsis>
	"SA1100/PXA2xx watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && (ARCH_SA1100 || ARCH_PXA)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Watchdog timer embedded into SA11x0 and PXA2xx chips. This will
reboot your system when timeout is reached.

NOTE: once enabled, this timer cannot be disabled.

To compile this driver as a module, choose M here: the
module will be called sa1100_wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MPCORE_WATCHDOG</term>
<nutsynopsis>
	"MPcore watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Watchdog timer embedded into the MPcore system.

To compile this driver as a module, choose M here: the
module will be called mpcore_wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACQUIRE_WDT</term>
<nutsynopsis>
	"Acquire SBC Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on Single Board
Computers produced by Acquire Inc (and others). This watchdog
simply watches your kernel to make sure it doesn't freeze, and if
it does, it reboots your computer after a certain amount of time.

To compile this driver as a module, choose M here: the
module will be called acquirewdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADVANTECH_WDT</term>
<nutsynopsis>
	"Advantech SBC Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you are configuring a Linux kernel for the Advantech single-board
computer, say `Y' here to support its built-in watchdog timer
feature. More information can be found at
<http://www.advantech.com.tw/products/>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ALIM1535_WDT</term>
<nutsynopsis>
	"ALi M1535 PMU Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on the ALi M1535 PMU.

To compile this driver as a module, choose M here: the
module will be called alim1535_wdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ALIM7101_WDT</term>
<nutsynopsis>
	"ALi M7101 PMU Computer Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on the ALi M7101 PMU
as used in the x86 Cobalt servers.

To compile this driver as a module, choose M here: the
module will be called alim7101_wdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC520_WDT</term>
<nutsynopsis>
	"AMD Elan SC520 processor Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog built in to the
AMD "Elan" SC520 microcomputer commonly used in embedded systems.
This watchdog simply watches your kernel to make sure it doesn't
freeze, and if it does, it reboots your computer after a certain
amount of time.

You can compile this driver directly into the kernel, or use
it as a module.  The module will be called sc520_wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EUROTECH_WDT</term>
<nutsynopsis>
	"Eurotech CPU-1220/1410 Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the watchdog timer on the Eurotech CPU-1220 and
CPU-1410 cards.  These are PC/104 SBCs. Spec sheets and product
information are at <http://www.eurotech.it/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IB700_WDT</term>
<nutsynopsis>
	"IB700 SBC Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on the IB700 Single
Board Computer produced by TMC Technology (www.tmc-uk.com). This watchdog
simply watches your kernel to make sure it doesn't freeze, and if
it does, it reboots your computer after a certain amount of time.

This driver is like the WDT501 driver but for slightly different hardware.

To compile this driver as a module, choose M here: the
module will be called ib700wdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBMASR</term>
<nutsynopsis>
	"IBM Automatic Server Restart"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the IBM Automatic Server Restart watchdog
timer builtin into some eServer xSeries machines.

To compile this driver as a module, choose M here: the
module will be called ibmasr.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WAFER_WDT</term>
<nutsynopsis>
	"ICP Wafer 5823 Single Board Computer Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the hardware watchdog on the ICP Wafer 5823
Single Board Computer (and probably other similar models).

To compile this driver as a module, choose M here: the
module will be called wafer5823wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I6300ESB_WDT</term>
<nutsynopsis>
	"Intel 6300ESB Timer/Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Hardware driver for the watchdog timer built into the Intel
6300ESB controller hub.

To compile this driver as a module, choose M here: the
module will be called i6300esb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I8XX_TCO</term>
<nutsynopsis>
	"Intel i8xx TCO Timer/Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && (X86 || IA64) && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Hardware driver for the TCO timer built into the Intel 82801
I/O Controller Hub family.  The TCO (Total Cost of Ownership)
timer is a watchdog timer that will reboot the machine after
its second expiration. The expiration time can be configured
with the "heartbeat" parameter.

On some motherboards the driver may fail to reset the chipset's
NO_REBOOT flag which prevents the watchdog from rebooting the
machine. If this is the case you will get a kernel message like
"failed to reset NO_REBOOT flag, reboot disabled by hardware".

To compile this driver as a module, choose M here: the
module will be called i8xx_tco.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC1200_WDT</term>
<nutsynopsis>
	"National Semiconductor PC87307/PC97307 (ala SC1200) Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for National Semiconductor PC87307/PC97307 hardware
watchdog cards as found on the SC1200. This watchdog is mainly used
for power management purposes and can be used to power down the device
during inactivity periods (includes interrupt activity monitoring).

To compile this driver as a module, choose M here: the
module will be called sc1200wdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200_WDT</term>
<nutsynopsis>
	"National Semiconductor SCx200 Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && SCx200 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable the built-in watchdog timer support on the National
Semiconductor SCx200 processors.

If compiled as a module, it will be called scx200_wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>60XX_WDT</term>
<nutsynopsis>
	"SBC-60XX Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver can be used with the watchdog timer found on some
single board computers, namely the 6010 PII based computer.
It may well work with other cards.  It reads port 0x443 to enable
and re-set the watchdog timer, and reads port 0x45 to disable
the watchdog.  If you have a card that behave in similar ways,
you can probably make this driver work with your card as well.

You can compile this driver directly into the kernel, or use
it as a module.  The module will be called sbc60xxwdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SBC8360_WDT</term>
<nutsynopsis>
	"SBC8360 Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>

This is the driver for the hardware watchdog on the SBC8360 Single
Board Computer produced by Axiomtek Co., Ltd. (www.axiomtek.com).

To compile this driver as a module, choose M here: the
module will be called sbc8360.ko.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CPU5_WDT</term>
<nutsynopsis>
	"SMA CPU5 Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TBD.
To compile this driver as a module, choose M here: the
module will be called cpu5wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W83627HF_WDT</term>
<nutsynopsis>
	"W83627HF Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on the W83627HF chipset
as used in Advantech PC-9578 and Tyan S2721-533 motherboards
(and likely others).  This watchdog simply watches your kernel to
make sure it doesn't freeze, and if it does, it reboots your computer
after a certain amount of time.

To compile this driver as a module, choose M here: the
module will be called w83627hf_wdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W83877F_WDT</term>
<nutsynopsis>
	"W83877F (EMACS) Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on the W83877F chipset
as used in EMACS PC-104 motherboards (and likely others).  This
watchdog simply watches your kernel to make sure it doesn't freeze,
and if it does, it reboots your computer after a certain amount of
time.

To compile this driver as a module, choose M here: the
module will be called w83877f_wdt.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W83977F_WDT</term>
<nutsynopsis>
	"W83977F (PCM-5335) Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog on the W83977F I/O chip
as used in AAEON's PCM-5335 SBC (and likely others).  This
watchdog simply watches your kernel to make sure it doesn't freeze,
and if it does, it reboots your computer after a certain amount of
time.

To compile this driver as a module, choose M here: the
module will be called w83977f_wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MACHZ_WDT</term>
<nutsynopsis>
	"ZF MachZ Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you are using a ZF Micro MachZ processor, say Y here, otherwise
N.  This is the driver for the watchdog timer builtin on that
processor using ZF-Logic interface.  This watchdog simply watches
your kernel to make sure it doesn't freeze, and if it does, it
reboots your computer after a certain amount of time.

To compile this driver as a module, choose M here: the
module will be called machzwd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>8xx_WDT</term>
<nutsynopsis>
	"MPC8xx Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && 8xx</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MV64X60_WDT</term>
<nutsynopsis>
	"MV64X60 (Marvell Discovery) Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && MV64X60</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BOOKE_WDT</term>
<nutsynopsis>
	"PowerPC Book-E Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && (BOOKE || 4xx)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Please see Documentation/watchdog/watchdog-api.txt for
more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WATCHDOG_RTAS</term>
<nutsynopsis>
	"RTAS watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && PPC_RTAS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds watchdog support for the RTAS watchdog.

To compile this driver as a module, choose M here. The module
will be called wdrtas.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INDYDOG</term>
<nutsynopsis>
	"Indy/I2 Hardware Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && SGI_IP22</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Hardwaredriver for the Indy's/I2's watchdog. This is a
watchdog timer that will reboot the machine after a 60 second
timer expired and no process has written to /dev/watchdog during
that time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZVM_WATCHDOG</term>
<nutsynopsis>
	"z/VM Watchdog Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
IBM s/390 and zSeries machines running under z/VM 5.1 or later
provide a virtual watchdog timer to their guest that cause a
user define Control Program command to be executed after a
timeout.

To compile this driver as a module, choose M here. The module
will be called vmwatchdog.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SH_WDT</term>
<nutsynopsis>
	"SuperH Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && SUPERH</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver adds watchdog support for the integrated watchdog in the
SuperH processors. If you have one of these processors and wish
to have watchdog support enabled, say Y, otherwise say N.

As a side note, saying Y here will automatically boost HZ to 1000
so that the timer has a chance to clear the overflow counter. On
slower systems (such as the SH-2 and SH-3) this will likely yield
some performance issues. As such, the WDT should be avoided here
unless it is absolutely necessary.

To compile this driver as a module, choose M here: the
module will be called shwdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WATCHDOG_CP1XXX</term>
<nutsynopsis>
	"CP1XXX Hardware Watchdog support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && SPARC64 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the hardware watchdog timers present on
Sun Microsystems CompactPCI models CP1400 and CP1500.

To compile this driver as a module, choose M here: the
module will be called cpwatchdog.

If you do not have a CompactPCI model CP1400 or CP1500, or
another UltraSPARC-IIi-cEngine boardset with hardware watchdog,
you should say N to this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WATCHDOG_RIO</term>
<nutsynopsis>
	"RIO Hardware Watchdog support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && SPARC64 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the hardware watchdog capability on Sun RIO
machines.  The watchdog timeout period is normally one minute but
can be changed with a boot-time parameter.
	</para>

</nutentrybody>
</nutentry>

comment "ISA-based Watchdog Cards"
<para>
	depends on
	<literal>WATCHDOG && ISA</literal>
	</para>


<nutentry>
	<term>PCWATCHDOG</term>
<nutsynopsis>
	"Berkshire Products ISA-PC Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the Berkshire Products ISA-PC Watchdog card.
This card simply watches your kernel to make sure it doesn't freeze,
and if it does, it reboots your computer after a certain amount of
time. This driver is like the WDT501 driver but for different
hardware. Please read <file:Documentation/watchdog/pcwd-watchdog.txt>. The PC
watchdog cards can be ordered from <http://www.berkprod.com/>.

To compile this driver as a module, choose M here: the
module will be called pcwd.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MIXCOMWD</term>
<nutsynopsis>
	"Mixcom Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Mixcom hardware watchdog cards.  This
watchdog simply watches your kernel to make sure it doesn't freeze,
and if it does, it reboots your computer after a certain amount of
time.

To compile this driver as a module, choose M here: the
module will be called mixcomwd.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WDT</term>
<nutsynopsis>
	"WDT Watchdog timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a WDT500P or WDT501P watchdog board, say Y here,
otherwise N. It is not possible to probe for this board, which means
that you have to inform the kernel about the IO port and IRQ that
is needed (you can do this via the io and irq parameters)

To compile this driver as a module, choose M here: the
module will be called wdt.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WDT_501</term>
<nutsynopsis>
	"WDT501 features"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WDT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Saying Y here and creating a character special file /dev/temperature
with major number 10 and minor number 131 ("man mknod") will give
you a thermometer inside your computer: reading from
/dev/temperature yields one byte, the temperature in degrees
Fahrenheit. This works only if you have a WDT501P watchdog board
installed.

If you want to enable the Fan Tachometer on the WDT501P, then you
can do this via the tachometer parameter. Only do this if you have a
fan tachometer actually set up.
	</para>

</nutentrybody>
</nutentry>

comment "PCI-based Watchdog Cards"
<para>
	depends on
	<literal>WATCHDOG && PCI</literal>
	</para>


<nutentry>
	<term>PCIPCWATCHDOG</term>
<nutsynopsis>
	"Berkshire Products PCI-PC Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the Berkshire Products PCI-PC Watchdog card.
This card simply watches your kernel to make sure it doesn't freeze,
and if it does, it reboots your computer after a certain amount of
time. The card can also monitor the internal temperature of the PC.
More info is available at <http://www.berkprod.com/pci_pc_watchdog.htm>.

To compile this driver as a module, choose M here: the
module will be called pcwd_pci.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WDTPCI</term>
<nutsynopsis>
	"PCI-WDT500/501 Watchdog timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a PCI-WDT500/501 watchdog board, say Y here, otherwise N.

To compile this driver as a module, choose M here: the
module will be called wdt_pci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>WDT_501_PCI</term>
<nutsynopsis>
	"PCI-WDT501 features"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WDTPCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Saying Y here and creating a character special file /dev/temperature
with major number 10 and minor number 131 ("man mknod") will give
you a thermometer inside your computer: reading from
/dev/temperature yields one byte, the temperature in degrees
Fahrenheit. This works only if you have a PCI-WDT501 watchdog board
installed.

If you want to enable the Fan Tachometer on the PCI-WDT501, then you
can do this via the tachometer parameter. Only do this if you have a
fan tachometer actually set up.
	</para>

</nutentrybody>
</nutentry>

comment "USB-based Watchdog Cards"
<para>
	depends on
	<literal>WATCHDOG && USB</literal>
	</para>


<nutentry>
	<term>USBPCWATCHDOG</term>
<nutsynopsis>
	"Berkshire Products USB-PC Watchdog"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>WATCHDOG && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the driver for the Berkshire Products USB-PC Watchdog card.
This card simply watches your kernel to make sure it doesn't freeze,
and if it does, it reboots your computer after a certain amount of
time. The card can also monitor the internal temperature of the PC.
More info is available at <http://www.berkprod.com/usb_pc_watchdog.htm>.

To compile this driver as a module, choose M here: the
module will be called pcwd_usb.

Most people will say N.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>DS1620</term>
<nutsynopsis>
	"NetWinder thermometer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_NETWINDER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the thermal management hardware
found in the NetWinder. This driver allows the user to control the
temperature set points and to read the current temperature.

It is also possible to say M here to build it as a module (ds1620)
It is recommended to be used on a NetWinder, but it is not a
necessity.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NWBUTTON</term>
<nutsynopsis>
	"NetWinder Button"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_NETWINDER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character device node /dev/nwbutton
with major and minor numbers 10 and 158 ("man mknod"), then every
time the orange button is pressed a number of times, the number of
times the button was pressed will be written to that device.

This is most useful for applications, as yet unwritten, which
perform actions based on how many times the button is pressed in a
row.

Do not hold the button down for too long, as the driver does not
alter the behaviour of the hardware reset circuitry attached to the
button; it will still execute a hard reset if the button is held
down for longer than approximately five seconds.

To compile this driver as a module, choose M here: the
module will be called nwbutton.

Most people will answer Y to this question and "Reboot Using Button"
below to be able to initiate a system shutdown from the button.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NWBUTTON_REBOOT</term>
<nutsynopsis>
	"Reboot Using Button"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NWBUTTON</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, then you will be able to initiate a system
shutdown and reboot by pressing the orange button a number of times.
The number of presses to initiate the shutdown is two by default,
but this can be altered by modifying the value of NUM_PRESSES_REBOOT
in nwbutton.h and recompiling the driver or, if you compile the
driver as a module, you can specify the number of presses at load
time with "insmod button reboot_count=<something>".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NWFLASH</term>
<nutsynopsis>
	"NetWinder flash support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_NETWINDER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character device /dev/flash with
major 10 and minor 160 you can manipulate the flash ROM containing
the NetWinder firmware. Be careful as accidentally overwriting the
flash contents can render your computer unbootable. On no account
allow random users access to this device. :-)

To compile this driver as a module, choose M here: the
module will be called nwflash.

If you're not sure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HW_RANDOM</term>
<nutsynopsis>
	"Intel/AMD/VIA HW Random Number Generator support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(X86 || IA64) && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides kernel-side support for the Random Number
Generator hardware found on Intel i8xx-based motherboards,
AMD 76x-based motherboards, and Via Nehemiah CPUs.

Provides a character driver, used to read() entropy data.

To compile this driver as a module, choose M here: the
module will be called hw_random.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NVRAM</term>
<nutsynopsis>
	"/dev/nvram support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI || X86 || X86_64 || ARM || GENERIC_NVRAM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character special file /dev/nvram
with major number 10 and minor number 144 using mknod ("man mknod"),
you get read and write access to the extra bytes of non-volatile
memory in the real time clock (RTC), which is contained in every PC
and most Ataris.  The actual number of bytes varies, depending on the
nvram in the system, but is usually 114 (128-14 for the RTC).

This memory is conventionally called "CMOS RAM" on PCs and "NVRAM"
on Ataris. /dev/nvram may be used to view settings there, or to
change them (with some utility). It could also be used to frequently
save a few bits of very important data that may not be lost over
power-off and for which writing to disk is too insecure. Note
however that most NVRAM space in a PC belongs to the BIOS and you
should NEVER idly tamper with it. See Ralf Brown's interrupt list
for a guide to the use of CMOS bytes by your BIOS.

On Atari machines, /dev/nvram is always configured and does not need
to be selected.

To compile this driver as a module, choose M here: the
module will be called nvram.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RTC</term>
<nutsynopsis>
	"Enhanced Real Time Clock Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!PPC32 && !PARISC && !IA64 && !M68K</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character special file /dev/rtc with
major number 10 and minor number 135 using mknod ("man mknod"), you
will get access to the real time clock (or hardware clock) built
into your computer.

Every PC has such a clock built in. It can be used to generate
signals from as low as 1Hz up to 8192Hz, and can also be used
as a 24 hour alarm. It reports status information via the file
/proc/driver/rtc and its behaviour is set by various ioctls on
/dev/rtc.

If you run Linux on a multiprocessor machine and said Y to
"Symmetric Multi Processing" above, you should say Y here to read
and set the RTC in an SMP compatible fashion.

If you think you have a use for such a device (such as periodic data
sampling), then say Y here, and read <file:Documentation/rtc.txt>
for details.

To compile this driver as a module, choose M here: the
module will be called rtc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_DS1286</term>
<nutsynopsis>
	"SGI DS1286 RTC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SGI_IP22</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character special file /dev/rtc with
major number 10 and minor number 135 using mknod ("man mknod"), you
will get access to the real time clock built into your computer.
Every SGI has such a clock built in. It reports status information
via the file /proc/rtc and its behaviour is set by various ioctls on
/dev/rtc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_IP27_RTC</term>
<nutsynopsis>
	"SGI M48T35 RTC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SGI_IP27</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here and create a character special file /dev/rtc with
major number 10 and minor number 135 using mknod ("man mknod"), you
will get access to the real time clock built into your computer.
Every SGI has such a clock built in. It reports status information
via the file /proc/rtc and its behaviour is set by various ioctls on
/dev/rtc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GEN_RTC</term>
<nutsynopsis>
	"Generic /dev/rtc emulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>RTC!=y && !IA64 && !ARM && !PPC64 && !M32R && !SPARC32 && !SPARC64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character special file /dev/rtc with
major number 10 and minor number 135 using mknod ("man mknod"), you
will get access to the real time clock (or hardware clock) built
into your computer.

It reports status information via the file /proc/driver/rtc and its
behaviour is set by various ioctls on /dev/rtc. If you enable the
"extended RTC operation" below it will also provide an emulation
for RTC_UIE which is required by some programs and may improve
precision in some cases.

To compile this driver as a module, choose M here: the
module will be called genrtc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GEN_RTC_X</term>
<nutsynopsis>
	"Extended RTC operation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>GEN_RTC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Provides an emulation for RTC_UIE which is required by some programs
and may improve precision of the generic RTC support in some cases.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EFI_RTC</term>
<nutsynopsis>
	"EFI Real Time Clock Services"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IA64</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DS1302</term>
<nutsynopsis>
	"DS1302 RTC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>M32R && (PLAT_M32700UT || PLAT_OPSPUT)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here and create a character special file /dev/rtc with
major number 121 and minor number 0 using mknod ("man mknod"), you
will get access to the real time clock (or hardware clock) built
into your computer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>S3C2410_RTC</term>
<nutsynopsis>
	"S3C2410 RTC Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_S3C2410</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
RTC (Realtime Clock) driver for the clock inbuilt into the
Samsung S3C2410. This can provide periodic interrupt rates
from 1Hz to 64Hz for user programs, and wakeup from Alarm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RTC_VR41XX</term>
<nutsynopsis>
	"NEC VR4100 series Real Time Clock Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CPU_VR41XX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>COBALT_LCD</term>
<nutsynopsis>
	"Support for Cobalt LCD"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MIPS_COBALT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for the LCD display and buttons found
on Cobalt systems through a misc device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DTLK</term>
<nutsynopsis>
	"Double Talk PC internal speech card support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for the DoubleTalk PC, a speech synthesizer
manufactured by RC Systems (<http://www.rcsys.com/>).  It is also
called the `internal DoubleTalk'.

To compile this driver as a module, choose M here: the
module will be called dtlk.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>R3964</term>
<nutsynopsis>
	"Siemens R3964 line discipline"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver allows synchronous communication with devices using the
Siemens R3964 packet protocol. Unless you are dealing with special
hardware like PLCs, you are unlikely to need this.

To compile this driver as a module, choose M here: the
module will be called n_r3964.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>APPLICOM</term>
<nutsynopsis>
	"Applicom intelligent fieldbus card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides the kernel-side support for the intelligent
fieldbus cards made by Applicom International. More information
about these cards can be found on the WWW at the address
<http://www.applicom-int.com/>, or by email from David Woodhouse
<dwmw2@infradead.org>.

To compile this driver as a module, choose M here: the
module will be called applicom.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SONYPI</term>
<nutsynopsis>
	"Sony Vaio Programmable I/O Control Device support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && X86 && PCI && INPUT && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver enables access to the Sony Programmable I/O Control
Device which can be found in many (all ?) Sony Vaio laptops.

If you have one of those laptops, read
<file:Documentation/sonypi.txt>, and say Y or M here.

To compile this driver as a module, choose M here: the
module will be called sonypi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TANBAC_TB0219</term>
<nutsynopsis>
	"TANBAC TB0219 base board support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>TANBAC_TB022X</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

menu "Ftape, the floppy tape device driver"

<nutentry>
	<term>FTAPE</term>
<nutsynopsis>
	"Ftape (QIC-80/Travan) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BROKEN_ON_SMP && (ALPHA || X86)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a tape drive that is connected to your floppy
controller, say Y here.

Some tape drives (like the Seagate "Tape Store 3200" or the Iomega
"Ditto 3200" or the Exabyte "Eagle TR-3") come with a "high speed"
controller of their own. These drives (and their companion
controllers) are also supported if you say Y here.

If you have a special controller (such as the CMS FC-10, FC-20,
Mountain Mach-II, or any controller that is based on the Intel 82078
FDC like the high speed controllers by Seagate and Exabyte and
Iomega's "Ditto Dash") you must configure it by selecting the
appropriate entries from the "Floppy tape controllers" sub-menu
below and possibly modify the default values for the IRQ and DMA
channel and the IO base in ftape's configuration menu.

If you want to use your floppy tape drive on a PCI-bus based system,
please read the file <file:drivers/char/ftape/README.PCI>.

The ftape kernel driver is also available as a runtime loadable
module. To compile this driver as a module, choose M here: the
module will be called ftape.

Note that the Ftape-HOWTO is out of date (sorry) and documents the
older version 2.08 of this software but still contains useful
information.  There is a web page with more recent documentation at
<http://www.instmath.rwth-aachen.de/~heine/ftape/>.  This page
always contains the latest release of the ftape driver and useful
information (backup software, ftape related patches and
documentation, FAQ).  Note that the file system interface has
changed quite a bit compared to previous versions of ftape.  Please
read <file:Documentation/ftape.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZFTAPE</term>
<nutsynopsis>
	"Zftape, the VFS interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Normally, you want to say Y or M. DON'T say N here or you
WON'T BE ABLE TO USE YOUR FLOPPY TAPE DRIVE.

The ftape module itself no longer contains the routines necessary
to interface with the kernel VFS layer (i.e. to actually write data
to and read data from the tape drive).  Instead the file system
interface (i.e. the hardware independent part of the driver) has
been moved to a separate module.

To compile this driver as a module, choose M here: the
module will be called zftape.

Regardless of whether you say Y or M here, an additional runtime
loadable module called `zft-compressor' which contains code to
support user transparent on-the-fly compression based on Ross
William's lzrw3 algorithm will be produced.  If you have enabled the
kernel module loader (i.e. have said Y to "Kernel module loader
support", above) then `zft-compressor' will be loaded
automatically by zftape when needed.

Despite its name, zftape does NOT use compression by default.  The
file <file:Documentation/ftape.txt> contains a short description of
the most important changes in the file system interface compared to
previous versions of ftape.  The ftape home page
<http://www.instmath.rwth-aachen.de/~heine/ftape/> contains
further information.

IMPORTANT NOTE: zftape can read archives created by previous
versions of ftape and provide file mark support (i.e. fast skipping
between tape archives) but previous version of ftape will lack file
mark support when reading archives produced by zftape.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZFT_DFLT_BLK_SZ</term>
<nutsynopsis>
	"Default block size"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ZFTAPE</literal>
	</para>

	<para>
	default value
	<literal>10240 if ZFTAPE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
If unsure leave this at its default value, i.e. 10240. Note that
you specify only the default block size here. The block size can be
changed at run time using the MTSETBLK tape operation with the
MTIOCTOP ioctl (i.e. with "mt -f /dev/qft0 setblk #BLKSZ" from the
shell command line).

The probably most striking difference between zftape and previous
versions of ftape is the fact that all data must be written or read
in multiples of a fixed block size. The block size defaults to
10240 which is what GNU tar uses. The values for the block size
should be either 1 or multiples of 1024 up to a maximum value of
63488 (i.e. 62 K). If you specify `1' then zftape's builtin
compression will be disabled.

Reasonable values are `10240' (GNU tar's default block size),
`5120' (afio's default block size), `32768' (default block size some
backup programs assume for SCSI tape drives) or `1' (no restriction
on block size, but disables builtin compression).
	</para>

</nutentrybody>
</nutentry>

comment "The compressor will be built as a module only!"
<para>
	depends on
	<literal>FTAPE && ZFTAPE</literal>
	</para>


<nutentry>
	<term>ZFT_COMPRESSOR</term>
	<para>
	default value
	<literal>m if FTAPE!=n && ZFTAPE!=n</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_NR_BUFFERS</term>
<nutsynopsis>
	"Number of ftape buffers (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>3 if FTAPE && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Please leave this at `3' unless you REALLY know what you are doing.
It is not necessary to change this value. Values below 3 make the
proper use of ftape impossible, values greater than 3 are a waste of
memory. You can change the amount of DMA memory used by ftape at
runtime with "mt -f /dev/qft0 setdrvbuffer #NUMBUFFERS". Each buffer
wastes 32 KB of memory. Please note that this memory cannot be
swapped out.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_PROC_FS</term>
<nutsynopsis>
	"Enable procfs status report (+2kb)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Optional. Saying Y will result in creation of a directory
`/proc/ftape' under the /proc file system. The files can be viewed
with your favorite pager (i.e. use "more /proc/ftape/history" or
"less /proc/ftape/history" or simply "cat /proc/ftape/history"). The
file will contain some status information about the inserted
cartridge, the kernel driver, your tape drive, the floppy disk
controller and the error history for the most recent use of the
kernel driver. Saying Y will enlarge the size of the ftape driver
by approximately 2 KB.

WARNING: When compiling ftape as a module (i.e. saying M to "Floppy
tape drive") it is dangerous to use ftape's /proc file system
interface. Accessing `/proc/ftape' while the module is unloaded will
result in a kernel Oops. This cannot be fixed from inside ftape.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Debugging output"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE</literal>
	</para>

	<para>
	default value
	<literal>FT_NORMAL_DEBUG if FTAPE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_NORMAL_DEBUG</term>
<nutsynopsis>
	"Normal"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option controls the amount of debugging output the ftape driver
is ABLE to produce; it does not increase or diminish the debugging
level itself. If unsure, leave this at its default setting,
i.e. choose "Normal".

Ftape can print lots of debugging messages to the system console
resp. kernel log files. Reducing the amount of possible debugging
output reduces the size of the kernel module by some KB, so it might
be a good idea to use "None" for emergency boot floppies.

If you want to save memory then the following strategy is
recommended: leave this option at its default setting "Normal" until
you know that the driver works as expected, afterwards reconfigure
the kernel, this time specifying "Reduced" or "None" and recompile
and install the kernel as usual. Note that choosing "Excessive"
debugging output does not increase the amount of debugging output
printed to the console but only makes it possible to produce
"Excessive" debugging output.

Please read <file:Documentation/ftape.txt> for a short description
how to control the amount of debugging output.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_FULL_DEBUG</term>
<nutsynopsis>
	"Excessive"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extremely verbose output for driver debugging purposes.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_NO_TRACE</term>
<nutsynopsis>
	"Reduced"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Reduced tape driver debugging output.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_NO_TRACE_AT_ALL</term>
<nutsynopsis>
	"None"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Suppress all debugging output from the tape drive.
	</para>

</nutentrybody>
</nutentry>

comment "Hardware configuration"
<para>
	depends on
	<literal>FTAPE</literal>
	</para>


<nutentry>
choice
  #choice value
<nutsynopsis>
	"Floppy tape controllers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE</literal>
	</para>

	<para>
	default value
	<literal>FT_STD_FDC if FTAPE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_STD_FDC</term>
<nutsynopsis>
	"Standard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Only change this setting if you have a special controller. If you
didn't plug any add-on card into your computer system but just
plugged the floppy tape cable into the already existing floppy drive
controller then you don't want to change the default setting,
i.e. choose "Standard".

Choose "MACH-2" if you have a Mountain Mach-2 controller.
Choose "FC-10/FC-20" if you have a Colorado FC-10 or FC-20
controller.
Choose "Alt/82078" if you have another controller that is located at
an IO base address different from the standard floppy drive
controller's base address of `0x3f0', or uses an IRQ (interrupt)
channel different from `6', or a DMA channel different from
`2'. This is necessary for any controller card that is based on
Intel's 82078 FDC such as Seagate's, Exabyte's and Iomega's "high
speed" controllers.

If you choose something other than "Standard" then please make
sure that the settings for the IO base address and the IRQ and DMA
channel in the configuration menus below are correct. Use the manual
of your tape drive to determine the correct settings!

If you are already successfully using your tape drive with another
operating system then you definitely should use the same settings
for the IO base, the IRQ and DMA channel that have proven to work
with that other OS.

Note that this menu lets you specify only the default setting for
the hardware setup. The hardware configuration can be changed at
boot time (when ftape is compiled into the kernel, i.e. if you
have said Y to "Floppy tape drive") or module load time (i.e. if you
have said M to "Floppy tape drive").

Please read also the file <file:Documentation/ftape.txt> which
contains a short description of the parameters that can be set at
boot or load time. If you want to use your floppy tape drive on a
PCI-bus based system, please read the file
<file:drivers/char/ftape/README.PCI>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_MACH2</term>
<nutsynopsis>
	"MACH-2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_PROBE_FC10</term>
<nutsynopsis>
	"FC-10/FC-20"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_ALT_FDC</term>
<nutsynopsis>
	"Alt/82078"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

comment "Consult the manuals of your tape drive for the correct settings!"
<para>
	depends on
	<literal>FTAPE && !FT_STD_FDC</literal>
	</para>


<nutentry>
	<term>FT_FDC_BASE</term>
<nutsynopsis>
	"IO base of the floppy disk controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && !FT_STD_FDC</literal>
	</para>

	<para>
	default value
	<literal>0 if FTAPE && !FT_STD_FDC</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
You don't need to specify a value if the following default
settings for the base IO address are correct:
<<< MACH-2     : 0x1E0 >>>
<<< FC-10/FC-20: 0x180 >>>
<<< Secondary  : 0x370 >>>
Secondary refers to a secondary FDC controller like the "high speed"
controllers delivered by Seagate or Exabyte or Iomega's Ditto Dash.
Please make sure that the setting for the IO base address
specified here is correct. USE THE MANUAL OF YOUR TAPE DRIVE OR
CONTROLLER CARD TO DETERMINE THE CORRECT SETTING. If you are already
successfully using the tape drive with another operating system then
you definitely should use the same settings for the IO base that has
proven to work with that other OS.

Note that this menu lets you specify only the default setting for
the IO base. The hardware configuration can be changed at boot time
(when ftape is compiled into the kernel, i.e. if you specified Y to
"Floppy tape drive") or module load time (i.e. if you have said M to
"Floppy tape drive").

Please read also the file <file:Documentation/ftape.txt> which
contains a short description of the parameters that can be set at
boot or load time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_FDC_IRQ</term>
<nutsynopsis>
	"IRQ channel of the floppy disk controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && !FT_STD_FDC</literal>
	</para>

	<para>
	default value
	<literal>0 if FTAPE && !FT_STD_FDC</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
You don't need to specify a value if the following default
settings for the interrupt channel are correct:
<<< MACH-2     : 6 >>>
<<< FC-10/FC-20: 9 >>>
<<< Secondary  : 6 >>>
Secondary refers to secondary a FDC controller like the "high speed"
controllers delivered by Seagate or Exabyte or Iomega's Ditto Dash.
Please make sure that the setting for the IO base address
specified here is correct. USE THE MANUAL OF YOUR TAPE DRIVE OR
CONTROLLER CARD TO DETERMINE THE CORRECT SETTING. If you are already
successfully using the tape drive with another operating system then
you definitely should use the same settings for the IO base that has
proven to work with that other OS.

Note that this menu lets you specify only the default setting for
the IRQ channel. The hardware configuration can be changed at boot
time (when ftape is compiled into the kernel, i.e. if you said Y to
"Floppy tape drive") or module load time (i.e. if you said M to
"Floppy tape drive").

Please read also the file <file:Documentation/ftape.txt> which
contains a short description of the parameters that can be set at
boot or load time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_FDC_DMA</term>
<nutsynopsis>
	"DMA channel of the floppy disk controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && !FT_STD_FDC</literal>
	</para>

	<para>
	default value
	<literal>0 if FTAPE && !FT_STD_FDC</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
You don't need to specify a value if the following default
settings for the DMA channel are correct:
<<< MACH-2     : 2 >>>
<<< FC-10/FC-20: 3 >>>
<<< Secondary  : 2 >>>
Secondary refers to a secondary FDC controller like the "high speed"
controllers delivered by Seagate or Exabyte or Iomega's Ditto Dash.
Please make sure that the setting for the IO base address
specified here is correct. USE THE MANUAL OF YOUR TAPE DRIVE OR
CONTROLLER CARD TO DETERMINE THE CORRECT SETTING. If you are already
successfully using the tape drive with another operating system then
you definitely should use the same settings for the IO base that has
proven to work with that other OS.

Note that this menu lets you specify only the default setting for
the DMA channel. The hardware configuration can be changed at boot
time (when ftape is compiled into the kernel, i.e. if you said Y to
"Floppy tape drive") or module load time (i.e. if you said M to
"Floppy tape drive").

Please read also the file <file:Documentation/ftape.txt> which
contains a short description of the parameters that can be set at
boot or load time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_FDC_THR</term>
<nutsynopsis>
	"Default FIFO threshold (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>8 if FTAPE && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Set the FIFO threshold of the FDC. If this is higher the DMA
controller may serve the FDC after a higher latency time. If this is
lower, fewer DMA transfers occur leading to less bus contention.
You may try to tune this if ftape annoys you with "reduced data
rate because of excessive overrun errors" messages. However, this
doesn't seem to have too much effect.

If unsure, don't touch the initial value, i.e. leave it at "8".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_FDC_MAX_RATE</term>
<nutsynopsis>
	"Maximal data rate to use (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>2000 if FTAPE && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
With some motherboard/FDC combinations ftape will not be able to
run your FDC/tape drive combination at the highest available
speed. If this is the case you'll encounter "reduced data rate
because of excessive overrun errors" messages and lots of retries
before ftape finally decides to reduce the data rate.

In this case it might be desirable to tell ftape beforehand that
it need not try to run the tape drive at the highest available
speed. If unsure, leave this disabled, i.e. leave it at 2000
bits/sec.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FT_ALPHA_CLOCK</term>
<nutsynopsis>
	"CPU clock frequency of your DEC Alpha"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FTAPE && ALPHA</literal>
	</para>

	<para>
	default value
	<literal>0 if FTAPE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
On some DEC Alpha machines the CPU clock frequency cannot be
determined automatically, so you need to specify it here ONLY if
running a DEC Alpha, otherwise this setting has no effect.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>AGP</term>
<nutsynopsis>
	"/dev/agpgart (AGP Support)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ALPHA || IA64 || PPC || X86) && !GART_IOMMU</literal>
	</para>

	<para>
	default value
	<literal>y if (ALPHA || IA64 || PPC || X86) && GART_IOMMU</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
AGP (Accelerated Graphics Port) is a bus system mainly used to
connect graphics cards to the rest of the system.

If you have an AGP system and you say Y here, it will be possible to
use the AGP features of your 3D rendering video card. This code acts
as a sort of "AGP driver" for the motherboard's chipset.

If you need more texture memory than you can get with the AGP GART
(theoretically up to 256 MB, but in practice usually 64 or 128 MB
due to kernel allocation issues), you could use PCI accesses
and have up to a couple gigs of texture space.

Note that this is the only means to have XFree4/GLX use
write-combining with MTRR support on the AGP bus. Without it, OpenGL
direct rendering will be a lot slower but still faster than PIO.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called agpgart.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_ALI</term>
<nutsynopsis>
	"ALI chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x on the following ALi chipsets.  The supported chipsets
include M1541, M1621, M1631, M1632, M1641,M1647,and M1651.
For the ALi-chipset question, ALi suggests you refer to
<http://www.ali.com.tw/eng/support/index.shtml>.

The M1541 chipset can do AGP 1x and 2x, but note that there is an
acknowledged incompatibility with Matrox G200 cards. Due to
timing issues, this chipset cannot do AGP 2x with the G200.
This is a hardware limitation. AGP 1x seems to be fine, though.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_ATI</term>
<nutsynopsis>
	"ATI chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x on the ATI RadeonIGP family of chipsets.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_AMD</term>
<nutsynopsis>
	"AMD Irongate, 761, and 762 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x on AMD Irongate, 761, and 762 chipsets.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_AMD64</term>
<nutsynopsis>
	"AMD Opteron/Athlon64 on-CPU GART support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !GART_IOMMU</literal>
	</para>

	<para>
	default value
	<literal>y if AGP && X86 && GART_IOMMU</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x using the on-CPU northbridge of the AMD Athlon64/Opteron CPUs.
You still need an external AGP bridge like the AMD 8151, VIA
K8T400M, SiS755. It may also support other AGP bridges when loaded
with agp_try_unsupported=1.
You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say Y
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_INTEL</term>
<nutsynopsis>
	"Intel 440LX/BX/GX, I8xx and E7x05 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of XFree86 4.x
on Intel 440LX/BX/GX, 815, 820, 830, 840, 845, 850, 860, 875,
E7205 and E7505 chipsets and full support for the 810, 815, 830M, 845G,
852GM, 855GM, 865G and I915 integrated graphics chipsets.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI, or if you have any Intel integrated graphics
chipsets.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_NVIDIA</term>
<nutsynopsis>
	"NVIDIA nForce/nForce2 chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x on the following NVIDIA chipsets.  The supported chipsets
include nForce and nForce2
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_SIS</term>
<nutsynopsis>
	"SiS chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x on Silicon Integrated Systems [SiS] chipsets.

Note that 5591/5592 AGP chipsets are NOT supported.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_SWORKS</term>
<nutsynopsis>
	"Serverworks LE/HE chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the Serverworks AGP card.  See 
<http://www.serverworks.com/> for product descriptions and images.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_VIA</term>
<nutsynopsis>
	"VIA chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the GLX component of
XFree86 4.x on VIA MVP3/Apollo Pro chipsets.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_I460</term>
<nutsynopsis>
	"Intel 460GX chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && (IA64_DIG || IA64_GENERIC)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP GART support for the Intel 460GX chipset
for IA64 processors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_HP_ZX1</term>
<nutsynopsis>
	"HP ZX1 chipset AGP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP GART support for the HP ZX1 chipset
for IA64 processors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_ALPHA_CORE</term>
<nutsynopsis>
	"Alpha AGP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)</literal>
	</para>

	<para>
	default value
	<literal>AGP if AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_UNINORTH</term>
<nutsynopsis>
	"Apple UniNorth & U3 AGP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && PPC_PMAC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for Apple machines with a
UniNorth or U3 (Apple G5) bridge.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_EFFICEON</term>
<nutsynopsis>
	"Transmeta Efficeon support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP support for the Transmeta Efficeon
series processors with integrated northbridges.

You should say Y here if you use XFree86 3.3.6 or 4.x and want to
use GLX or DRI.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AGP_SGI_TIOCA</term>
<nutsynopsis>
	"SGI TIO chipset AGP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>AGP && (IA64_SGI_SN2 || IA64_GENERIC)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option gives you AGP GART support for the SGI TIO chipset
for IA64 processors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM</term>
<nutsynopsis>
	"Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(AGP || AGP=n) && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Kernel-level support for the Direct Rendering Infrastructure (DRI)
introduced in XFree86 4.0. If you say Y here, you need to select
the module that's right for your graphics card from the list below.
These modules provide support for synchronization, security, and
DMA transfers. Please see <http://dri.sourceforge.net/> for more
details.  You should also select and configure AGP
(/dev/agpgart) support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_TDFX</term>
<nutsynopsis>
	"3dfx Banshee/Voodoo3+"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a 3dfx Banshee or Voodoo3 (or later),
graphics card.  If M is selected, the module will be called tdfx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_R128</term>
<nutsynopsis>
	"ATI Rage 128"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have an ATI Rage 128 graphics card.  If M
is selected, the module will be called r128.  AGP support for
this card is strongly suggested (unless you have a PCI version).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_RADEON</term>
<nutsynopsis>
	"ATI Radeon"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have an ATI Radeon graphics card.  There
are both PCI and AGP versions.  You don't need to choose this to
run the Radeon in plain VGA mode.  There is a product page at
<http://www.ati.com/na/pages/products/pc/radeon32/index.html>.
If M is selected, the module will be called radeon.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_I810</term>
<nutsynopsis>
	"Intel I810"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM && AGP && AGP_INTEL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have an Intel I810 graphics card.  If M is
selected, the module will be called i810.  AGP support is required
for this driver to work.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Intel 830M, 845G, 852GM, 855GM, 865G"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM && AGP && AGP_INTEL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_I830</term>
<nutsynopsis>
	"i830 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a system that has Intel 830M, 845G,
852GM, 855GM or 865G integrated graphics.  If M is selected, the
module will be called i830.  AGP support is required for this driver
to work. This driver will eventually be replaced by the i915 one.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_I915</term>
<nutsynopsis>
	"i915 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a system that has Intel 830M, 845G,
852GM, 855GM 865G or 915G integrated graphics.  If M is selected, the
module will be called i915.  AGP support is required for this driver
to work. This driver will eventually replace the I830 driver, when
later release of X start to use the new DDX and DRI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_MGA</term>
<nutsynopsis>
	"Matrox g200/g400"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a Matrox G200, G400 or G450 graphics
card.  If M is selected, the module will be called mga.  AGP
support is required for this driver to work.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_SIS</term>
<nutsynopsis>
	"SiS video cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM && AGP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a SiS 630 or compatible video 
chipset. If M is selected the module will be called sis. AGP
support is required for this driver to work.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_VIA</term>
<nutsynopsis>
	"Via unichrome video cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a Via unichrome or compatible video
chipset. If M is selected the module will be called via.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DRM_SAVAGE</term>
<nutsynopsis>
	"Savage video cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DRM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you have a Savage3D/4/SuperSavage/Pro/Twister
chipset. If M is selected the module will be called savage.
	</para>

</nutentrybody>
</nutentry>

menu "PCMCIA character devices"
<para>
	depends on
	<literal>HOTPLUG && PCMCIA!=n</literal>
	</para>


<nutentry>
	<term>SYNCLINK_CS</term>
<nutsynopsis>
	"SyncLink PC Card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HOTPLUG && PCMCIA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable support for the SyncLink PC Card serial adapter, running
asynchronous and HDLC communications up to 512Kbps. The port is
selectable for RS-232, V.35, RS-449, RS-530, and X.21

This driver may be built as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called synclinkmp.  If you want to do that, say M
here.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>MWAVE</term>
<nutsynopsis>
	"ACP Modem (Mwave) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The ACP modem (Mwave) for Linux is a WinModem. It is composed of a
kernel driver and a user level application. Together these components
support direct attachment to public switched telephone networks (PSTNs)
and support selected world wide countries.

This version of the ACP Modem driver supports the IBM Thinkpad 600E,
600, and 770 that include on board ACP modem hardware.

The modem also supports the standard communications port interface
(ttySx) and is compatible with the Hayes AT Command Set.

The user level application needed to use this driver can be found at
the IBM Linux Technology Center (LTC) web site:
<http://www.ibm.com/linux/ltc/>.

If you own one of the above IBM Thinkpads which has the Mwave chipset
in it, say Y.

To compile this driver as a module, choose M here: the
module will be called mwave.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200_GPIO</term>
<nutsynopsis>
	"NatSemi SCx200 GPIO Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCx200</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Give userspace access to the GPIO pins on the National
Semiconductor SCx200 processors.

If compiled as a module, it will be called scx200_gpio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GPIO_VR41XX</term>
<nutsynopsis>
	"NEC VR4100 series General-purpose I/O Unit support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CPU_VR41XX</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RAW_DRIVER</term>
<nutsynopsis>
	"RAW driver (/dev/raw/rawN) (OBSOLETE)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The raw driver permits block devices to be bound to /dev/raw/rawN. 
Once bound, I/O against /dev/raw/rawN uses efficient zero-copy I/O. 
See the raw(8) manpage for more details.

The raw driver is deprecated and will be removed soon.
Applications should simply open the device (eg /dev/hda1)
with the O_DIRECT flag.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPET</term>
<nutsynopsis>
	"HPET - High Precision Event Timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ACPI && (X86 || IA64)</literal>
	</para>

	<para>
	default value
	<literal>n if ACPI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will have a miscdevice named "/dev/hpet/".  Each
open selects one of the timers supported by the HPET.  The timers are
non-periodioc and/or periodic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPET_RTC_IRQ</term>
<nutsynopsis>
	"HPET Control RTC IRQ"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HPET && !HPET_EMULATE_RTC</literal>
	</para>

	<para>
	default value
	<literal>n if HPET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will disable RTC_IRQ in drivers/char/rtc.c. It
is assumed the platform called hpet_alloc with the RTC IRQ values for
the HPET timers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPET_MMAP</term>
<nutsynopsis>
	"Allow mmap of HPET"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HPET</literal>
	</para>

	<para>
	default value
	<literal>y if HPET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, user applications will be able to mmap
the HPET registers.

In some hardware implementations, the page containing HPET
registers may also contain other things that shouldn't be
exposed to the user.  If this applies to your hardware,
say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAX_RAW_DEVS</term>
<nutsynopsis>
	"Maximum number of RAW devices to support (1-8192)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>RAW_DRIVER</literal>
	</para>

	<para>
	default value
	<literal>256 if RAW_DRIVER</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The maximum number of RAW devices that are supported.
Default is 256. Increase this number in case you need lots of
raw devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HANGCHECK_TIMER</term>
<nutsynopsis>
	"Hangcheck timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86_64 || X86 || IA64 || PPC64 || ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The hangcheck-timer module detects when the system has gone
out to lunch past a certain margin.  It can reboot the system
or merely print a warning.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMTIMER</term>
<nutsynopsis>
	"MMTIMER Memory mapped RTC for SGI Altix"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IA64_GENERIC || IA64_SGI_SN2</literal>
	</para>

	<para>
	default value
	<literal>y if IA64_GENERIC || IA64_SGI_SN2</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The mmtimer device allows direct userspace access to the
Altix system timer.
	</para>

</nutentrybody>
</nutentry>

menu "TPM devices"

<nutentry>
	<term>TCG_TPM</term>
<nutsynopsis>
	"TPM Hardware Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a TPM security chip in your system, which
implements the Trusted Computing Group's specification,
say Yes and it will be accessible from within Linux.  For
more information see <http://www.trustedcomputinggroup.org>. 
An implementation of the Trusted Software Stack (TSS), the 
userspace enablement piece of the specification, can be 
obtained at: <http://sourceforge.net/projects/trousers>.  To 
compile this driver as a module, choose M here; the module 
will be called tpm. If unsure, say N.
Note: For more TPM drivers enable CONFIG_PNP, CONFIG_ACPI
and CONFIG_PNPACPI.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCG_NSC</term>
<nutsynopsis>
	"National Semiconductor TPM Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>TCG_TPM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a TPM security chip from National Semicondutor 
say Yes and it will be accessible from within Linux.  To 
compile this driver as a module, choose M here; the module 
will be called tpm_nsc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCG_ATMEL</term>
<nutsynopsis>
	"Atmel TPM Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>TCG_TPM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a TPM security chip from Atmel say Yes and it 
will be accessible from within Linux.  To compile this driver 
as a module, choose M here; the module will be called tpm_atmel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TCG_INFINEON</term>
<nutsynopsis>
	"Infineon Technologies TPM Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>TCG_TPM && PNPACPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a TPM security chip from Infineon Technologies
(either SLD 9630 TT 1.1 or SLB 9635 TT 1.2) say Yes and it
will be accessible from within Linux.
To compile this driver as a module, choose M here; the module
will be called tpm_infineon.
Further information on this driver and the supported hardware
can be found at http://www.prosec.rub.de/tpm
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "I2C support"

<nutentry>
	<term>I2C</term>
<nutsynopsis>
	"I2C support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
I2C (pronounce: I-square-C) is a slow serial bus protocol used in
many micro controller applications and developed by Philips.  SMBus,
or System Management Bus is a subset of the I2C protocol.  More
information is contained in the directory <file:Documentation/i2c/>,
especially in the file called "summary" there.

Both I2C and SMBus are supported here. You will need this for
hardware sensors support, and also for Video For Linux support.

If you want I2C support, you should say Y here and also to the
specific driver for your bus adapter(s) below.

This I2C support can also be built as a module.  If so, the module
will be called i2c-core.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_CHARDEV</term>
<nutsynopsis>
	"I2C device interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to use i2c-* device files, usually found in the /dev
directory on your system.  They make it possible to have user-space
programs use the I2C bus.  Information on how to do this is
contained in the file <file:Documentation/i2c/dev-interface>.

This support is also available as a module.  If so, the module 
will be called i2c-dev.
	</para>

</nutentrybody>
</nutentry>

menu "I2C Algorithms"
<para>
	depends on
	<literal>I2C</literal>
	</para>


<nutentry>
	<term>I2C_ALGOBIT</term>
<nutsynopsis>
	"I2C bit-banging interfaces"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use a range of I2C adapters called bit-banging
adapters.  Say Y if you own an I2C adapter belonging to this class
and then say Y to the specific driver for you adapter below.

This support is also available as a module.  If so, the module 
will be called i2c-algo-bit.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALGOPCF</term>
<nutsynopsis>
	"I2C PCF 8584 interfaces"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use a range of I2C adapters called PCF adapters.
Say Y if you own an I2C adapter belonging to this class and then say
Y to the specific driver for you adapter below.

This support is also available as a module.  If so, the module 
will be called i2c-algo-pcf.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALGOPCA</term>
<nutsynopsis>
	"I2C PCA 9564 interfaces"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to use a range of I2C adapters called PCA adapters.
Say Y if you own an I2C adapter belonging to this class and then say
Y to the specific driver for you adapter below.

This support is also available as a module.  If so, the module 
will be called i2c-algo-pca.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALGOITE</term>
<nutsynopsis>
	"ITE I2C Algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MIPS_ITE8172 && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports the use of the ITE8172 I2C interface found on some MIPS
systems. Say Y if you have one of these. You should also say Y for
the ITE I2C peripheral driver support below.

This support is also available as a module.  If so, the module 
will be called i2c-algo-ite.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALGO8XX</term>
<nutsynopsis>
	"MPC8xx CPM I2C interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>8xx && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALGO_SIBYTE</term>
<nutsynopsis>
	"SiByte SMBus interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SIBYTE_SB1xxx_SOC && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Supports the SiByte SOC on-chip I2C interfaces (2 channels).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALGO_SGI</term>
<nutsynopsis>
	"I2C SGI interfaces"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && (SGI_IP22 || SGI_IP32 || X86_VISWS)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Supports the SGI interfaces like the ones found on SGI Indy VINO
or SGI O2 MACE.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "I2C Hardware Bus support"
<para>
	depends on
	<literal>I2C</literal>
	</para>


<nutentry>
	<term>I2C_ALI1535</term>
<nutsynopsis>
	"ALI 1535"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the SMB
Host controller on Acer Labs Inc. (ALI) M1535 South Bridges.  The SMB
controller is part of the 7101 device, which is an ACPI-compliant
Power Management Unit (PMU).

This driver can also be built as a module.  If so, the module
will be called i2c-ali1535.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALI1563</term>
<nutsynopsis>
	"ALI 1563"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the SMB
Host controller on Acer Labs Inc. (ALI) M1563 South Bridges.  The SMB
controller is part of the 7101 device, which is an ACPI-compliant
Power Management Unit (PMU).

This driver can also be built as a module.  If so, the module
will be called i2c-ali1563.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ALI15X3</term>
<nutsynopsis>
	"ALI 15x3"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
Acer Labs Inc. (ALI) M1514 and M1543 motherboard I2C interfaces.

This driver can also be built as a module.  If so, the module
will be called i2c-ali15x3.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_AMD756</term>
<nutsynopsis>
	"AMD 756/766/768/8111 and nVidia nForce"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the AMD
756/766/768 mainboard I2C interfaces.  The driver also includes
support for the first (SMBus 1.0) I2C interface of the AMD 8111 and
the nVidia nForce I2C interface.

This driver can also be built as a module.  If so, the module
will be called i2c-amd756.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_AMD756_S4882</term>
<nutsynopsis>
	"SMBus multiplexing on the Tyan S4882"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && I2C_AMD756 && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enabling this option will add specific SMBus support for the Tyan
S4882 motherboard.  On this 4-CPU board, the SMBus is multiplexed
over 8 different channels, where the various memory module EEPROMs
and temperature sensors live.  Saying yes here will give you access
to these in addition to the trunk.

This driver can also be built as a module.  If so, the module
will be called i2c-amd756-s4882.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_AMD8111</term>
<nutsynopsis>
	"AMD 8111"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
second (SMBus 2.0) AMD 8111 mainboard I2C interface.

This driver can also be built as a module.  If so, the module
will be called i2c-amd8111.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_AU1550</term>
<nutsynopsis>
	"Au1550 SMBus interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && SOC_AU1550</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
Au1550 SMBus interface.

This driver can also be built as a module.  If so, the module
will be called i2c-au1550.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ELEKTOR</term>
<nutsynopsis>
	"Elektor ISA card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && ISA && BROKEN_ON_SMP</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports the PCF8584 ISA bus I2C adapter.  Say Y if you own
such an adapter.

This support is also available as a module.  If so, the module 
will be called i2c-elektor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_HYDRA</term>
<nutsynopsis>
	"CHRP Apple Hydra Mac I/O I2C interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI && PPC_CHRP && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports the use of the I2C interface in the Apple Hydra Mac
I/O chip on some CHRP machines (e.g. the LongTrail).  Say Y if you
have such a machine.

This support is also available as a module.  If so, the module
will be called i2c-hydra.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_I801</term>
<nutsynopsis>
	"Intel 82801 (ICH)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the Intel
801 family of mainboard I2C interfaces.  Specifically, the following
versions of the chipset are supported:
  82801AA
  82801AB
  82801BA
  82801CA/CAM
  82801DB
  82801EB/ER (ICH5/ICH5R)
  6300ESB
  ICH6
  ICH7
  ESB2

This driver can also be built as a module.  If so, the module
will be called i2c-i801.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_I810</term>
<nutsynopsis>
	"Intel 810/815"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the Intel
810/815 family of mainboard I2C interfaces.  Specifically, the 
following versions of the chipset is supported:
  i810AA
  i810AB
  i810E
  i815

This driver can also be built as a module.  If so, the module
will be called i2c-i810.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PXA</term>
<nutsynopsis>
	"Intel PXA2XX I2C adapter (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL && ARCH_PXA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have devices in the PXA I2C bus, say yes to this option.
This driver can also be built as a module.  If so, the module
will be called i2c-pxa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PXA_SLAVE</term>
<nutsynopsis>
	"Intel PXA2XX I2C Slave comms support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && I2C_PXA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support I2C slave mode communications on the PXA I2C bus.  This
is necessary for systems where the PXA may be a target on the
I2C bus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PIIX4</term>
<nutsynopsis>
	"Intel PIIX4"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the Intel
PIIX4 family of mainboard I2C interfaces.  Specifically, the following
versions of the chipset are supported:
  Intel PIIX4
  Intel 440MX
  Serverworks OSB4
  Serverworks CSB5
  Serverworks CSB6
  SMSC Victory66

This driver can also be built as a module.  If so, the module
will be called i2c-piix4.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_IBM_IIC</term>
<nutsynopsis>
	"IBM PPC 4xx on-chip I2C interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>IBM_OCP && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use IIC peripheral found on 
embedded IBM PPC 4xx based systems. 

This driver can also be built as a module.  If so, the module
will be called i2c-ibm_iic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_IOP3XX</term>
<nutsynopsis>
	"Intel IOP3xx and IXP4xx on-chip I2C interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(ARCH_IOP3XX || ARCH_IXP4XX) && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the IIC bus controller on
the Intel IOP3xx I/O Processors or IXP4xx Network Processors.

This driver can also be built as a module.  If so, the module
will be called i2c-iop3xx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ISA</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_ITE</term>
<nutsynopsis>
	"ITE I2C Adapter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && MIPS_ITE8172</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports the ITE8172 I2C peripheral found on some MIPS
systems. Say Y if you have one of these. You should also say Y for
the ITE I2C driver algorithm support above.

This support is also available as a module.  If so, the module 
will be called i2c-ite.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_IXP4XX</term>
<nutsynopsis>
	"IXP4xx GPIO-Based I2C Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && ARCH_IXP4XX</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Intel IXP4xx(420,421,422,425) based 
system and are using GPIO lines for an I2C bus.

This support is also available as a module. If so, the module
will be called i2c-ixp4xx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_IXP2000</term>
<nutsynopsis>
	"IXP2000 GPIO-Based I2C Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && ARCH_IXP2000</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an Intel IXP2000(2400, 2800, 2850) based 
system and are using GPIO lines for an I2C bus.

This support is also available as a module. If so, the module
will be called i2c-ixp2000.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_KEYWEST</term>
<nutsynopsis>
	"Powermac Keywest I2C interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PPC_PMAC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports the use of the I2C interface in the combo-I/O
chip on recent Apple machines.  Say Y if you have such a machine.

This support is also available as a module.  If so, the module 
will be called i2c-keywest.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PMAC_SMU</term>
<nutsynopsis>
	"Powermac SMU I2C interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PMAC_SMU</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports the use of the I2C interface in the SMU
chip on recent Apple machines like the iMac G5.  It is used
among others by the thermal control driver for those machines.
Say Y if you have such a machine.

This support is also available as a module.  If so, the module
will be called i2c-pmac-smu.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_MPC</term>
<nutsynopsis>
	"MPC107/824x/85xx/52xx"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PPC32</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
built-in I2C interface on the MPC107/Tsi107/MPC8240/MPC8245 and
MPC85xx family processors. The driver may also work on 52xx
family processors, though interrupts are known not to work.

This driver can also be built as a module.  If so, the module
will be called i2c-mpc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_NFORCE2</term>
<nutsynopsis>
	"Nvidia nForce2, nForce3 and nForce4"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the Nvidia
nForce2, nForce3 and nForce4 families of mainboard I2C interfaces.

This driver can also be built as a module.  If so, the module
will be called i2c-nforce2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PARPORT</term>
<nutsynopsis>
	"Parallel port adapter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PARPORT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports parallel port I2C adapters such as the ones made by
Philips or Velleman, Analog Devices evaluation boards, and more.
Basically any adapter using the parallel port as an I2C bus with
no extra chipset is supported by this driver, or could be.

This driver is a replacement for (and was inspired by) an older
driver named i2c-philips-par.  The new driver supports more devices,
and makes it easier to add support for new devices.

Another driver exists, named i2c-parport-light, which doesn't depend
on the parport driver.  This is meant for embedded systems. Don't say
Y here if you intend to say Y or M there.

This support is also available as a module.  If so, the module 
will be called i2c-parport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PARPORT_LIGHT</term>
<nutsynopsis>
	"Parallel port adapter (light)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This supports parallel port I2C adapters such as the ones made by
Philips or Velleman, Analog Devices evaluation boards, and more.
Basically any adapter using the parallel port as an I2C bus with
no extra chipset is supported by this driver, or could be.

This driver is a light version of i2c-parport.  It doesn't depend
on the parport driver, and uses direct I/O access instead.  This
might be prefered on embedded systems where wasting memory for
the clean but heavy parport handling is not an option.  The
drawback is a reduced portability and the impossibility to
dasiy-chain other parallel port devices.

Don't say Y here if you said Y or M to i2c-parport.  Saying M to
both is possible but both modules should not be loaded at the same
time.

This support is also available as a module.  If so, the module 
will be called i2c-parport-light.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PROSAVAGE</term>
<nutsynopsis>
	"S3/VIA (Pro)Savage"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
I2C bus and DDC bus of the S3VIA embedded Savage4 and ProSavage8
graphics processors.
chipsets supported:
  S3/VIA KM266/VT8375 aka ProSavage8
  S3/VIA KM133/VT8365 aka Savage4

This support is also available as a module.  If so, the module 
will be called i2c-prosavage.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_RPXLITE</term>
<nutsynopsis>
	"Embedded Planet RPX Lite/Classic support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(RPXLITE || RPXCLASSIC) && I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_S3C2410</term>
<nutsynopsis>
	"S3C2410 I2C Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && ARCH_S3C2410</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for I2C controller in the
Samsung S3C2410 based System-on-Chip devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_SAVAGE4</term>
<nutsynopsis>
	"S3 Savage 4"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the 
S3 Savage 4 I2C interface.

This driver can also be built as a module.  If so, the module
will be called i2c-savage4.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_SIBYTE</term>
<nutsynopsis>
	"SiByte SMBus interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SIBYTE_SB1xxx_SOC && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Supports the SiByte SOC on-chip I2C interfaces (2 channels).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200_I2C</term>
<nutsynopsis>
	"NatSemi SCx200 I2C using GPIO pins"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SCx200_GPIO && I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable the use of two GPIO pins of a SCx200 processor as an I2C bus.

If you don't know what to do here, say N.

This support is also available as a module.  If so, the module 
will be called scx200_i2c.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200_I2C_SCL</term>
<nutsynopsis>
	"GPIO pin used for SCL"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && SCx200_I2C</literal>
	</para>

	<para>
	default value
	<literal>12 if I2C && SCx200_I2C</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Enter the GPIO pin number used for the SCL signal.  This value can
also be specified with a module parameter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200_I2C_SDA</term>
<nutsynopsis>
	"GPIO pin used for SDA"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && SCx200_I2C</literal>
	</para>

	<para>
	default value
	<literal>13 if I2C && SCx200_I2C</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Enter the GPIO pin number used for the SSA signal.  This value can
also be specified with a module parameter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCx200_ACB</term>
<nutsynopsis>
	"NatSemi SCx200 ACCESS.bus"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Enable the use of the ACCESS.bus controllers of a SCx200 processor.

If you don't know what to do here, say N.

This support is also available as a module.  If so, the module 
will be called scx200_acb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_SIS5595</term>
<nutsynopsis>
	"SiS 5595"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the 
SiS5595 SMBus (a subset of I2C) interface.

This driver can also be built as a module.  If so, the module
will be called i2c-sis5595.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_SIS630</term>
<nutsynopsis>
	"SiS 630/730"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the 
SiS630 and SiS730 SMBus (a subset of I2C) interface.

This driver can also be built as a module.  If so, the module
will be called i2c-sis630.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_SIS96X</term>
<nutsynopsis>
	"SiS 96x"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the SiS
96x SMBus (a subset of I2C) interfaces.  Specifically, the following
chipsets are supported:
  645/961
  645DX/961
  645DX/962
  648/961
  650/961
  735
  745

This driver can also be built as a module.  If so, the module
will be called i2c-sis96x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_STUB</term>
<nutsynopsis>
	"I2C/SMBus Test Stub"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL && m && MODULES</literal>
	</para>

	<para>
	default value
	<literal>n if I2C && EXPERIMENTAL && m && MODULES</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module may be useful to developers of SMBus client drivers,
especially for certain kinds of sensor chips.

If you do build this module, be sure to read the notes and warnings
in <file:Documentation/i2c/i2c-stub>.

If you don't know what to do here, definitely say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_VIA</term>
<nutsynopsis>
	"VIA 82C586B"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the VIA
82C586B I2C interface

This driver can also be built as a module.  If so, the module
will be called i2c-via.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_VIAPRO</term>
<nutsynopsis>
	"VIA 82C596/82C686/823x"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the VIA
82C596/82C686/823x I2C interfaces.  Specifically, the following 
chipsets are supported:
82C596A/B
82C686A/B
8231
8233
8233A
8235
8237

This driver can also be built as a module.  If so, the module
will be called i2c-viapro.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_VOODOO3</term>
<nutsynopsis>
	"Voodoo 3"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
Voodoo 3 I2C interface.

This driver can also be built as a module.  If so, the module
will be called i2c-voodoo3.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_PCA_ISA</term>
<nutsynopsis>
	"PCA9564 on an ISA bus"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports ISA boards using the Philips PCA 9564
Parallel bus to I2C bus controller

This driver can also be built as a module.  If so, the module
will be called i2c-pca-isa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_MV64XXX</term>
<nutsynopsis>
	"Marvell mv64xxx I2C Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && MV64X60 && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes to this option, support will be included for the
built-in I2C interface on the Marvell 64xxx line of host bridges.

This driver can also be built as a module.  If so, the module
will be called i2c-mv64xxx.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Miscellaneous I2C Chip support"
<para>
	depends on
	<literal>I2C</literal>
	</para>


<nutentry>
	<term>SENSORS_DS1337</term>
<nutsynopsis>
	"Dallas Semiconductor DS1337 and DS1339 Real Time Clock"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Dallas Semiconductor
DS1337 and DS1339 real-time clock chips.

This driver can also be built as a module.  If so, the module
will be called ds1337.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_DS1374</term>
<nutsynopsis>
	"Maxim/Dallas Semiconductor DS1374 Real Time Clock"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Dallas Semiconductor
DS1374 real-time clock chips.

This driver can also be built as a module.  If so, the module
will be called ds1374.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_EEPROM</term>
<nutsynopsis>
	"EEPROM reader"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get read-only access to the EEPROM data
available on modern memory DIMMs and Sony Vaio laptops.  Such
EEPROMs could theoretically be available on other devices as well.

This driver can also be built as a module.  If so, the module
will be called eeprom.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_PCF8574</term>
<nutsynopsis>
	"Philips PCF8574 and PCF8574A"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Philips PCF8574 and 
PCF8574A chips.

This driver can also be built as a module.  If so, the module
will be called pcf8574.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_PCA9539</term>
<nutsynopsis>
	"Philips PCA9539 16-bit I/O port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Philips PCA9539
16-bit I/O port.

This driver can also be built as a module.  If so, the module
will be called pca9539.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_PCF8591</term>
<nutsynopsis>
	"Philips PCF8591"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Philips PCF8591 chips.

This driver can also be built as a module.  If so, the module
will be called pcf8591.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_RTC8564</term>
<nutsynopsis>
	"Epson 8564 RTC chip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Epson 8564 RTC chip.

This driver can also be built as a module.  If so, the module
will be called i2c-rtc8564.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ISP1301_OMAP</term>
<nutsynopsis>
	"Philips ISP1301 with OMAP OTG"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && ARCH_OMAP_OTG</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Philips ISP1301
USB-On-The-Go transceiver working with the OMAP OTG controller.
The ISP1301 is used in products including H2 and H3 development
boards for Texas Instruments OMAP processors.

This driver can also be built as a module.  If so, the module
will be called isp1301_omap.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TPS65010</term>
<nutsynopsis>
	"TPS6501x Power Management chips"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && ARCH_OMAP</literal>
	</para>

	<para>
	default value
	<literal>y if I2C && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3 || MACH_OMAP_OSK)</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the TPS6501x series of
Power Management chips.  These include voltage regulators,
lithium ion/polymer battery charging, and other features that
are often used in portable devices like cell phones and cameras.

This driver can also be built as a module.  If so, the module
will be called tps65010.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_M41T00</term>
<nutsynopsis>
	"ST M41T00 RTC chip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && PPC32</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the ST M41T00 RTC chip.

This driver can also be built as a module.  If so, the module
will be called m41t00.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_MAX6875</term>
<nutsynopsis>
	"Maxim MAX6875 Power supply supervisor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Maxim MAX6875
EEPROM-programmable, quad power-supply sequencer/supervisor.

This provides an interface to program the EEPROM and reset the chip.

This driver also supports the Maxim MAX6874 hex power-supply
sequencer/supervisor if found at a compatible address.

This driver can also be built as a module.  If so, the module
will be called max6875.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>I2C_DEBUG_CORE</term>
<nutsynopsis>
	"I2C Core debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the I2C core to produce a bunch of debug
messages to the system log.  Select this if you are having a
problem with I2C support and want to see more of what is going on.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_DEBUG_ALGO</term>
<nutsynopsis>
	"I2C Algorithm debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the I2C algorithm drivers to produce a bunch
of debug messages to the system log.  Select this if you are having
a problem with I2C support and want to see more of what is going
on.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_DEBUG_BUS</term>
<nutsynopsis>
	"I2C Bus debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the I2C bus drivers to produce a bunch of
debug messages to the system log.  Select this if you are having
a problem with I2C support and want to see more of what is going
on.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>I2C_DEBUG_CHIP</term>
<nutsynopsis>
	"I2C Chip debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>I2C</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the I2C chip drivers to produce a bunch of
debug messages to the system log.  Select this if you are having
a problem with I2C support and want to see more of what is going
on.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Dallas's 1-wire bus"

<nutentry>
	<term>W1</term>
<nutsynopsis>
	"Dallas's 1-wire support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Dallas's 1-wire bus is usefull to connect slow 1-pin devices
such as iButtons and thermal sensors.

If you want W1 support, you should say Y here.

This W1 support can also be built as a module.  If so, the module
will be called wire.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_MATROX</term>
<nutsynopsis>
	"Matrox G400 transport layer for 1-wire"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1 && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to communicate with your 1-wire devices
using Matrox's G400 GPIO pins.

This support is also available as a module.  If so, the module
will be called matrox_w1.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_DS9490</term>
<nutsynopsis>
	"DS9490R transport layer driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1 && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to have a driver for DS9490R UWB <-> W1 bridge.

This support is also available as a module.  If so, the module
will be called ds9490r.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_DS9490_BRIDGE</term>
<nutsynopsis>
	"DS9490R USB <-> W1 transport layer for 1-wire"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1_DS9490</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to communicate with your 1-wire devices
using DS9490R USB bridge.

This support is also available as a module.  If so, the module
will be called ds_w1_bridge.ko.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_THERM</term>
<nutsynopsis>
	"Thermal family implementation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect 1-wire thermal sensors to you
wire.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_SMEM</term>
<nutsynopsis>
	"Simple 64bit memory family implementation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect 1-wire
simple 64bit memory rom(ds2401/ds2411/ds1990*) to you wire.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_DS2433</term>
<nutsynopsis>
	"4kb EEPROM family support (DS2433)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a 1-wire
4kb EEPROM family device (DS2433).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>W1_DS2433_CRC</term>
<nutsynopsis>
	"Protect DS2433 data with a CRC16"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>W1_DS2433</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to protect DS2433 data with a CRC16.
Each block has 30 bytes of data and a two byte CRC16.
Full block writes are only allowed if the CRC is valid.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Hardware Monitoring support"

<nutentry>
	<term>HWMON</term>
<nutsynopsis>
	"Hardware Monitoring support"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Hardware monitoring devices let you monitor the hardware health
of a system. Most modern motherboards include such a device. It
can include temperature sensors, voltage sensors, fan speed
sensors and various additional features such as the ability to
control the speed of the fans.  If you want this support you
should say Y here and also to the specific driver(s) for your
sensors chip(s) below.

This support can also be built as a module.  If so, the module
will be called hwmon.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HWMON_VID</term>
	<para>
	default value
	<literal>n</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ADM1021</term>
<nutsynopsis>
	"Analog Devices ADM1021 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Analog Devices ADM1021
and ADM1023 sensor chips and clones: Maxim MAX1617 and MAX1617A,
Genesys Logic GL523SM, National Semiconductor LM84, TI THMC10,
and the XEON processor built-in sensor.

This driver can also be built as a module.  If so, the module
will be called adm1021.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ADM1025</term>
<nutsynopsis>
	"Analog Devices ADM1025 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Analog Devices ADM1025
and Philips NE1619 sensor chips.

This driver can also be built as a module.  If so, the module
will be called adm1025.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ADM1026</term>
<nutsynopsis>
	"Analog Devices ADM1026 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Analog Devices ADM1026
sensor chip.

This driver can also be built as a module.  If so, the module
will be called adm1026.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ADM1031</term>
<nutsynopsis>
	"Analog Devices ADM1031 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Analog Devices ADM1031
and ADM1030 sensor chips.

This driver can also be built as a module.  If so, the module
will be called adm1031.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ADM9240</term>
<nutsynopsis>
	"Analog Devices ADM9240 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Analog Devices ADM9240,
Dallas DS1780, National Semiconductor LM81 sensor chips.

This driver can also be built as a module.  If so, the module
will be called adm9240.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ASB100</term>
<nutsynopsis>
	"Asus ASB100 Bach"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the ASB100 Bach sensor
chip found on some Asus mainboards.

This driver can also be built as a module.  If so, the module
will be called asb100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_ATXP1</term>
<nutsynopsis>
	"Attansic ATXP1 VID controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Attansic ATXP1 VID
controller.

If your board have such a chip, you are able to control your CPU
core and other voltages.

This driver can also be built as a module.  If so, the module
will be called atxp1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_DS1621</term>
<nutsynopsis>
	"Dallas Semiconductor DS1621 and DS1625"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Dallas Semiconductor
DS1621 and DS1625 sensor chips.

This driver can also be built as a module.  If so, the module
will be called ds1621.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_FSCHER</term>
<nutsynopsis>
	"FSC Hermes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Fujitsu Siemens
Computers Hermes sensor chips.

This driver can also be built as a module.  If so, the module
will be called fscher.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_FSCPOS</term>
<nutsynopsis>
	"FSC Poseidon"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Fujitsu Siemens
Computers Poseidon sensor chips.

This driver can also be built as a module.  If so, the module
will be called fscpos.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_GL518SM</term>
<nutsynopsis>
	"Genesys Logic GL518SM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Genesys Logic GL518SM
sensor chips.

This driver can also be built as a module.  If so, the module
will be called gl518sm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_GL520SM</term>
<nutsynopsis>
	"Genesys Logic GL520SM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for Genesys Logic GL520SM
sensor chips.

This driver can also be built as a module.  If so, the module
will be called gl520sm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_IT87</term>
<nutsynopsis>
	"ITE IT87xx and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for ITE IT87xx sensor chips
and clones: SiS960.

This driver can also be built as a module.  If so, the module
will be called it87.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM63</term>
<nutsynopsis>
	"National Semiconductor LM63"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the National Semiconductor
LM63 remote diode digital temperature sensor with integrated fan
control.  Such chips are found on the Tyan S4882 (Thunder K8QS Pro)
motherboard, among others.

This driver can also be built as a module.  If so, the module
will be called lm63.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM75</term>
<nutsynopsis>
	"National Semiconductor LM75 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM75
sensor chips and clones: Dallas Semiconductor DS75 and DS1775 (in
9-bit precision mode), and TelCom (now Microchip) TCN75.

The DS75 and DS1775 in 10- to 12-bit precision modes will require
a force module parameter. The driver will not handle the extra
precision anyhow.

This driver can also be built as a module.  If so, the module
will be called lm75.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM77</term>
<nutsynopsis>
	"National Semiconductor LM77"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM77
sensor chips.

This driver can also be built as a module.  If so, the module
will be called lm77.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM78</term>
<nutsynopsis>
	"National Semiconductor LM78 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM78,
LM78-J and LM79.

This driver can also be built as a module.  If so, the module
will be called lm78.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM80</term>
<nutsynopsis>
	"National Semiconductor LM80"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor
LM80 sensor chips.

This driver can also be built as a module.  If so, the module
will be called lm80.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM83</term>
<nutsynopsis>
	"National Semiconductor LM83"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor
LM83 sensor chips.

This driver can also be built as a module.  If so, the module
will be called lm83.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM85</term>
<nutsynopsis>
	"National Semiconductor LM85 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM85
sensor chips and clones: ADT7463, EMC6D100, EMC6D102 and ADM1027.

This driver can also be built as a module.  If so, the module
will be called lm85.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM87</term>
<nutsynopsis>
	"National Semiconductor LM87"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM87
sensor chips.

This driver can also be built as a module.  If so, the module
will be called lm87.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM90</term>
<nutsynopsis>
	"National Semiconductor LM90 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM90,
LM86, LM89 and LM99, Analog Devices ADM1032 and Maxim MAX6657 and
MAX6658 sensor chips.

The Analog Devices ADT7461 sensor chip is also supported, but only
if found in ADM1032 compatibility mode.

This driver can also be built as a module.  If so, the module
will be called lm90.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_LM92</term>
<nutsynopsis>
	"National Semiconductor LM92 and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for National Semiconductor LM92
and Maxim MAX6635 sensor chips.

This driver can also be built as a module.  If so, the module
will be called lm92.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_MAX1619</term>
<nutsynopsis>
	"Maxim MAX1619 sensor chip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for MAX1619 sensor chip.

This driver can also be built as a module.  If so, the module
will be called max1619.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_PC87360</term>
<nutsynopsis>
	"National Semiconductor PC87360 family"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get access to the hardware monitoring
functions of the National Semiconductor PC8736x Super-I/O chips.
The PC87360, PC87363 and PC87364 only have fan monitoring and
control.  The PC87365 and PC87366 additionally have voltage and
temperature monitoring.

This driver can also be built as a module.  If so, the module
will be called pc87360.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_SIS5595</term>
<nutsynopsis>
	"Silicon Integrated Systems Corp. SiS5595"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the integrated sensors in
SiS5595 South Bridges.

This driver can also be built as a module.  If so, the module
will be called sis5595.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_SMSC47M1</term>
<nutsynopsis>
	"SMSC LPC47M10x and compatibles"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the integrated fan
monitoring and control capabilities of the SMSC LPC47B27x,
LPC47M10x, LPC47M13x, LPC47M14x, LPC47M15x and LPC47M192 chips.

This driver can also be built as a module.  If so, the module
will be called smsc47m1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_SMSC47B397</term>
<nutsynopsis>
	"SMSC LPC47B397-NC"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the SMSC LPC47B397-NC
sensor chip.

This driver can also be built as a module.  If so, the module
will be called smsc47b397.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_VIA686A</term>
<nutsynopsis>
	"VIA686A"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the integrated sensors in
Via 686A/B South Bridges.

This driver can also be built as a module.  If so, the module
will be called via686a.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_W83781D</term>
<nutsynopsis>
	"Winbond W83781D, W83782D, W83783S, W83627HF, Asus AS99127F"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Winbond W8378x series
of sensor chips: the W83781D, W83782D, W83783S and W83627HF,
and the similar Asus AS99127F.

This driver can also be built as a module.  If so, the module
will be called w83781d.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_W83792D</term>
<nutsynopsis>
	"Winbond W83792D"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Winbond W83792D chip.

This driver can also be built as a module.  If so, the module
will be called w83792d.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_W83L785TS</term>
<nutsynopsis>
	"Winbond W83L785TS-S"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Winbond W83L785TS-S
sensor chip, which is used on the Asus A7N8X, among other
motherboards.

This driver can also be built as a module.  If so, the module
will be called w83l785ts.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_W83627HF</term>
<nutsynopsis>
	"Winbond W83627HF, W83627THF, W83637HF, W83697HF"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get support for the Winbond W836X7 series
of sensor chips: the W83627HF, W83627THF, W83637HF, and the W83697HF

This driver can also be built as a module.  If so, the module
will be called w83627hf.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_W83627EHF</term>
<nutsynopsis>
	"Winbond W83627EHF"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say yes here you get preliminary support for the hardware
monitoring functionality of the Winbond W83627EHF Super-I/O chip.
Only fan and temperature inputs are supported at the moment, while
the chip does much more than that.

This driver also supports the W83627EHG, which is the lead-free
version of the W83627EHF.

This driver can also be built as a module.  If so, the module
will be called w83627ehf.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SENSORS_HDAPS</term>
<nutsynopsis>
	"IBM Hard Drive Active Protection System (hdaps)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON && INPUT && X86</literal>
	</para>

	<para>
	default value
	<literal>n if HWMON && INPUT && X86</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides support for the IBM Hard Drive Active Protection
System (hdaps), which provides an accelerometer and other misc. data.
ThinkPads starting with the R50, T41, and X40 are supported.  The
accelerometer data is readable via sysfs.

This driver also provides an absolute input class device, allowing
the laptop to act as a pinball machine-esque joystick.

Say Y here if you have an applicable laptop and want to experience
the awesome power of hdaps.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HWMON_DEBUG_CHIP</term>
<nutsynopsis>
	"Hardware Monitoring Chip debugging messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HWMON</literal>
	</para>

	<para>
	default value
	<literal>n if HWMON</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the I2C chip drivers to produce a bunch of
debug messages to the system log.  Select this if you are having
a problem with I2C support and want to see more of what is going
on.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Misc devices"

<nutentry>
	<term>IBM_ASM</term>
<nutsynopsis>
	"Device driver for IBM RSA service processor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables device driver support for in-band access to the
IBM RSA (Condor) service processor in eServer xSeries systems.
The ibmasm device driver allows user space application to access
ASM (Advanced Systems Management) functions on the service
processor. The driver is meant to be used in conjunction with
a user space API.
The ibmasm driver also enables the OS to use the UART on the
service processor board as a regular serial port. To make use of
this feature serial driver support (CONFIG_SERIAL_8250) must be
enabled.

WARNING: This software may not be supported or function
correctly on your IBM server. Please consult the IBM ServerProven
website <http://www.pc.ibm.com/ww/eserver/xseries/serverproven> for
information on the specific driver level and support statement
for your IBM server.


If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Multimedia Capabilities Port drivers"

<nutentry>
	<term>MCP</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCP_SA11X0</term>
<nutsynopsis>
	"Support SA11x0 MCP interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_SA1100</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCP_UCB1200</term>
<nutsynopsis>
	"Support for UCB1200 / UCB1300"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MCP_UCB1200_TS</term>
<nutsynopsis>
	"Touchscreen interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MCP_UCB1200 && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Multimedia devices"

<nutentry>
	<term>VIDEO_DEV</term>
<nutsynopsis>
	"Video For Linux"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for audio/video capture and overlay devices and FM radio
cards. The exact capabilities of each device vary. User tools for
this are available from
<ftp://ftp.uk.linux.org/pub/linux/video4linux/>.

This kernel includes support for the new Video for Linux Two API,
(V4L2) as well as the original system. Drivers and applications
need to be rewritten to use V4L2, but drivers for popular cards
and applications for most video capture functions already exist.

Documentation for the original API is included in the file
<file:Documentation/video4linux/API.html>.  Documentation for V4L2 is
available on the web at <http://bytesex.org/v4l/>.

To compile this driver as a module, choose M here: the
module will be called videodev.
	</para>

</nutentrybody>
</nutentry>

menu "Video For Linux"
<para>
	depends on
	<literal>VIDEO_DEV</literal>
	</para>



comment "Video Adapters"
<para>
	depends on
	<literal>VIDEO_DEV</literal>
	</para>


<nutentry>
	<term>VIDEO_BT848</term>
<nutsynopsis>
	"BT848 Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI && I2C</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for BT848 based frame grabber/overlay boards. This includes
the Miro, Hauppauge and STB boards. Please read the material in
<file:Documentation/video4linux/bttv/> for more information.

To compile this driver as a module, choose M here: the
module will be called bttv.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SAA6588</term>
<nutsynopsis>
	"SAA6588 Radio Chip RDS decoder support on BT848 cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && I2C && VIDEO_BT848</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for  Radio Data System (RDS) decoder. This allows seeing
radio station identification transmitted using this standard.
Currentlly, it works only with bt8x8 chips.

To compile this driver as a module, choose M here: the
module will be called saa6588.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_PMS</term>
<nutsynopsis>
	"Mediavision Pro Movie Studio Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you have such a thing.

To compile this driver as a module, choose M here: the
module will be called pms.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_PLANB</term>
<nutsynopsis>
	"PlanB Video-In on PowerMac"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC_PMAC && VIDEO_DEV && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
PlanB is the V4L driver for the PowerMac 7x00/8x00 series video
input hardware. If you want to experiment with this, say Y.
Otherwise, or if you don't understand a word, say N. See
<http://www.cpu.lu/~mlan/linux/dev/planb.html> for more info.

Saying M will compile this driver as a module (planb).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_BWQCAM</term>
<nutsynopsis>
	"Quickcam BW Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y have if you the black and white version of the QuickCam
camera. See the next option for the color version.

To compile this driver as a module, choose M here: the
module will be called bw-qcam.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_CQCAM</term>
<nutsynopsis>
	"QuickCam Colour Video For Linux (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && VIDEO_DEV && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the video4linux driver for the colour version of the
Connectix QuickCam.  If you have one of these cameras, say Y here,
otherwise say N.  This driver does not work with the original
monochrome QuickCam, QuickCam VC or QuickClip.  It is also available
as a module (c-qcam).
Read <file:Documentation/video4linux/CQcam.txt> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_W9966</term>
<nutsynopsis>
	"W9966CF Webcam (FlyCam Supra and others) Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARPORT_1284 && VIDEO_DEV && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Video4linux driver for Winbond's w9966 based Webcams.
Currently tested with the LifeView FlyCam Supra.
If you have one of these cameras, say Y here
otherwise say N.
This driver is also available as a module (w9966).

Check out <file:Documentation/video4linux/w9966.txt> for more
information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_CPIA</term>
<nutsynopsis>
	"CPiA Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the video4linux driver for cameras based on Vision's CPiA
(Colour Processor Interface ASIC), such as the Creative Labs Video
Blaster Webcam II. If you have one of these cameras, say Y here
and select parallel port and/or USB lowlevel support below,
otherwise say N. This will not work with the Creative Webcam III.

Please read <file:Documentation/video4linux/README.cpia> for more
information.

This driver is also available as a module (cpia).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_CPIA_PP</term>
<nutsynopsis>
	"CPiA Parallel Port Lowlevel Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PARPORT_1284 && VIDEO_CPIA && PARPORT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the lowlevel parallel port support for cameras based on
Vision's CPiA (Colour Processor Interface ASIC), such as the
Creative Webcam II. If you have the parallel port version of one
of these cameras, say Y here, otherwise say N. It is also available
as a module (cpia_pp).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_CPIA_USB</term>
<nutsynopsis>
	"CPiA USB Lowlevel Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_CPIA && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the lowlevel USB support for cameras based on Vision's CPiA
(Colour Processor Interface ASIC), such as the Creative Webcam II.
If you have the USB version of one of these cameras, say Y here,
otherwise say N. This will not work with the Creative Webcam III.
It is also available as a module (cpia_usb).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SAA5246A</term>
<nutsynopsis>
	"SAA5246A, SAA5281 Teletext processor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for I2C bus based teletext using the SAA5246A or SAA5281
chip. Useful only if you live in Europe.

To compile this driver as a module, choose M here: the
module will be called saa5246a.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SAA5249</term>
<nutsynopsis>
	"SAA5249 Teletext processor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for I2C bus based teletext using the SAA5249 chip. At the
moment this is only useful on some European WinTV cards.

To compile this driver as a module, choose M here: the
module will be called saa5249.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TUNER_3036</term>
<nutsynopsis>
	"SAB3036 tuner"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Philips SAB3036 compatible tuners.
If in doubt, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_VINO</term>
<nutsynopsis>
	"SGI Vino Video For Linux (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to build in support for the Vino video input system found
on SGI Indy machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_STRADIS</term>
<nutsynopsis>
	"Stradis 4:2:2 MPEG-2 video driver  (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && VIDEO_DEV && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable support for the Stradis 4:2:2 MPEG-2 video
driver for PCI.  There is a product page at
<http://www.stradis.com/decoder.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZORAN</term>
<nutsynopsis>
	"Zoran ZR36057/36067 Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI && I2C_ALGOBIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y for support for MJPEG capture cards based on the Zoran
36057/36067 PCI controller chipset. This includes the Iomega
Buz, Pinnacle DC10+ and the Linux Media Labs LML33. There is
a driver homepage at <http://mjpeg.sf.net/driver-zoran/>. For
more information, check <file:Documentation/video4linux/Zoran>.

To compile this driver as a module, choose M here: the
module will be called zr36067.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZORAN_BUZ</term>
<nutsynopsis>
	"Iomega Buz support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_ZORAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Iomega Buz MJPEG capture/playback card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZORAN_DC10</term>
<nutsynopsis>
	"Pinnacle/Miro DC10(+) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_ZORAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Pinnacle/Miro DC10(+) MJPEG capture/playback
card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZORAN_DC30</term>
<nutsynopsis>
	"Pinnacle/Miro DC30(+) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_ZORAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Pinnacle/Miro DC30(+) MJPEG capture/playback
card. This also supports really old DC10 cards based on the
zr36050 MJPEG codec and zr36016 VFE.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZORAN_LML33</term>
<nutsynopsis>
	"Linux Media Labs LML33 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_ZORAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Linux Media Labs LML33 MJPEG capture/playback
card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZORAN_LML33R10</term>
<nutsynopsis>
	"Linux Media Labs LML33R10 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_ZORAN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
support for the Linux Media Labs LML33R10 MJPEG capture/playback
card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_ZR36120</term>
<nutsynopsis>
	"Zoran ZR36120/36125 Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI && I2C && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for ZR36120/ZR36125 based frame grabber/overlay boards.
This includes the Victor II, WaveWatcher, Video Wonder, Maxi-TV,
and Buster boards. Please read the material in
<file:Documentation/video4linux/zr36120.txt> for more information.

To compile this driver as a module, choose M here: the
module will be called zr36120.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_MEYE</term>
<nutsynopsis>
	"Sony Vaio Picturebook Motion Eye Video For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI && SONYPI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the video4linux driver for the Motion Eye camera found
in the Vaio Picturebook laptops. Please read the material in
<file:Documentation/video4linux/meye.txt> for more information.

If you say Y or M here, you need to say Y or M to "Sony Programmable
I/O Control Device" in the character device section.

To compile this driver as a module, choose M here: the
module will be called meye.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SAA7134</term>
<nutsynopsis>
	"Philips SAA7134 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI && I2C && SOUND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for Philips SAA7130/7134 based
TV cards.

To compile this driver as a module, choose M here: the
module will be called saa7134.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SAA7134_DVB</term>
<nutsynopsis>
	"DVB Support for saa7134 based TV cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds support for DVB cards based on the
Philips saa7134 chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_MXB</term>
<nutsynopsis>
	"Siemens-Nixdorf 'Multimedia eXtension Board'"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for the 'Multimedia eXtension Board'
TV card by Siemens-Nixdorf.

To compile this driver as a module, choose M here: the
module will be called mxb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_DPC</term>
<nutsynopsis>
	"Philips-Semiconductors 'dpc7146 demonstration board'"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for the 'dpc7146 demonstration
board' by Philips-Semiconductors. It's the reference design
for SAA7146 bases boards, so if you have some unsupported
saa7146 based, analog video card, chances are good that it
will work with this skeleton driver.

To compile this driver as a module, choose M here: the
module will be called dpc7146.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_HEXIUM_ORION</term>
<nutsynopsis>
	"Hexium HV-PCI6 and Orion frame grabber"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for the Hexium HV-PCI6 and
Orion frame grabber cards by Hexium.

To compile this driver as a module, choose M here: the
module will be called hexium_orion.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_HEXIUM_GEMINI</term>
<nutsynopsis>
	"Hexium Gemini frame grabber"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for the Hexium Gemini frame
grabber card by Hexium. Please note that the Gemini Dual
card is *not* fully supported.

To compile this driver as a module, choose M here: the
module will be called hexium_gemini.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_CX88</term>
<nutsynopsis>
	"Conexant 2388x (bt878 successor) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI && I2C && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for Conexant 2388x based
TV cards.

To compile this driver as a module, choose M here: the
module will be called cx8800
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_CX88_DVB</term>
<nutsynopsis>
	"DVB Support for cx2388x based TV cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_CX88 && DVB_CORE</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This adds support for DVB/ATSC cards based on the
Connexant 2388x chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_OVCAMCHIP</term>
<nutsynopsis>
	"OmniVision Camera Chip support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the OmniVision OV6xxx and OV7xxx series of camera chips.
This driver is intended to be used with the ov511 and w9968cf USB
camera drivers.

To compile this driver as a module, choose M here: the
module will be called ovcamchip
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_M32R_AR</term>
<nutsynopsis>
	"AR devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && M32R</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a video4linux driver for the Renesas AR (Artificial Retina)
camera module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_M32R_AR_M64278</term>
<nutsynopsis>
	"Use Colour AR module M64278(VGA)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && VIDEO_M32R_AR && PLAT_M32700UT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to use the Renesas M64278E-800 camera module,
which supports VGA(640x480 pixcels) size of images.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Radio Adapters"
<para>
	depends on
	<literal>VIDEO_DEV!=n</literal>
	</para>


<nutentry>
	<term>RADIO_CADET</term>
<nutsynopsis>
	"ADS Cadet AM/FM Tuner"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these AM/FM radio cards, and then
fill in the port address below.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

Further documentation on this driver can be found on the WWW at
<http://linux.blackhawke.net/cadet/>.

To compile this driver as a module, choose M here: the
module will be called radio-cadet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_RTRACK</term>
<nutsynopsis>
	"AIMSlab RadioTrack (aka RadioReveal) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these FM radio cards, and then fill
in the port address below.

Note that newer AIMSlab RadioTrack cards have a different chipset
and are not supported by this driver.  For these cards, use the
RadioTrack II driver below.

If you have a GemTeks combined (PnP) sound- and radio card you must
use this driver as a module and setup the card with isapnptools.
You must also pass the module a suitable io parameter, 0x248 has
been reported to be used by these cards.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>. More information is
contained in the file
<file:Documentation/video4linux/radiotrack.txt>.

To compile this driver as a module, choose M here: the
module will be called radio-aimslab.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_RTRACK_PORT</term>
<nutsynopsis>
	"RadioTrack i/o port (0x20f or 0x30f)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_RTRACK=y</literal>
	</para>

	<para>
	default value
	<literal>20f if VIDEO_DEV && RADIO_RTRACK=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter either 0x30f or 0x20f here.  The card default is 0x30f, if you
haven't changed the jumper setting on the card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_RTRACK2</term>
<nutsynopsis>
	"AIMSlab RadioTrack II support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have this FM radio card, and then fill in the
port address below.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-rtrack2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_RTRACK2_PORT</term>
<nutsynopsis>
	"RadioTrack II i/o port (0x20c or 0x30c)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_RTRACK2=y</literal>
	</para>

	<para>
	default value
	<literal>30c if VIDEO_DEV && RADIO_RTRACK2=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter either 0x30c or 0x20c here.  The card default is 0x30c, if you
haven't changed the jumper setting on the card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_AZTECH</term>
<nutsynopsis>
	"Aztech/Packard Bell Radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these FM radio cards, and then fill
in the port address below.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-aztech.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_AZTECH_PORT</term>
<nutsynopsis>
	"Aztech/Packard Bell I/O port (0x350 or 0x358)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_AZTECH=y</literal>
	</para>

	<para>
	default value
	<literal>350 if VIDEO_DEV && RADIO_AZTECH=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter either 0x350 or 0x358 here.  The card default is 0x350, if you
haven't changed the setting of jumper JP3 on the card.  Removing the
jumper sets the card to 0x358.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_GEMTEK</term>
<nutsynopsis>
	"GemTek Radio Card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have this FM radio card, and then fill in the
port address below.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-gemtek.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_GEMTEK_PORT</term>
<nutsynopsis>
	"GemTek i/o port (0x20c, 0x30c, 0x24c or 0x34c)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_GEMTEK=y</literal>
	</para>

	<para>
	default value
	<literal>34c if VIDEO_DEV && RADIO_GEMTEK=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter either 0x20c, 0x30c, 0x24c or 0x34c here. The card default is
0x34c, if you haven't changed the jumper setting on the card. On
Sound Vision 16 Gold PnP with FM Radio (ESS1869+FM Gemtek), the I/O
port is 0x28c.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_GEMTEK_PCI</term>
<nutsynopsis>
	"GemTek PCI Radio Card support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have this PCI FM radio card.

In order to control your radio card, you will need to use programs
that are compatible with the Video for Linux API.  Information on 
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-gemtek-pci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_MAXIRADIO</term>
<nutsynopsis>
	"Guillemot MAXI Radio FM 2000 radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have this radio card.  This card may also be
found as Gemtek PCI FM.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-maxiradio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_MAESTRO</term>
<nutsynopsis>
	"Maestro on board radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to directly support the on-board radio tuner on the
Maestro 2 or 2E sound card.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-maestro.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_MIROPCM20</term>
<nutsynopsis>
	"miroSOUND PCM20 radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV && SOUND_ACI_MIXER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have this FM radio card. You also need to say Y
to "ACI mixer (miroSOUND PCM1-pro/PCM12/PCM20 radio)" (in "Sound")
for this to work.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called miropcm20.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_MIROPCM20_RDS</term>
<nutsynopsis>
	"miroSOUND PCM20 radio RDS user interface (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV!=n && RADIO_MIROPCM20 && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you want to see RDS/RBDS information like
RadioText, Programme Service name, Clock Time and date, Programme
TYpe and Traffic Announcement/Programme identification.  You also
need to say Y to "miroSOUND PCM20 radio" and devfs!

It's not possible to read the raw RDS packets from the device, so
the driver cant provide an V4L interface for this.  But the
availability of RDS is reported over V4L by the basic driver
already.  Here RDS can be read from files in /dev/v4l/rds.

To compile this driver as a module, choose M here: the
module will be called miropcm20-rds.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_SF16FMI</term>
<nutsynopsis>
	"SF16FMI Radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these FM radio cards.  If you
compile the driver into the kernel and your card is not PnP one, you
have to add "sf16fm=<io>" to the kernel command line (I/O address is
0x284 or 0x384).

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-sf16fmi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_SF16FMR2</term>
<nutsynopsis>
	"SF16FMR2 Radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these FM radio cards.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found on the WWW at
<http://roadrunner.swansea.uk.linux.org/v4l.shtml>.

To compile this driver as a module, choose M here: the
module will be called radio-sf16fmr2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TERRATEC</term>
<nutsynopsis>
	"TerraTec ActiveRadio ISA Standalone"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have this FM radio card, and then fill in the
port address below. (TODO)

Note: This driver is in its early stages.  Right now volume and
frequency control and muting works at least for me, but
unfortunately I have not found anybody who wants to use this card
with Linux.  So if it is this what YOU are trying to do right now,
PLEASE DROP ME A NOTE!!  Rolf Offermanns <rolf@offermanns.de>.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-terratec.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TERRATEC_PORT</term>
<nutsynopsis>
	"Terratec i/o port (normally 0x590)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_TERRATEC=y</literal>
	</para>

	<para>
	default value
	<literal>590 if VIDEO_DEV && RADIO_TERRATEC=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Fill in the I/O port of your TerraTec FM radio card. If unsure, go
with the default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TRUST</term>
<nutsynopsis>
	"Trust FM radio card"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a driver for the Trust FM radio cards. Say Y if you have
such a card and want to use it under Linux.

To compile this driver as a module, choose M here: the
module will be called radio-trust.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TRUST_PORT</term>
<nutsynopsis>
	"Trust i/o port (usually 0x350 or 0x358)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_TRUST=y</literal>
	</para>

	<para>
	default value
	<literal>350 if VIDEO_DEV && RADIO_TRUST=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter the I/O port of your Trust FM radio card. If unsure, try the
values "0x350" or "0x358".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TYPHOON</term>
<nutsynopsis>
	"Typhoon Radio (a.k.a. EcoRadio)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these FM radio cards, and then fill
in the port address and the frequency used for muting below.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-typhoon.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TYPHOON_PROC_FS</term>
<nutsynopsis>
	"Support for /proc/radio-typhoon"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && PROC_FS && RADIO_TYPHOON</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the typhoon radio card driver to write
status information (frequency, volume, muted, mute frequency,
base address) to /proc/radio-typhoon. The file can be viewed with
your favorite pager (i.e. use "more /proc/radio-typhoon" or "less
/proc/radio-typhoon" or simply "cat /proc/radio-typhoon").
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TYPHOON_PORT</term>
<nutsynopsis>
	"Typhoon I/O port (0x316 or 0x336)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_TYPHOON=y</literal>
	</para>

	<para>
	default value
	<literal>316 if VIDEO_DEV && RADIO_TYPHOON=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter the I/O port of your Typhoon or EcoRadio radio card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_TYPHOON_MUTEFREQ</term>
<nutsynopsis>
	"Typhoon frequency set when muting the device (kHz)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_TYPHOON=y</literal>
	</para>

	<para>
	default value
	<literal>87500 if VIDEO_DEV && RADIO_TYPHOON=y</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Enter the frequency used for muting the radio. The device is never
completely silent. If the volume is just turned down, you can still
hear silent voices and music. For that reason, the frequency of the
radio device is set to the frequency you can enter here whenever
the device is muted. There should be no local radio station at that
frequency.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_ZOLTRIX</term>
<nutsynopsis>
	"Zoltrix Radio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISA && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose Y here if you have one of these FM radio cards, and then fill
in the port address below.

In order to control your radio card, you will need to use programs
that are compatible with the Video For Linux API.  Information on
this API and pointers to "v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called radio-zoltrix.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RADIO_ZOLTRIX_PORT</term>
<nutsynopsis>
	"ZOLTRIX I/O port (0x20c or 0x30c)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VIDEO_DEV && RADIO_ZOLTRIX=y</literal>
	</para>

	<para>
	default value
	<literal>20c if VIDEO_DEV && RADIO_ZOLTRIX=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Enter the I/O port of your Zoltrix radio card.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Digital Video Broadcasting Devices"

<nutentry>
	<term>DVB</term>
<nutsynopsis>
	"DVB For Linux"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support Digital Video Broadcasting hardware.  Enable this if you
own a DVB adapter and want to use it or if you compile Linux for
a digital SetTopBox.

API specs and user tools are available from <http://www.linuxtv.org/>.

Please report problems regarding this driver to the LinuxDVB
mailing list.

If unsure say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CORE</term>
<nutsynopsis>
	"DVB Core Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
DVB core utility functions for device handling, software fallbacks etc.
Say Y when you have a DVB card and want to use it. Say Y if your want
to build your drivers outside the kernel, but need the DVB core. All 
in-kernel drivers will select this automatically if needed.
If unsure say N.
	</para>

</nutentrybody>
</nutentry>

comment "Supported SAA7146 based PCI Adapters"
<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>


<nutentry>
	<term>DVB_AV7110</term>
<nutsynopsis>
	"AV7110 cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for SAA7146 and AV7110 based DVB cards as produced
by Fujitsu-Siemens, Technotrend, Hauppauge and others.

This driver only supports the fullfeatured cards with
onboard MPEG2 decoder.

This driver needs an external firmware. Please use the script
"<kerneldir>/Documentation/dvb/get_dvb_firmware av7110" to
download/extract it, and then copy it to /usr/lib/hotplug/firmware.

Say Y if you own such a card and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_AV7110_FIRMWARE</term>
<nutsynopsis>
	"Compile AV7110 firmware into the driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_AV7110 && !STANDALONE</literal>
	</para>

	<para>
	default value
	<literal>y if !STANDALONE && DVB_AV7110=y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The AV7110 firmware is normally loaded by the firmware hotplug manager.
If you want to compile the firmware into the driver you need to say
Y here and provide the correct path of the firmware. You need this
option if you want to compile the whole driver statically into the
kernel.

All other people say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_AV7110_FIRMWARE_FILE</term>
<nutsynopsis>
	"Full pathname of av7110 firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_AV7110_FIRMWARE</literal>
	</para>

	<para>
	default value
	<literal>/usr/lib/hotplug/firmware/dvb-ttpci-01.fw if DVB_AV7110_FIRMWARE</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_AV7110_OSD</term>
<nutsynopsis>
	"AV7110 OSD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_AV7110</literal>
	</para>

	<para>
	default value
	<literal>y if DVB_AV7110</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The AV7110 firmware provides some code to generate an OnScreenDisplay
on the video output. This is kind of nonstandard and not guaranteed to
be maintained.

Anyway, some popular DVB software like VDR uses this OSD to render
its menus, so say Y if you want to use this software.

All other people say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_BUDGET</term>
<nutsynopsis>
	"Budget cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for simple SAA7146 based DVB cards
(so called Budget- or Nova-PCI cards) without onboard
MPEG2 decoder.

Say Y if you own such a card and want to use it.

To compile this driver as a module, choose M here: the
module will be called budget.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_BUDGET_CI</term>
<nutsynopsis>
	"Budget cards with onboard CI connector"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for simple SAA7146 based DVB cards
(so called Budget- or Nova-PCI cards) without onboard
MPEG2 decoder, but with onboard Common Interface connector.

Note: The Common Interface is not yet supported by this driver
due to lack of information from the vendor.

Say Y if you own such a card and want to use it.

To compile this driver as a module, choose M here: the
module will be called budget-ci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_BUDGET_AV</term>
<nutsynopsis>
	"Budget cards with analog video inputs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for simple SAA7146 based DVB cards
(so called Budget- or Nova-PCI cards) without onboard
MPEG2 decoder, but with one or more analog video inputs.

Say Y if you own such a card and want to use it.

To compile this driver as a module, choose M here: the
module will be called budget-av.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_BUDGET_PATCH</term>
<nutsynopsis>
	"AV7110 cards with Budget Patch"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && DVB_BUDGET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for Budget Patch (full TS) modification on
SAA7146+AV7110 based cards (DVB-S cards). This
driver doesn't use onboard MPEG2 decoder. The
card is driven in Budget-only mode. Card is
required to have loaded firmware to tune properly.
Firmware can be loaded by insertion and removal of
standard AV7110 driver prior to loading this
driver.

Say Y if you own such a card and want to use it.

To compile this driver as a module, choose M here: the
module will be called budget-patch.
	</para>

</nutentrybody>
</nutentry>

comment "Supported USB Adapters"
<para>
	depends on
	<literal>DVB_CORE && USB</literal>
	</para>


<nutentry>
	<term>DVB_USB</term>
<nutsynopsis>
	"Support for various USB DVB devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
By enabling this you will be able to choose the various supported
USB1.1 and USB2.0 DVB devices.

Almost every USB device needs a firmware, please look into
<file:Documentation/dvb/README.dvb-usb>.

For a complete list of supported USB devices see the LinuxTV DVB Wiki:
<http://www.linuxtv.org/wiki/index.php/DVB_USB>

Say Y if you own a USB DVB device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_DEBUG</term>
<nutsynopsis>
	"Enable extended debug support for all DVB-USB devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want to enable debugging. See modinfo dvb-usb (and the
appropriate drivers) for debug levels.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_A800</term>
<nutsynopsis>
	"AVerMedia AverTV DVB-T USB 2.0 (A800)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the AVerMedia AverTV DVB-T USB 2.0 (A800) receiver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_DIBUSB_MB</term>
<nutsynopsis>
	"DiBcom USB DVB-T devices (based on the DiB3000M-B) (see help for device list)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for USB 1.1 and 2.0 DVB-T receivers based on reference designs made by
DiBcom (<http://www.dibcom.fr>) equipped with a DiB3000M-B demodulator.

Devices supported by this driver:
  TwinhanDTV USB-Ter (VP7041)
  TwinhanDTV Magic Box (VP7041e)
  KWorld/JetWay/ADSTech V-Stream XPERT DTV - DVB-T USB1.1 and USB2.0
  Hama DVB-T USB1.1-Box
  DiBcom USB1.1 reference devices (non-public)
  Ultima Electronic/Artec T1 USB TVBOX
  Compro Videomate DVB-U2000 - DVB-T USB
  Grandtec DVB-T USB
  Avermedia AverTV DVBT USB1.1
  Artec T1 USB1.1 boxes

The VP7041 seems to be identical to "CTS Portable" (Chinese
Television System).

Say Y if you own such a device and want to use it. You should build it as
a module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_DIBUSB_MC</term>
<nutsynopsis>
	"DiBcom USB DVB-T devices (based on the DiB3000M-C/P) (see help for device list)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for 2.0 DVB-T receivers based on reference designs made by
DiBcom (<http://www.dibcom.fr>) equipped with a DiB3000M-C/P demodulator.

Devices supported by this driver:
  DiBcom USB2.0 reference devices (non-public)
  Artec T1 USB2.0 boxes

Say Y if you own such a device and want to use it. You should build it as
a module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_UMT_010</term>
<nutsynopsis>
	"HanfTek UMT-010 DVB-T USB2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the HanfTek UMT-010 USB2.0 stick-sized DVB-T receiver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_CXUSB</term>
<nutsynopsis>
	"Medion MD95700 hybrid USB2.0 (Conexant) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the Medion MD95700 hybrid USB2.0 device. Currently
only the DVB-T part is supported.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_DIGITV</term>
<nutsynopsis>
	"Nebula Electronics uDigiTV DVB-T USB2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the Nebula Electronics uDigitV USB2.0 DVB-T receiver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_VP7045</term>
<nutsynopsis>
	"TwinhanDTV Alpha/MagicBoxII, DNTV tinyUSB2, Beetle USB2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the

  TwinhanDTV Alpha (stick) (VP-7045),
      TwinhanDTV MagicBox II (VP-7046),
      DigitalNow TinyUSB 2 DVB-t,
      DigitalRise USB 2.0 Ter (Beetle) and
      TYPHOON DVB-T USB DRIVE

DVB-T USB2.0 receivers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_VP702X</term>
<nutsynopsis>
	"TwinhanDTV StarBox and clones DVB-S USB2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the

  TwinhanDTV StarBox,
      DigitalRise USB Starbox and
      TYPHOON DVB-S USB 2.0 BOX

DVB-S USB2.0 receivers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_NOVA_T_USB2</term>
<nutsynopsis>
	"Hauppauge WinTV-NOVA-T usb2 DVB-T USB2.0 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the Hauppauge WinTV-NOVA-T usb2 DVB-T USB2.0 receiver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_USB_DTT200U</term>
<nutsynopsis>
	"WideView WT-200U and WT-220U (pen) DVB-T USB2.0 support (Yakumo/Hama/Typhoon/Yuan)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to support the WideView/Yakumo/Hama/Typhoon/Yuan DVB-T USB2.0 receiver.

The receivers are also known as DTT200U (Yakumo) and UB300 (Yuan).

The WT-220U and its clones are pen-sized.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_TTUSB_BUDGET</term>
<nutsynopsis>
	"Technotrend/Hauppauge Nova-USB devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && USB</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for external USB adapters designed by Technotrend and
produced by Hauppauge, shipped under the brand name 'Nova-USB'.

These devices don't have a MPEG decoder built in, so you need
an external software decoder to watch TV.

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_TTUSB_DEC</term>
<nutsynopsis>
	"Technotrend/Hauppauge USB DEC devices"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && USB</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for external USB adapters designed by Technotrend and
produced by Hauppauge, shipped under the brand name 'DEC2000-t'
and 'DEC3000-s'.

Even if these devices have a MPEG decoder built in, they transmit
only compressed MPEG data over the USB bus, so you need
an external software decoder to watch TV on your computer.

This driver needs external firmware. Please use the commands
"<kerneldir>/Documentation/dvb/get_dvb_firmware dec2000t",
"<kerneldir>/Documentation/dvb/get_dvb_firmware dec2540t",
"<kerneldir>/Documentation/dvb/get_dvb_firmware dec3000s",
download/extract them, and then copy them to /usr/lib/hotplug/firmware.

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2</term>
<nutsynopsis>
	"Terratec CinergyT2/qanu USB2 DVB-T receiver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for "TerraTec CinergyT2" USB2.0 Highspeed DVB Receivers

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2_TUNING</term>
<nutsynopsis>
	"sophisticated fine-tuning for CinergyT2 cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CINERGYT2</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Here you can fine-tune some parameters of the CinergyT2 driver.

Normally you don't need to touch this, but in exotic setups you
may fine-tune your setup and adjust e.g. DMA buffer sizes for
a particular application.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2_STREAM_URB_COUNT</term>
<nutsynopsis>
	"Number of queued USB Request Blocks for Highspeed Stream Transfers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CINERGYT2_TUNING</literal>
	</para>

	<para>
	default value
	<literal>32 if DVB_CINERGYT2_TUNING</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
USB Request Blocks for Highspeed Stream transfers are scheduled in
a queue for the Host Controller.

Usually the default value is a safe choice.

You may increase this number if you are using this device in a 
Server Environment with many high-traffic USB Highspeed devices 
sharing the same USB bus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2_STREAM_BUF_SIZE</term>
<nutsynopsis>
	"Size of URB Stream Buffers for Highspeed Transfers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CINERGYT2_TUNING</literal>
	</para>

	<para>
	default value
	<literal>512 if DVB_CINERGYT2_TUNING</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Should be a multiple of native buffer size of 512 bytes.
Default value is a safe choice.

You may increase this number if you are using this device in a 
Server Environment with many high-traffic USB Highspeed devices 
sharing the same USB bus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2_QUERY_INTERVAL</term>
<nutsynopsis>
	"Status update interval [milliseconds]"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CINERGYT2_TUNING</literal>
	</para>

	<para>
	default value
	<literal>250 if DVB_CINERGYT2_TUNING</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the interval for status readouts from the demodulator.
You may try lower values if you need more responsive signal quality
measurements.

Please keep in mind that these updates cause traffic on the tuner
control bus and thus may or may not affect receiption sensitivity.

The default value should be a safe choice for common applications.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE</term>
<nutsynopsis>
	"Register the onboard IR Remote Control Receiver as Input Device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CINERGYT2_TUNING</literal>
	</para>

	<para>
	default value
	<literal>yes if DVB_CINERGYT2_TUNING</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable this option if you want to use the onboard Infrared Remote 
Control Receiver as Linux-Input device.

Right now only the keycode table for the default Remote Control
delivered with the device is supported, please see the driver
source code to find out how to add support for other controls.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CINERGYT2_RC_QUERY_INTERVAL</term>
<nutsynopsis>
	"Infrared Remote Controller update interval [milliseconds]"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE</literal>
	</para>

	<para>
	default value
	<literal>50 if DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
If you have a very fast-repeating remote control you can try lower
values, for normal consumer receivers the default value should be
a safe choice.
	</para>

</nutentrybody>
</nutentry>

comment "Supported FlexCopII (B2C2) Adapters"
<para>
	depends on
	<literal>DVB_CORE && (PCI || USB)</literal>
	</para>


<nutentry>
	<term>DVB_B2C2_FLEXCOP</term>
<nutsynopsis>
	"Technisat/B2C2 FlexCopII(b) and FlexCopIII adapters"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the digital TV receiver chip made by B2C2 Inc. included in
Technisats PCI cards and USB boxes.

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_B2C2_FLEXCOP_PCI</term>
<nutsynopsis>
	"Technisat/B2C2 Air/Sky/Cable2PC PCI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_B2C2_FLEXCOP && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Air/Sky/CableStar2 PCI card (DVB/ATSC) by Technisat/B2C2.

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_B2C2_FLEXCOP_USB</term>
<nutsynopsis>
	"Technisat/B2C2 Air/Sky/Cable2PC USB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_B2C2_FLEXCOP && USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the Air/Sky/Cable2PC USB1.1 box (DVB/ATSC) by Technisat/B2C2,

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_B2C2_FLEXCOP_DEBUG</term>
<nutsynopsis>
	"Enable debug for the B2C2 FlexCop drivers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_B2C2_FLEXCOP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want to enable the module option to control debug messages
of all B2C2 FlexCop drivers.
	</para>

</nutentrybody>
</nutentry>

comment "Supported BT878 Adapters"
<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>


<nutentry>
	<term>DVB_BT8XX</term>
<nutsynopsis>
	"BT8xx based PCI cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && PCI && VIDEO_BT848</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for PCI cards based on the Bt8xx PCI bridge. Examples are
the Nebula cards, the Pinnacle PCTV cards, the Twinhan DST cards,
the pcHDTV HD2000 cards, and certain AVerMedia cards.

Since these cards have no MPEG decoder onboard, they transmit
only compressed MPEG data over the PCI bus, so you need
an external software decoder to watch TV on your computer.

Say Y if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>

comment "Supported Pluto2 Adapters"
<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>


<nutentry>
	<term>DVB_PLUTO2</term>
<nutsynopsis>
	"Pluto2 cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for PCI cards based on the Pluto2 FPGA like the Satelco
Easywatch Mobile Terrestrial DVB-T Receiver.

Since these cards have no MPEG decoder onboard, they transmit
only compressed MPEG data over the PCI bus, so you need
an external software decoder to watch TV on your computer.

Say Y or M if you own such a device and want to use it.
	</para>

</nutentrybody>
</nutentry>

comment "Supported DVB Frontends"
<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>



menu "Customise DVB Frontends"
<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>



comment "DVB-S (satellite) frontends"
<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>


<nutentry>
	<term>DVB_STV0299</term>
<nutsynopsis>
	"ST STV0299 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CX24110</term>
<nutsynopsis>
	"Conexant CX24110 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_TDA8083</term>
<nutsynopsis>
	"Philips TDA8083 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_TDA80XX</term>
<nutsynopsis>
	"Philips TDA8044 or TDA8083 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_MT312</term>
<nutsynopsis>
	"Zarlink MT312 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_VES1X93</term>
<nutsynopsis>
	"VLSI VES1893 or VES1993 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_S5H1420</term>
<nutsynopsis>
	"Samsung S5H1420 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-S tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>

comment "DVB-T (terrestrial) frontends"
<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>


<nutentry>
	<term>DVB_SP8870</term>
<nutsynopsis>
	"Spase sp8870 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.

This driver needs external firmware. Please use the command
"<kerneldir>/Documentation/dvb/get_dvb_firmware sp8870" to
download/extract it, and then copy it to /usr/lib/hotplug/firmware.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_SP887X</term>
<nutsynopsis>
	"Spase sp887x based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.

This driver needs external firmware. Please use the command
"<kerneldir>/Documentation/dvb/get_dvb_firmware sp887x" to
download/extract it, and then copy it to /usr/lib/hotplug/firmware.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CX22700</term>
<nutsynopsis>
	"Conexant CX22700 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_CX22702</term>
<nutsynopsis>
	"Conexant cx22702 demodulator (OFDM)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_L64781</term>
<nutsynopsis>
	"LSI L64781"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_TDA1004X</term>
<nutsynopsis>
	"Philips TDA10045H/TDA10046H based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.

This driver needs external firmware. Please use the commands
"<kerneldir>/Documentation/dvb/get_dvb_firmware tda10045",
"<kerneldir>/Documentation/dvb/get_dvb_firmware tda10046" to
download/extract them, and then copy them to /usr/lib/hotplug/firmware.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_NXT6000</term>
<nutsynopsis>
	"NxtWave Communications NXT6000 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_MT352</term>
<nutsynopsis>
	"Zarlink MT352 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_DIB3000MB</term>
<nutsynopsis>
	"DiBcom 3000M-B"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Designed for mobile usage. Say Y when you want
to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_DIB3000MC</term>
<nutsynopsis>
	"DiBcom 3000P/M-C"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-T tuner module. Designed for mobile usage. Say Y when you want
to support this frontend.
	</para>

</nutentrybody>
</nutentry>

comment "DVB-C (cable) frontends"
<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>


<nutentry>
	<term>DVB_ATMEL_AT76C651</term>
<nutsynopsis>
	"Atmel AT76C651 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-C tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_VES1820</term>
<nutsynopsis>
	"VLSI VES1820 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-C tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_TDA10021</term>
<nutsynopsis>
	"Philips TDA10021 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-C tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_STV0297</term>
<nutsynopsis>
	"ST STV0297 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A DVB-C tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>

comment "ATSC (North American/Korean Terresterial DTV) frontends"
<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>


<nutentry>
	<term>DVB_NXT2002</term>
<nutsynopsis>
	"Nxt2002 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
An ATSC 8VSB tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_OR51211</term>
<nutsynopsis>
	"or51211 based (pcHDTV HD2000 card)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
An ATSC 8VSB tuner module. Say Y when you want to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_OR51132</term>
<nutsynopsis>
	"OR51132 based (pcHDTV HD3000 card)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
An ATSC 8VSB and QAM64/256 tuner module. Say Y when you want
to support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_BCM3510</term>
<nutsynopsis>
	"Broadcom BCM3510"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
An ATSC 8VSB/16VSB and QAM64/256 tuner module. Say Y when you want to
support this frontend.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DVB_LGDT330X</term>
<nutsynopsis>
	"LG Electronics LGDT3302/LGDT3303 based"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DVB_CORE</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
An ATSC 8VSB and QAM64/256 tuner module. Say Y when you want
to support this frontend.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu
<nutentry>
	<term>VIDEO_SAA7146</term>
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SAA7146_VV</term>
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_VIDEOBUF</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_TUNER</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_BUF</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_BUF_DVB</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_BTCX</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_IR</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_TVEEPROM</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Graphics support"

<nutentry>
	<term>FB</term>
<nutsynopsis>
	"Support for frame buffer devices"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The frame buffer device provides an abstraction for the graphics
hardware. It represents the frame buffer of some video hardware and
allows application software to access the graphics hardware through
a well-defined interface, so the software doesn't need to know
anything about the low-level (hardware register) stuff.

Frame buffer devices work identically across the different
architectures supported by Linux and make the implementation of
application programs easier and more portable; at this point, an X
server exists which uses the frame buffer device exclusively.
On several non-X86 architectures, the frame buffer device is the
only way to use the graphics hardware.

The device is accessed through special device nodes, usually located
in the /dev directory, i.e. /dev/fb*.

You need an utility program called fbset to make full use of frame
buffer devices. Please read <file:Documentation/fb/framebuffer.txt>
and the Framebuffer-HOWTO at
<http://www.tahallah.demon.co.uk/programming/prog.html> for more
information.

Say Y here and to the driver for your graphics board below if you
are compiling a kernel for a non-x86 architecture.

If you are compiling for the x86 architecture, you can say Y if you
want to play with it, but it is not essential. Please note that
running graphical applications that directly touch the hardware
(e.g. an accelerated X server) and that are not frame buffer
device-aware may cause unexpected results. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CFB_FILLRECT</term>
	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include the cfb_fillrect function for generic software rectangle
filling. This is used by drivers that don't provide their own
(accelerated) version.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CFB_COPYAREA</term>
	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include the cfb_copyarea function for generic software area copying.
This is used by drivers that don't provide their own (accelerated)
version.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CFB_IMAGEBLIT</term>
	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include the cfb_imageblit function for generic software image
blitting. This is used by drivers that don't provide their own
(accelerated) version.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SOFT_CURSOR</term>
	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Include the soft_cursor function for generic software cursor support.
This is used by drivers that don't provide their own (accelerated)
version.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MACMODES</term>
	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MODE_HELPERS</term>
<nutsynopsis>
	"Enable Video Mode Handling Helpers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB</literal>
	</para>

	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables functions for handling video modes using the
Generalized Timing Formula and the EDID parser. A few drivers rely
on this feature such as the radeonfb, rivafb, and the i810fb. If
your driver does not take advantage of this feature, choosing Y will
just increase the kernel size by about 5K.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_TILEBLITTING</term>
<nutsynopsis>
	"Enable Tile Blitting Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB</literal>
	</para>

	<para>
	default value
	<literal>n if FB</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables tile blitting.  Tile blitting is a drawing technique
where the screen is divided into rectangular sections (tiles), whereas
the standard blitting divides the screen into pixels. Because the
default drawing element is a tile, drawing functions will be passed
parameters in terms of number of tiles instead of number of pixels.
For example, to draw a single character, instead of using bitmaps,
an index to an array of bitmaps will be used.  To clear or move a
rectangular section of a screen, the rectangle will be described in
terms of number of tiles in the x- and y-axis.

This is particularly important to one driver, matroxfb.  If
unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CIRRUS</term>
<nutsynopsis>
	"Cirrus Logic support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && (ZORRO || PCI)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for Cirrus Logic GD542x/543x based boards on
Amiga: SD64, Piccolo, Picasso II/II+, Picasso IV, or EGS Spectrum.

If you have a PCI-based system, this enables support for these
chips: GD-543x, GD-544x, GD-5480.

Please read the file <file:Documentation/fb/cirrusfb.txt>.

Say N unless you have such a graphics board or plan to get one
before you next recompile the kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PM2</term>
<nutsynopsis>
	"Permedia2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && (AMIGA && BROKEN || PCI)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for the Permedia2 AGP frame
buffer card from ASK, aka `Graphic Blaster Exxtreme'.  There is a
product page at
<http://www.ask.com.hk/product/Permedia%202/permedia2.htm>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PM2_FIFO_DISCONNECT</term>
<nutsynopsis>
	"enable FIFO disconnect feature"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_PM2 && PCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support the Permedia2 FIFO disconnect feature (see CONFIG_FB_PM2).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ARMCLCD</term>
<nutsynopsis>
	"ARM PrimeCell PL110 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && ARM && ARM_AMBA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This framebuffer device driver is for the ARM PrimeCell PL110
Colour LCD controller.  ARM PrimeCells provide the building
blocks for System on a Chip devices.

If you want to compile this as a module (=code which can be
inserted into and removed from the running kernel), say M
here and read <file:Documentation/modules.txt>.  The module
will be called amba-clcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ACORN</term>
<nutsynopsis>
	"Acorn VIDC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ARM && (ARCH_ACORN || ARCH_CLPS7500)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the Acorn VIDC graphics
hardware found in Acorn RISC PCs and other ARM-based machines.  If
unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CLPS711X</term>
<nutsynopsis>
	"CLPS711X LCD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ARM && ARCH_CLPS711X</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SA1100</term>
<nutsynopsis>
	"SA-1100 LCD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ARM && ARCH_SA1100</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a framebuffer device for the SA-1100 LCD Controller.
See <http://www.linux-fbdev.org/> for information on framebuffer
devices.

If you plan to use the LCD display with your SA-1100 system, say
Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_IMX</term>
<nutsynopsis>
	"Motorola i.MX LCD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && ARM && ARCH_IMX</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CYBER2000</term>
<nutsynopsis>
	"CyberPro 2000/2010/5000 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI && (BROKEN || !SPARC64)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Integraphics CyberPro 20x0 and 5000
VGA chips used in the Rebel.com Netwinder and other machines.
Say Y if you have a NetWinder or a graphics card containing this
device, otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_APOLLO</term>
	<para>
	default value
	<literal>y if FB=y && APOLLO</literal>
	</para>


  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_Q40</term>
	<para>
	default value
	<literal>y if FB=y && Q40</literal>
	</para>


  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_AMIGA</term>
<nutsynopsis>
	"Amiga native chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && AMIGA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for the builtin graphics
chipset found in Amigas.

To compile this driver as a module, choose M here: the
module will be called amifb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_AMIGA_OCS</term>
<nutsynopsis>
	"Amiga OCS chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_AMIGA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for the original Agnus and Denise video chips,
found in the Amiga 1000 and most A500's and A2000's. If you intend
to run Linux on any of these systems, say Y; otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_AMIGA_ECS</term>
<nutsynopsis>
	"Amiga ECS chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_AMIGA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for the Enhanced Chip Set, found in later
A500's, later A2000's, the A600, the A3000, the A3000T and CDTV. If
you intend to run Linux on any of these systems, say Y; otherwise
say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_AMIGA_AGA</term>
<nutsynopsis>
	"Amiga AGA chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_AMIGA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for the Advanced Graphics Architecture (also
known as the AGA or AA) Chip Set, found in the A1200, A4000, A4000T
and CD32. If you intend to run Linux on any of these systems, say Y;
otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CYBER</term>
<nutsynopsis>
	"Amiga CyberVision 64 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && ZORRO && BROKEN</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Cybervision 64 graphics card from
Phase5. Please note that its use is not all that intuitive (i.e. if
you have any questions, be sure to ask!). Say N unless you have a
Cybervision 64 or plan to get one before you next recompile the
kernel. Please note that this driver DOES NOT support the
Cybervision 64/3D card, as they use incompatible video chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_VIRGE</term>
<nutsynopsis>
	"Amiga CyberVision 64/3D support "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ZORRO && BROKEN</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for the Cybervision 64/3D graphics card from
Phase5. Please note that its use is not all that intuitive (i.e. if
you have any questions, be sure to ask!). Say N unless you have a
Cybervision 64/3D or plan to get one before you next recompile the
kernel. Please note that this driver DOES NOT support the older
Cybervision 64 card, as they use incompatible video chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RETINAZ3</term>
<nutsynopsis>
	"Amiga Retina Z3 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ZORRO && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Retina Z3 graphics card. Say N unless
you have a Retina Z3 or plan to get one before you next recompile
the kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_FM2</term>
<nutsynopsis>
	"Amiga FrameMaster II/Rainbow II support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ZORRO</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the Amiga FrameMaster
card from BSC (exhibited 1992 but not shipped as a CBM product).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ARC</term>
<nutsynopsis>
	"Arc Monochrome LCD board support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && X86</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables support for the Arc Monochrome LCD board. The board
is based on the KS-108 lcd controller and is typically a matrix
of 2*n chips. This driver was tested with a 128x64 panel. This
driver supports it for use with x86 SBCs through a 16 bit GPIO
interface (8 bit data, 8 bit control). If you anticpate using
this driver, say Y or M; otherwise say N. You must specify the
GPIO IO address to be used for setting control and data.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATARI</term>
<nutsynopsis>
	"Atari native chipset support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ATARI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the builtin graphics
chipset found in Ataris.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_OF</term>
<nutsynopsis>
	"Open Firmware frame buffer device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (PPC64 || PPC_OF)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want support with Open Firmware for your graphics
board.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CONTROL</term>
<nutsynopsis>
	"Apple \"control\" display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PPC_PMAC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports a frame buffer for the graphics adapter in the
Power Macintosh 7300 and others.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PLATINUM</term>
<nutsynopsis>
	"Apple \"platinum\" display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PPC_PMAC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports a frame buffer for the "platinum" graphics
adapter in some Power Macintoshes.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_VALKYRIE</term>
<nutsynopsis>
	"Apple \"valkyrie\" display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (MAC || PPC_PMAC)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver supports a frame buffer for the "valkyrie" graphics
adapter in some Power Macintoshes.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CT65550</term>
<nutsynopsis>
	"Chips 65550 display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PPC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the Chips & Technologies
65550 graphics chip in PowerBooks.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ASILIANT</term>
<nutsynopsis>
	"Chips 69000 display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_IMSTT</term>
<nutsynopsis>
	"IMS Twin Turbo display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The IMS Twin Turbo is a PCI-based frame buffer card bundled with
many Macintosh and compatible computers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_S3TRIO</term>
<nutsynopsis>
	"S3 Trio display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PPC && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have a S3 Trio say Y. Say N for S3 Virge.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_VGA16</term>
<nutsynopsis>
	"VGA 16-color graphics support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && (X86 || PPC)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for VGA 16 color graphic
cards. Say Y if you have such a card.

To compile this driver as a module, choose M here: the
module will be called vga16fb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_STI</term>
<nutsynopsis>
	"HP STI frame buffer device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PARISC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if FB && PARISC</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
STI refers to the HP "Standard Text Interface" which is a set of
BIOS routines contained in a ROM chip in HP PA-RISC based machines.
Enabling this option will implement the linux framebuffer device
using calls to the STI BIOS routines for initialisation.

If you enable this option, you will get a planar framebuffer device
/dev/fb which will work on the most common HP graphic cards of the
NGLE family, including the artist chips (in the 7xx and Bxxx series),
HCRX, HCRX24, CRX, CRX24 and VisEG series.

It is safe to enable this option, so you should probably say "Y".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MAC</term>
<nutsynopsis>
	"Generic Macintosh display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && MAC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_HP300</term>
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if FB=y && HP300</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_TGA</term>
<nutsynopsis>
	"TGA framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && ALPHA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for generic TGA graphic
cards. Say Y if you have one of those.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_VESA</term>
<nutsynopsis>
	"VESA VGA graphics support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (X86 || X86_64)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for generic VESA 2.0
compliant graphic cards. The older VESA 1.2 cards are not supported.
You will get a boot time penguin logo at no additional cost. Please
read <file:Documentation/fb/vesafb.txt>. If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SELECT</term>
	<para>
	default value
	<literal>y if FB_VESA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for text mode selection on kernel startup. If
you want to take advantage of some high-resolution text mode your
card's BIOS offers, but the traditional Linux utilities like
SVGATextMode don't, you can say Y here and set the mode using the
"vga=" option from your boot loader (lilo or loadlin) or set
"vga=ask" which brings up a video mode menu on kernel startup. (Try
"man bootparam" or see the documentation of your boot loader about
how to pass options to the kernel.)

Read the file <file:Documentation/svga.txt> for more information
about the Video mode selection support. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_HGA</term>
<nutsynopsis>
	"Hercules mono graphics support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && X86</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Hercules mono graphics card.

To compile this driver as a module, choose M here: the
module will be called hgafb.

As this card technology is 15 years old, most people will answer N
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_HGA_ACCEL</term>
<nutsynopsis>
	"Hercules mono Acceleration functions (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_HGA && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will compile the Hercules mono graphics with
acceleration functions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SELECT</term>
	<para>
	default value
	<literal>y if FB=y && X86</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for text mode selection on kernel startup. If
you want to take advantage of some high-resolution text mode your
card's BIOS offers, but the traditional Linux utilities like
SVGATextMode don't, you can say Y here and set the mode using the
"vga=" option from your boot loader (lilo or loadlin) or set
"vga=ask" which brings up a video mode menu on kernel startup. (Try
"man bootparam" or see the documentation of your boot loader about
how to pass options to the kernel.)

Read the file <file:Documentation/svga.txt> for more information
about the Video mode selection support. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SGIVW</term>
<nutsynopsis>
	"SGI Visual Workstation framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && X86_VISWS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SGI Visual Workstation support for framebuffer graphics.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_GBE</term>
<nutsynopsis>
	"SGI Graphics Backend frame buffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (SGI_IP32 || X86_VISWS)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for SGI Graphics Backend.
This chip is used in SGI O2 and Visual Workstation 320/540.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_GBE_MEM</term>
<nutsynopsis>
	"Video memory size in MB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_GBE</literal>
	</para>

	<para>
	default value
	<literal>8 if FB_GBE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is the amount of memory reserved for the framebuffer,
which can be any value between 1MB and 8MB.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BUS_I2C</term>
	<para>
	default value
	<literal>y if FB=y && VISWS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SUN3</term>
<nutsynopsis>
	"Sun3 framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (SUN3 || SUN3X) && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_BW2</term>
<nutsynopsis>
	"BWtwo support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ((SPARC32 || SPARC64) && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the BWtwo frame buffer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CG3</term>
<nutsynopsis>
	"CGthree support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ((SPARC32 || SPARC64) && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the CGthree frame buffer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CG6</term>
<nutsynopsis>
	"CGsix (GX,TurboGX) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && ((SPARC32 || SPARC64) && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the CGsix (GX, TurboGX)
frame buffer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PVR2</term>
<nutsynopsis>
	"NEC PowerVR 2 display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && SH_DREAMCAST</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a PowerVR 2 card in your box.  If you plan to
run linux on your Dreamcast, you will have to say Y here.
This driver may or may not work on other PowerVR 2 cards, but is
totally untested.  Use at your own risk.  If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called pvr2fb.

You can pass several parameters to the driver at boot time or at
module load time.  The parameters look like "video=pvr2:XXX", where
the meaning of XXX can be found at the end of the main source file
(<file:drivers/video/pvr2fb.c>). Please see the file
<file:Documentation/fb/pvr2fb.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_EPSON1355</term>
<nutsynopsis>
	"Epson 1355 framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (SUPERH || ARCH_CEIVA)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Build in support for the SED1355 Epson Research Embedded RAMDAC
LCD/CRT Controller (since redesignated as the S1D13505) as a
framebuffer.  Product specs at
<http://www.erd.epson.com/vdc/html/products.htm>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_NVIDIA</term>
<nutsynopsis>
	"nVidia Framebuffer Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports graphics boards with the nVidia chips, TNT
and newer. For very old chipsets, such as the RIVA128, then use
the rivafb.
Say Y if you have such a graphics board.

To compile this driver as a module, choose M here: the
module will be called nvidiafb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_NVIDIA_I2C</term>
<nutsynopsis>
	"Enable DDC Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_NVIDIA && !PPC_OF</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables I2C support for nVidia Chipsets.  This is used
only for getting EDID information from the attached display
allowing for robust video mode handling and switching.

Because fbdev-2.6 requires that drivers must be able to
independently validate video mode parameters, you should say Y
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RIVA</term>
<nutsynopsis>
	"nVidia Riva support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports graphics boards with the nVidia Riva/Geforce
chips.
Say Y if you have such a graphics board.

To compile this driver as a module, choose M here: the
module will be called rivafb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RIVA_I2C</term>
<nutsynopsis>
	"Enable DDC Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_RIVA</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables I2C support for nVidia Chipsets.  This is used
only for getting EDID information from the attached display
allowing for robust video mode handling and switching.

Because fbdev-2.6 requires that drivers must be able to
independently validate video mode parameters, you should say Y
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RIVA_DEBUG</term>
<nutsynopsis>
	"Lots of debug output from Riva(nVidia) driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_RIVA</literal>
	</para>

	<para>
	default value
	<literal>n if FB_RIVA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the Riva driver to output all sorts
of debugging informations to provide to the maintainer when
something goes wrong.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_I810</term>
<nutsynopsis>
	"Intel 810/815 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && EXPERIMENTAL && PCI && X86 && !X86_64</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the on-board graphics built in to the Intel 810 
and 815 chipsets.  Say Y if you have and plan to use such a board.

To compile this driver as a module, choose M here: the
module will be called i810fb.

For more information, please read 
<file:Documentation/fb/intel810.txt>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_I810_GTF</term>
<nutsynopsis>
	"use VESA Generalized Timing Formula"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_I810</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y, then the VESA standard, Generalized Timing Formula 
or GTF, will be used to calculate the required video timing values
per video mode.  Since the GTF allows nondiscrete timings 
(nondiscrete being a range of values as opposed to discrete being a
set of values), you'll be able to use any combination of horizontal 
and vertical resolutions, and vertical refresh rates without having
to specify your own timing parameters.  This is especially useful
to maximize the performance of an aging display, or if you just 
have a display with nonstandard dimensions. A VESA compliant 
monitor is recommended, but can still work with non-compliant ones.
If you need or want this, then select this option. The timings may 
not be compliant with Intel's recommended values. Use at your own 
risk.

If you say N, the driver will revert to discrete video timings 
using a set recommended by Intel in their documentation.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_I810_I2C</term>
<nutsynopsis>
	"Enable DDC Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_I810 && FB_I810_GTF</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>

	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_INTEL</term>
<nutsynopsis>
	"Intel 830M/845G/852GM/855GM/865G support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && EXPERIMENTAL && PCI && X86 && !X86_64</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports the on-board graphics built in to the Intel
830M/845G/852GM/855GM/865G chipsets.
Say Y if you have and plan to use such a board.

To compile this driver as a module, choose M here: the
module will be called intelfb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_INTEL_DEBUG</term>
<nutsynopsis>
	"Intel driver Debug Messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_INTEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the Intel driver to output all sorts
of debugging informations to provide to the maintainer when
something goes wrong.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX</term>
<nutsynopsis>
	"Matrox acceleration"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Matrox Millennium, Matrox Millennium II,
Matrox Mystique, Matrox Mystique 220, Matrox Productiva G100, Matrox
Mystique G200, Matrox Millennium G200, Matrox Marvel G200 video,
Matrox G400, G450 or G550 card in your box.

To compile this driver as a module, choose M here: the
module will be called matroxfb.

You can pass several parameters to the driver at boot time or at
module load time. The parameters look like "video=matrox:XXX", and
are described in <file:Documentation/fb/matroxfb.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX_MILLENIUM</term>
<nutsynopsis>
	"Millennium I/II support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_MATROX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a Matrox Millennium or Matrox Millennium II
video card. If you select "Advanced lowlevel driver options" below,
you should check 4 bpp packed pixel, 8 bpp packed pixel, 16 bpp
packed pixel, 24 bpp packed pixel and 32 bpp packed pixel. You can
also use font widths different from 8.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX_MYSTIQUE</term>
<nutsynopsis>
	"Mystique support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_MATROX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a Matrox Mystique or Matrox Mystique 220
video card. If you select "Advanced lowlevel driver options" below,
you should check 8 bpp packed pixel, 16 bpp packed pixel, 24 bpp
packed pixel and 32 bpp packed pixel. You can also use font widths
different from 8.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX_G</term>
<nutsynopsis>
	"G100/G200/G400/G450/G550 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_MATROX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a Matrox G100, G200, G400, G450 or G550 based
video card. If you select "Advanced lowlevel driver options", you
should check 8 bpp packed pixel, 16 bpp packed pixel, 24 bpp packed
pixel and 32 bpp packed pixel. You can also use font widths
different from 8.

If you need support for G400 secondary head, you must first say Y to
"I2C support" in the character devices section, and then to
"Matrox I2C support" and "G400 second head support" here in the
framebuffer section. G450/G550 secondary head and digital output
are supported without additional modules.

The driver starts in monitor mode. You must use the matroxset tool 
(available at <ftp://platan.vc.cvut.cz/pub/linux/matrox-latest/>) to 
swap primary and secondary head outputs, or to change output mode.  
Secondary head driver always start in 640x480 resolution and you 
must use fbset to change it.

Do not forget that second head supports only 16 and 32 bpp
packed pixels, so it is a good idea to compile them into the kernel
too. You can use only some font widths, as the driver uses generic
painting procedures (the secondary head does not use acceleration
engine).

G450/G550 hardware can display TV picture only from secondary CRTC,
and it performs no scaling, so picture must have 525 or 625 lines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX_I2C</term>
<nutsynopsis>
	"Matrox I2C support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_MATROX && I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This drivers creates I2C buses which are needed for accessing the
DDC (I2C) bus present on all Matroxes, an I2C bus which
interconnects Matrox optional devices, like MGA-TVO on G200 and
G400, and the secondary head DDC bus, present on G400 only.

You can say Y or M here if you want to experiment with monitor
detection code. You must say Y or M here if you want to use either
second head of G400 or MGA-TVO on G200 or G400.

If you compile it as module, it will create a module named
i2c-matroxfb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX_MAVEN</term>
<nutsynopsis>
	"G400 second head support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_MATROX_G && FB_MATROX_I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
WARNING !!! This support does not work with G450 !!!

Say Y or M here if you want to use a secondary head (meaning two
monitors in parallel) on G400 or MGA-TVO add-on on G200. Secondary
head is not compatible with accelerated XFree 3.3.x SVGA servers -
secondary head output is blanked while you are in X. With XFree
3.9.17 preview you can use both heads if you use SVGA over fbdev or
the fbdev driver on first head and the fbdev driver on second head.

If you compile it as module, two modules are created,
matroxfb_crtc2 and matroxfb_maven. Matroxfb_maven is needed for
both G200 and G400, matroxfb_crtc2 is needed only by G400. You must
also load i2c-matroxfb to get it to run.

The driver starts in monitor mode and you must use the matroxset
tool (available at
<ftp://platan.vc.cvut.cz/pub/linux/matrox-latest/>) to switch it to
PAL or NTSC or to swap primary and secondary head outputs.
Secondary head driver also always start in 640x480 resolution, you
must use fbset to change it.

Also do not forget that second head supports only 16 and 32 bpp
packed pixels, so it is a good idea to compile them into the kernel
too.  You can use only some font widths, as the driver uses generic
painting procedures (the secondary head does not use acceleration
engine).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MATROX_MULTIHEAD</term>
<nutsynopsis>
	"Multihead support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_MATROX</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have more than one (supported) Matrox device in
your computer and you want to use all of them for different monitors
("multihead"). If you have only one device, you should say N because
the driver compiled with Y is larger and a bit slower, especially on
ia32 (ix86).

If you said M to "Matrox unified accelerated driver" and N here, you
will still be able to use several Matrox devices simultaneously:
insert several instances of the module matroxfb into the kernel
with insmod, supplying the parameter "dev=N" where N is 0, 1, etc.
for the different Matrox devices. This method is slightly faster but
uses 40 KB of kernel memory per Matrox card.

There is no need for enabling 'Matrox multihead support' if you have
only one Matrox card in the box.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RADEON_OLD</term>
<nutsynopsis>
	"ATI Radeon display support (Old driver)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you want to use an ATI Radeon graphics card as
a framebuffer device.  There are both PCI and AGP versions.  You
don't need to choose this to run the Radeon in plain VGA mode.
There is a product page at
<http://www.ati.com/na/pages/products/pc/radeon32/index.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RADEON</term>
<nutsynopsis>
	"ATI Radeon display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you want to use an ATI Radeon graphics card as
a framebuffer device.  There are both PCI and AGP versions.  You
don't need to choose this to run the Radeon in plain VGA mode.

If you say Y here and want DDC/I2C support you must first say Y to
"I2C support" and "I2C bit-banging support" in the character devices
section.

If you say M here then "I2C support" and "I2C bit-banging support" 
can be build either as modules or built-in.

There is a product page at
http://apps.ati.com/ATIcompare/
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RADEON_I2C</term>
<nutsynopsis>
	"DDC/I2C for ATI Radeon support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_RADEON</literal>
	</para>

	<para>
	default value
	<literal>y if FB_RADEON</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want DDC/I2C support for your Radeon board. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_RADEON_DEBUG</term>
<nutsynopsis>
	"Lots of debug output from Radeon driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_RADEON</literal>
	</para>

	<para>
	default value
	<literal>n if FB_RADEON</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the Radeon driver to output all sorts
of debugging informations to provide to the maintainer when
something goes wrong.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATY128</term>
<nutsynopsis>
	"ATI Rage128 display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports graphics boards with the ATI Rage128 chips.
Say Y if you have such a graphics board and read
<file:Documentation/fb/aty128fb.txt>.

To compile this driver as a module, choose M here: the
module will be called aty128fb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATY</term>
<nutsynopsis>
	"ATI Mach64 display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && (PCI || ATARI)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports graphics boards with the ATI Mach64 chips.
Say Y if you have such a graphics board.

To compile this driver as a module, choose M here: the
module will be called atyfb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATY_CT</term>
<nutsynopsis>
	"Mach64 CT/VT/GT/LT (incl. 3D RAGE) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && FB_ATY</literal>
	</para>

	<para>
	default value
	<literal>y if PCI && FB_ATY && SPARC64 && FB_PCI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support use of ATI's 64-bit Rage boards (or other
boards based on the Mach64 CT, VT, GT, and LT chipsets) as a
framebuffer device.  The ATI product support page for these boards
is at <http://support.ati.com/products/pc/mach64/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATY_GENERIC_LCD</term>
<nutsynopsis>
	"Mach64 generic LCD support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_ATY_CT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you have a laptop with an ATI Rage LT PRO, Rage Mobility,
Rage XC, or Rage XL chipset.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATY_XL_INIT</term>
<nutsynopsis>
	"Rage XL No-BIOS Init support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_ATY_CT</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support booting a Rage XL without BIOS support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_ATY_GX</term>
<nutsynopsis>
	"Mach64 GX support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_ATY && PCI</literal>
	</para>

	<para>
	default value
	<literal>y if FB_ATY && ATARI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support use of the ATI Mach64 Graphics Expression
board (or other boards based on the Mach64 GX chipset) as a
framebuffer device.  The ATI product support page for these boards
is at
<http://support.ati.com/products/pc/mach64/graphics_xpression.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SAVAGE</term>
<nutsynopsis>
	"S3 Savage support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports notebooks and computers with S3 Savage PCI/AGP
chips.

Say Y if you have such a graphics card.

To compile this driver as a module, choose M here; the module
will be called savagefb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SAVAGE_I2C</term>
<nutsynopsis>
	"Enable DDC2 Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SAVAGE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables I2C support for S3 Savage Chipsets.  This is used
only for getting EDID information from the attached display
allowing for robust video mode handling and switching.

Because fbdev-2.6 requires that drivers must be able to
independently validate video mode parameters, you should say Y
here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SAVAGE_ACCEL</term>
<nutsynopsis>
	"Enable Console Acceleration"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SAVAGE</literal>
	</para>

	<para>
	default value
	<literal>n if FB_SAVAGE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will compile in console acceleration support. If
the resulting framebuffer console has bothersome glitches, then
choose N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SIS</term>
<nutsynopsis>
	"SiS/XGI display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for the SiS 300, 315, 330
and 340 series as well as XGI V3XT, V5, V8, Z7 graphics chipsets.
Specs available at <http://www.sis.com> and <http://www.xgitech.com>.

To compile this driver as a module, choose M here; the module
will be called sisfb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SIS_300</term>
<nutsynopsis>
	"SiS 300 series support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SIS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support use of the SiS 300/305, 540, 630 and 730.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SIS_315</term>
<nutsynopsis>
	"SiS 315/330/340 series and XGI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SIS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support use of the SiS 315, 330 and 340 series
(315/H/PRO, 55x, 650, 651, 740, 330, 661, 741, 760, 761) as well
as XGI V3XT, V5, V8 and Z7.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_NEOMAGIC</term>
<nutsynopsis>
	"NeoMagic display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports notebooks with NeoMagic PCI chips.
Say Y if you have such a graphics card. 

To compile this driver as a module, choose M here: the
module will be called neofb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_KYRO</term>
<nutsynopsis>
	"IMG Kyro support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a STG4000 / Kyro / PowerVR 3 based
graphics board.

To compile this driver as a module, choose M here: the
module will be called kyrofb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_3DFX</term>
<nutsynopsis>
	"3Dfx Banshee/Voodoo3 display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports graphics boards with the 3Dfx Banshee/Voodoo3
chips. Say Y if you have such a graphics board.

To compile this driver as a module, choose M here: the
module will be called tdfxfb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_3DFX_ACCEL</term>
<nutsynopsis>
	"3Dfx Banshee/Voodoo3 Acceleration functions (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_3DFX && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will compile the 3Dfx Banshee/Voodoo3 frame buffer device
with acceleration functions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_VOODOO1</term>
<nutsynopsis>
	"3Dfx Voodoo Graphics (sst1) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a 3Dfx Voodoo Graphics (Voodoo1/sst1) or 
Voodoo2 (cvg) based graphics card.

To compile this driver as a module, choose M here: the
module will be called sstfb.

WARNING: Do not use any application that uses the 3D engine
(namely glide) while using this driver.
Please read the <file:Documentation/fb/README-sstfb.txt> for supported
options and other important info  support.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CYBLA</term>
<nutsynopsis>
	"Cyberblade/i1 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is supposed to support the Trident Cyberblade/i1
graphics core integrated in the VIA VT8601A North Bridge,
also known as VIA Apollo PLE133.

Status:
 - Developed, tested and working on EPIA 5000 and EPIA 800.
 - Does work reliable on all systems with CRT/LCD connected to
   normal VGA ports.
 - Should work on systems that do use the internal LCD port, but
   this is absolutely not tested.

Character imageblit, copyarea and rectangle fill are hw accelerated,
ypan scrolling is used by default.

Please do read <file:Documentation/fb/cyblafb/*>.

To compile this driver as a module, choose M here: the
module will be called cyblafb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_TRIDENT</term>
<nutsynopsis>
	"Trident support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is supposed to support graphics boards with the
Trident CyberXXXX/Image/CyberBlade chips mostly found in laptops
but also on some motherboards. For more information, read
<file:Documentation/fb/tridentfb.txt>

Cyberblade/i1 support will be removed soon, use the cyblafb driver
instead.

Say Y if you have such a graphics board.


To compile this driver as a module, choose M here: the
module will be called tridentfb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_TRIDENT_ACCEL</term>
<nutsynopsis>
	"Trident Acceleration functions (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_TRIDENT && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This will compile the Trident frame buffer device with
acceleration functions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PM3</term>
<nutsynopsis>
	"Permedia3 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI && BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for the 3DLabs Permedia3
chipset, used in Formac ProFormance III, 3DLabs Oxygen VX1 &
similar boards, 3DLabs Permedia3 Create!, Appian Jeronimo 2000
and maybe other boards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_E1356</term>
<nutsynopsis>
	"Epson SED1356 framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && EXPERIMENTAL && PCI && MIPS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1000_CRT</term>
<nutsynopsis>
	"Use CRT on Pb1000 (J65)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MIPS_PB1000=y && FB_E1356</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1000_NTSC</term>
<nutsynopsis>
	"Use Compsite NTSC on Pb1000 (J63)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MIPS_PB1000=y && FB_E1356</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1000_TFT</term>
<nutsynopsis>
	"Use TFT Panel on Pb1000 (J64)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MIPS_PB1000=y && FB_E1356</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1500_CRT</term>
<nutsynopsis>
	"Use CRT on Pb1500 "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_E1356 && MIPS_PB1500=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1500_CRT</term>
<nutsynopsis>
	"Use CRT on Pb1100 "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_E1356 && MIPS_PB1100=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1500_TFT</term>
<nutsynopsis>
	"Use TFT Panel on Pb1500 "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_E1356 && MIPS_PB1500=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PB1500_TFT</term>
<nutsynopsis>
	"Use TFT Panel on Pb1100 "
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_E1356 && MIPS_PB1100=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_AU1100</term>
<nutsynopsis>
	"Au1100 LCD Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && EXPERIMENTAL && PCI && MIPS && MIPS_PB1100=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_GEODE</term>
<nutsynopsis>
	"AMD Geode family framebuffer support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PCI && EXPERIMENTAL && X86</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say 'Y' here to allow you to select framebuffer drivers for
the AMD Geode family of processors.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_GEODE_GX1</term>
<nutsynopsis>
	"AMD Geode GX1 framebuffer support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_GEODE && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Framebuffer driver for the display controller integrated into the
AMD Geode GX1 processor.

To compile this driver as a module, choose M here: the module will be
called gx1fb.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_SBUS</term>
<nutsynopsis>
	"SBUS and UPA framebuffers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (SPARC32 || SPARC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want support for SBUS or UPA based frame buffer device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_FFB</term>
<nutsynopsis>
	"Creator/Creator3D/Elite3D support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SBUS && SPARC64</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the Creator, Creator3D,
and Elite3D graphics boards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_TCX</term>
<nutsynopsis>
	"TCX (SS4/SS5 only) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SBUS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the TCX 24/8bit frame
buffer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_CG14</term>
<nutsynopsis>
	"CGfourteen (SX) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SBUS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the CGfourteen frame
buffer on Desktop SPARCsystems with the SX graphics option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_P9100</term>
<nutsynopsis>
	"P9100 (Sparcbook 3 only) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SBUS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the P9100 card
supported on Sparcbook 3 machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_LEO</term>
<nutsynopsis>
	"Leo (ZX) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_SBUS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the frame buffer device driver for the SBUS-based Sun ZX
(leo) frame buffer cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PCI</term>
<nutsynopsis>
	"PCI framebuffers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && PCI && (SPARC64 || SPARC32)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_IGA</term>
<nutsynopsis>
	"IGA 168x display support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SPARC32 && FB_PCI</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the framebuffer device for the INTERGRAPHICS 1680 and
successor frame buffer cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_HIT</term>
<nutsynopsis>
	"HD64461 Frame Buffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && HD64461</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the frame buffer device driver for the Hitachi HD64461 LCD
frame buffer card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PMAG_AA</term>
<nutsynopsis>
	"PMAG-AA TURBOchannel framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && MACH_DECSTATION && TC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the PMAG-AA TURBOchannel framebuffer card (1280x1024x1)
used mainly in the MIPS-based DECstation series.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PMAG_BA</term>
<nutsynopsis>
	"PMAG-BA TURBOchannel framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && MACH_DECSTATION && TC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the PMAG-BA TURBOchannel framebuffer card (1024x864x8)
used mainly in the MIPS-based DECstation series.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PMAGB_B</term>
<nutsynopsis>
	"PMAGB-B TURBOchannel framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && MACH_DECSTATION && TC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the PMAGB-B TURBOchannel framebuffer card used mainly
in the MIPS-based DECstation series. The card is currently only
supported in 1280x1024x8 mode.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_MAXINE</term>
<nutsynopsis>
	"Maxine (Personal DECstation) onboard framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && MACH_DECSTATION && TC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the onboard framebuffer (1024x768x8) in the Personal
DECstation series (Personal DECstation 5000/20, /25, /33, /50,
Codename "Maxine").
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_TX3912</term>
<nutsynopsis>
	"TMPTX3912/PR31700 frame buffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && NINO</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The TX3912 is a Toshiba RISC processor based on the MIPS 3900 core
see <http://www.toshiba.com/taec/components/Generic/risc/tx3912.htm>.

Say Y here to enable kernel support for the on-board framebuffer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_G364</term>
<nutsynopsis>
	"G364 frame buffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB=y && (MIPS_MAGNUM_4000 || OLIVETTI_M700)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The G364 driver is the framebuffer used in MIPS Magnum 4000 and
Olivetti M700-10 systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_68328</term>
<nutsynopsis>
	"Motorola 68328 native frame buffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && (M68328 || M68EZ328 || M68VZ328)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to support the built-in frame buffer of
the Motorola 68328 CPU family.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PXA</term>
<nutsynopsis>
	"PXA LCD framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && ARCH_PXA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Frame buffer driver for the built-in LCD controller in the Intel
PXA2x0 processor.

This driver is also available as a module ( = code which can be
inserted and removed from the running kernel whenever you want). The
module will be called vfb. If you want to compile it as a module,
say M here and read <file:Documentation/modules.txt>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_W100</term>
<nutsynopsis>
	"W100 frame buffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && PXA_SHARPSL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Frame buffer driver for the w100 as found on the Sharp SL-Cxx series.

This driver is also available as a module ( = code which can be
inserted and removed from the running kernel whenever you want). The
module will be called vfb. If you want to compile it as a module,
say M here and read <file:Documentation/modules.txt>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_PXA_PARAMETERS</term>
<nutsynopsis>
	"PXA LCD command line parameters"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_PXA</literal>
	</para>

	<para>
	default value
	<literal>n if FB_PXA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable the use of kernel command line or module parameters
to configure the physical properties of the LCD panel when
using the PXA LCD driver.

This option allows you to override the panel parameters
supplied by the platform in order to support multiple
different models of flatpanel. If you will only be using a
single model of flatpanel then you can safely leave this
option disabled.

<file:Documentation/fb/pxafb.txt> describes the available parameters.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_S1D13XXX</term>
<nutsynopsis>
	"Epson S1D13XXX framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for S1D13XXX framebuffer device family (currently only
working with S1D13806). Product specs at
<http://www.erd.epson.com/vdc/html/legacy_13xxx.htm>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_S3C2410</term>
<nutsynopsis>
	"S3C2410 LCD framebuffer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && ARCH_S3C2410</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Frame buffer driver for the built-in LCD controller in the Samsung
S3C2410 processor.

This driver is also available as a module ( = code which can be
inserted and removed from the running kernel whenever you want). The
module will be called s3c2410fb. If you want to compile it as a module,
say M here and read <file:Documentation/modules.txt>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_S3C2410_DEBUG</term>
<nutsynopsis>
	"S3C2410 lcd debug messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB_S3C2410</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Turn on debugging messages. Note that you can set/unset at run time
through sysfs
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FB_VIRTUAL</term>
<nutsynopsis>
	"Virtual Frame Buffer support (ONLY FOR TESTING!)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a `virtual' frame buffer device. It operates on a chunk of
unswappable kernel memory instead of on the memory of a graphics
board. This means you cannot see any output sent to this frame
buffer device, while it does consume precious memory. The main use
of this frame buffer device is testing and debugging the frame
buffer subsystem. Do NOT enable it for normal systems! To protect
the innocent, it has to be enabled explicitly at boot time using the
kernel option `video=vfb:'.

To compile this driver as a module, choose M here: the
module will be called vfb.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

menu "Console display driver support"
<para>
	depends on
	<literal>VT</literal>
	</para>


<nutentry>
	<term>VGA_CONSOLE</term>
<nutsynopsis>
	"VGA text console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC32 && !SPARC64 && !M68K && !PARISC && !ARCH_VERSATILE && (EMBEDDED || !X86)</literal>
	</para>

	<para>
	default value
	<literal>y if VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC32 && !SPARC64 && !M68K && !PARISC && !ARCH_VERSATILE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Saying Y here will allow you to use Linux in text mode through a
display that complies with the generic VGA standard. Virtually
everyone wants that.

The program SVGATextMode can be used to utilize SVGA video cards to
their full potential in text mode. Download it from
<ftp://ibiblio.org/pub/Linux/utils/console/>.

Say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VIDEO_SELECT</term>
<nutsynopsis>
	"Video mode selection support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && (X86 || X86_64) && VGA_CONSOLE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables support for text mode selection on kernel startup. If
you want to take advantage of some high-resolution text mode your
card's BIOS offers, but the traditional Linux utilities like
SVGATextMode don't, you can say Y here and set the mode using the
"vga=" option from your boot loader (lilo or loadlin) or set
"vga=ask" which brings up a video mode menu on kernel startup. (Try
"man bootparam" or see the documentation of your boot loader about
how to pass options to the kernel.)

Read the file <file:Documentation/svga.txt> for more information
about the Video mode selection support. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MDA_CONSOLE</term>
<nutsynopsis>
	"MDA text console (dual-headed) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && !M68K && !PARISC && ISA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an old MDA or monochrome Hercules graphics
adapter in your system acting as a second head ( = video card). You
will then be able to use two monitors with your Linux system. Do not
say Y here if your MDA card is the primary card in your system; the
normal VGA driver will handle it.

To compile this driver as a module, choose M here: the
module will be called mdacon.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_NEWPORT_CONSOLE</term>
<nutsynopsis>
	"SGI Newport Console support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && SGI_IP22</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want the console on the Newport aka XL graphics
card of your Indy.  Most people say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PROM_CONSOLE</term>
<nutsynopsis>
	"PROM console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && (SPARC32 || SPARC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y to build a console driver for Sun machines that uses the
terminal emulation built into their console PROMS.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DUMMY_CONSOLE</term>
	<para>
	default value
	<literal>y if VT && (!PROM_CONSOLE || !VGA_CONSOLE || SGI_NEWPORT_CONSOLE!=y)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DUMMY_CONSOLE_COLUMNS</term>
<nutsynopsis>
	"Initial number of console screen columns"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && PARISC && DUMMY_CONSOLE</literal>
	</para>

	<para>
	default value
	<literal>160 if VT && PARISC && DUMMY_CONSOLE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The default value is 160, which should fit a 1280x1024 monitor.
Select 80 if you use a 640x480 resolution by default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DUMMY_CONSOLE_ROWS</term>
<nutsynopsis>
	"Initial number of console screen rows"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && PARISC && DUMMY_CONSOLE</literal>
	</para>

	<para>
	default value
	<literal>64 if VT && PARISC && DUMMY_CONSOLE</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
The default value is 64, which should fit a 1280x1024 monitor.
Select 25 if you use a 640x480 resolution by default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FRAMEBUFFER_CONSOLE</term>
<nutsynopsis>
	"Framebuffer Console support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>STI_CONSOLE</term>
<nutsynopsis>
	"STI text console"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && PARISC</literal>
	</para>

	<para>
	default value
	<literal>y if VT && PARISC</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The STI console is the builtin display/keyboard on HP-PARISC
machines.  Say Y here to build support for it into your kernel.
The alternative is to use your primary serial port as a console.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONTS</term>
<nutsynopsis>
	"Select compiled-in fonts"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use fonts other than the default
your frame buffer console usually use.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about foreign fonts.

If unsure, say N (the default choices are safe).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_8x8</term>
<nutsynopsis>
	"VGA 8x8 font"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && FONTS</literal>
	</para>

	<para>
	default value
	<literal>y if VT && FRAMEBUFFER_CONSOLE && !SPARC32 && !SPARC64 && !FONTS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the "high resolution" font for the VGA frame buffer (the one
provided by the text console 80x50 (and higher) modes).

Note that this is a poor quality font. The VGA 8x16 font is quite a
lot more readable.

Given the resolution provided by the frame buffer device, answer N
here is safe.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_8x16</term>
<nutsynopsis>
	"VGA 8x16 font"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE=y || USB_SISUSBVGA_CON) && FONTS</literal>
	</para>

	<para>
	default value
	<literal>y if VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE=y || USB_SISUSBVGA_CON) && !SPARC32 && !SPARC64 && !FONTS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the "high resolution" font for the VGA frame buffer (the one
provided by the VGA text console 80x25 mode.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_6x11</term>
<nutsynopsis>
	"Mac console 6x11 font (not supported by all drivers)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && FONTS</literal>
	</para>

	<para>
	default value
	<literal>y if VT && FRAMEBUFFER_CONSOLE && !SPARC32 && !SPARC64 && !FONTS && MAC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Small console font with Macintosh-style high-half glyphs.  Some Mac
framebuffer drivers don't support this one at all.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_7x14</term>
<nutsynopsis>
	"console 7x14 font (not supported by all drivers)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && FONTS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Console font with characters just a bit smaller than the default.
If the standard 8x16 font is a little too big for you, say Y.
Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_PEARL_8x8</term>
<nutsynopsis>
	"Pearl (old m68k) console 8x8 font"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && FONTS</literal>
	</para>

	<para>
	default value
	<literal>y if VT && FRAMEBUFFER_CONSOLE && !SPARC32 && !SPARC64 && !FONTS && AMIGA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Small console font with PC-style control-character and high-half
glyphs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_ACORN_8x8</term>
<nutsynopsis>
	"Acorn console 8x8 font"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && FONTS</literal>
	</para>

	<para>
	default value
	<literal>y if VT && FRAMEBUFFER_CONSOLE && !SPARC32 && !SPARC64 && !FONTS && ARM && ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Small console font with PC-style control characters and high-half
glyphs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_MINI_4x6</term>
<nutsynopsis>
	"Mini 4x6 font"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && !SPARC32 && !SPARC64 && FONTS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_SUN8x16</term>
<nutsynopsis>
	"Sparc console 8x16 font"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && (!SPARC32 && !SPARC64 && FONTS || SPARC32 || SPARC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the high resolution console font for Sun machines. Say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_SUN12x22</term>
<nutsynopsis>
	"Sparc console 12x22 font (not supported by all drivers)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && (!SPARC32 && !SPARC64 && FONTS || SPARC32 || SPARC64)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is the high resolution console font for Sun machines with very
big letters (like the letters used in the SPARC PROM). If the
standard font is unreadable for you, say Y, otherwise say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FONT_10x18</term>
<nutsynopsis>
	"console 10x18 font (not supported by all drivers)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && FRAMEBUFFER_CONSOLE && FONTS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a high resolution console font for machines with very
big letters. It fits between the sun 12x22 and the normal 8x16 font.
If other fonts are too big or too small for you, say Y, otherwise say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Logo configuration"
<para>
	depends on
	<literal>FB || SGI_NEWPORT_CONSOLE</literal>
	</para>


<nutentry>
	<term>LOGO</term>
<nutsynopsis>
	"Bootup logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB || SGI_NEWPORT_CONSOLE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_LINUX_MONO</term>
<nutsynopsis>
	"Standard black and white Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_LINUX_VGA16</term>
<nutsynopsis>
	"Standard 16-color Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_LINUX_CLUT224</term>
<nutsynopsis>
	"Standard 224-color Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_DEC_CLUT224</term>
<nutsynopsis>
	"224-color Digital Equipment Corporation Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_MAC_CLUT224</term>
<nutsynopsis>
	"224-color Macintosh Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_PARISC_CLUT224</term>
<nutsynopsis>
	"224-color PA-RISC Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_SGI_CLUT224</term>
<nutsynopsis>
	"224-color SGI Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_SUN_CLUT224</term>
<nutsynopsis>
	"224-color Sun Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && (SPARC32 || SPARC64)</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SPARC32 || SPARC64)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_SUPERH_MONO</term>
<nutsynopsis>
	"Black and white SuperH Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_SUPERH_VGA16</term>
<nutsynopsis>
	"16-color SuperH Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_SUPERH_CLUT224</term>
<nutsynopsis>
	"224-color SuperH Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGO_M32R_CLUT224</term>
<nutsynopsis>
	"224-color M32R Linux logo"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R</literal>
	</para>

	<para>
	default value
	<literal>y if (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>BACKLIGHT_LCD_SUPPORT</term>
  unknown prop 3!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enable this to be able to choose the drivers for controlling the
backlight and the LCD panel on some platforms, for example on PDAs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BACKLIGHT_CLASS_DEVICE</term>
<nutsynopsis>
	"Lowlevel Backlight controls"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && SYSFS && BACKLIGHT_LCD_SUPPORT</literal>
	</para>

	<para>
	default value
	<literal>m if FB && SYSFS && BACKLIGHT_LCD_SUPPORT</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This framework adds support for low-level control of the LCD
backlight. This includes support for brightness and power.

To have support for your specific LCD panel you will have to
select the proper drivers which depend on this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BACKLIGHT_DEVICE</term>
	<para>
	default value
	<literal>y if FB && SYSFS && BACKLIGHT_CLASS_DEVICE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LCD_CLASS_DEVICE</term>
<nutsynopsis>
	"Lowlevel LCD controls"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && SYSFS && BACKLIGHT_LCD_SUPPORT</literal>
	</para>

	<para>
	default value
	<literal>m if FB && SYSFS && BACKLIGHT_LCD_SUPPORT</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This framework adds support for low-level control of LCD.
Some framebuffer devices connect to platform-specific LCD modules
in order to have a platform-specific way to control the flat panel
(contrast and applying power to the LCD (not to the backlight!)).

To have support for your specific LCD panel you will have to
select the proper drivers which depend on this option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LCD_DEVICE</term>
	<para>
	default value
	<literal>y if FB && SYSFS && LCD_CLASS_DEVICE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>BACKLIGHT_CORGI</term>
<nutsynopsis>
	"Sharp Corgi Backlight Driver (SL-C7xx Series)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>FB && SYSFS && BACKLIGHT_DEVICE && PXA_SHARPSL</literal>
	</para>

	<para>
	default value
	<literal>y if FB && SYSFS && BACKLIGHT_DEVICE && PXA_SHARPSL</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a Sharp Zaurus SL-C7xx, say y to enable the
backlight driver.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Sound"

<nutentry>
	<term>SOUND</term>
<nutsynopsis>
	"Sound card support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you have a sound card in your computer, i.e. if it can say more
than an occasional beep, say Y.  Be sure to have all the information
about your sound card and its configuration down (I/O port,
interrupt and DMA channel), because you will be asked for it.

You want to read the Sound-HOWTO, available from
<http://www.tldp.org/docs.html#howto>. General information about
the modular sound system is contained in the files
<file:Documentation/sound/oss/Introduction>.  The file
<file:Documentation/sound/oss/README.OSS> contains some slightly
outdated but still useful information as well.  Newer sound
driver documentation is found in <file:Documentation/sound/alsa/*>.

If you have a PnP sound card and you want to configure it at boot
time using the ISA PnP tools (read
<http://www.roestock.demon.co.uk/isapnptools/>), then you need to
compile the sound card support as a module and load that module
after the PnP configuration is finished.  To do this, choose M here
and read <file:Documentation/sound/oss/README.modules>; the module
will be called soundcore.

I'm told that even without a sound card, you can make your computer
say more than an occasional beep, by programming the PC speaker.
Kernel patches and supporting utilities to do that are in the pcsp
package, available at <ftp://ftp.infradead.org/pub/pcsp/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DMASOUND_ATARI</term>
<nutsynopsis>
	"Atari DMA sound support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ATARI && SOUND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use the internal audio of your Atari in Linux, answer
Y to this question. This will provide a Sun-like /dev/audio,
compatible with the Linux/i386 sound system. Otherwise, say N.

This driver is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you
want). If you want to compile it as a module, say M here and read
<file:Documentation/kbuild/modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DMASOUND_PMAC</term>
<nutsynopsis>
	"PowerMac DMA sound support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PPC32 && PPC_PMAC && SOUND && I2C</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use the internal audio of your PowerMac in Linux,
answer Y to this question. This will provide a Sun-like /dev/audio,
compatible with the Linux/i386 sound system. Otherwise, say N.

This driver is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you
want). If you want to compile it as a module, say M here and read
<file:Documentation/kbuild/modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DMASOUND_PAULA</term>
<nutsynopsis>
	"Amiga DMA sound support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(AMIGA || APUS) && SOUND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use the internal audio of your Amiga in Linux, answer
Y to this question. This will provide a Sun-like /dev/audio,
compatible with the Linux/i386 sound system. Otherwise, say N.

This driver is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you
want). If you want to compile it as a module, say M here and read
<file:Documentation/kbuild/modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DMASOUND_Q40</term>
<nutsynopsis>
	"Q40 sound support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>Q40 && SOUND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use the internal audio of your Q40 in Linux, answer
Y to this question. This will provide a Sun-like /dev/audio,
compatible with the Linux/i386 sound system. Otherwise, say N.

This driver is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you
want). If you want to compile it as a module, say M here and read
<file:Documentation/kbuild/modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DMASOUND</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

menu "Advanced Linux Sound Architecture"
<para>
	depends on
	<literal>!M68K && SOUND!=n</literal>
	</para>


<nutentry>
	<term>SND</term>
<nutsynopsis>
	"Advanced Linux Sound Architecture"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say 'Y' or 'M' to enable ALSA (Advanced Linux Sound Architecture),
the new base sound system.

For more information, see <http://www.alsa-project.org/>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_TIMER</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_PCM</term>
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_HWDEP</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_RAWMIDI</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SEQUENCER</term>
<nutsynopsis>
	"Sequencer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M to enable MIDI sequencer and router support.  This
feature allows routing and enqueueing of MIDI events.  Events
can be processed at a given time.

Many programs require this feature, so you should enable it
unless you know what you're doing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SEQ_DUMMY</term>
<nutsynopsis>
	"Sequencer dummy client"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND_SEQUENCER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable the dummy sequencer client.  This client
is a simple MIDI-through client: all normal input events are
redirected to the output port immediately.

You don't need this unless you want to connect many MIDI
devices or applications together.

To compile this driver as a module, choose M here: the module
will be called snd-seq-dummy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OSSEMUL</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_MIXER_OSS</term>
<nutsynopsis>
	"OSS Mixer API"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
To enable OSS mixer API emulation (/dev/mixer*), say Y here
and read <file:Documentation/sound/alsa/OSS-Emulation.txt>.

Many programs still use the OSS API, so say Y.

To compile this driver as a module, choose M here: the module
will be called snd-mixer-oss.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_PCM_OSS</term>
<nutsynopsis>
	"OSS PCM (digital audio) API"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
To enable OSS digital audio (PCM) emulation (/dev/dsp*), say Y
here and read <file:Documentation/sound/alsa/OSS-Emulation.txt>.

Many programs still use the OSS API, so say Y.

To compile this driver as a module, choose M here: the module
will be called snd-pcm-oss.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SEQUENCER_OSS</term>
<nutsynopsis>
	"OSS Sequencer API"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND && SND_SEQUENCER</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable OSS sequencer emulation (both
/dev/sequencer and /dev/music interfaces).

Many programs still use the OSS API, so say Y.

To compile this driver as a module, choose M here: the module
will be called snd-seq-oss.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_RTCTIMER</term>
<nutsynopsis>
	"RTC Timer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND && RTC</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable RTC timer support for ALSA.  ALSA uses
the RTC timer as a precise timing source and maps the RTC
timer to ALSA's timer interface.  The ALSA sequencer code also
can use this timing source.

To compile this driver as a module, choose M here: the module
will be called snd-rtctimer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SEQ_RTCTIMER_DEFAULT</term>
<nutsynopsis>
	"Use RTC as default sequencer timer"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER</literal>
	</para>

	<para>
	default value
	<literal>y if !M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to use the RTC timer as the default sequencer
timer.  This is strongly recommended because it ensures
precise MIDI timing even when the system timer runs at less
than 1000 Hz.

If in doubt, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_VERBOSE_PRINTK</term>
<nutsynopsis>
	"Verbose printk"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable verbose log messages.  These messages
will help to identify source file and position containing
printed messages.

You don't need this unless you're debugging ALSA.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_DEBUG</term>
<nutsynopsis>
	"Debug"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable ALSA debug code.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_DEBUG_MEMORY</term>
<nutsynopsis>
	"Debug memory"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND_DEBUG</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable debugging of memory allocations.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_DEBUG_DETECT</term>
<nutsynopsis>
	"Debug detection"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND_DEBUG</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable extra-verbose log messages printed when
detecting devices.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_GENERIC_DRIVER</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

menu "Generic devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n</literal>
	</para>


<nutentry>
	<term>SND_MPU401_UART</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OPL3_LIB</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OPL4_LIB</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_VX_LIB</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_DUMMY</term>
<nutsynopsis>
	"Dummy (/dev/null) soundcard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include the dummy driver.  This driver does
nothing, but emulates various mixer controls and PCM devices.

You don't need this unless you're testing the hardware support
of programs using the ALSA API.

To compile this driver as a module, choose M here: the module
will be called snd-dummy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_VIRMIDI</term>
<nutsynopsis>
	"Virtual MIDI soundcard"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && SND_SEQUENCER</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include the virtual MIDI driver.  This driver
allows to connect applications using raw MIDI devices to
sequencer clients.

If you don't know what MIDI is, say N here.

To compile this driver as a module, choose M here: the module
will be called snd-virmidi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_MTPAV</term>
<nutsynopsis>
	"MOTU MidiTimePiece AV multiport MIDI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
To use a MOTU MidiTimePiece AV multiport MIDI adapter
connected to the parallel port, say Y here and make sure that
the standard parallel port driver isn't used for the port.

To compile this driver as a module, choose M here: the module
will be called snd-mtpav.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SERIAL_U16550</term>
<nutsynopsis>
	"UART16550 serial MIDI driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
To include support for MIDI serial port interfaces, say Y here
and read <file:Documentation/sound/alsa/serial-u16550.txt>.
This driver works with serial UARTs 16550 and better.

This driver accesses the serial port hardware directly, so
make sure that the standard serial driver isn't used or
deactivated with setserial before loading this driver.

To compile this driver as a module, choose M here: the module
will be called snd-serial-u16550.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_MPU401</term>
<nutsynopsis>
	"Generic MPU-401 UART driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for MIDI ports compatible with
the Roland MPU-401 interface in UART mode.

To compile this driver as a module, choose M here: the module
will be called snd-mpu401.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ISA devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && ISA && ISA_DMA_API</literal>
	</para>


<nutentry>
	<term>SND_AD1848_LIB</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS4231_LIB</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AD1816A</term>
<nutsynopsis>
	"Analog Devices SoundPort AD1816A"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Analog Devices SoundPort
AD1816A or compatible sound chips.

To compile this driver as a module, choose M here: the module
will be called snd-ad1816a.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AD1848</term>
<nutsynopsis>
	"Generic AD1848/CS4248 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for AD1848 (Analog Devices) or
CS4248 (Cirrus Logic - Crystal Semiconductors) chips.

For newer chips from Cirrus Logic, use the CS4231, CS4232 or
CS4236+ drivers.

To compile this driver as a module, choose M here: the module
will be called snd-ad1848.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS4231</term>
<nutsynopsis>
	"Generic Cirrus Logic CS4231 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for CS4231 chips from Cirrus
Logic - Crystal Semiconductors.

To compile this driver as a module, choose M here: the module
will be called snd-cs4231.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS4232</term>
<nutsynopsis>
	"Generic Cirrus Logic CS4232 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for CS4232 chips from Cirrus
Logic - Crystal Semiconductors.

To compile this driver as a module, choose M here: the module
will be called snd-cs4232.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS4236</term>
<nutsynopsis>
	"Generic Cirrus Logic CS4236+ driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to include support for CS4235,CS4236,CS4237B,CS4238B,
CS4239 chips from Cirrus Logic - Crystal Semiconductors.

To compile this driver as a module, choose M here: the module
will be called snd-cs4236.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ES968</term>
<nutsynopsis>
	"Generic ESS ES968 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for ESS AudioDrive ES968 chips.

To compile this driver as a module, choose M here: the module
will be called snd-es968.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ES1688</term>
<nutsynopsis>
	"Generic ESS ES688/ES1688 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for ESS AudioDrive ES688 or
ES1688 chips.

To compile this driver as a module, choose M here: the module
will be called snd-es1688.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ES18XX</term>
<nutsynopsis>
	"Generic ESS ES18xx driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for ESS AudioDrive ES18xx chips.

To compile this driver as a module, choose M here: the module
will be called snd-es18xx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_GUS_SYNTH</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_GUSCLASSIC</term>
<nutsynopsis>
	"Gravis UltraSound Classic"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Gravis UltraSound Classic
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-gusclassic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_GUSEXTREME</term>
<nutsynopsis>
	"Gravis UltraSound Extreme"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Gravis UltraSound Extreme
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-gusextreme.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_GUSMAX</term>
<nutsynopsis>
	"Gravis UltraSound MAX"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Gravis UltraSound MAX
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-gusmax.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_INTERWAVE</term>
<nutsynopsis>
	"AMD InterWave, Gravis UltraSound PnP"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for AMD InterWave based
soundcards (Gravis UltraSound Plug & Play, STB SoundRage32,
MED3210, Dynasonic Pro, Panasonic PCA761AW).

To compile this driver as a module, choose M here: the module
will be called snd-interwave.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_INTERWAVE_STB</term>
<nutsynopsis>
	"AMD InterWave + TEA6330T (UltraSound 32-Pro)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for AMD InterWave based
soundcards with a TEA6330T bass and treble regulator
(UltraSound 32-Pro).

To compile this driver as a module, choose M here: the module
will be called snd-interwave-stb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OPTI92X_AD1848</term>
<nutsynopsis>
	"OPTi 82C92x - AD1848"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on Opti
82C92x or OTI-601 chips and using an AD1848 codec.

To compile this driver as a module, choose M here: the module
will be called snd-opti92x-ad1848.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OPTI92X_CS4231</term>
<nutsynopsis>
	"OPTi 82C92x - CS4231"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on Opti
82C92x chips and using a CS4231 codec.

To compile this driver as a module, choose M here: the module
will be called snd-opti92x-cs4231.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OPTI93X</term>
<nutsynopsis>
	"OPTi 82C93x"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on Opti
82C93x chips.

To compile this driver as a module, choose M here: the module
will be called snd-opti93x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SB8</term>
<nutsynopsis>
	"Sound Blaster 1.0/2.0/Pro (8-bit)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Creative Sound Blaster 1.0/
2.0/Pro (8-bit) or 100% compatible soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-sb8.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SB16</term>
<nutsynopsis>
	"Sound Blaster 16 (PnP)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Sound Blaster 16 soundcards
(including the Plug and Play version).

To compile this driver as a module, choose M here: the module
will be called snd-sb16.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SBAWE</term>
<nutsynopsis>
	"Sound Blaster AWE (32,64) (PnP)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Sound Blaster AWE soundcards
(including the Plug and Play version).

To compile this driver as a module, choose M here: the module
will be called snd-sbawe.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SB16_CSP</term>
<nutsynopsis>
	"Sound Blaster 16/AWE CSP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND && ISA && ISA_DMA_API && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include support for the CSP core.  This special
coprocessor can do variable tasks like various compression and
decompression algorithms.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_WAVEFRONT</term>
<nutsynopsis>
	"Turtle Beach Maui,Tropez,Tropez+ (Wavefront)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Turtle Beach Maui, Tropez
and Tropez+ soundcards based on the Wavefront chip.

To compile this driver as a module, choose M here: the module
will be called snd-wavefront.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ALS100</term>
<nutsynopsis>
	"Avance Logic ALS100/ALS120"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on Avance
Logic ALS100, ALS110, ALS120 and ALS200 chips.

To compile this driver as a module, choose M here: the module
will be called snd-als100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AZT2320</term>
<nutsynopsis>
	"Aztech Systems AZT2320"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the
Aztech Systems AZT2320 chip.

To compile this driver as a module, choose M here: the module
will be called snd-azt2320.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CMI8330</term>
<nutsynopsis>
	"C-Media CMI8330"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the
C-Media CMI8330 chip.

To compile this driver as a module, choose M here: the module
will be called snd-cmi8330.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_DT019X</term>
<nutsynopsis>
	"Diamond Technologies DT-019X, Avance Logic ALS-007"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA_DMA_API && SND && PNP && ISA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the
Diamond Technologies DT-019X or Avance Logic ALS-007 chips.

To compile this driver as a module, choose M here: the module
will be called snd-dt019x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_OPL3SA2</term>
<nutsynopsis>
	"Yamaha OPL3-SA2/SA3"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Yamaha OPL3-SA2 and OPL3-SA3
chips.

To compile this driver as a module, choose M here: the module
will be called snd-opl3sa2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SGALAXY</term>
<nutsynopsis>
	"Aztech Sound Galaxy"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Aztech Sound Galaxy
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-sgalaxy.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SSCAPE</term>
<nutsynopsis>
	"Ensoniq SoundScape PnP driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ISA && ISA_DMA_API && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Ensoniq SoundScape PnP
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-sscape.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>SND_AC97_CODEC</term>
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AC97_BUS</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

menu "PCI devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && PCI</literal>
	</para>


<nutentry>
	<term>SND_ALI5451</term>
<nutsynopsis>
	"ALi M5451 PCI Audio Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated AC97 sound
device on motherboards using the ALi M5451 Audio Controller
(M1535/M1535D/M1535+/M1535D+ south bridges).  Newer chipsets
use the "Intel/SiS/nVidia/AMD/ALi AC97 Controller" driver.

To compile this driver as a module, choose M here: the module
will be called snd-ali5451.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ATIIXP</term>
<nutsynopsis>
	"ATI IXP AC97 Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated AC97 sound
device on motherboards with ATI chipsets (ATI IXP 150/200/250/
300/400).

To compile this driver as a module, choose M here: the module
will be called snd-atiixp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ATIIXP_MODEM</term>
<nutsynopsis>
	"ATI IXP Modem"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated MC97 modem on
motherboards with ATI chipsets (ATI IXP 150/200/250).

To compile this driver as a module, choose M here: the module
will be called snd-atiixp-modem.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AU8810</term>
<nutsynopsis>
	"Aureal Advantage"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Aureal Advantage soundcards.

Supported features: Hardware Mixer, SRC, EQ and SPDIF output.
3D support code is in place, but not yet useable. For more info, 
email the ALSA developer list, or <mjander@users.sourceforge.net>.

To compile this driver as a module, choose M here: the module
will be called snd-au8810.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AU8820</term>
<nutsynopsis>
	"Aureal Vortex"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Aureal Vortex soundcards.

Supported features: Hardware Mixer and SRC. For more info, email 
the ALSA developer list, or <mjander@users.sourceforge.net>.

To compile this driver as a module, choose M here: the module
will be called snd-au8820.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AU8830</term>
<nutsynopsis>
	"Aureal Vortex 2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Aureal Vortex 2 soundcards.

Supported features: Hardware Mixer, SRC, EQ and SPDIF output.
3D support code is in place, but not yet useable. For more info, 
email the ALSA developer list, or <mjander@users.sourceforge.net>.

To compile this driver as a module, choose M here: the module
will be called snd-au8830.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AZT3328</term>
<nutsynopsis>
	"Aztech AZF3328 / PCI168 (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Aztech AZF3328 (PCI168)
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-azt3328.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_BT87X</term>
<nutsynopsis>
	"Bt87x Audio Capture"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to record audio from TV cards based on
Brooktree Bt878/Bt879 chips, say Y here and read
<file:Documentation/sound/alsa/Bt87x.txt>.

To compile this driver as a module, choose M here: the module
will be called snd-bt87x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_BT87X_OVERCLOCK</term>
<nutsynopsis>
	"Bt87x Audio overclocking"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND && PCI && SND_BT87X</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if 448000 Hz isn't enough for you and you want to
record from the analog input with up to 1792000 Hz.

Higher sample rates won't hurt your hardware, but audio
quality may suffer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS46XX</term>
<nutsynopsis>
	"Cirrus Logic (Sound Fusion) CS4280/CS461x/CS462x/CS463x"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Cirrus Logic CS4610/CS4612/
CS4614/CS4615/CS4622/CS4624/CS4630/CS4280 chips.

To compile this driver as a module, choose M here: the module
will be called snd-cs46xx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS46XX_NEW_DSP</term>
<nutsynopsis>
	"Cirrus Logic (Sound Fusion) New DSP support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND && PCI && SND_CS46XX && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to use a new DSP image for SPDIF and dual codecs.

This works better than the old code, so say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CS4281</term>
<nutsynopsis>
	"Cirrus Logic (Sound Fusion) CS4281"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Cirrus Logic CS4281 chips.

To compile this driver as a module, choose M here: the module
will be called snd-cs4281.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_EMU10K1</term>
<nutsynopsis>
	"Emu10k1 (SB Live!, Audigy, E-mu APS)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to include support for Sound Blaster PCI 512, Live!,
Audigy and E-mu APS (partially supported) soundcards.

The confusing multitude of mixer controls is documented in
<file:Documentation/sound/alsa/SB-Live-mixer.txt> and
<file:Documentation/sound/alsa/Audigy-mixer.txt>.

To compile this driver as a module, choose M here: the module
will be called snd-emu10k1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_EMU10K1X</term>
<nutsynopsis>
	"Emu10k1X (Dell OEM Version)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the Dell OEM version of the
Sound Blaster Live!.

To compile this driver as a module, choose M here: the module
will be called snd-emu10k1x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CA0106</term>
<nutsynopsis>
	"SB Audigy LS / Live 24bit"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the Sound Blaster Audigy LS
and Live 24bit.

To compile this driver as a module, choose M here: the module
will be called snd-ca0106.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_KORG1212</term>
<nutsynopsis>
	"Korg 1212 IO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Korg 1212IO soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-korg1212.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_MIXART</term>
<nutsynopsis>
	"Digigram miXart"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use Digigram miXart soundcards, say Y here and
read <file:Documentation/sound/alsa/MIXART.txt>.

To compile this driver as a module, choose M here: the module
will be called snd-mixart.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_NM256</term>
<nutsynopsis>
	"NeoMagic NM256AV/ZX"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for NeoMagic NM256AV/ZX chips.

To compile this driver as a module, choose M here: the module
will be called snd-nm256.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_RME32</term>
<nutsynopsis>
	"RME Digi32, 32/8, 32 PRO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y to include support for RME Digi32, Digi32 PRO and
Digi32/8 (Sek'd Prodif32, Prodif96 and Prodif Gold) audio
devices.

To compile this driver as a module, choose M here: the module
will be called snd-rme32.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_RME96</term>
<nutsynopsis>
	"RME Digi96, 96/8, 96/8 PRO"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for RME Digi96, Digi96/8 and
Digi96/8 PRO/PAD/PST soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-rme96.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_RME9652</term>
<nutsynopsis>
	"RME Digi9652 (Hammerfall)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for RME Hammerfall (RME
Digi9652/Digi9636) soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-rme9652.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_HDSP</term>
<nutsynopsis>
	"RME Hammerfall DSP Audio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for RME Hammerfall DSP Audio
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-hdsp.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_HDSPM</term>
<nutsynopsis>
	"RME Hammerfall DSP MADI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for RME Hammerfall DSP MADI
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-hdspm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_TRIDENT</term>
<nutsynopsis>
	"Trident 4D-Wave DX/NX; SiS 7018"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on Trident
4D-Wave DX/NX or SiS 7018 chips.

To compile this driver as a module, choose M here: the module
will be called snd-trident.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_YMFPCI</term>
<nutsynopsis>
	"Yamaha YMF724/740/744/754"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Yamaha PCI audio chips -
YMF724, YMF724F, YMF740, YMF740C, YMF744, YMF754.

To compile this driver as a module, choose M here: the module
will be called snd-ymfpci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_AD1889</term>
<nutsynopsis>
	"Analog Devices AD1889"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated AC97 sound
device found in particular on the Hewlett-Packard [BCJ]-xxx0
class PA-RISC workstations, using the AD1819 codec.

To compile this as a module, choose M here: the module
will be called snd-ad1889.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ALS4000</term>
<nutsynopsis>
	"Avance Logic ALS4000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND && ISA_DMA_API</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on Avance Logic
ALS4000 chips.

To compile this driver as a module, choose M here: the module
will be called snd-als4000.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_CMIPCI</term>
<nutsynopsis>
	"C-Media 8738, 8338"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use soundcards based on C-Media CMI8338 or CMI8738
chips, say Y here and read
<file:Documentation/sound/alsa/CMIPCI.txt>.

To compile this driver as a module, choose M here: the module
will be called snd-cmipci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ENS1370</term>
<nutsynopsis>
	"(Creative) Ensoniq AudioPCI 1370"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Ensoniq AudioPCI ES1370 chips.

To compile this driver as a module, choose M here: the module
will be called snd-ens1370.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ENS1371</term>
<nutsynopsis>
	"(Creative) Ensoniq AudioPCI 1371/1373"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Ensoniq AudioPCI ES1371 chips and
Sound Blaster PCI 64 or 128 soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-ens1371.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ES1938</term>
<nutsynopsis>
	"ESS ES1938/1946/1969 (Solo-1)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on ESS Solo-1
(ES1938, ES1946, ES1969) chips.

To compile this driver as a module, choose M here: the module
will be called snd-es1938.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ES1968</term>
<nutsynopsis>
	"ESS ES1968/1978 (Maestro-1/2/2E)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on ESS Maestro
1/2/2E chips.

To compile this driver as a module, choose M here: the module
will be called snd-es1968.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_MAESTRO3</term>
<nutsynopsis>
	"ESS Allegro/Maestro3"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on ESS Maestro 3
(Allegro) chips.

To compile this driver as a module, choose M here: the module
will be called snd-maestro3.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_FM801</term>
<nutsynopsis>
	"ForteMedia FM801"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the ForteMedia
FM801 chip.

To compile this driver as a module, choose M here: the module
will be called snd-fm801.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_FM801_TEA575X</term>
<nutsynopsis>
	"ForteMedia FM801 + TEA5757 tuner"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && PCI && SND_FM801</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the ForteMedia
FM801 chip with a TEA5757 tuner connected to GPIO1-3 pins (Media
Forte SF256-PCS-02).

To compile this driver as a module, choose M here: the module
will be called snd-fm801-tea575x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ICE1712</term>
<nutsynopsis>
	"ICEnsemble ICE1712 (Envy24)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the
ICE1712 (Envy24) chip.

Currently supported hardware is: M-Audio Delta 1010(LT),
DiO 2496, 66, 44, 410, Audiophile 24/96; Digigram VX442;
TerraTec EWX 24/96, EWS 88MT, 88D, DMX 6Fire, Phase 88;
Hoontech SoundTrack DSP 24/Value/Media7.1; Event EZ8.

To compile this driver as a module, choose M here: the module
will be called snd-ice1712.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ICE1724</term>
<nutsynopsis>
	"ICE/VT1724/1720 (Envy24HT/PT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on
ICE/VT1724/1720 (Envy24HT/PT) chips.

Currently supported hardware is: AMP AUDIO2000; M-Audio
Revolution 7.1; TerraTec Aureon 5.1 Sky, 7.1 Space/Universe;
AudioTrak Prodigy 7.1; Pontis MS300; Albatron K8X800 Pro II;
Chaintech ZNF3-150/250.

To compile this driver as a module, choose M here: the module
will be called snd-ice1724.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_INTEL8X0</term>
<nutsynopsis>
	"Intel/SiS/nVidia/AMD/ALi AC97 Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated AC97 sound
device on motherboards with Intel/SiS/nVidia/AMD chipsets, or
ALi chipsets using the M5455 Audio Controller.  (There is a
separate driver for ALi M5451 Audio Controllers.)

To compile this driver as a module, choose M here: the module
will be called snd-intel8x0.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_INTEL8X0M</term>
<nutsynopsis>
	"Intel/SiS/nVidia/AMD MC97 Modem (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated MC97 modem on
motherboards with Intel/SiS/nVidia/AMD chipsets.

To compile this driver as a module, choose M here: the module
will be called snd-intel8x0m.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SONICVIBES</term>
<nutsynopsis>
	"S3 SonicVibes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for soundcards based on the S3
SonicVibes chip.

To compile this driver as a module, choose M here: the module
will be called snd-sonicvibes.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_VIA82XX</term>
<nutsynopsis>
	"VIA 82C686A/B, 8233/8235 AC97 Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated AC97 sound
device on motherboards with VIA chipsets.

To compile this driver as a module, choose M here: the module
will be called snd-via82xx.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_VIA82XX_MODEM</term>
<nutsynopsis>
	"VIA 82C686A/B, 8233 based Modems"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated MC97 modem on
motherboards with VIA chipsets.

To compile this driver as a module, choose M here: the module
will be called snd-via82xx-modem.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_VX222</term>
<nutsynopsis>
	"Digigram VX222"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Digigram VX222 soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-vx222.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_HDA_INTEL</term>
<nutsynopsis>
	"Intel HD Audio"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PCI && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Intel "High Definition
Audio" (Azalia) motherboard devices.

To compile this driver as a module, choose M here: the module
will be called snd-hda-intel.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ALSA PowerMac devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && PPC</literal>
	</para>



comment "ALSA PowerMac requires I2C"
<para>
	depends on
	<literal>!M68K && SOUND!=n && PPC && SND && I2C=n</literal>
	</para>



comment "ALSA PowerMac requires INPUT"
<para>
	depends on
	<literal>!M68K && SOUND!=n && PPC && SND && INPUT=n</literal>
	</para>


<nutentry>
	<term>SND_POWERMAC</term>
<nutsynopsis>
	"PowerMac (AWACS, DACA, Burgundy, Tumbler, Keywest)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && PPC && SND && I2C && INPUT && PPC_PMAC</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the integrated sound device.

To compile this driver as a module, choose M here: the module
will be called snd-powermac.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_POWERMAC_AUTO_DRC</term>
<nutsynopsis>
	"Toggle DRC automatically at headphone/line plug-in"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SND && PPC && SND_POWERMAC</literal>
	</para>

	<para>
	default value
	<literal>y if !M68K && SOUND && SND && PPC && SND_POWERMAC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable the automatic toggle of DRC (dynamic
range compression) on Tumbler/Snapper.
If this feature is enabled, DRC is turned off when the
headphone/line jack is plugged, and turned on when unplugged.

Note that you can turn on/off DRC manually even without this
option.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ALSA ARM devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && ARM</literal>
	</para>


<nutentry>
	<term>SND_SA11XX_UDA1341</term>
<nutsynopsis>
	"SA11xx UDA1341TS driver (iPaq H3600)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ARM && ARCH_SA1100 && SND && L3</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Compaq iPaq H3x00 handheld computer
and want to use its Philips UDA 1341 audio chip.

To compile this driver as a module, choose M here: the module
will be called snd-sa11xx-uda1341.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_ARMAACI</term>
<nutsynopsis>
	"ARM PrimeCell PL041 AC Link support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ARM && SND && ARM_AMBA</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_PXA2XX_PCM</term>
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_PXA2XX_AC97</term>
<nutsynopsis>
	"AC97 driver for the Intel PXA2xx chip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ARM && ARCH_PXA && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you want to support any AC97 codec attached to
the PXA2xx AC97 interface.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ALSA MIPS devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && MIPS</literal>
	</para>


<nutentry>
	<term>SND_AU1X00</term>
<nutsynopsis>
	"Au1x00 AC97 Port Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ALSA Sound driver for the Au1x00's AC97 port.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "USB devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && USB!=n</literal>
	</para>


<nutentry>
	<term>SND_USB_AUDIO</term>
<nutsynopsis>
	"USB Audio/MIDI driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND && USB</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for USB audio and USB MIDI
devices.

To compile this driver as a module, choose M here: the module
will be called snd-usb-audio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_USB_USX2Y</term>
<nutsynopsis>
	"Tascam US-122, US-224 and US-428 USB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND && USB && (X86 || PPC || ALPHA)</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Tascam USB Audio/MIDI
interfaces or controllers US-122, US-224 and US-428.

To compile this driver as a module, choose M here: the module
will be called snd-usb-usx2y.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "PCMCIA devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && PCMCIA</literal>
	</para>


<nutentry>
	<term>SND_VXPOCKET</term>
<nutsynopsis>
	"Digigram VXpocket"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND && PCMCIA && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Digigram VXpocket and
VXpocket 440 soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-vxpocket.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_PDAUDIOCF</term>
<nutsynopsis>
	"Sound Core PDAudioCF"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SND && PCMCIA && ISA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for Sound Core PDAudioCF
soundcards.

To compile this driver as a module, choose M here: the module
will be called snd-pdaudiocf.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "ALSA Sparc devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && (SPARC32 || SPARC64)</literal>
	</para>


<nutentry>
	<term>SND_SUN_AMD7930</term>
<nutsynopsis>
	"Sun AMD7930"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && (SPARC32 || SPARC64) && SBUS && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for AMD7930 sound device on Sun.

To compile this driver as a module, choose M here: the module
will be called snd-sun-amd7930.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SUN_CS4231</term>
<nutsynopsis>
	"Sun CS4231"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && (SPARC32 || SPARC64) && SND</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for CS4231 sound device on Sun.

To compile this driver as a module, choose M here: the module
will be called snd-sun-cs4231.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SND_SUN_DBRI</term>
<nutsynopsis>
	"Sun DBRI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && (SPARC32 || SPARC64) && SND && SBUS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for DBRI sound device on Sun.

To compile this driver as a module, choose M here: the module
will be called snd-sun-dbri.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "GSC devices"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SND!=n && GSC</literal>
	</para>


<nutentry>
	<term>SND_HARMONY</term>
<nutsynopsis>
	"Harmony/Vivace sound chip"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && GSC && SND</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say 'Y' or 'M' to include support for the Harmony/Vivace sound
chip found in most GSC-based PA-RISC workstations.  It's frequently
provided as part of the Lasi multi-function IC.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Open Sound System"
<para>
	depends on
	<literal>!M68K && SOUND!=n</literal>
	</para>


<nutentry>
	<term>SOUND_PRIME</term>
<nutsynopsis>
	"Open Sound System (DEPRECATED)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say 'Y' or 'M' to enable Open Sound System drivers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_BT878</term>
<nutsynopsis>
	"BT878 audio dma"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Audio DMA support for bt878 based grabber boards.  As you might have
already noticed, bt878 is listed with two functions in /proc/pci.
Function 0 does the video stuff (bt848 compatible), function 1 does
the same for audio data.  This is a driver for the audio part of
the chip.  If you say 'Y' here you get a oss-compatible dsp device
where you can record from.  If you want just watch TV you probably
don't need this driver as most TV cards handle sound with a short
cable from the TV card to your sound card's line-in.

To compile this driver as a module, choose M here: the module will
be called btaudio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_CMPCI</term>
<nutsynopsis>
	"C-Media PCI (CMI8338/8738)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card using the CMI8338
or the CMI8738 chipset.  Data on these chips are available at
<http://www.cmedia.com.tw/>.

A userspace utility to control some internal registers of these
chips is available at
<http://member.nifty.ne.jp/Breeze/softwares/unix/cmictl-e.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_CMPCI_FM</term>
<nutsynopsis>
	"Enable legacy FM"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_CMPCI && X86</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable the legacy FM (frequency-modulation) synthesizer
support on a card using the CMI8338 or CMI8378 chipset. Even it is
enabled, you need to set fmio as proper value to enable it.
Say N here if you don't need this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_CMPCI_MIDI</term>
<nutsynopsis>
	"Enable legacy MPU-401"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_CMPCI && X86</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable the legacy MPU401 MIDI synthesizer support on a
card using the CMI8338 or CMI8378 chipset. Even it is enabled,
you need to set mpuio as proper value to enable it.
Say N here if you don't need this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_CMPCI_JOYSTICK</term>
<nutsynopsis>
	"Enable joystick"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_CMPCI && X86 && (GAMEPORT=y || SOUND_CMPCI=GAMEPORT)</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here in order to enable the joystick port on a sound card using
the CMI8338 or the CMI8738 chipset.  You need to config the
gameport support and set joystick parameter as 1 to use it.
Say N here if you don't need this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_EMU10K1</term>
<nutsynopsis>
	"Creative SBLive! (EMU10K1)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card using the EMU10K1 chipset,
such as the Creative SBLive!, SB PCI512 or Emu-APS.

For more information on this driver and the degree of support for
the different card models please check:

      <http://sourceforge.net/projects/emu10k1/>

It is now possible to load dsp microcode patches into the EMU10K1
chip.  These patches are used to implement real time sound
processing effects which include for example: signal routing,
bass/treble control, AC3 passthrough, ...
Userspace tools to create new patches and load/unload them can be
found in the emu-tools package at the above URL.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MIDI_EMU10K1</term>
<nutsynopsis>
	"Creative SBLive! MIDI (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_EMU10K1 && EXPERIMENTAL && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want to be able to use the OSS /dev/sequencer
interface.  This code is still experimental.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_FUSION</term>
<nutsynopsis>
	"Crystal SoundFusion (CS4280/461x)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module drives the Crystal SoundFusion devices (CS4280/46xx
series) when wired as native sound drivers with AC97 codecs.  If
this driver does not work try the CS4232 driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_CS4281</term>
<nutsynopsis>
	"Crystal Sound CS4281"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Picture and feature list at
<http://www.pcbroker.com/crystal4281.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_BCM_CS4297A</term>
<nutsynopsis>
	"Crystal Sound CS4297a (for Swarm)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SIBYTE_SWARM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The BCM91250A has a Crystal CS4297a on synchronous serial
port B (in addition to the DB-9 serial port).  Say Y or M
here to enable the sound chip instead of the UART.  Also
note that CONFIG_KGDB should not be enabled at the same
time, since it also attempts to use this UART port.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ES1370</term>
<nutsynopsis>
	"Ensoniq AudioPCI (ES1370)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card utilizing the Ensoniq
ES1370 chipset, such as Ensoniq's AudioPCI (non-97). To find
out if your sound card uses an ES1370 without removing your
computer's cover, use lspci -n and look for the PCI ID
1274:5000. Since Ensoniq was bought by Creative Labs,
Sound Blaster 64/PCI models are either ES1370 or ES1371 based.
This driver differs slightly from OSS/Free, so PLEASE READ
<file:Documentation/sound/oss/es1370>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ES1371</term>
<nutsynopsis>
	"Creative Ensoniq AudioPCI 97 (ES1371)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card utilizing the Ensoniq
ES1371 chipset, such as Ensoniq's AudioPCI97. To find out if
your sound card uses an ES1371 without removing your computer's
cover, use lspci -n and look for the PCI ID 1274:1371. Since
Ensoniq was bought by Creative Labs, Sound Blaster 64/PCI
models are either ES1370 or ES1371 based. This driver differs
slightly from OSS/Free, so PLEASE READ
<file:Documentation/sound/oss/es1371>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ESSSOLO1</term>
<nutsynopsis>
	"ESS Technology Solo1"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card utilizing the ESS Technology
Solo1 chip. To find out if your sound card uses a
Solo1 chip without removing your computer's cover, use
lspci -n and look for the PCI ID 125D:1969. This driver
differs slightly from OSS/Free, so PLEASE READ
<file:Documentation/sound/oss/solo1>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MAESTRO</term>
<nutsynopsis>
	"ESS Maestro, Maestro2, Maestro2E driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a sound system driven by ESS's Maestro line
of PCI sound chips.  These include the Maestro 1, Maestro 2, and
Maestro 2E.  See <file:Documentation/sound/oss/Maestro> for more
details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MAESTRO3</term>
<nutsynopsis>
	"ESS Maestro3/Allegro driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a sound system driven by ESS's Maestro 3
PCI sound chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ICH</term>
<nutsynopsis>
	"Intel ICH (i8xx) audio support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for integral audio in Intel's I/O Controller Hub (ICH)
chipset, as used on the 810/820/840 motherboards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_HARMONY</term>
<nutsynopsis>
	"PA Harmony audio driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && GSC_LASI && SOUND_PRIME</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say 'Y' or 'M' to include support for Harmony soundchip
on HP 712, 715/new and many other GSC based machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_SONICVIBES</term>
<nutsynopsis>
	"S3 SonicVibes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card utilizing the S3
SonicVibes chipset. To find out if your sound card uses a
SonicVibes chip without removing your computer's cover, use
lspci -n and look for the PCI ID 5333:CA00. This driver
differs slightly from OSS/Free, so PLEASE READ
<file:Documentation/sound/oss/sonicvibes>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_VWSND</term>
<nutsynopsis>
	"SGI Visual Workstation Sound"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && X86_VISWS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have an SGI Visual Workstation and you want to be
able to use its on-board audio.  Read
<file:Documentation/sound/oss/vwsnd> for more info on this driver's
capabilities.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_HAL2</term>
<nutsynopsis>
	"SGI HAL2 sound (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SGI_IP22 && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have an SGI Indy system and want to be able to
use it's on-board A2 audio system.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_IT8172</term>
<nutsynopsis>
	"IT8172G Sound"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && (MIPS_ITE8172 || MIPS_IVR)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_VRC5477</term>
<nutsynopsis>
	"NEC Vrc5477 AC97 sound"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && DDB5477</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable sound support for the NEC Vrc5477 chip, an
integrated, multi-function controller chip for MIPS CPUs.  Works
with the AC97 codec.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AU1000</term>
<nutsynopsis>
	"Au1000 Sound"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AU1550_AC97</term>
<nutsynopsis>
	"Au1550 AC97 Sound"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SOC_AU1550</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_TRIDENT</term>
<nutsynopsis>
	"Trident 4DWave DX/NX, SiS 7018 or ALi 5451 PCI Audio Core"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a PCI sound card utilizing the Trident
4DWave-DX/NX chipset or your mother board chipset has SiS 7018
or ALi 5451 built-in. The SiS 7018 PCI Audio Core is embedded
in SiS960 Super South Bridge and SiS540/630 Single Chipset.
The ALi 5451 PCI Audio Core is embedded in ALi M1535, M1535D,
M1535+ or M1535D+ South Bridge.

Use lspci -n to find out if your sound card or chipset uses
Trident 4DWave or SiS 7018. PCI ID 1023:2000 or 1023:2001 stands
for Trident 4Dwave. PCI ID 1039:7018 stands for SiS7018. PCI ID
10B9:5451 stands for ALi5451.

This driver supports S/PDIF in/out (record/playback) for ALi 5451
embedded in ALi M1535+ and M1535D+. Note that they aren't all
enabled by default; you can enable them by saying Y to "/proc file
system support" and "Sysctl support", and after the /proc file
system has been mounted, executing the command

      command			what is enabled

echo 0>/proc/ALi5451	pcm out is also set to S/PDIF out. (Default).

echo 1>/proc/ALi5451	use S/PDIF out to output pcm data.

echo 2>/proc/ALi5451	use S/PDIF out to output non-pcm data.
(AC3...).

echo 3>/proc/ALi5451	record from Ac97 in(MIC, Line in...).
(Default).

echo 4>/proc/ALi5451	no matter Ac97 settings, record from S/PDIF
in.


This driver differs slightly from OSS/Free, so PLEASE READ the
comments at the top of <file:drivers/sound/trident.c>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MSNDCLAS</term>
<nutsynopsis>
	"Support for Turtle Beach MultiSound Classic, Tahiti, Monterey"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && (m && MODULES || !STANDALONE)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say M here if you have a Turtle Beach MultiSound Classic, Tahiti or
Monterey (not for the Pinnacle or Fiji).

See <file:Documentation/sound/oss/MultiSound> for important information
about this driver.  Note that it has been discontinued, but the
Voyetra Turtle Beach knowledge base entry for it is still available
at <http://www.turtlebeach.com/site/kb_ftp/790.asp>.
	</para>

</nutentrybody>
</nutentry>

comment "Compiled-in MSND Classic support requires firmware during compilation."
<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SOUND_MSNDCLAS=y</literal>
	</para>


<nutentry>
	<term>MSNDCLAS_HAVE_BOOT</term>
	<para>
	default value
	<literal>y if !M68K && SOUND && SOUND_MSNDCLAS=y && !STANDALONE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDCLAS_INIT_FILE</term>
<nutsynopsis>
	"Full pathname of MSNDINIT.BIN firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDCLAS</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/msndinit.bin if !M68K && SOUND && SOUND_MSNDCLAS</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
The MultiSound cards have two firmware files which are required for
operation, and are not currently included. These files can be
obtained from Turtle Beach. See
<file:Documentation/sound/oss/MultiSound> for information on how to
obtain this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDCLAS_PERM_FILE</term>
<nutsynopsis>
	"Full pathname of MSNDPERM.BIN firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDCLAS</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/msndperm.bin if !M68K && SOUND && SOUND_MSNDCLAS</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
The MultiSound cards have two firmware files which are required for
operation, and are not currently included. These files can be
obtained from Turtle Beach. See
<file:Documentation/sound/oss/MultiSound> for information on how to
obtain this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDCLAS_IRQ</term>
<nutsynopsis>
	"MSND Classic IRQ 5, 7, 9, 10, 11, 12"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDCLAS=y</literal>
	</para>

	<para>
	default value
	<literal>5 if !M68K && SOUND && SOUND_MSNDCLAS=y</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Interrupt Request line for the MultiSound Classic and related cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDCLAS_MEM</term>
<nutsynopsis>
	"MSND Classic memory B0000, C8000, D0000, D8000, E0000, E8000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDCLAS=y</literal>
	</para>

	<para>
	default value
	<literal>D0000 if !M68K && SOUND && SOUND_MSNDCLAS=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Memory-mapped I/O base address for the MultiSound Classic and
related cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDCLAS_IO</term>
<nutsynopsis>
	"MSND Classic I/O 210, 220, 230, 240, 250, 260, 290, 3E0"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDCLAS=y</literal>
	</para>

	<para>
	default value
	<literal>290 if !M68K && SOUND && SOUND_MSNDCLAS=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
I/O port address for the MultiSound Classic and related cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MSNDPIN</term>
<nutsynopsis>
	"Support for Turtle Beach MultiSound Pinnacle, Fiji"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && (m && MODULES || !STANDALONE)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say M here if you have a Turtle Beach MultiSound Pinnacle or Fiji.
See <file:Documentation/sound/oss/MultiSound> for important information
about this driver. Note that it has been discontinued, but the
Voyetra Turtle Beach knowledge base entry for it is still available
at <http://www.turtlebeach.com/site/kb_ftp/600.asp>.
	</para>

</nutentrybody>
</nutentry>

comment "Compiled-in MSND Pinnacle support requires firmware during compilation."
<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SOUND_MSNDPIN=y</literal>
	</para>


<nutentry>
	<term>MSNDPIN_HAVE_BOOT</term>
	<para>
	default value
	<literal>y if !M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_INIT_FILE</term>
<nutsynopsis>
	"Full pathname of PNDSPINI.BIN firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/pndspini.bin if !M68K && SOUND && SOUND_MSNDPIN</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
The MultiSound cards have two firmware files which are required
for operation, and are not currently included. These files can be
obtained from Turtle Beach. See
<file:Documentation/sound/oss/MultiSound> for information on how to
obtain this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_PERM_FILE</term>
<nutsynopsis>
	"Full pathname of PNDSPERM.BIN firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/pndsperm.bin if !M68K && SOUND && SOUND_MSNDPIN</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
The MultiSound cards have two firmware files which are required for
operation, and are not currently included. These files can be
obtained from Turtle Beach. See
<file:Documentation/sound/oss/MultiSound> for information on how to
obtain this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_IRQ</term>
<nutsynopsis>
	"MSND Pinnacle IRQ 5, 7, 9, 10, 11, 12"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>

	<para>
	default value
	<literal>5 if !M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Interrupt request line for the primary synthesizer on MultiSound
Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_MEM</term>
<nutsynopsis>
	"MSND Pinnacle memory B0000, C8000, D0000, D8000, E0000, E8000"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>

	<para>
	default value
	<literal>D0000 if !M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Memory-mapped I/O base address for the primary synthesizer on
MultiSound Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_IO</term>
<nutsynopsis>
	"MSND Pinnacle I/O 210, 220, 230, 240, 250, 260, 290, 3E0"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>

	<para>
	default value
	<literal>290 if !M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Memory-mapped I/O base address for the primary synthesizer on
MultiSound Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_DIGITAL</term>
<nutsynopsis>
	"MSND Pinnacle has S/PDIF I/O"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have the S/PDIF daughter board for the Pinnacle or Fiji,
answer Y here; otherwise, say N. If you have this, you will be able
to play and record from the S/PDIF port (digital signal). See
<file:Documentation/sound/oss/MultiSound> for information on how to make
use of this capability.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_NONPNP</term>
<nutsynopsis>
	"MSND Pinnacle non-PnP Mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MSNDPIN=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Pinnacle and Fiji card resources can be configured either with
PnP, or through a configuration port. Say Y here if your card is NOT
in PnP mode. For the Pinnacle, configuration in non-PnP mode allows
use of the IDE and joystick peripherals on the card as well; these
do not show up when the card is in PnP mode. Specifying zero for any
resource of a device will disable the device. If you are running the
card in PnP mode, you must say N here and use isapnptools to
configure the card's resources.
	</para>

</nutentrybody>
</nutentry>

comment "MSND Pinnacle DSP section will be configured to above parameters."
<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SOUND_MSNDPIN=y && MSNDPIN_NONPNP</literal>
	</para>


<nutentry>
	<term>MSNDPIN_CFG</term>
<nutsynopsis>
	"MSND Pinnacle config port 250,260,270"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>250 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
This is the port which the Pinnacle and Fiji uses to configure the
card's resources when not in PnP mode. If your card is in PnP mode,
then be sure to say N to the previous option, "MSND Pinnacle Non-PnP
Mode".
	</para>

</nutentrybody>
</nutentry>

comment "Pinnacle-specific Device Configuration (0 disables)"
<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && SOUND_MSNDPIN=y && MSNDPIN_NONPNP</literal>
	</para>


<nutentry>
	<term>MSNDPIN_MPU_IO</term>
<nutsynopsis>
	"MSND Pinnacle MPU I/O (e.g. 330)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Memory-mapped I/O base address for the Kurzweil daughterboard
synthesizer on MultiSound Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_MPU_IRQ</term>
<nutsynopsis>
	"MSND Pinnacle MPU IRQ (e.g. 9)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Interrupt request number for the Kurzweil daughterboard
synthesizer on MultiSound Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_IDE_IO0</term>
<nutsynopsis>
	"MSND Pinnacle IDE I/O 0 (e.g. 170)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
CD-ROM drive 0 memory-mapped I/O base address for the MultiSound
Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_IDE_IO1</term>
<nutsynopsis>
	"MSND Pinnacle IDE I/O 1 (e.g. 376)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
CD-ROM drive 1 memory-mapped I/O base address for the MultiSound
Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_IDE_IRQ</term>
<nutsynopsis>
	"MSND Pinnacle IDE IRQ (e.g. 15)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Interrupt request number for the IDE CD-ROM interface on the
MultiSound Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSNDPIN_JOYSTICK_IO</term>
<nutsynopsis>
	"MSND Pinnacle joystick I/O (e.g. 200)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && MSNDPIN_NONPNP</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Memory-mapped I/O base address for the joystick port on MultiSound
Pinnacle and Fiji sound cards.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSND_FIFOSIZE</term>
<nutsynopsis>
	"MSND buffer size (kB)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN=y || SOUND_MSNDCLAS=y)</literal>
	</para>

	<para>
	default value
	<literal>128 if !M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN=y || SOUND_MSNDCLAS=y)</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Configures the size of each audio buffer, in kilobytes, for
recording and playing in the MultiSound drivers (both the Classic
and Pinnacle). Larger values reduce the chance of data overruns at
the expense of overall latency. If unsure, use the default.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_VIA82CXXX</term>
<nutsynopsis>
	"VIA 82C686 Audio Codec"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the audio codec found on VIA
82Cxxx-based chips. Typically these are built into a motherboard.

DO NOT select Sound Blaster or Adlib with this driver, unless
you have a Sound Blaster or Adlib card in addition to your VIA
audio chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MIDI_VIA82CXXX</term>
<nutsynopsis>
	"VIA 82C686 MIDI"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_VIA82CXXX && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Answer Y to use the MIDI interface of the Via686. You may need to
enable this in the BIOS before it will work. This is for connection
to external MIDI hardware, and is not required for software playback
of MIDI files.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_OSS</term>
<nutsynopsis>
	"OSS sound modules"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
OSS is the Open Sound System suite of sound card drivers.  They make
sound programming easier since they provide a common API.  Say Y or
M here (the module will be called sound) if you haven't found a
driver for your sound card above, then pick your driver from the
list below.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_TRACEINIT</term>
<nutsynopsis>
	"Verbose initialisation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Verbose soundcard initialization -- affects the format of autoprobe
and initialization messages at boot time.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_DMAP</term>
<nutsynopsis>
	"Persistent DMA buffers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Linux can often have problems allocating DMA buffers for ISA sound
cards on machines with more than 16MB of RAM. This is because ISA
DMA buffers must exist below the 16MB boundary and it is quite
possible that a large enough free block in this region cannot be
found after the machine has been running for a while. If you say Y
here the DMA buffers (64Kb) will be allocated at boot time and kept
until the shutdown. This option is only useful if you said Y to
"OSS sound modules", above. If you said M to "OSS sound modules"
then you can get the persistent DMA buffer functionality by passing
the command-line argument "dmabuf=1" to the sound module.

Say Y unless you have 16MB or more RAM or a PCI sound card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AD1816</term>
<nutsynopsis>
	"AD1816(A) based cards (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && EXPERIMENTAL && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say M here if you have a sound card based on the Analog Devices
AD1816(A) chip.

If you compile the driver into the kernel, you have to add
"ad1816=<io>,<irq>,<dma>,<dma2>" to the kernel command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AD1889</term>
<nutsynopsis>
	"AD1889 based cards (AD1819 codec) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && EXPERIMENTAL && SOUND_OSS && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say M here if you have a sound card based on the Analog Devices
AD1889 chip.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_SGALAXY</term>
<nutsynopsis>
	"Aztech Sound Galaxy (non-PnP) cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This module initializes the older non Plug and Play sound galaxy
cards from Aztech. It supports the Waverider Pro 32 - 3D and the
Galaxy Washington 16.

If you compile the driver into the kernel, you have to add
"sgalaxy=<io>,<irq>,<dma>,<dma2>,<sgbase>" to the kernel command
line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ADLIB</term>
<nutsynopsis>
	"Adlib Cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Includes ASB 64 4D. Information on programming AdLib cards is
available at <http://www.itsnet.com/home/ldragon/Specs/adlib.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ACI_MIXER</term>
<nutsynopsis>
	"ACI mixer (miroSOUND PCM1-pro/PCM12/PCM20)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ACI (Audio Command Interface) is a protocol used to communicate with
the microcontroller on some sound cards produced by miro and
Cardinal Technologies.  The main function of the ACI is to control
the mixer and to get a product identification.

This VoxWare ACI driver currently supports the ACI functions on the
miroSOUND PCM1-pro, PCM12 and PCM20 radio. On the PCM20 radio, ACI
also controls the radio tuner. This is supported in the video4linux
miropcm20 driver (say M or Y here and go back to "Multimedia
devices" -> "Radio Adapters").

This driver is also available as a module and will be called aci.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_CS4232</term>
<nutsynopsis>
	"Crystal CS4232 based (PnP) cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a card based on the Crystal CS4232 chip set,
which uses its own Plug and Play protocol.

If you compile the driver into the kernel, you have to add
"cs4232=<io>,<irq>,<dma>,<dma2>,<mpuio>,<mpuirq>" to the kernel
command line.

See <file:Documentation/sound/oss/CS4232> for more information on
configuring this card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_SSCAPE</term>
<nutsynopsis>
	"Ensoniq SoundScape support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y if you have a sound card based on the Ensoniq SoundScape
chipset. Such cards are being manufactured at least by Ensoniq, Spea
and Reveal (Reveal makes also other cards).

If you compile the driver into the kernel, you have to add
"sscape=<io>,<irq>,<dma>,<mpuio>,<mpuirq>" to the kernel command
line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_GUS</term>
<nutsynopsis>
	"Gravis Ultrasound support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here for any type of Gravis Ultrasound card, including the GUS
or GUS MAX.  See also <file:Documentation/sound/oss/ultrasound> for more
information on configuring this card with modules.

If you compile the driver into the kernel, you have to add
"gus=<io>,<irq>,<dma>,<dma2>" to the kernel command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_GUS16</term>
<nutsynopsis>
	"16 bit sampling option of GUS (_NOT_ GUS MAX)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_GUS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for Gravis Ulstrasound (GUS) cards (other than the GUS),
sampling at 16-bit width.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_GUSMAX</term>
<nutsynopsis>
	"GUS MAX support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_GUS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for Gravis Ulstrasound MAX.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_VMIDI</term>
<nutsynopsis>
	"Loopback MIDI device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for MIDI loopback on port 1 or 2.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_TRIX</term>
<nutsynopsis>
	"MediaTrix AudioTrix Pro support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y if you have the AudioTriX Pro sound card manufactured
by MediaTrix.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TRIX_HAVE_BOOT</term>
<nutsynopsis>
	"Have TRXPRO.HEX firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_TRIX=y && !STANDALONE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The MediaTrix AudioTrix Pro has an on-board microcontroller which
needs to be initialized by downloading the code from the file
TRXPRO.HEX in the DOS driver directory. If you don't have the
TRXPRO.HEX file handy you may skip this step. However, the SB and
MPU-401 modes of AudioTrix Pro will not work without this file!
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TRIX_BOOT_FILE</term>
<nutsynopsis>
	"Full pathname of TRXPRO.HEX firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && TRIX_HAVE_BOOT</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/trxpro.hex if !M68K && SOUND && TRIX_HAVE_BOOT</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
Enter the full pathname of your TRXPRO.HEX file, starting from /.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MSS</term>
<nutsynopsis>
	"Microsoft Sound System support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Again think carefully before answering Y to this question.  It's
safe to answer Y if you have the original Windows Sound System card
made by Microsoft or Aztech SG 16 Pro (or NX16 Pro).  Also you may
say Y in case your card is NOT among these:

ATI Stereo F/X, AdLib, Audio Excell DSP16, Cardinal DSP16,
Ensoniq SoundScape (and compatibles made by Reveal and Spea),
Gravis Ultrasound, Gravis Ultrasound ACE, Gravis Ultrasound Max,
Gravis Ultrasound with 16 bit option, Logitech Sound Man 16,
Logitech SoundMan Games, Logitech SoundMan Wave, MAD16 Pro (OPTi
82C929), Media Vision Jazz16, MediaTriX AudioTriX Pro, Microsoft
Windows Sound System (MSS/WSS), Mozart (OAK OTI-601), Orchid
SW32, Personal Sound System (PSS), Pro Audio Spectrum 16, Pro
Audio Studio 16, Pro Sonic 16, Roland MPU-401 MIDI interface,
Sound Blaster 1.0, Sound Blaster 16, Sound Blaster 16ASP, Sound
Blaster 2.0, Sound Blaster AWE32, Sound Blaster Pro, TI TM4000M
notebook, ThunderBoard, Turtle Beach Tropez, Yamaha FM
synthesizers (OPL2, OPL3 and OPL4), 6850 UART MIDI Interface.

For cards having native support in VoxWare, consult the card
specific instructions in <file:Documentation/sound/oss/README.OSS>.
Some drivers have their own MSS support and saying Y to this option
will cause a conflict.

If you compile the driver into the kernel, you have to add
"ad1848=<io>,<irq>,<dma>,<dma2>[,<type>]" to the kernel command
line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MPU401</term>
<nutsynopsis>
	"MPU-401 support (NOT for SB16)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Be careful with this question.  The MPU401 interface is supported by
all sound cards.  However, some natively supported cards have their
own driver for MPU401.  Enabling this MPU401 option with these cards
will cause a conflict.  Also, enabling MPU401 on a system that
doesn't really have a MPU401 could cause some trouble.  If your card
was in the list of supported cards, look at the card specific
instructions in the <file:Documentation/sound/oss/README.OSS> file.  It
is safe to answer Y if you have a true MPU401 MIDI interface card.

If you compile the driver into the kernel, you have to add
"mpu401=<io>,<irq>" to the kernel command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_NM256</term>
<nutsynopsis>
	"NM256AV/NM256ZX audio support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say M here to include audio support for the NeoMagic 256AV/256ZX
chipsets. These are the audio chipsets found in the Sony
Z505S/SX/DX, some Sony F-series, and the Dell Latitude CPi and CPt
laptops. It includes support for an AC97-compatible mixer and an
apparently proprietary sound engine.

See <file:Documentation/sound/oss/NM256> for further information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MAD16</term>
<nutsynopsis>
	"OPTi MAD16 and/or Mozart based cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y if your card has a Mozart (OAK OTI-601) or MAD16 (OPTi
82C928 or 82C929 or 82C931) audio interface chip. These chips are
quite common so it's possible that many no-name cards have one of
them. In addition the MAD16 chip is used in some cards made by known
manufacturers such as Turtle Beach (Tropez), Reveal (some models)
and Diamond (latest ones). Note however that the Tropez sound cards
have their own driver; if you have one of those, say N here and Y or
M to "Full support for Turtle Beach WaveFront", below.

If you compile the driver into the kernel, you have to add
"mad16=<io>,<irq>,<dma>,<dma2>,<mpuio>,<mpuirq>" to the
kernel command line.

See also <file:Documentation/sound/oss/Opti> and
<file:Documentation/sound/oss/MAD16> for more information on setting
these cards up as modules.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAD16_OLDCARD</term>
<nutsynopsis>
	"Support MIDI in older MAD16 based cards (requires SB)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MAD16</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Answer Y (or M) if you have an older card based on the C928 or
Mozart chipset and you want to have MIDI support. If you enable this
option you also need to enable support for Sound Blaster.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_PAS</term>
<nutsynopsis>
	"ProAudioSpectrum 16 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y only if you have a Pro Audio Spectrum 16, ProAudio Studio
16 or Logitech SoundMan 16 sound card. Answer N if you have some
other card made by Media Vision or Logitech since those are not
PAS16 compatible. Please read <file:Documentation/sound/oss/PAS16>.
It is not necessary to add Sound Blaster support separately; it
is included in PAS support.

If you compile the driver into the kernel, you have to add
"pas2=<io>,<irq>,<dma>,<dma2>,<sbio>,<sbirq>,<sbdma>,<sbdma2>
to the kernel command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PAS_JOYSTICK</term>
<nutsynopsis>
	"Enable PAS16 joystick port"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_PAS=y</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable the Pro Audio Spectrum 16's auxiliary joystick
port.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_PSS</term>
<nutsynopsis>
	"PSS (AD1848, ADSP-2115, ESC614) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y or M if you have an Orchid SW32, Cardinal DSP16, Beethoven
ADSP-16 or some other card based on the PSS chipset (AD1848 codec +
ADSP-2115 DSP chip + Echo ESC614 ASIC CHIP). For more information on
how to compile it into the kernel or as a module see the file
<file:Documentation/sound/oss/PSS>.

If you compile the driver into the kernel, you have to add
"pss=<io>,<mssio>,<mssirq>,<mssdma>,<mpuio>,<mpuirq>" to the kernel
command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PSS_MIXER</term>
<nutsynopsis>
	"Enable PSS mixer (Beethoven ADSP-16 and other compatibile)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_PSS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Answer Y for Beethoven ADSP-16. You may try to say Y also for other
cards if they have master volume, bass, treble, and you can't
control it under Linux. If you answer N for Beethoven ADSP-16, you
can't control master volume, bass, treble and synth volume.

If you said M to "PSS support" above, you may enable or disable this
PSS mixer with the module parameter pss_mixer. For more information
see the file <file:Documentation/sound/oss/PSS>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PSS_HAVE_BOOT</term>
<nutsynopsis>
	"Have DSPxxx.LD firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_PSS && !STANDALONE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you have the DSPxxx.LD file or SYNTH.LD file for you card, say Y
to include this file. Without this file the synth device (OPL) may
not work.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PSS_BOOT_FILE</term>
<nutsynopsis>
	"Full pathname of DSPxxx.LD firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && PSS_HAVE_BOOT</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/dsp001.ld if !M68K && SOUND && PSS_HAVE_BOOT</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
Enter the full pathname of your DSPxxx.LD file or SYNTH.LD file,
starting from /.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_SB</term>
<nutsynopsis>
	"100% Sound Blaster compatibles (SB16/32/64, ESS, Jazz16) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y if you have an original Sound Blaster card made by Creative
Labs or a 100% hardware compatible clone (like the Thunderboard or
SM Games). For an unknown card you may answer Y if the card claims
to be Sound Blaster-compatible.

Please read the file <file:Documentation/sound/oss/Soundblaster>.

You should also say Y here for cards based on the Avance Logic
ALS-007 and ALS-1X0 chips (read <file:Documentation/sound/oss/ALS>) and
for cards based on ESS chips (read
<file:Documentation/sound/oss/ESS1868> and
<file:Documentation/sound/oss/ESS>). If you have an SB AWE 32 or SB AWE
64, say Y here and also to "AWE32 synth" below and read
<file:Documentation/sound/oss/INSTALL.awe>. If you have an IBM Mwave
card, say Y here and read <file:Documentation/sound/oss/mwave>.

If you compile the driver into the kernel and don't want to use
isapnp, you have to add "sb=<io>,<irq>,<dma>,<dma2>" to the kernel
command line.

You can say M here to compile this driver as a module; the module is
called sb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AWE32_SYNTH</term>
<nutsynopsis>
	"AWE32 synth"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Sound Blaster SB32, AWE32-PnP, SB AWE64 or
similar sound card. See <file:Documentation/sound/oss/README.awe>,
<file:Documentation/sound/oss/AWE32> and the Soundblaster-AWE
mini-HOWTO, available from <http://www.tldp.org/docs.html#howto>
for more info.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_WAVEFRONT</term>
<nutsynopsis>
	"Full support for Turtle Beach WaveFront (Tropez Plus, Tropez, Maui) synth/soundcards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS && m && MODULES</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y or M if you have a Tropez Plus, Tropez or Maui sound card
and read the files <file:Documentation/sound/oss/Wavefront> and
<file:Documentation/sound/oss/Tropez+>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_MAUI</term>
<nutsynopsis>
	"Limited support for Turtle Beach Wave Front (Maui, Tropez) synthesizers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a Turtle Beach Wave Front, Maui, or Tropez
sound card.

If you compile the driver into the kernel, you have to add
"maui=<io>,<irq>" to the kernel command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAUI_HAVE_BOOT</term>
<nutsynopsis>
	"Have OSWF.MOT firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_MAUI=y && !STANDALONE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Turtle Beach Maui and Tropez sound cards have a microcontroller
which needs to be initialized prior to use. OSWF.MOT is a file
distributed with the card's DOS/Windows drivers. Answer Y if you
have this file.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAUI_BOOT_FILE</term>
<nutsynopsis>
	"Full pathname of OSWF.MOT firmware file"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && MAUI_HAVE_BOOT</literal>
	</para>

	<para>
	default value
	<literal>/etc/sound/oswf.mot if !M68K && SOUND && MAUI_HAVE_BOOT</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
Enter the full pathname of your OSWF.MOT file, starting from /.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_YM3812</term>
<nutsynopsis>
	"Yamaha FM synthesizer (YM3812/OPL-3) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y if your card has a FM chip made by Yamaha (OPL2/OPL3/OPL4).
Answering Y is usually a safe and recommended choice, however some
cards may have software (TSR) FM emulation. Enabling FM support with
these cards may cause trouble (I don't currently know of any such
cards, however). Please read the file
<file:Documentation/sound/oss/OPL3> if your card has an OPL3 chip.

If you compile the driver into the kernel, you have to add
"opl3=<io>" to the kernel command line.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_OPL3SA1</term>
<nutsynopsis>
	"Yamaha OPL3-SA1 audio controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a Yamaha OPL3-SA1 sound chip, which is
usually built into motherboards. Read
<file:Documentation/sound/oss/OPL3-SA> for details.

If you compile the driver into the kernel, you have to add
"opl3sa=<io>,<irq>,<dma>,<dma2>,<mpuio>,<mpuirq>" to the kernel
command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_OPL3SA2</term>
<nutsynopsis>
	"Yamaha OPL3-SA2 and SA3 based PnP cards"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a card based on one of these Yamaha sound
chipsets or the "SAx", which is actually a SA3. Read
<file:Documentation/sound/oss/OPL3-SA2> for more information on
configuring these cards.

If you compile the driver into the kernel and do not also
configure in the optional ISA PnP support, you will have to add
"opl3sa2=<io>,<irq>,<dma>,<dma2>,<mssio>,<mpuio>" to the kernel
command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_YMFPCI</term>
<nutsynopsis>
	"Yamaha YMF7xx PCI audio (native mode)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for Yamaha cards including the YMF711, YMF715, YMF718,
YMF719, YMF724, Waveforce 192XG, and Waveforce 192 Digital.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_YMFPCI_LEGACY</term>
<nutsynopsis>
	"Yamaha PCI legacy ports support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_YMFPCI</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for YMF7xx PCI cards emulating an MP401.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_UART6850</term>
<nutsynopsis>
	"6850 UART support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables support for MIDI interfaces based on the 6850
UART chip. This interface is rarely found on sound cards. It's safe
to answer N to this question.

If you compile the driver into the kernel, you have to add
"uart6850=<io>,<irq>" to the kernel command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AEDSP16</term>
<nutsynopsis>
	"Gallant Audio Cards (SC-6000 and SC-6600 based)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Answer Y if you have a Gallant's Audio Excel DSP 16 card. This
driver supports Audio Excel DSP 16 but not the III nor PnP versions
of this card.

The Gallant's Audio Excel DSP 16 card can emulate either an SBPro or
a Microsoft Sound System card, so you should have said Y to either
"100% Sound Blaster compatibles (SB16/32/64, ESS, Jazz16) support"
or "Microsoft Sound System support", above, and you need to answer
the "MSS emulation" and "SBPro emulation" questions below
accordingly. You should say Y to one and only one of these two
questions.

Read the <file:Documentation/sound/oss/README.OSS> file and the head of
<file:drivers/sound/aedsp16.c> as well as
<file:Documentation/sound/oss/AudioExcelDSP16> to get more information
about this driver and its configuration.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC6600</term>
<nutsynopsis>
	"SC-6600 based audio cards (new Audio Excel DSP 16)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_AEDSP16</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The SC6600 is the new version of DSP mounted on the Audio Excel DSP
16 cards. Find in the manual the FCC ID of your audio card and
answer Y if you have an SC6600 DSP.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC6600_JOY</term>
<nutsynopsis>
	"Activate SC-6600 Joystick Interface"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SC6600</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here in order to use the joystick interface of the Audio Excel
DSP 16 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC6600_CDROM</term>
<nutsynopsis>
	"SC-6600 CDROM Interface (4=None, 3=IDE, 1=Panasonic, 0=?Sony?)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SC6600</literal>
	</para>

	<para>
	default value
	<literal>4 if !M68K && SOUND && SC6600</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This is used to activate the CD-ROM interface of the Audio Excel
DSP 16 card. Enter: 0 for Sony, 1 for Panasonic, 2 for IDE, 4 for no
CD-ROM present.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SC6600_CDROMBASE</term>
<nutsynopsis>
	"SC-6600 CDROM Interface I/O Address"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SC6600</literal>
	</para>

	<para>
	default value
	<literal>0 if !M68K && SOUND && SC6600</literal>
	</para>


	<para>
	type
	<literal>hex</literal>
	</para>

	<para>
Base I/O port address for the CD-ROM interface of the Audio Excel
DSP 16 card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"Audio Excel DSP 16"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_AEDSP16</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AEDSP16_MSS</term>
<nutsynopsis>
	"MSS emulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && SOUND_MSS</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Answer Y if you want your audio card to emulate Microsoft Sound
System. You should then say Y to "Microsoft Sound System support"
and say N to "Audio Excel DSP 16 (SBPro emulation)".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AEDSP16_SBPRO</term>
<nutsynopsis>
	"SBPro emulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && SOUND_SB</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Answer Y if you want your audio card to emulate Sound Blaster Pro.
You should then say Y to "100% Sound Blaster compatibles
(SB16/32/64, ESS, Jazz16) support" and N to "Audio Excel DSP 16 (MSS
emulation)".

If you compile the driver into the kernel, you have to add
"aedsp16=<io>,<irq>,<dma>,<mssio>,<mpuio>,<mouirq>" to the kernel
command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AEDSP16_MPU401</term>
<nutsynopsis>
	"Audio Excel DSP 16 (MPU401 emulation)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_AEDSP16 && SOUND_MPU401</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Answer Y if you want your audio card to emulate the MPU-401 midi
interface. You should then also say Y to "MPU-401 support".

Note that the I/O base for MPU-401 support of aedsp16 is the same
you have selected for "MPU-401 support". If you are using this
driver as a module you have to specify the MPU I/O base address with
the parameter 'mpu_base=0xNNN'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_VIDC</term>
<nutsynopsis>
	"VIDC 16-bit sound"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
16-bit support for the VIDC onboard sound hardware found on Acorn
machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_WAVEARTIST</term>
<nutsynopsis>
	"Netwinder WaveArtist"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && ARM && SOUND_OSS && ARCH_NETWINDER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to include support for the Rockwell WaveArtist sound
system.  This driver is mainly for the NetWinder.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_TVMIXER</term>
<nutsynopsis>
	"TV card (bt848) mixer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && I2C</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for audio mixer facilities on the BT848 TV frame-grabber
card.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_KAHLUA</term>
<nutsynopsis>
	"XpressAudio Sound Blaster emulation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_SB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_ALI5455</term>
<nutsynopsis>
	"ALi5455 audio support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_FORTE</term>
<nutsynopsis>
	"ForteMedia FM801 driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you want driver support for the ForteMedia FM801 PCI
audio controller (Abit AU10, Genius Sound Maker, HP Workstation
zx2000, and others).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_RME96XX</term>
<nutsynopsis>
	"RME Hammerfall (RME96XX) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M if you have a Hammerfall or Hammerfall light
multichannel card from RME. If you want to access advanced
features of the card, read <file:Documentation/sound/oss/rme96xx>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_AD1980</term>
<nutsynopsis>
	"AD1980 front/back switch plugin"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_SH_DAC_AUDIO</term>
<nutsynopsis>
	"SuperH DAC audio support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND!=n && SOUND_PRIME && CPU_SH3</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOUND_SH_DAC_AUDIO_CHANNEL</term>
<nutsynopsis>
	"    DAC channel"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>!M68K && SOUND && SOUND_SH_DAC_AUDIO</literal>
	</para>

	<para>
	default value
	<literal>1 if !M68K && SOUND && SOUND_SH_DAC_AUDIO</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "USB support"

<nutentry>
	<term>USB_ARCH_HAS_HCD</term>
	<para>
	default value
	<literal>y if USB_ARCH_HAS_OHCI</literal>
	</para>


	<para>
	default value
	<literal>y if ARM</literal>
	</para>


	<para>
	default value
	<literal>PCI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ARCH_HAS_OHCI</term>
	<para>
	default value
	<literal>y if SA1111</literal>
	</para>


	<para>
	default value
	<literal>y if ARCH_OMAP</literal>
	</para>


	<para>
	default value
	<literal>y if ARCH_LH7A404</literal>
	</para>


	<para>
	default value
	<literal>y if ARCH_S3C2410</literal>
	</para>


	<para>
	default value
	<literal>y if PXA27x</literal>
	</para>


	<para>
	default value
	<literal>y if STB03xxx</literal>
	</para>


	<para>
	default value
	<literal>y if PPC_MPC52xx</literal>
	</para>


	<para>
	default value
	<literal>y if SOC_AU1X00</literal>
	</para>


	<para>
	default value
	<literal>PCI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB</term>
<nutsynopsis>
	"Support for Host-side USB"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_ARCH_HAS_HCD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Universal Serial Bus (USB) is a specification for a serial bus
subsystem which offers higher speeds and more features than the
traditional PC serial port.  The bus supplies power to peripherals
and allows for hot swapping.  Up to 127 USB peripherals can be
connected to a single USB host in a tree structure.

The USB host is the root of the tree, the peripherals are the
leaves and the inner nodes are special USB devices called hubs.
Most PCs now have USB host ports, used to connect peripherals
such as scanners, keyboards, mice, modems, cameras, disks,
flash memory, network links, and printers to the PC.

Say Y here if your computer has a host-side USB port and you want
to use USB devices.  You then need to say Y to at least one of the
Host Controller Driver (HCD) options below.  Choose a USB 1.1
controller, such as "UHCI HCD support" or "OHCI HCD support",
and "EHCI HCD (USB 2.0) support" except for older systems that
do not have USB 2.0 support.  It doesn't normally hurt to select
them all if you are not certain.

If your system has a device-side USB port, used in the peripheral
side of the USB protocol, see the "USB Gadget" framework instead.

After choosing your HCD, then select drivers for the USB peripherals
you'll be using.  You may want to check out the information provided
in <file:Documentation/usb/> and especially the links given in
<file:Documentation/usb/usb-help.txt>.

To compile this driver as a module, choose M here: the
module will be called usbcore.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_DEBUG</term>
<nutsynopsis>
	"USB verbose debug messages"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want the USB core & hub drivers to produce a bunch
of debug messages to the system log. Select this if you are having a
problem with USB support and want to see more of what is going on.
	</para>

</nutentrybody>
</nutentry>

comment "Miscellaneous USB options"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_DEVICEFS</term>
<nutsynopsis>
	"USB device filesystem"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here (and to "/proc file system support" in the "File
systems" section, above), you will get a file /proc/bus/usb/devices
which lists the devices currently connected to your USB bus or
busses, and for every connected device a file named
"/proc/bus/usb/xxx/yyy", where xxx is the bus number and yyy the
device number; the latter files can be used by user space programs
to talk directly to the device. These files are "virtual", meaning
they are generated on the fly and not stored on the hard drive.

You may need to mount the usbfs file system to see the files, use
mount -t usbfs none /proc/bus/usb

For the format of the various /proc/bus/usb/ files, please read
<file:Documentation/usb/proc_usb_info.txt>.

Please note that this code is completely unrelated to devfs, the
"/dev file system support".

Most users want to say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_BANDWIDTH</term>
<nutsynopsis>
	"Enforce USB bandwidth allocation (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the USB subsystem enforces USB bandwidth
allocation and will prevent some device opens from succeeding
if they would cause USB bandwidth usage to go above 90% of
the bus bandwidth.

If you say N here, these conditions will cause warning messages
about USB bandwidth usage to be logged and some devices or
drivers may not work correctly.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_DYNAMIC_MINORS</term>
<nutsynopsis>
	"Dynamic USB minor allocation (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the USB subsystem will use dynamic minor
allocation for any device that uses the USB major number.
This means that you can have more than 16 of a single type
of device (like USB printers).

If you are unsure about this, say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SUSPEND</term>
<nutsynopsis>
	"USB suspend/resume (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && PM && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you can use driver calls or the sysfs
"power/state" file to suspend or resume individual USB
peripherals.  There are many related features, such as
remote wakeup and driver-specific suspend processing, that
may not yet work as expected.

If you are unsure about this, say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OTG</term>
  unknown prop 6!
	<para>
	default value
	<literal>n if USB && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The most notable feature of USB OTG is support for a
"Dual-Role" device, which can act as either a device
or a host.  The initial role choice can be changed
later, when two dual-role devices talk to each other.

Select this only if your OMAP board has a Mini-AB connector.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OTG_WHITELIST</term>
<nutsynopsis>
	"Rely on OTG Targeted Peripherals List"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_OTG</literal>
	</para>

	<para>
	default value
	<literal>y if USB_OTG</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, the "otg_whitelist.h" file will be used as a
product whitelist, so USB peripherals not listed there will be
rejected during enumeration.  This behavior is required by the
USB OTG specification for all devices not on your product's
"Targeted Peripherals List".

Otherwise, peripherals not listed there will only generate a
warning and enumeration will continue.  That's more like what
normal Linux-USB hosts do (other than the warning), and is
convenient for many stages of product development.
	</para>

</nutentrybody>
</nutentry>

comment "USB Host Controller Drivers"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_EHCI_HCD</term>
<nutsynopsis>
	"EHCI HCD (USB 2.0) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Enhanced Host Controller Interface (EHCI) is standard for USB 2.0
"high speed" (480 Mbit/sec, 60 Mbyte/sec) host controller hardware.
If your USB host controller supports USB 2.0, you will likely want to
configure this Host Controller Driver.  At this writing, the primary
implementation of EHCI is a chip from NEC, widely available in add-on
PCI cards, but implementations are in the works from other vendors
including Intel and Philips.  Motherboard support is appearing.

EHCI controllers are packaged with "companion" host controllers (OHCI
or UHCI) to handle USB 1.1 devices connected to root hub ports.  Ports
will connect to EHCI if it the device is high speed, otherwise they
connect to a companion controller.  If you configure EHCI, you should
probably configure the OHCI (for NEC and some other vendors) USB Host
Controller Driver or UHCI (for Via motherboards) Host Controller
Driver too.

You may want to read <file:Documentation/usb/ehci.txt>.

To compile this driver as a module, choose M here: the
module will be called ehci-hcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_EHCI_SPLIT_ISO</term>
<nutsynopsis>
	"Full speed ISO transactions (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_EHCI_HCD && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>n if USB_EHCI_HCD && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This code is new and hasn't been used with many different
EHCI or USB 2.0 transaction translator implementations.
It should work for ISO-OUT transfers, like audio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_EHCI_ROOT_HUB_TT</term>
<nutsynopsis>
	"Root Hub Transaction Translators (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_EHCI_HCD && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some EHCI chips have vendor-specific extensions to integrate
transaction translators, so that no OHCI or UHCI companion
controller is needed.  It's safe to say "y" even if your
controller doesn't support this feature.

This supports the EHCI implementation from TransDimension Inc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ISP116X_HCD</term>
<nutsynopsis>
	"ISP116X HCD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	default value
	<literal>N if USB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The ISP1160 and ISP1161 chips are USB host controllers. Enable this
option if your board has this chip. If unsure, say N.

This driver does not support isochronous transfers.

To compile this driver as a module, choose M here: the
module will be called isp116x-hcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OHCI_HCD</term>
<nutsynopsis>
	"OHCI HCD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_ARCH_HAS_OHCI</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Open Host Controller Interface (OHCI) is a standard for accessing
USB 1.1 host controller hardware.  It does more in hardware than Intel's
UHCI specification.  If your USB host controller follows the OHCI spec,
say Y.  On most non-x86 systems, and on x86 hardware that's not using a
USB controller from Intel or VIA, this is appropriate.  If your host
controller doesn't use PCI, this is probably appropriate.  For a PCI
based system where you're not sure, the "lspci -v" entry will list the
right "prog-if" for your USB controller(s):  EHCI, OHCI, or UHCI.

To compile this driver as a module, choose M here: the
module will be called ohci-hcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OHCI_HCD_PPC_SOC</term>
<nutsynopsis>
	"OHCI support for on-chip PPC USB controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)</literal>
	</para>

	<para>
	default value
	<literal>y if USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enables support for the USB controller on the MPC52xx or
STB03xxx processor chip.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OHCI_HCD_PCI</term>
<nutsynopsis>
	"OHCI support for PCI-bus USB controllers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)</literal>
	</para>

	<para>
	default value
	<literal>y if USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enables support for PCI-bus plug-in USB controller cards.
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OHCI_BIG_ENDIAN</term>
	<para>
	default value
	<literal>n if USB_OHCI_HCD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OHCI_LITTLE_ENDIAN</term>
	<para>
	default value
	<literal>n if USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)</literal>
	</para>


	<para>
	default value
	<literal>y if USB_OHCI_HCD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_UHCI_HCD</term>
<nutsynopsis>
	"UHCI HCD (most Intel and VIA) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && PCI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Universal Host Controller Interface is a standard by Intel for
accessing the USB hardware in the PC (which is also called the USB
host controller). If your USB host controller conforms to this
standard, you may want to say Y, but see below. All recent boards
with Intel PCI chipsets (like intel 430TX, 440FX, 440LX, 440BX,
i810, i820) conform to this standard. Also all VIA PCI chipsets
(like VIA VP2, VP3, MVP3, Apollo Pro, Apollo Pro II or Apollo Pro
133). If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called uhci-hcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SL811_HCD</term>
<nutsynopsis>
	"SL811HS HCD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	default value
	<literal>N if USB</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The SL811HS is a single-port USB controller that supports either
host side or peripheral side roles.  Enable this option if your
board has this chip, and you want to use it as a host controller. 
If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called sl811-hcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SL811_CS</term>
<nutsynopsis>
	"CF/PCMCIA support for SL811HS HCD"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_SL811_HCD && PCMCIA</literal>
	</para>

	<para>
	default value
	<literal>N if USB_SL811_HCD && PCMCIA</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Wraps a PCMCIA driver around the SL811HS HCD, supporting the RATOC
REX-CFU1U CF card (often used with PDAs).  If unsure, say N.

To compile this driver as a module, choose M here: the
module will be called "sl811_cs".
	</para>

</nutentrybody>
</nutentry>

comment "USB Device Class drivers"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>OBSOLETE_OSS_USB_DRIVER</term>
<nutsynopsis>
	"Obsolete OSS USB drivers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && SOUND</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables support for the obsolete USB Audio and Midi
drivers that are scheduled for removal in the near future since
there are ALSA drivers for the same hardware.

Please contact Adrian Bunk <bunk@stusta.de> if you had to
say Y here because of missing support in the ALSA drivers.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_AUDIO</term>
<nutsynopsis>
	"USB Audio support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && SOUND && OBSOLETE_OSS_USB_DRIVER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect USB audio equipment such as
speakers to your computer's USB port. You only need this if you use
the OSS sound driver; ALSA has its own option for usb audio support.

To compile this driver as a module, choose M here: the
module will be called audio.
	</para>

</nutentrybody>
</nutentry>

comment "USB Bluetooth TTY can only be used with disabled Bluetooth subsystem"
<para>
	depends on
	<literal>USB && BT</literal>
	</para>


<nutentry>
	<term>USB_BLUETOOTH_TTY</term>
<nutsynopsis>
	"USB Bluetooth TTY support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && BT=n</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver implements a nonstandard tty interface to a Bluetooth
device that can be used only by specialized Bluetooth HCI software.

Say Y here if you want to use OpenBT Bluetooth stack (available
at <http://developer.axis.com/software>), or other TTY based
Bluetooth stacks, and want to connect a USB Bluetooth device
to your computer's USB port.

Do *not* enable this driver if you want to use generic Linux
Bluetooth support.

If in doubt, say N here.

To compile this driver as a module, choose M here: the
module will be called bluetty.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_MIDI</term>
<nutsynopsis>
	"USB MIDI support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && SOUND && OBSOLETE_OSS_USB_DRIVER</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a USB MIDI device to your
computer's USB port.  You only need this if you use the OSS
sound system; USB MIDI devices are supported by ALSA's USB
audio driver. This driver is for devices that comply with
'Universal Serial Bus Device Class Definition for MIDI Device'.

The following devices are known to work:
* Steinberg USB2MIDI
* Roland MPU64
* Roland PC-300
* Roland SC8850
* Roland UM-1
* Roland UM-2
* Roland UA-100
* Yamaha MU1000

To compile this driver as a module, choose M here: the
module will be called usb-midi.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ACM</term>
<nutsynopsis>
	"USB Modem (CDC ACM) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports USB modems and ISDN adapters which support the
Communication Device Class Abstract Control Model interface.
Please read <file:Documentation/usb/acm.txt> for details.

If your modem only reports "Cls=ff(vend.)" in the descriptors in
/proc/bus/usb/devices, then your modem will not work with this
driver.

To compile this driver as a module, choose M here: the
module will be called cdc-acm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PRINTER</term>
<nutsynopsis>
	"USB Printer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a USB printer to your computer's
USB port.

To compile this driver as a module, choose M here: the
module will be called usblp.
	</para>

</nutentrybody>
</nutentry>

comment "NOTE: USB_STORAGE enables SCSI, and 'SCSI disk support' may also be needed; see USB_STORAGE Help for more information"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_STORAGE</term>
<nutsynopsis>
	"USB Mass Storage support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect USB mass storage devices to your
computer's USB port. This is the driver you need for USB
floppy drives, USB hard disks, USB tape drives, USB CD-ROMs,
USB flash devices, and memory sticks, along with
similar devices. This driver may also be used for some cameras
and card readers.

This option 'selects' (turns on, enables) 'SCSI', but you
probably also need 'SCSI device support: SCSI disk support'
(BLK_DEV_SD) for most USB storage devices.

To compile this driver as a module, choose M here: the
module will be called usb-storage.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_DEBUG</term>
<nutsynopsis>
	"USB Mass Storage verbose debug"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here in order to have the USB Mass Storage code generate
verbose debugging messages.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_DATAFAB</term>
<nutsynopsis>
	"Datafab Compact Flash Reader support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for certain Datafab CompactFlash readers.
Datafab has a web page at <http://www.datafabusa.com/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_FREECOM</term>
<nutsynopsis>
	"Freecom USB/ATAPI Bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support for the Freecom USB to IDE/ATAPI adaptor.
Freecom has a web page at <http://www.freecom.de/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_ISD200</term>
<nutsynopsis>
	"ISD-200 USB/ATA Bridge support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && BLK_DEV_IDE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use USB Mass Store devices based
on the In-Systems Design ISD-200 USB/ATA bridge.

Some of the products that use this chip are:

- Archos Jukebox 6000
- ISD SmartCable for Storage
- Taiwan Skymaster CD530U/DEL-0241 IDE bridge
- Sony CRX10U CD-R/RW drive
- CyQ've CQ8060A CDRW drive
- Planex eXtreme Drive RX-25HU USB-IDE cable (not model RX-25U)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_DPCM</term>
<nutsynopsis>
	"Microtech/ZiO! CompactFlash/SmartMedia support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to support the Microtech/ZiO! CompactFlash reader.
There is a web page at <http://www.ziocorp.com/products/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_USBAT</term>
<nutsynopsis>
	"USBAT/USBAT02-based storage support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include additional code to support storage devices
based on the SCM/Shuttle USBAT/USBAT02 processors.

Devices reported to work with this driver include:
- CompactFlash reader included with Kodak DC3800 camera
- Dane-Elec Zmate CompactFlash reader
- Delkin Efilm reader2
- HP 8200e/8210e/8230e CD-Writer Plus drives
- I-JAM JS-50U
- Jessops CompactFlash JESDCFRU BLACK
- Kingston Technology PCREAD-USB/CF
- Maxell UA4 CompactFlash reader
- Memorex UCF-100
- Microtech ZiO! ICS-45 CF2
- RCA LYRA MP3 portable
- Sandisk ImageMate SDDR-05b
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_SDDR09</term>
<nutsynopsis>
	"SanDisk SDDR-09 (and other SmartMedia) support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include additional code to support the Sandisk SDDR-09
SmartMedia reader in the USB Mass Storage driver.
Also works for the Microtech Zio! SmartMedia reader.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_SDDR55</term>
<nutsynopsis>
	"SanDisk SDDR-55 SmartMedia support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include additional code to support the Sandisk SDDR-55
SmartMedia reader in the USB Mass Storage driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_JUMPSHOT</term>
<nutsynopsis>
	"Lexar Jumpshot Compact Flash Reader (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include additional code to support the Lexar Jumpshot
USB CompactFlash reader.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STORAGE_ONETOUCH</term>
<nutsynopsis>
	"Support OneTouch Button on Maxtor Hard Drives (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include additional code to support the Maxtor OneTouch
USB hard drive's onetouch button.

This code registers the button on the front of Maxtor OneTouch USB
hard drive's as an input device. An action can be associated with
this input in any keybinding software. (e.g. gnome's keyboard short-
cuts)
	</para>

</nutentrybody>
</nutentry>

comment "USB Input Devices"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_HID</term>
<nutsynopsis>
	"USB Human Interface Device (full HID) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want full HID support to connect keyboards,
mice, joysticks, graphic tablets, or any other HID based devices
to your computer via USB. You also need to select HID Input layer
support (below) if you want to use keyboards, mice, joysticks and
the like ... as well as Uninterruptible Power Supply (UPS) and
monitor control devices.

You can't use this driver and the HIDBP (Boot Protocol) keyboard
and mouse drivers at the same time. More information is available:
<file:Documentation/input/input.txt>.

If unsure, say Y.

To compile this driver as a module, choose M here: the
module will be called usbhid.
	</para>

</nutentrybody>
</nutentry>

comment "Input core support is needed for USB HID input layer or HIDBP support"
<para>
	depends on
	<literal>USB_HID && INPUT=n</literal>
	</para>


<nutentry>
	<term>USB_HIDINPUT</term>
<nutsynopsis>
	"HID input layer support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INPUT && USB_HID</literal>
	</para>

	<para>
	default value
	<literal>y if INPUT && USB_HID</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use a USB keyboard, mouse or joystick,
or any other HID input device.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HID_FF</term>
<nutsynopsis>
	"Force feedback support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_HIDINPUT && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here is you want force feedback support for a few HID devices.
See below for a list of supported devices.

See <file:Documentation/input/ff.txt> for a description of the force
feedback API.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HID_PID</term>
<nutsynopsis>
	"PID Devices (Microsoft Sidewinder Force Feedback 2)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HID_FF</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a PID-compliant joystick and wish to enable force
feedback for it. The Microsoft Sidewinder Force Feedback 2 is one such
device.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOGITECH_FF</term>
<nutsynopsis>
	"Logitech WingMan *3D support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HID_FF</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have one of these devices:
- Logitech WingMan Cordless RumblePad
- Logitech WingMan Force 3D
and if you want to enable force feedback for them.
Note: if you say N here, this device will still be supported, but without
force feedback.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>THRUSTMASTER_FF</term>
<nutsynopsis>
	"ThrustMaster FireStorm Dual Power 2 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>HID_FF && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you have a THRUSTMASTER FireStore Dual Power 2,
and want to enable force feedback support for it.
Note: if you say N here, this device will still be supported, but without
force feedback.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_HIDDEV</term>
<nutsynopsis>
	"/dev/hiddev raw HID device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_HID</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to support HID devices (from the USB
specification standpoint) that aren't strictly user interface
devices, like monitor controls and Uninterruptable Power Supplies.

This module supports these devices separately using a separate
event interface on /dev/usb/hiddevX (char 180:96 to 180:111).

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>

menu "USB HID Boot Protocol drivers"
<para>
	depends on
	<literal>USB!=n && USB_HID!=y</literal>
	</para>


<nutentry>
	<term>USB_KBD</term>
<nutsynopsis>
	"USB HIDBP Keyboard (simple Boot) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_HID!=y && USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here only if you are absolutely sure that you don't want
to use the generic HID driver for your USB keyboard and prefer
to use the keyboard in its limited Boot Protocol mode instead.

This is almost certainly not what you want.  This is mostly
useful for embedded applications or simple keyboards.

To compile this driver as a module, choose M here: the
module will be called usbkbd.

If even remotely unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_MOUSE</term>
<nutsynopsis>
	"USB HIDBP Mouse (simple Boot) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_HID!=y && USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here only if you are absolutely sure that you don't want
to use the generic HID driver for your USB mouse and prefer
to use the mouse in its limited Boot Protocol mode instead.

This is almost certainly not what you want.  This is mostly
useful for embedded applications or simple mice.

To compile this driver as a module, choose M here: the
module will be called usbmouse.

If even remotely unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>USB_AIPTEK</term>
<nutsynopsis>
	"Aiptek 6000U/8000U tablet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the USB version of the Aiptek 6000U
or Aiptek 8000U tablet.  Make sure to say Y to "Mouse support"
(CONFIG_INPUT_MOUSEDEV) and/or "Event interface support"
(CONFIG_INPUT_EVDEV) as well.

To compile this driver as a module, choose M here: the
module will be called aiptek.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_WACOM</term>
<nutsynopsis>
	"Wacom Intuos/Graphire tablet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the USB version of the Wacom Intuos
or Graphire tablet.  Make sure to say Y to "Mouse support"
(CONFIG_INPUT_MOUSEDEV) and/or "Event interface support"
(CONFIG_INPUT_EVDEV) as well.

To compile this driver as a module, choose M here: the
module will be called wacom.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ACECAD</term>
<nutsynopsis>
	"Acecad Flair tablet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the USB version of the Acecad Flair
tablet.  Make sure to say Y to "Mouse support"
(CONFIG_INPUT_MOUSEDEV) and/or "Event interface support"
(CONFIG_INPUT_EVDEV) as well.

To compile this driver as a module, choose M here: the
module will be called acecad.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_KBTAB</term>
<nutsynopsis>
	"KB Gear JamStudio tablet support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the USB version of the KB Gear
JamStudio tablet.  Make sure to say Y to "Mouse support"
(CONFIG_INPUT_MOUSEDEV) and/or "Event interface support"
(CONFIG_INPUT_EVDEV) as well.

To compile this driver as a module, choose M here: the
module will be called kbtab.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_POWERMATE</term>
<nutsynopsis>
	"Griffin PowerMate and Contour Jog support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use Griffin PowerMate or Contour Jog devices.
These are aluminum dials which can measure clockwise and anticlockwise
rotation.  The dial also acts as a pushbutton.  The base contains an LED
which can be instructed to pulse or to switch to a particular intensity.

You can download userspace tools from
<http://sowerbutts.com/powermate/>.

To compile this driver as a module, choose M here: the
module will be called powermate.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_MTOUCH</term>
<nutsynopsis>
	"MicroTouch USB Touchscreen Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a MicroTouch (Now 3M) USB 
Touchscreen controller.

See <file:Documentation/usb/mtouch.txt> for additional information.

To compile this driver as a module, choose M here: the
module will be called mtouchusb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ITMTOUCH</term>
<nutsynopsis>
	"ITM Touch USB Touchscreen Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a ITM Touch USB
Touchscreen controller.

This touchscreen is used in LG 1510SF monitors.

To compile this driver as a module, choose M here: the
module will be called itmtouch.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_EGALAX</term>
<nutsynopsis>
	"eGalax TouchKit USB Touchscreen Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a eGalax TouchKit USB
Touchscreen controller.

The driver has been tested on a Xenarc 700TSV monitor
with eGalax touchscreen.

Have a look at <http://linux.chapter7.ch/touchkit/> for
a usage description and the required user-space stuff.

To compile this driver as a module, choose M here: the
module will be called touchkitusb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_YEALINK</term>
<nutsynopsis>
	"Yealink usb-p1k voip phone"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to enable keyboard and LCD functions of the
Yealink usb-p1k usb phones. The audio part is enabled by the generic
usb sound driver, so you might want to enable that as well.

For information about how to use these additional functions, see
<file:Documentation/input/yealink.txt>.

To compile this driver as a module, choose M here: the module will be
called yealink.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_XPAD</term>
<nutsynopsis>
	"X-Box gamepad support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the X-Box pad with your computer.
Make sure to say Y to "Joystick support" (CONFIG_INPUT_JOYDEV)
and/or "Event interface support" (CONFIG_INPUT_EVDEV) as well.

For information about how to connect the X-Box pad to USB, see
<file:Documentation/input/xpad.txt>.

To compile this driver as a module, choose M here: the
module will be called xpad.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ATI_REMOTE</term>
<nutsynopsis>
	"ATI / X10 USB RF remote control"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use an ATI or X10 "Lola" USB remote control.
These are RF remotes with USB receivers. 
The ATI remote comes with many of ATI's All-In-Wonder video cards.
The X10 "Lola" remote is available at:
   <http://www.x10.com/products/lola_sg1.htm>
This driver provides mouse pointer, left and right mouse buttons, 
and maps all the other remote buttons to keypress events.

To compile this driver as a module, choose M here: the module will be
called ati_remote.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_KEYSPAN_REMOTE</term>
<nutsynopsis>
	"Keyspan DMR USB remote control (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a Keyspan DMR USB remote control.
Currently only the UIA-11 type of receiver has been tested.  The tag
on the receiver that connects to the USB port should have a P/N that
will tell you what type of DMR you have.  The UIA-10 type is not
supported at this time.  This driver maps all buttons to keypress
events.

To compile this driver as a module, choose M here: the module will
be called keyspan_remote.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_APPLETOUCH</term>
<nutsynopsis>
	"Apple USB Touchpad support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && INPUT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use an Apple USB Touchpad.

These are the touchpads that can be found on post-February 2005
Apple Powerbooks (prior models have a Synaptics touchpad connected
to the ADB bus).

This driver provides a basic mouse driver but can be interfaced
with the synaptics X11 driver to provide acceleration and
scrolling in X11.

For further information, see
<file:Documentation/input/appletouch.txt>.

To compile this driver as a module, choose M here: the
module will be called appletouch.
	</para>

</nutentrybody>
</nutentry>

comment "USB Imaging devices"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_MDC800</term>
<nutsynopsis>
	"USB Mustek MDC800 Digital Camera support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect this type of still camera to
your computer's USB port. This driver can be used with gphoto 0.4.3
and higher (look at <http://www.gphoto.org/>).
To use it create a device node with "mknod /dev/mustek c 180 32" and
configure it in your software.

To compile this driver as a module, choose M here: the
module will be called mdc800.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_MICROTEK</term>
<nutsynopsis>
	"Microtek X6USB scanner support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && SCSI</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want support for the Microtek X6USB and
possibly the Phantom 336CX, Phantom C6 and ScanMaker V6U(S)L.
Support for anything but the X6 is experimental.
Please report failures and successes.
The scanner will appear as a scsi generic device to the rest
of the system. Scsi support is required.
This driver can be compiled as a module, called microtek.
	</para>

</nutentrybody>
</nutentry>

comment "USB Multimedia devices"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_DABUSB</term>
<nutsynopsis>
	"DABUSB driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A Digital Audio Broadcasting (DAB) Receiver for USB and Linux
brought to you by the DAB-Team
<http://wwwbode.cs.tum.edu/Par/arch/dab/>.  This driver can be taken
as an example for URB-based bulk, control, and isochronous
transactions. URB's are explained in
<file:Documentation/usb/URB.txt>.

To compile this driver as a module, choose M here: the
module will be called dabusb.
	</para>

</nutentrybody>
</nutentry>

comment "Video4Linux support is needed for USB Multimedia device support"
<para>
	depends on
	<literal>USB && VIDEO_DEV=n</literal>
	</para>


<nutentry>
	<term>USB_VICAM</term>
<nutsynopsis>
	"USB 3com HomeConnect (aka vicam) support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have 3com homeconnect camera (vicam).

This driver uses the Video For Linux API. You must say Y or M to
"Video For Linux" (under Multimedia Devices) to use this driver.
Information on this API and pointers to "v4l" programs may be found
at <file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called vicam.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_DSBR</term>
<nutsynopsis>
	"D-Link USB FM radio support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect this type of radio to your
computer's USB port. Note that the audio is not digital, and
you must connect the line out connector to a sound card or a
set of speakers.

This driver uses the Video For Linux API.  You must enable
(Y or M in config) Video For Linux (under Character Devices)
to use this driver.  Information on this API and pointers to
"v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called dsbr100.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_IBMCAM</term>
<nutsynopsis>
	"USB IBM (Xirlink) C-it Camera support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a IBM "C-It" camera, also known as
"Xirlink PC Camera" to your computer's USB port.  For more
information, read <file:Documentation/usb/ibmcam.txt>.

This driver uses the Video For Linux API.  You must enable
(Y or M in config) Video For Linux (under Character Devices)
to use this driver.  Information on this API and pointers to
"v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called ibmcam.

This camera has several configuration options which
can be specified when you load the module. Read
<file:Documentation/usb/ibmcam.txt> to learn more.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_KONICAWC</term>
<nutsynopsis>
	"USB Konica Webcam support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want support for webcams based on a Konica
chipset. This is known to work with the Intel YC76 webcam.

This driver uses the Video For Linux API.  You must enable
(Y or M in config) Video For Linux (under Character Devices)
to use this driver.  Information on this API and pointers to
"v4l" programs may be found at
<file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called konicawc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OV511</term>
<nutsynopsis>
	"USB OV511 Camera support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect this type of camera to your
computer's USB port. See <file:Documentation/usb/ov511.txt> for more
information and for a list of supported cameras.

This driver uses the Video For Linux API. You must say Y or M to
"Video For Linux" (under Character Devices) to use this driver.
Information on this API and pointers to "v4l" programs may be found
at <file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called ov511.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SE401</term>
<nutsynopsis>
	"USB SE401 Camera support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect this type of camera to your
computer's USB port. See <file:Documentation/usb/se401.txt> for more
information and for a list of supported cameras.

This driver uses the Video For Linux API. You must say Y or M to
"Video For Linux" (under Multimedia Devices) to use this driver.
Information on this API and pointers to "v4l" programs may be found
at <file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called se401.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SN9C102</term>
<nutsynopsis>
	"USB SN9C10x PC Camera Controller support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want support for cameras based on SONiX SN9C101,
SN9C102 or SN9C103 PC Camera Controllers.

See <file:Documentation/usb/sn9c102.txt> for more informations.

This driver uses the Video For Linux API. You must say Y or M to
"Video For Linux" to use this driver.

To compile this driver as a module, choose M here: the
module will be called sn9c102.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_STV680</term>
<nutsynopsis>
	"USB STV680 (Pencam) Camera support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect this type of camera to your
computer's USB port. This includes the Pencam line of cameras.
See <file:Documentation/usb/stv680.txt> for more information and for
a list of supported cameras.

This driver uses the Video For Linux API. You must say Y or M to
"Video For Linux" (under Multimedia Devices) to use this driver.
Information on this API and pointers to "v4l" programs may be found
at <file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called stv680.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_W9968CF</term>
<nutsynopsis>
	"USB W996[87]CF JPEG Dual Mode Camera support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV && I2C && VIDEO_OVCAMCHIP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want support for cameras based on OV681 or
Winbond W9967CF/W9968CF JPEG USB Dual Mode Camera Chips.

This driver has an optional plugin, which is distributed as a
separate module only (released under GPL). It allows to use higher 
resolutions and framerates, but cannot be included in the official 
Linux kernel for performance purposes.

See <file:Documentation/usb/w9968cf.txt> for more informations.

This driver uses the Video For Linux and the I2C APIs. It needs the
OmniVision Camera Chip support as well. You must say Y or M to
"Video For Linux", "I2C Support" and "OmniVision Camera Chip 
support" to use this driver.

To compile this driver as a module, choose M here: the
module will be called w9968cf.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PWC</term>
<nutsynopsis>
	"USB Philips Cameras"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && VIDEO_DEV</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y or M here if you want to use one of these Philips & OEM
webcams:
 * Philips PCA645, PCA646
 * Philips PCVC675, PCVC680, PCVC690
 * Philips PCVC720/40, PCVC730, PCVC740, PCVC750
 * Askey VC010
 * Logitech QuickCam Pro 3000, 4000, 'Zoom', 'Notebook Pro' 
   and 'Orbit'/'Sphere'
 * Samsung MPC-C10, MPC-C30
 * Creative Webcam 5, Pro Ex
 * SOTEC Afina Eye
 * Visionite VCS-UC300, VCS-UM100

The PCA635, PCVC665 and PCVC720/20 are not supported by this driver
and never will be, but the 665 and 720/20 are supported by other 
drivers.

See <file:Documentation/usb/philips.txt> for more information and
installation instructions.

The built-in microphone is enabled by selecting USB Audio support.

This driver uses the Video For Linux API. You must say Y or M to
"Video For Linux" (under Character Devices) to use this driver.
Information on this API and pointers to "v4l" programs may be found
at <file:Documentation/video4linux/API.html>.

To compile this driver as a module, choose M here: the
module will be called pwc.
	</para>

</nutentrybody>
</nutentry>

comment "Networking support is needed for USB Network Adapter support"
<para>
	depends on
	<literal>USB && !NET</literal>
	</para>



menu "USB Network Adapters"
<para>
	depends on
	<literal>USB && NET</literal>
	</para>


<nutentry>
	<term>USB_CATC</term>
<nutsynopsis>
	"USB CATC NetMate-based Ethernet device support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you want to use one of the following 10Mbps USB Ethernet
device based on the EL1210A chip. Supported devices are:
Belkin F5U011
Belkin F5U111
CATC NetMate
CATC NetMate II
smartBridges smartNIC

This driver makes the adapter appear as a normal Ethernet interface,
typically on eth0, if it is the only ethernet device, or perhaps on
eth1, if you have a PCI or ISA ethernet card installed.

To compile this driver as a module, choose M here: the
module will be called catc.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_KAWETH</term>
<nutsynopsis>
	"USB KLSI KL5USB101-based ethernet device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use one of the following 10Mbps only
USB Ethernet adapters based on the KLSI KL5KUSB101B chipset:
3Com 3C19250
ADS USB-10BT
ATEN USB Ethernet
ASANTE USB To Ethernet Adapter
AOX Endpoints USB Ethernet
Correga K.K.
D-Link DSB-650C and DU-E10
Entrega / Portgear E45
I-O DATA USB-ET/T
Jaton USB Ethernet Device Adapter
Kingston Technology USB Ethernet Adapter
Linksys USB10T
Mobility USB-Ethernet Adapter
NetGear EA-101
Peracom Enet and Enet2
Portsmith Express Ethernet Adapter
Shark Pocket Adapter
SMC 2202USB
Sony Vaio port extender

This driver is likely to work with most 10Mbps only USB Ethernet
adapters, including some "no brand" devices. It does NOT work on
SmartBridges smartNIC or on Belkin F5U111 devices - you should use
the CATC NetMate driver for those. If you are not sure which one
you need, select both, and the correct one should be selected for
you.

This driver makes the adapter appear as a normal Ethernet interface,
typically on eth0, if it is the only ethernet device, or perhaps on
eth1, if you have a PCI or ISA ethernet card installed.

To compile this driver as a module, choose M here: the
module will be called kaweth.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PEGASUS</term>
<nutsynopsis>
	"USB Pegasus/Pegasus-II based ethernet device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you know you have Pegasus or Pegasus-II based adapter.
If in doubt then look at <file:drivers/usb/net/pegasus.h> for the
complete list of supported devices.

If your particular adapter is not in the list and you are _sure_ it
is Pegasus or Pegasus II based then send me
<petkan@users.sourceforge.net> vendor and device IDs.

To compile this driver as a module, choose M here: the
module will be called pegasus.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_RTL8150</term>
<nutsynopsis>
	"USB RTL8150 based ethernet device support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have RTL8150 based usb-ethernet adapter.
Send me <petkan@users.sourceforge.net> any comments you may have.
You can also check for updates at <http://pegasus2.sourceforge.net/>.

To compile this driver as a module, choose M here: the
module will be called rtl8150.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_USBNET</term>
<nutsynopsis>
	"Multi-purpose USB Networking Framework"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver supports several kinds of network links over USB,
with "minidrivers" built around a common network driver core
that supports deep queues for efficient transfers.  (This gives
better performance with small packets and at high speeds).

The USB host runs "usbnet", and the other end of the link might be:

- Another USB host, when using USB "network" or "data transfer"
  cables.  These are often used to network laptops to PCs, like
  "Laplink" parallel cables or some motherboards.  These rely
  on specialized chips from many suppliers.

- An intelligent USB gadget, perhaps embedding a Linux system.
  These include PDAs running Linux (iPaq, Yopy, Zaurus, and
  others), and devices that interoperate using the standard
  CDC-Ethernet specification (including many cable modems).

- Network adapter hardware (like those for 10/100 Ethernet) which
  uses this driver framework.

The link will appear with a name like "usb0", when the link is
a two-node link, or "eth0" for most CDC-Ethernet devices.  Those
two-node links are most easily managed with Ethernet Bridging
(CONFIG_BRIDGE) instead of routing.

For more information see <http://www.linux-usb.org/usbnet/>.

To compile this driver as a module, choose M here: the
module will be called usbnet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_AX8817X</term>
<nutsynopsis>
	"ASIX AX88xxx Based USB 2.0 Ethernet Adapters"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET && NET_ETHERNET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if USB && NET && USB_USBNET && NET_ETHERNET</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option adds support for ASIX AX88xxx based USB 2.0
10/100 Ethernet adapters.

This driver should work with at least the following devices:
  * Aten UC210T
  * ASIX AX88172
  * Billionton Systems, USB2AR
  * Buffalo LUA-U2-KTX
  * Corega FEther USB2-TX
  * D-Link DUB-E100
  * Hawking UF200
  * Linksys USB200M
  * Netgear FA120
  * Sitecom LN-029
  * Intellinet USB 2.0 Ethernet
  * ST Lab USB 2.0 Ethernet
  * TrendNet TU2-ET100

This driver creates an interface named "ethX", where X depends on
what other networking devices you have in use.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_CDCETHER</term>
<nutsynopsis>
	"CDC Ethernet support (smart devices such as cable modems)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET</literal>
	</para>

	<para>
	default value
	<literal>y if USB && NET && USB_USBNET</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option supports devices conforming to the Communication Device
Class (CDC) Ethernet Control Model, a specification that's easy to
implement in device firmware.  The CDC specifications are available
from <http://www.usb.org/>.

CDC Ethernet is an implementation option for DOCSIS cable modems
that support USB connectivity, used for non-Microsoft USB hosts.
The Linux-USB CDC Ethernet Gadget driver is an open implementation.
This driver should work with at least the following devices:

  * Ericsson PipeRider (all variants)
  * Motorola (DM100 and SB4100)
  * Broadcom Cable Modem (reference design)
  * Toshiba PCX1100U
  * ...

This driver creates an interface named "ethX", where X depends on
what other networking devices you have in use.  However, if the
IEEE 802 "local assignment" bit is set in the address, a "usbX"
name is used instead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_GL620A</term>
<nutsynopsis>
	"GeneSys GL620USB-A based cables"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you're using a host-to-host cable,
or PC2PC motherboard, with this chip.

Note that the half-duplex "GL620USB" is not supported.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_NET1080</term>
<nutsynopsis>
	"NetChip 1080 based cables (Laplink, ...)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET</literal>
	</para>

	<para>
	default value
	<literal>y if USB && NET && USB_USBNET</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you're using a host-to-host cable based
on this design:  one NetChip 1080 chip and supporting logic,
optionally with LEDs that indicate traffic
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_PLUSB</term>
<nutsynopsis>
	"Prolific PL-2301/2302 based cables"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option if you're using a host-to-host cable
with one of these chips.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_RNDIS_HOST</term>
<nutsynopsis>
	"Host for RNDIS devices (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables hosting "Remote NDIS" USB networking links,
as encouraged by Microsoft (instead of CDC Ethernet!) for use in
various devices that may only support this protocol.

Avoid using this protocol unless you have no better options.
The protocol specification is incomplete, and is controlled by
(and for) Microsoft; it isn't an "Open" ecosystem or market.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_CDC_SUBSET</term>
<nutsynopsis>
	"Simple USB Network Links (CDC Ethernet subset)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver module supports USB network devices that can work
without any device-specific information.  Select it if you have
one of these drivers.

Note that while many USB host-to-host cables can work in this mode,
that may mean not being able to talk to Win32 systems or more
commonly not being able to handle certain events (like replugging
the host on the other end) very well.  Also, these devices will
not generally have permanently assigned Ethernet addresses.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ALI_M5632</term>
<nutsynopsis>
	"ALi M5632 based 'USB 2.0 Data Link' cables"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choose this option if you're using a host-to-host cable
based on this design, which supports USB 2.0 high speed.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_AN2720</term>
<nutsynopsis>
	"AnchorChips 2720 based cables (Xircom PGUNET, ...)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choose this option if you're using a host-to-host cable
based on this design.  Note that AnchorChips is now a
Cypress brand.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_BELKIN</term>
<nutsynopsis>
	"eTEK based host-to-host cables (Advance, Belkin, ...)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>

	<para>
	default value
	<literal>y if USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choose this option if you're using a host-to-host cable
based on this design:  two NetChip 2890 chips and an Atmel
microcontroller, with LEDs that indicate traffic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ARMLINUX</term>
<nutsynopsis>
	"Embedded ARM Linux links (iPaq, ...)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>

	<para>
	default value
	<literal>y if USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choose this option to support the "usb-eth" networking driver
used by most of the ARM Linux community with device controllers
such as the SA-11x0 and PXA-25x UDCs, or the tftp capabilities
in some PXA versions of the "blob" boot loader.

Linux-based "Gumstix" PXA-25x based systems use this protocol
to talk with other Linux systems.

Although the ROMs shipped with Sharp Zaurus products use a
different link level framing protocol, you can have them use
this simpler protocol by installing a different kernel.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_EPSON2888</term>
<nutsynopsis>
	"Epson 2888 based firmware (DEVELOPMENT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_NET_CDC_SUBSET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Choose this option to support the usb networking links used
by some sample firmware from Epson.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET_ZAURUS</term>
<nutsynopsis>
	"Sharp Zaurus (stock ROMs) and compatible"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && USB_USBNET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if USB && NET && USB_USBNET</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Choose this option to support the usb networking links used by
Zaurus models like the SL-5000D, SL-5500, SL-5600, A-300, B-500.
This also supports some related device firmware, as used in some
PDAs from Olympus and some cell phones from Motorola.

If you install an alternate ROM image, such as the Linux 2.6 based
versions of OpenZaurus, you should no longer need to support this
protocol.  Only the "eth-fd" or "net_fd" drivers in these devices
really need this non-conformant variant of CDC Ethernet (or in
some cases CDC MDLM) protocol, not "g_ether".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ZD1201</term>
<nutsynopsis>
	"USB ZD1201 based Wireless device support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && NET && NET_RADIO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y if you want to use wireless LAN adapters based on the ZyDAS
ZD1201 chip.

This driver makes the adapter appear as a normal Ethernet interface,
typically on wlan0.

The zd1201 device requires external firmware to be loaded.
This can be found at http://linux-lc100020.sourceforge.net/

To compile this driver as a module, choose M here: the
module will be called zd1201.
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>USB_MON</term>
<nutsynopsis>
	"USB Monitor"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	default value
	<literal>y if USB</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, a component which captures the USB traffic
between peripheral-specific drivers and HC drivers will be built.
For more information, see <file:Documentation/usb/usbmon.txt>.

This is somewhat experimental at this time, but it should be safe.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>

comment "USB port drivers"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_USS720</term>
<nutsynopsis>
	"USS720 parport driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && PARPORT</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for USB parallel port adapters that use the Lucent
Technologies USS-720 chip. These cables are plugged into your USB
port and provide USB compatibility to peripherals designed with
parallel port interfaces.

The chip has two modes: automatic mode and manual mode. In automatic
mode, it looks to the computer like a standard USB printer. Only
printers may be connected to the USS-720 in this mode. The generic
USB printer driver ("USB Printer support", above) may be used in
that mode, and you can say N here if you want to use the chip only
in this mode.

Manual mode is not limited to printers, any parallel port
device should work. This driver utilizes manual mode.
Note however that some operations are three orders of magnitude
slower than on a PCI/ISA Parallel Port, so timing critical
applications might not work.

Say Y here if you own an USS-720 USB->Parport cable and intend to
connect anything other than a printer to it.

To compile this driver as a module, choose M here: the
module will be called uss720.
	</para>

</nutentrybody>
</nutentry>

menu "USB Serial Converter support"
<para>
	depends on
	<literal>USB!=n</literal>
	</para>


<nutentry>
	<term>USB_SERIAL</term>
<nutsynopsis>
	"USB Serial Converter support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a USB device that provides normal serial
ports, or acts like a serial device, and you want to connect it to
your USB bus.

Please read <file:Documentation/usb/usb-serial.txt> for more
information on the specifics of the different devices that are
supported, and on how to use them.

To compile this driver as a module, choose M here: the
module will be called usbserial.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_CONSOLE</term>
<nutsynopsis>
	"USB Serial Console device support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL=y && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, it will be possible to use a USB to serial
converter port as the system console (the system console is the
device which receives all kernel messages and warnings and which
allows logins in single user mode). This could be useful if some
terminal or printer is connected to that serial port.

Even if you say Y here, the currently visible virtual console
(/dev/tty0) will still be used as the system console by default, but
you can alter that using a kernel command line option such as
"console=ttyUSB0". (Try "man bootparam" or see the documentation of
your boot loader (lilo or loadlin) about how to pass options to the
kernel at boot time.)

If you don't have a VGA card installed and you say Y here, the
kernel will automatically use the first USB to serial converter
port, /dev/ttyUSB0, as system console.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_GENERIC</term>
<nutsynopsis>
	"USB Generic Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to use the generic USB serial driver.  Please
read <file:Documentation/usb/usb-serial.txt> for more information on
using this driver.  It is recommended that the "USB Serial converter
support" be compiled as a module for this driver to be used
properly.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_AIRPRIME</term>
<nutsynopsis>
	"USB AirPrime CDMA Wireless Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a AirPrime CDMA Wireless PC card.

To compile this driver as a module, choose M here: the
module will be called airprime.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_BELKIN</term>
<nutsynopsis>
	"USB Belkin and Peracom Single Port Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a Belkin USB Serial single port
adaptor (F5U103 is one of the model numbers) or the Peracom single
port USB to serial adapter.

To compile this driver as a module, choose M here: the
module will be called belkin_sa.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_WHITEHEAT</term>
<nutsynopsis>
	"USB ConnectTech WhiteHEAT Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && BROKEN_ON_SMP</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a ConnectTech WhiteHEAT 4 port
USB to serial converter device.

To compile this driver as a module, choose M here: the
module will be called whiteheat.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_DIGI_ACCELEPORT</term>
<nutsynopsis>
	"USB Digi International AccelePort USB Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use Digi AccelePort USB 2 or 4 devices,
2 port (plus parallel port) and 4 port USB serial converters.  The
parallel port on the USB 2 appears as a third serial port on Linux.
The Digi Acceleport USB 8 is not yet supported by this driver.

This driver works under SMP with the usb-uhci driver.  It does not
work under SMP with the uhci driver.

To compile this driver as a module, choose M here: the
module will be called digi_acceleport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_CP2101</term>
<nutsynopsis>
	"USB CP2101 UART Bridge Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a CP2101/CP2102 based USB to RS232
converter.

To compile this driver as a module, choose M here: the
module will be called cp2101.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_CYPRESS_M8</term>
<nutsynopsis>
	"USB Cypress M8 USB Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a device that contains the Cypress
USB to Serial microcontroller, such as the DeLorme Earthmate GPS.

      Attempted SMP support... send bug reports!

Supported microcontrollers in the CY4601 family are:
      CY7C63741 CY7C63742 CY7C63743 CY7C64013

To compile this driver as a module, choose M here: the
module will be called cypress_m8.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_EMPEG</term>
<nutsynopsis>
	"USB Empeg empeg-car Mark I/II Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect to your Empeg empeg-car Mark I/II
mp3 player via USB.  The driver uses a single ttyUSB{0,1,2,...}
device node.  See <file:Documentation/usb/usb-serial.txt> for more
tidbits of information.

To compile this driver as a module, choose M here: the
module will be called empeg.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_FTDI_SIO</term>
<nutsynopsis>
	"USB FTDI Single Port Serial Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a FTDI SIO single port USB to serial
converter device. The implementation I have is called the USC-1000.
This driver has also be tested with the 245 and 232 devices.

See <http://ftdi-usb-sio.sourceforge.net/> for more
information on this driver and the device.

To compile this driver as a module, choose M here: the
module will be called ftdi_sio.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_VISOR</term>
<nutsynopsis>
	"USB Handspring Visor / Palm m50x / Sony Clie Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect to your HandSpring Visor, Palm
m500 or m505 through its USB docking station. See
<http://usbvisor.sourceforge.net/> for more information on using this
driver.

To compile this driver as a module, choose M here: the
module will be called visor.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_IPAQ</term>
<nutsynopsis>
	"USB PocketPC PDA Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect to your Compaq iPAQ, HP Jornada
or any other PDA running Windows CE 3.0 or PocketPC 2002
using a USB cradle/cable. For information on using the driver,
read <file:Documentation/usb/usb-serial.txt>.

To compile this driver as a module, choose M here: the
module will be called ipaq.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_IR</term>
<nutsynopsis>
	"USB IR Dongle Serial Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to enable simple serial support for USB IrDA
devices.  This is useful if you do not want to use the full IrDA
stack.

To compile this driver as a module, choose M here: the
module will be called ir-usb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_EDGEPORT</term>
<nutsynopsis>
	"USB Inside Out Edgeport Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use any of the following devices from
Inside Out Networks (Digi):
Edgeport/4
Rapidport/4
Edgeport/4t
Edgeport/2
Edgeport/4i
Edgeport/2i
Edgeport/421
Edgeport/21
Edgeport/8
Edgeport/8 Dual
Edgeport/2D8
Edgeport/4D8
Edgeport/8i
Edgeport/2 DIN
Edgeport/4 DIN
Edgeport/16 Dual

To compile this driver as a module, choose M here: the
module will be called io_edgeport.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_EDGEPORT_TI</term>
<nutsynopsis>
	"USB Inside Out Edgeport Serial Driver (TI devices)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use any of the devices from Inside Out
Networks (Digi) that are not supported by the io_edgeport driver.
This includes the Edgeport/1 device.

To compile this driver as a module, choose M here: the
module will be called io_ti.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_GARMIN</term>
<nutsynopsis>
	"USB Garmin GPS driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect to your Garmin GPS.
Should work with most Garmin GPS devices which have a native USB port.

See <http://sourceforge.net/projects/garmin-gps> for the latest
version of the driver.

To compile this driver as a module, choose M here: the
module will be called garmin_gps.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_IPW</term>
<nutsynopsis>
	"USB IPWireless (3G UMTS TDD) Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a IPWireless USB modem such as
the ones supplied by Axity3G/Sentech South Africa.

To compile this driver as a module, choose M here: the
module will be called ipw.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_PDA</term>
<nutsynopsis>
	"USB Keyspan PDA Single Port Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a Keyspan PDA single port USB to
serial converter device.  This driver makes use of firmware
developed from scratch by Brian Warner.

To compile this driver as a module, choose M here: the
module will be called keyspan_pda.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN</term>
<nutsynopsis>
	"USB Keyspan USA-xxx Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use Keyspan USB to serial converter
devices.  This driver makes use of Keyspan's official firmware
and was developed with their support.  You must also include
firmware to support your particular device(s).

See <http://misc.nu/hugh/keyspan.html> for more information.

To compile this driver as a module, choose M here: the
module will be called keyspan.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_MPR</term>
<nutsynopsis>
	"USB Keyspan MPR Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the Keyspan MPR converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA28</term>
<nutsynopsis>
	"USB Keyspan USA-28 Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-28 converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA28X</term>
<nutsynopsis>
	"USB Keyspan USA-28X Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-28X converter.
Be sure you have a USA-28X, there are also 28XA and 28XB
models, the label underneath has the actual part number.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA28XA</term>
<nutsynopsis>
	"USB Keyspan USA-28XA Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-28XA converter.
Be sure you have a USA-28XA, there are also 28X and 28XB
models, the label underneath has the actual part number.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA28XB</term>
<nutsynopsis>
	"USB Keyspan USA-28XB Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-28XB converter.
Be sure you have a USA-28XB, there are also 28X and 28XA
models, the label underneath has the actual part number.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA19</term>
<nutsynopsis>
	"USB Keyspan USA-19 Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-19 converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA18X</term>
<nutsynopsis>
	"USB Keyspan USA-18X Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-18X converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA19W</term>
<nutsynopsis>
	"USB Keyspan USA-19W Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-19W converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA19QW</term>
<nutsynopsis>
	"USB Keyspan USA-19QW Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-19QW converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA19QI</term>
<nutsynopsis>
	"USB Keyspan USA-19QI Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-19QI converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA49W</term>
<nutsynopsis>
	"USB Keyspan USA-49W Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-49W converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KEYSPAN_USA49WLC</term>
<nutsynopsis>
	"USB Keyspan USA-49WLC Firmware"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_KEYSPAN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to include firmware for the USA-49WLC converter.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KLSI</term>
<nutsynopsis>
	"USB KL5KUSB105 (Palmconnect) Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a KL5KUSB105 - based single port
serial adapter. The most widely known -- and currently the only
tested -- device in this category is the PalmConnect USB Serial
adapter sold by Palm Inc. for use with their Palm III and Palm V
series PDAs.

Please read <file:Documentation/usb/usb-serial.txt> for more
information.

To compile this driver as a module, choose M here: the
module will be called kl5kusb105.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_KOBIL_SCT</term>
<nutsynopsis>
	"USB KOBIL chipcard reader"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use one of the following KOBIL USB chipcard
readers:

  - USB TWIN
  - KAAN Standard Plus
  - KAAN SIM
  - SecOVID Reader Plus
  - B1 Professional
  - KAAN Professional

Note that you need a current CT-API.
To compile this driver as a module, choose M here: the
module will be called kobil_sct.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_MCT_U232</term>
<nutsynopsis>
	"USB MCT Single Port Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a USB Serial single port adapter from
Magic Control Technology Corp. (U232 is one of the model numbers).

This driver also works with Sitecom U232-P25 and D-Link DU-H3SP USB
BAY devices.

To compile this driver as a module, choose M here: the
module will be called mct_u232.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_PL2303</term>
<nutsynopsis>
	"USB Prolific 2303 Single Port Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the PL2303 USB Serial single port
adapter from Prolific.

To compile this driver as a module, choose M here: the
module will be called pl2303.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_HP4X</term>
<nutsynopsis>
	"USB HP4x Calculators support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use an Hewlett-Packard 4x Calculator.

To compile this driver as a module, choose M here: the
module will be called hp4x.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_SAFE</term>
<nutsynopsis>
	"USB Safe Serial (Encapsulated) Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_SAFE_PADDED</term>
<nutsynopsis>
	"USB Secure Encapsulated Driver - Padded"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_SERIAL_SAFE</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_TI</term>
<nutsynopsis>
	"USB TI 3410/5052 Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the TI USB 3410 or 5052
serial devices.

To compile this driver as a module, choose M here: the
module will be called ti_usb_3410_5052.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_CYBERJACK</term>
<nutsynopsis>
	"USB REINER SCT cyberJack pinpad/e-com chipcard reader (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a cyberJack pinpad/e-com USB chipcard
reader. This is an interface to ISO 7816 compatible contactbased
chipcards, e.g. GSM SIMs.

To compile this driver as a module, choose M here: the
module will be called cyberjack.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_XIRCOM</term>
<nutsynopsis>
	"USB Xircom / Entregra Single Port Serial Driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a Xircom or Entregra single port USB to
serial converter device.  This driver makes use of firmware
developed from scratch by Brian Warner.

To compile this driver as a module, choose M here: the
module will be called keyspan_pda.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_OPTION</term>
<nutsynopsis>
	"USB Option PCMCIA serial driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && USB_OHCI_HCD && PCCARD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use an Option card. This is a
GSM card, controlled by three serial ports which are connected
via an OHCI adapter located on a PC card.

To compile this driver as a module, choose M here: the
module will be called option.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SERIAL_OMNINET</term>
<nutsynopsis>
	"USB ZyXEL omni.net LCD Plus Driver (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB!=n && USB_SERIAL && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use a ZyXEL omni.net LCD ISDN TA.

To compile this driver as a module, choose M here: the
module will be called omninet.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_EZUSB</term>
	<para>
	default value
	<literal>y if USB && (USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

comment "USB Miscellaneous drivers"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_EMI62</term>
<nutsynopsis>
	"EMI 6|2m USB Audio interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver loads firmware to Emagic EMI 6|2m low latency USB
Audio and Midi interface.

After firmware load the device is handled with standard linux
USB Audio driver.

This code is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called audio. If you want to compile it as a
module, say M here and read <file:Documentation/kbuild/modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_EMI26</term>
<nutsynopsis>
	"EMI 2|6 USB Audio interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver loads firmware to Emagic EMI 2|6 low latency USB
Audio interface.

After firmware load the device is handled with standard linux
USB Audio driver.

To compile this driver as a module, choose M here: the
module will be called emi26.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_AUERSWALD</term>
<nutsynopsis>
	"USB Auerswald ISDN support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect an Auerswald USB ISDN Device
to your computer's USB port.

To compile this driver as a module, choose M here: the
module will be called auerswald.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_RIO500</term>
<nutsynopsis>
	"USB Diamond Rio500 support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a USB Rio500 mp3 player to your
computer's USB port. Please read <file:Documentation/usb/rio.txt>
for more information.

To compile this driver as a module, choose M here: the
module will be called rio500.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_LEGOTOWER</term>
<nutsynopsis>
	"USB Lego Infrared Tower support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a USB Lego Infrared Tower to your
computer's USB port.

This code is also available as a module ( = code which can be
inserted in and removed from the running kernel whenever you want).
The module will be called legousbtower. If you want to compile it as
a module, say M here and read
<file:Documentation/kbuild/modules.txt>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_LCD</term>
<nutsynopsis>
	"USB LCD driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect an USBLCD to your computer's
USB port. The USBLCD is a small USB interface board for
alphanumeric LCD modules. See <http://www.usblcd.de/> for more
information.

To compile this driver as a module, choose M here: the
module will be called usblcd.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_LED</term>
<nutsynopsis>
	"USB LED driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect an USBLED device to your 
computer's USB port.

To compile this driver as a module, choose M here: the
module will be called usbled.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_CYTHERM</term>
<nutsynopsis>
	"Cypress USB thermometer driver support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a Cypress USB thermometer
device to your computer's USB port. This device is also known
as the Cypress USB Starter kit or demo board. The Elektor
magazine published a modified version of this device in issue 
#291.

To compile this driver as a module, choose M here: the
module will be called cytherm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PHIDGETKIT</term>
<nutsynopsis>
	"USB PhidgetKit support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a PhidgetKit USB device from
Phidgets Inc.

To compile this driver as a module, choose M here: the
module will be called phidgetkit.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PHIDGETSERVO</term>
<nutsynopsis>
	"USB PhidgetServo support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect an 1 or 4 Motor PhidgetServo 
servo controller version 2.0 or 3.0.

Phidgets Inc. has a web page at <http://www.phidgets.com/>.

To compile this driver as a module, choose M here: the
module will be called phidgetservo.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_IDMOUSE</term>
<nutsynopsis>
	"Siemens ID USB Mouse Fingerprint sensor support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to use the fingerprint sensor on
the Siemens ID Mouse. There is also a Siemens ID Mouse
_Professional_, which has not been tested with this driver,
but uses the same sensor and may therefore work.

This driver creates an entry "/dev/idmouseX" or "/dev/usb/idmouseX",
which can be used by, e.g.,"cat /dev/idmouse0 > fingerprint.pnm".

See also <http://www.fs.tum.de/~echtler/idmouse/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SISUSBVGA</term>
<nutsynopsis>
	"USB 2.0 SVGA dongle support (Net2280/SiS315)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_EHCI_HCD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you intend to attach a USB2VGA dongle based on a
Net2280 and a SiS315 chip.

Note that this device requires a USB 2.0 host controller. It will not
work with USB 1.x controllers.

To compile this driver as a module, choose M here; the module will be
called sisusbvga. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SISUSBVGA_CON</term>
<nutsynopsis>
	"Text console and mode switching support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VT && USB_SISUSBVGA</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want a VGA text console via the USB dongle or
want to support userland applications that utilize the driver's
display mode switching capabilities.

Note that this console supports VGA/EGA text mode only.

By default, the console part of the driver will not kick in when
the driver is initialized. If you want the driver to take over
one or more of the consoles, you need to specify the number of
the first and last consoles (starting at 1) as driver parameters.

For example, if the driver is compiled as a module:

   modprobe sisusbvga first=1 last=5

If you use hotplug, add this to your modutils config files with
the "options" keyword, such as eg.

   options sisusbvga first=1 last=5

If the driver is compiled into the kernel image, the parameters
must be given in the kernel command like, such as

   sisusbvga.first=1 sisusbvga.last=5
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_LD</term>
<nutsynopsis>
	"USB LD driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for generic USB devices that use interrupt transfers,
like LD Didactic's USB devices.

To compile this driver as a module, choose M here: the
module will be called ldusb.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_TEST</term>
<nutsynopsis>
	"USB testing driver (DEVELOPMENT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_DEVICEFS && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver is for testing host controller software.  It is used
with specialized device firmware for regression and stress testing,
to help prevent problems from cropping up with "real" drivers.

See <http://www.linux-usb.org/usbtest/> for more information,
including sample test device firmware and "how to use it".
	</para>

</nutentrybody>
</nutentry>

menu "USB DSL modem support"
<para>
	depends on
	<literal>USB</literal>
	</para>


<nutentry>
	<term>USB_ATM</term>
<nutsynopsis>
	"USB DSL modem support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && ATM</literal>
	</para>

  unknown prop 6!
	<para>
	default value
	<literal>n if USB && ATM</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you want to connect a USB Digital Subscriber Line (DSL)
modem to your computer's USB port.  You will then need to choose your
modem from the list below.

To compile this driver as a module, choose M here: the
module will be called usbatm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_SPEEDTOUCH</term>
<nutsynopsis>
	"Speedtouch USB support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_ATM</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an SpeedTouch USB or SpeedTouch 330
modem.  In order to use your modem you will need to install the 
two parts of the firmware, extracted by the user space tools; see
<http://www.linux-usb.org/SpeedTouch/> for details.

To compile this driver as a module, choose M here: the
module will be called speedtch.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_CXACRU</term>
<nutsynopsis>
	"Conexant AccessRunner USB support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_ATM</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have an ADSL USB modem based on the Conexant
AccessRunner chipset.  In order to use your modem you will need to
install the firmware, extracted by the user space tools; see
<http://accessrunner.sourceforge.net/> for details.

To compile this driver as a module, choose M here: the
module will be called cxacru.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_XUSBATM</term>
<nutsynopsis>
	"Other USB DSL modem support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && USB_ATM</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here if you have a DSL USB modem not explicitly supported by
another USB DSL drivers.  In order to use your modem you will need to
pass the vendor ID, product ID, and endpoint numbers for transmission
and reception as module parameters.  You may need to initialize the
the modem using a user space utility (a firmware loader for example).

To compile this driver as a module, choose M here: the
module will be called xusbatm.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "USB Gadget Support"

<nutentry>
	<term>USB_GADGET</term>
<nutsynopsis>
	"Support for USB Gadgets"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
USB is a master/slave protocol, organized with one master
host (such as a PC) controlling up to 127 peripheral devices.
The USB hardware is asymmetric, which makes it easier to set up:
you can't connect a "to-the-host" connector to a peripheral.

Linux can run in the host, or in the peripheral.  In both cases
you need a low level bus controller driver, and some software
talking to it.  Peripheral controllers are often discrete silicon,
or are integrated with the CPU in a microcontroller.  The more
familiar host side controllers have names like like "EHCI", "OHCI",
or "UHCI", and are usually integrated into southbridges on PC
motherboards.

Enable this configuration option if you want to run Linux inside
a USB peripheral device.  Configure one hardware driver for your
peripheral/device side bus controller, and a "gadget driver" for
your peripheral protocol.  (If you use modular gadget drivers,
you may configure more than one.)

If in doubt, say "N" and don't enable these drivers; most people
don't have this kind of hardware (except maybe inside Linux PDAs).

For more information, see <http://www.linux-usb.org/gadget> and
the kernel DocBook documentation for this API.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_DEBUG_FILES</term>
<nutsynopsis>
	"Debugging information files"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_GADGET && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Some of the drivers in the "gadget" framework can expose
debugging information in files such as /proc/driver/udc
(for a peripheral controller).  The information in these
files may help when you're troubleshooting or bringing up a
driver on a new board.   Enable these files by choosing "Y"
here.  If in doubt, or to conserve kernel memory, say "N".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_SELECTED</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"USB Peripheral Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_GADGET</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
A USB device uses a controller to talk to its host.
Systems should have only one such upstream link.
Many controller drivers are platform-specific; these
often need board-specific hooks.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_NET2280</term>
<nutsynopsis>
	"NetChip 2280"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && PCI</literal>
	</para>

  unknown prop 6!
  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NetChip 2280 is a PCI based USB peripheral controller which
supports both full and high speed USB 2.0 data transfers.  

It has six configurable endpoints, as well as endpoint zero
(for control transfers) and several endpoints with dedicated
functions.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "net2280" and force all
gadget drivers to also be dynamically linked.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_NET2280</term>
	<para>
	default value
	<literal>USB_GADGET if <choice> && USB_GADGET_NET2280</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_PXA2XX</term>
<nutsynopsis>
	"PXA 25x or IXP 4xx"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Intel's PXA 25x series XScale ARM-5TE processors include
an integrated full speed USB 1.1 device controller.  The
controller in the IXP 4xx series is register-compatible.

It has fifteen fixed-function endpoints, as well as endpoint
zero (for control transfers).

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "pxa2xx_udc" and force all
gadget drivers to also be dynamically linked.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PXA2XX</term>
	<para>
	default value
	<literal>USB_GADGET if <choice> && USB_GADGET_PXA2XX</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_PXA2XX_SMALL</term>
	<para>
	default value
	<literal>n if <choice> && USB_GADGET_PXA2XX && USB_ETH_RNDIS</literal>
	</para>


	<para>
	default value
	<literal>y if <choice> && USB_GADGET_PXA2XX && USB_ZERO</literal>
	</para>


	<para>
	default value
	<literal>y if <choice> && USB_GADGET_PXA2XX && USB_ETH</literal>
	</para>


	<para>
	default value
	<literal>y if <choice> && USB_GADGET_PXA2XX && USB_G_SERIAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_GOKU</term>
<nutsynopsis>
	"Toshiba TC86C001 'Goku-S'"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && PCI</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Toshiba TC86C001 is a PCI device which includes controllers
for full speed USB devices, IDE, I2C, SIO, plus a USB host (OHCI).

The device controller has three configurable (bulk or interrupt)
endpoints, plus endpoint zero (for control transfers).

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "goku_udc" and to force all
gadget drivers to also be dynamically linked.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GOKU</term>
	<para>
	default value
	<literal>USB_GADGET if <choice> && USB_GADGET_GOKU</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_LH7A40X</term>
<nutsynopsis>
	"LH7A40X"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && ARCH_LH7A40X</literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This driver provides USB Device Controller driver for LH7A40x
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_LH7A40X</term>
	<para>
	default value
	<literal>USB_GADGET if <choice> && USB_GADGET_LH7A40X</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_OMAP</term>
<nutsynopsis>
	"OMAP USB Device Controller"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && ARCH_OMAP</literal>
	</para>

  unknown prop 6!
  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Many Texas Instruments OMAP processors have flexible full
speed USB device controllers, with support for up to 30
endpoints (plus endpoint zero).  This driver supports the
controller in the OMAP 1611, and should work with controllers
in other OMAP processors too, given minor tweaks.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "omap_udc" and force all
gadget drivers to also be dynamically linked.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OMAP</term>
	<para>
	default value
	<literal>USB_GADGET if <choice> && USB_GADGET_OMAP</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_OTG</term>
<nutsynopsis>
	"OTG Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The most notable feature of USB OTG is support for a
"Dual-Role" device, which can act as either a device
or a host.  The initial role choice can be changed
later, when two dual-role devices talk to each other.

Select this only if your OMAP board has a Mini-AB connector.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_DUMMY_HCD</term>
<nutsynopsis>
	"Dummy HCD (DEVELOPMENT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && USB && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This host controller driver emulates USB, looping all data transfer
requests back to a USB "gadget driver" in the same host.  The host
side is the master; the gadget side is the slave.  Gadget drivers
can be high, full, or low speed; and they have access to endpoints
like those from NET2280, PXA2xx, or SA1100 hardware.

This may help in some stages of creating a driver to embed in a
Linux device, since it lets you debug several parts of the gadget
driver without its hardware or drivers being involved.

Since such a gadget side driver needs to interoperate with a host
side Linux-USB device driver, this may help to debug both sides
of a USB protocol stack.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "dummy_hcd" and force all
gadget drivers to also be dynamically linked.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_DUMMY_HCD</term>
	<para>
	default value
	<literal>USB_GADGET if <choice> && USB_GADGET_DUMMY_HCD</literal>
	</para>


  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGET_DUALSPEED</term>
	<para>
	default value
	<literal>n if USB_GADGET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Means that gadget drivers should include extra descriptors
and code to handle dual-speed controllers.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"USB Gadget Drivers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB_GADGET && USB_GADGET_SELECTED</literal>
	</para>

	<para>
	default value
	<literal>USB_ETH if USB_GADGET && USB_GADGET_SELECTED</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
A Linux "Gadget Driver" talks to the USB Peripheral Controller
driver through the abstract "gadget" API.  Some other operating
systems call these "client" drivers, of which "class drivers"
are a subset (implementing a USB device class specification).
A gadget driver implements one or more USB functions using
the peripheral hardware.

Gadget drivers are hardware-neutral, or "platform independent",
except that they sometimes must understand quirks or limitations
of the particular controllers they work with.  For example, when
a controller doesn't support alternate configurations or provide
enough of the right types of endpoints, the gadget driver might
not be able work with that controller, or might need to implement
a less common variant of a device class protocol.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ZERO</term>
<nutsynopsis>
	"Gadget Zero (DEVELOPMENT)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && EXPERIMENTAL</literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Gadget Zero is a two-configuration device.  It either sinks and
sources bulk data; or it loops back a configurable number of
transfers.  It also implements control requests, for "chapter 9"
conformance.  The driver needs only two bulk-capable endpoints, so
it can work on top of most device-side usb controllers.  It's
useful for testing, and is also a working example showing how
USB "gadget drivers" can be written.

Make this be the first driver you try using on top of any new
USB peripheral controller driver.  Then you can use host-side
test software, like the "usbtest" driver, to put your hardware
and its driver through a basic set of functional tests.

Gadget Zero also works with the host-side "usb-skeleton" driver,
and with many kinds of host-side test software.  You may need
to tweak product and vendor IDs before host software knows about
this device, and arrange to select an appropriate configuration.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "g_zero".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ZERO_HNPTEST</term>
<nutsynopsis>
	"HNP Test Device"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && USB_ZERO && USB_OTG</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
You can configure this device to enumerate using the device
identifiers of the USB-OTG test device.  That means that when
this gadget connects to another OTG device, with this one using
the "B-Peripheral" role, that device will use HNP to let this
one serve as the USB host instead (in the "B-Host" role).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ETH</term>
<nutsynopsis>
	"Ethernet Gadget (with CDC Ethernet support)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && NET</literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver implements Ethernet style communication, in either
of two ways:

 - The "Communication Device Class" (CDC) Ethernet Control Model.
   That protocol is often avoided with pure Ethernet adapters, in
   favor of simpler vendor-specific hardware, but is widely
   supported by firmware for smart network devices.

 - On hardware can't implement that protocol, a simple CDC subset
   is used, placing fewer demands on USB.

RNDIS support is a third option, more demanding than that subset.

Within the USB device, this gadget driver exposes a network device
"usbX", where X depends on what other networking devices you have.
Treat it like a two-node Ethernet link:  host, and gadget.

The Linux-USB host-side "usbnet" driver interoperates with this
driver, so that deep I/O queues can be supported.  On 2.4 kernels,
use "CDCEther" instead, if you're using the CDC option. That CDC
mode should also interoperate with standard CDC Ethernet class
drivers on other host operating systems.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "g_ether".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_ETH_RNDIS</term>
<nutsynopsis>
	"RNDIS support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && USB_ETH && EXPERIMENTAL</literal>
	</para>

	<para>
	default value
	<literal>y if <choice> && USB_ETH && EXPERIMENTAL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Microsoft Windows XP bundles the "Remote NDIS" (RNDIS) protocol,
and Microsoft provides redistributable binary RNDIS drivers for
older versions of Windows.

If you say "y" here, the Ethernet gadget driver will try to provide
a second device configuration, supporting RNDIS to talk to such
Microsoft USB hosts.

To make MS-Windows work with this, use Documentation/usb/linux.inf
as the "driver info file".  For versions of MS-Windows older than
XP, you'll need to download drivers from Microsoft's website; a URL
is given in comments found in that info file.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_GADGETFS</term>
<nutsynopsis>
	"Gadget Filesystem (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && EXPERIMENTAL</literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This driver provides a filesystem based API that lets user mode
programs implement a single-configuration USB device, including
endpoint I/O and control requests that don't relate to enumeration.
All endpoints, transfer speeds, and transfer types supported by
the hardware are available, through read() and write() calls.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "gadgetfs".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_FILE_STORAGE</term>
<nutsynopsis>
	"File-backed Storage Gadget"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The File-backed Storage Gadget acts as a USB Mass Storage
disk drive.  As its storage repository it can use a regular
file or a block device (in much the same way as the "loop"
device driver), specified as a module parameter.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "g_file_storage".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_FILE_STORAGE_TEST</term>
<nutsynopsis>
	"File-backed Storage Gadget testing version"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice> && USB_FILE_STORAGE</literal>
	</para>

	<para>
	default value
	<literal>n if <choice> && USB_FILE_STORAGE</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say "y" to generate the larger testing version of the
File-backed Storage Gadget, useful for probing the
behavior of USB Mass Storage hosts.  Not needed for
normal operation.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>USB_G_SERIAL</term>
<nutsynopsis>
	"Serial Gadget (with CDC ACM support)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Serial Gadget talks to the Linux-USB generic serial driver.
This driver supports a CDC-ACM module option, which can be used
to interoperate with MS-Windows hosts or with the Linux-USB
"cdc-acm" driver.

Say "y" to link the driver statically, or "m" to build a
dynamically linked module called "g_serial".

For more information, see Documentation/usb/gadget_serial.txt
which includes instructions and a "driver info file" needed to
make MS-Windows work with this driver.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "MMC/SD Card support"

<nutentry>
	<term>MMC</term>
<nutsynopsis>
	"MMC support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
MMC is the "multi-media card" bus protocol.

If you want MMC support, you should say Y here and also
to the specific driver for your MMC interface.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMC_DEBUG</term>
<nutsynopsis>
	"MMC debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is an option for use by developers; most people should
say N here.  This enables MMC core and driver debugging.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMC_BLOCK</term>
<nutsynopsis>
	"MMC block device driver"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMC</literal>
	</para>

	<para>
	default value
	<literal>y if MMC</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Say Y here to enable the MMC block device driver support.
This provides a block device driver, which you can use to
mount the filesystem. Almost everyone wishing MMC support
should say Y or M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMC_ARMMMCI</term>
<nutsynopsis>
	"ARM AMBA Multimedia Card Interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARM_AMBA && MMC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This selects the ARM(R) AMBA(R) PrimeCell Multimedia Card
Interface (PL180 and PL181) support.  If you have an ARM(R)
platform with a Multimedia Card slot, say Y or M here.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMC_PXA</term>
<nutsynopsis>
	"Intel PXA255 Multimedia Card Interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ARCH_PXA && MMC</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This selects the Intel(R) PXA(R) Multimedia card Interface.
If you have a PXA(R) platform with a Multimedia Card slot,
say Y or M here.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MMC_WBSD</term>
<nutsynopsis>
	"Winbond W83L51xD SD/MMC Card Interface support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MMC && ISA_DMA_API</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This selects the Winbond(R) W83L51xD Secure digital and
Multimedia card Interface.
If you have a machine with a integrated W83L518D or W83L519D
SD/MMC card reader, say Y or M here.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "InfiniBand support"

<nutentry>
	<term>INFINIBAND</term>
<nutsynopsis>
	"InfiniBand support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI || BROKEN</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Core support for InfiniBand (IB).  Make sure to also select
any protocols you wish to use as well as drivers for your
InfiniBand hardware.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_USER_MAD</term>
<nutsynopsis>
	"InfiniBand userspace MAD support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INFINIBAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Userspace InfiniBand Management Datagram (MAD) support.  This
is the kernel side of the userspace MAD support, which allows
userspace processes to send and receive MADs. You will also 
need libibumad from <http://www.openib.org>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_USER_ACCESS</term>
<nutsynopsis>
	"InfiniBand userspace access (verbs and CM)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INFINIBAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Userspace InfiniBand access support.  This enables the
kernel side of userspace verbs and the userspace
communication manager (CM).  This allows userspace processes
to set up connections and directly access InfiniBand
hardware for fast-path operations.  You will also need
libibverbs, libibcm and a hardware driver library from
<http://www.openib.org>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_MTHCA</term>
<nutsynopsis>
	"Mellanox HCA support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PCI && INFINIBAND</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a low-level driver for Mellanox InfiniHost host
channel adapters (HCAs), including the MT23108 PCI-X HCA
("Tavor") and the MT25208 PCI Express HCA ("Arbel").
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_MTHCA_DEBUG</term>
<nutsynopsis>
	"Verbose debugging output"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INFINIBAND_MTHCA</literal>
	</para>

	<para>
	default value
	<literal>n if INFINIBAND_MTHCA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option causes the mthca driver produce a bunch of debug
messages.  Select this is you are developing the driver or
trying to diagnose a problem.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_IPOIB</term>
<nutsynopsis>
	"IP-over-InfiniBand"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INFINIBAND && NETDEVICES && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Support for the IP-over-InfiniBand protocol (IPoIB). This
transports IP packets over InfiniBand so you can use your IB
device as a fancy NIC.

The IPoIB protocol is defined by the IETF ipoib working
group: <http://www.ietf.org/html.charters/ipoib-charter.html>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_IPOIB_DEBUG</term>
<nutsynopsis>
	"IP-over-InfiniBand debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INFINIBAND_IPOIB</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option causes debugging code to be compiled into the
IPoIB driver.  The output can be turned on via the
debug_level and mcast_debug_level module parameters (which
can also be set after the driver is loaded through sysfs).

This option also creates an "ipoib_debugfs," which can be
mounted to expose debugging information about IB multicast
groups used by the IPoIB driver.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INFINIBAND_IPOIB_DEBUG_DATA</term>
<nutsynopsis>
	"IP-over-InfiniBand data path debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>INFINIBAND_IPOIB_DEBUG</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option compiles debugging code into the the data path
of the IPoIB driver.  The output can be turned on via the
data_debug_level module parameter; however, even with output
turned off, this debugging code will have some performance
impact.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "SN Devices"

<nutentry>
	<term>SGI_IOC4</term>
<nutsynopsis>
	"SGI IOC4 Base IO support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>(IA64_GENERIC || IA64_SGI_SN2) && MMTIMER</literal>
	</para>

	<para>
	default value
	<literal>m if (IA64_GENERIC || IA64_SGI_SN2) && MMTIMER</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option enables basic support for the SGI IOC4-based Base IO
controller card.  This option does not enable any specific
functions on such a card, but provides necessary infrastructure
for other drivers to utilize.

If you have an SGI Altix with an IOC4-based
I/O controller say Y.  Otherwise say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "File systems"

<nutentry>
	<term>EXT2_FS</term>
<nutsynopsis>
	"Second extended fs support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Ext2 is a standard Linux file system for hard disks.

To compile this file system support as a module, choose M here: the
module will be called ext2.  Be aware however that the file system
of your root partition (the one containing the directory /) cannot
be compiled as a module, and so this could be dangerous.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT2_FS_XATTR</term>
<nutsynopsis>
	"Ext2 extended attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT2_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extended attributes are name:value pairs associated with inodes by
the kernel or by users (see the attr(5) manual page, or visit
<http://acl.bestbits.at/> for details).

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT2_FS_POSIX_ACL</term>
<nutsynopsis>
	"Ext2 POSIX Access Control Lists"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT2_FS_XATTR</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Posix Access Control Lists (ACLs) support permissions for users and
groups beyond the owner/group/world scheme.

To learn more about Access Control Lists, visit the Posix ACLs for
Linux website <http://acl.bestbits.at/>.

If you don't know what Access Control Lists are, say N
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT2_FS_SECURITY</term>
<nutsynopsis>
	"Ext2 Security Labels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT2_FS_XATTR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Security labels support alternative access control models
implemented by security modules like SELinux.  This option
enables an extended attribute handler for file security
labels in the ext2 filesystem.

If you are not using a security module that requires using
extended attributes for file security labels, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT2_FS_XIP</term>
<nutsynopsis>
	"Ext2 execute in place support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT2_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Execute in place can be used on memory-backed block devices. If you
enable this option, you can select to mount block devices which are
capable of this feature without using the page cache.

If you do not use a block device that is capable of using this,
or if unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FS_XIP</term>
	<para>
	default value
	<literal>y if EXT2_FS_XIP</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT3_FS</term>
<nutsynopsis>
	"Ext3 journalling file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the journaling version of the Second extended file system
(often called ext3), the de facto standard Linux file system
(method to organize files on a storage device) for hard disks.

The journaling code included in this driver means you do not have
to run e2fsck (file system checker) on your file systems after a
crash.  The journal keeps track of any changes that were being made
at the time the system crashed, and can ensure that your file system
is consistent without the need for a lengthy check.

Other than adding the journal to the file system, the on-disk format
of ext3 is identical to ext2.  It is possible to freely switch
between using the ext3 driver and the ext2 driver, as long as the
file system has been cleanly unmounted, or e2fsck is run on the file
system.

To add a journal on an existing ext2 file system or change the
behavior of ext3 file systems, you can use the tune2fs utility ("man
tune2fs").  To modify attributes of files and directories on ext3
file systems, use chattr ("man chattr").  You need to be using
e2fsprogs version 1.20 or later in order to create ext3 journals
(available at <http://sourceforge.net/projects/e2fsprogs/>).

To compile this file system support as a module, choose M here: the
module will be called ext3.  Be aware however that the file system
of your root partition (the one containing the directory /) cannot
be compiled as a module, and so this may be dangerous.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT3_FS_XATTR</term>
<nutsynopsis>
	"Ext3 extended attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT3_FS</literal>
	</para>

	<para>
	default value
	<literal>y if EXT3_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extended attributes are name:value pairs associated with inodes by
the kernel or by users (see the attr(5) manual page, or visit
<http://acl.bestbits.at/> for details).

If unsure, say N.

You need this for POSIX ACL support on ext3.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT3_FS_POSIX_ACL</term>
<nutsynopsis>
	"Ext3 POSIX Access Control Lists"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT3_FS_XATTR</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Posix Access Control Lists (ACLs) support permissions for users and
groups beyond the owner/group/world scheme.

To learn more about Access Control Lists, visit the Posix ACLs for
Linux website <http://acl.bestbits.at/>.

If you don't know what Access Control Lists are, say N
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXT3_FS_SECURITY</term>
<nutsynopsis>
	"Ext3 Security Labels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXT3_FS_XATTR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Security labels support alternative access control models
implemented by security modules like SELinux.  This option
enables an extended attribute handler for file security
labels in the ext3 filesystem.

If you are not using a security module that requires using
extended attributes for file security labels, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JBD</term>
	<para>
	default value
	<literal>EXT3_FS</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a generic journaling layer for block devices.  It is
currently used by the ext3 file system, but it could also be used to
add journal support to other file systems or block devices such as
RAID or LVM.

If you are using the ext3 file system, you need to say Y here. If
you are not using ext3 then you will probably want to say N.

To compile this device as a module, choose M here: the module will be
called jbd.  If you are compiling ext3 into the kernel, you cannot
compile this code as a module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JBD_DEBUG</term>
<nutsynopsis>
	"JBD (ext3) debugging support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JBD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you are using the ext3 journaled file system (or potentially any
other file system/device using JBD), this option allows you to
enable debugging output while the system is running, in order to
help track down any problems you are having.  By default the
debugging output will be turned off.

If you select Y here, then you will be able to turn on debugging
with "echo N > /proc/sys/fs/jbd-debug", where N is a number between
1 and 5, the higher the number, the more debugging output is
generated.  To turn debugging off again, do
"echo 0 > /proc/sys/fs/jbd-debug".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FS_MBCACHE</term>
	<para>
	default value
	<literal>y if (EXT2_FS_XATTR || EXT3_FS_XATTR) && (EXT2_FS=y || EXT3_FS=y)</literal>
	</para>


	<para>
	default value
	<literal>m if (EXT2_FS_XATTR || EXT3_FS_XATTR) && (EXT2_FS=m || EXT3_FS=m)</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REISERFS_FS</term>
<nutsynopsis>
	"Reiserfs support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Stores not just filenames but the files themselves in a balanced
tree.  Uses journaling.

Balanced trees are more efficient than traditional file system
architectural foundations.

In general, ReiserFS is as fast as ext2, but is very efficient with
large directories and small files.  Additional patches are needed
for NFS and quotas, please see <http://www.namesys.com/> for links.

It is more easily extended to have features currently found in
database and keyword search systems than block allocation based file
systems are.  The next version will be so extended, and will support
plugins consistent with our motto ``It takes more than a license to
make source code open.''

Read <http://www.namesys.com/> to learn more about reiserfs.

Sponsored by Threshold Networks, Emusic.com, and Bigstorage.com.

If you like it, you can pay us to add new features to it that you
need, buy a support contract, or pay us to port it to another OS.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REISERFS_CHECK</term>
<nutsynopsis>
	"Enable reiserfs debug mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>REISERFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you set this to Y, then ReiserFS will perform every check it can
possibly imagine of its internal consistency throughout its
operation.  It will also go substantially slower.  More than once we
have forgotten that this was on, and then gone despondent over the
latest benchmarks.:-) Use of this option allows our team to go all
out in checking for consistency when debugging without fear of its
effect on end users.  If you are on the verge of sending in a bug
report, say Y and you might get a useful error message.  Almost
everyone should say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REISERFS_PROC_INFO</term>
<nutsynopsis>
	"Stats in /proc/fs/reiserfs"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>REISERFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Create under /proc/fs/reiserfs a hierarchy of files, displaying
various ReiserFS statistics and internal data at the expense of
making your kernel or module slightly larger (+8 KB). This also
increases the amount of kernel memory required for each mount.
Almost everyone but ReiserFS developers and people fine-tuning
reiserfs or tracing problems should say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REISERFS_FS_XATTR</term>
<nutsynopsis>
	"ReiserFS extended attributes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>REISERFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extended attributes are name:value pairs associated with inodes by
the kernel or by users (see the attr(5) manual page, or visit
<http://acl.bestbits.at/> for details).

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REISERFS_FS_POSIX_ACL</term>
<nutsynopsis>
	"ReiserFS POSIX Access Control Lists"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>REISERFS_FS_XATTR</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Posix Access Control Lists (ACLs) support permissions for users and
groups beyond the owner/group/world scheme.

To learn more about Access Control Lists, visit the Posix ACLs for
Linux website <http://acl.bestbits.at/>.

If you don't know what Access Control Lists are, say N
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REISERFS_FS_SECURITY</term>
<nutsynopsis>
	"ReiserFS Security Labels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>REISERFS_FS_XATTR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Security labels support alternative access control models
implemented by security modules like SELinux.  This option
enables an extended attribute handler for file security
labels in the ReiserFS filesystem.

If you are not using a security module that requires using
extended attributes for file security labels, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFS_FS</term>
<nutsynopsis>
	"JFS filesystem support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a port of IBM's Journaled Filesystem .  More information is
available in the file <file:Documentation/filesystems/jfs.txt>.

If you do not intend to use the JFS filesystem, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFS_POSIX_ACL</term>
<nutsynopsis>
	"JFS POSIX Access Control Lists"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFS_FS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Posix Access Control Lists (ACLs) support permissions for users and
groups beyond the owner/group/world scheme.

To learn more about Access Control Lists, visit the Posix ACLs for
Linux website <http://acl.bestbits.at/>.

If you don't know what Access Control Lists are, say N
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFS_SECURITY</term>
<nutsynopsis>
	"JFS Security Labels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Security labels support alternative access control models
implemented by security modules like SELinux.  This option
enables an extended attribute handler for file security
labels in the jfs filesystem.

If you are not using a security module that requires using
extended attributes for file security labels, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFS_DEBUG</term>
<nutsynopsis>
	"JFS debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you are experiencing any problems with the JFS filesystem, say
Y here.  This will result in additional debugging messages to be
written to the system log.  Under normal circumstances, this
results in very little overhead.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFS_STATISTICS</term>
<nutsynopsis>
	"JFS statistics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will cause statistics from the JFS file system
to be made available to the user in the /proc/fs/jfs/ directory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FS_POSIX_ACL</term>
	<para>
	default value
	<literal>n</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFS_FS</term>
<nutsynopsis>
	"XFS filesystem support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
XFS is a high performance journaling filesystem which originated
on the SGI IRIX platform.  It is completely multi-threaded, can
support large files and large filesystems, extended attributes,
variable block sizes, is extent based, and makes extensive use of
Btrees (directories, extents, free space) to aid both performance
and scalability.

Refer to the documentation at <http://oss.sgi.com/projects/xfs/>
for complete details.  This implementation is on-disk compatible
with the IRIX version of XFS.

To compile this file system support as a module, choose M here: the
module will be called xfs.  Be aware, however, that if the file
system of your root partition is compiled as a module, you'll need
to use an initial ramdisk (initrd) to boot.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFS_EXPORT</term>
	<para>
	default value
	<literal>y if XFS_FS && EXPORTFS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFS_QUOTA</term>
<nutsynopsis>
	"XFS Quota support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>XFS_FS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to set limits for disk usage on
a per user and/or a per group basis under XFS.  XFS considers quota
information as filesystem metadata and uses journaling to provide a
higher level guarantee of consistency.  The on-disk data format for
quota is also compatible with the IRIX version of XFS, allowing a
filesystem to be migrated between Linux and IRIX without any need
for conversion.

If unsure, say N.  More comprehensive documentation can be found in
README.quota in the xfsprogs package.  XFS quota can be used either
with or without the generic quota support enabled (CONFIG_QUOTA) -
they are completely independent subsystems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFS_SECURITY</term>
<nutsynopsis>
	"XFS Security Label support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>XFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Security labels support alternative access control models
implemented by security modules like SELinux.  This option
enables an extended attribute namespace for inode security
labels in the XFS filesystem.

If you are not using a security module that requires using
extended attributes for inode security labels, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFS_POSIX_ACL</term>
<nutsynopsis>
	"XFS POSIX ACL support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>XFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
POSIX Access Control Lists (ACLs) support permissions for users and
groups beyond the owner/group/world scheme.

To learn more about Access Control Lists, visit the POSIX ACLs for
Linux website <http://acl.bestbits.at/>.

If you don't know what Access Control Lists are, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>XFS_RT</term>
<nutsynopsis>
	"XFS Realtime support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>XFS_FS && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here you will be able to mount and use XFS filesystems
which contain a realtime subvolume. The realtime subvolume is a
separate area of disk space where only file data is stored. The
realtime subvolume is designed to provide very deterministic
data rates suitable for media streaming applications.

See the xfs man page in section 5 for a bit more information.

This feature is unsupported at this time, is not yet fully
functional, and may cause serious problems.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MINIX_FS</term>
<nutsynopsis>
	"Minix fs support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Minix is a simple operating system used in many classes about OS's.
The minix file system (method to organize files on a hard disk
partition or a floppy disk) was the original file system for Linux,
but has been superseded by the second extended file system ext2fs.
You don't want to use the minix file system on your hard disk
because of certain built-in restrictions, but it is sometimes found
on older Linux floppy disks.  This option will enlarge your kernel
by about 28 KB. If unsure, say N.

To compile this file system support as a module, choose M here: the
module will be called minix.  Note that the file system of your root
partition (the one containing the directory /) cannot be compiled as
a module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ROMFS_FS</term>
<nutsynopsis>
	"ROM file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a very small read-only file system mainly intended for
initial ram disks of installation disks, but it could be used for
other read-only media as well.  Read
<file:Documentation/filesystems/romfs.txt> for details.

To compile this file system support as a module, choose M here: the
module will be called romfs.  Note that the file system of your
root partition (the one containing the directory /) cannot be a
module.

If you don't know whether you need it, then you don't need it:
answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>INOTIFY</term>
<nutsynopsis>
	"Inotify file change notification support"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable inotify support and the associated system
calls.  Inotify is a file change notification system and a
replacement for dnotify.  Inotify fixes numerous shortcomings in
dnotify and introduces several new features.  It allows monitoring
of both files and directories via a single open fd.  Other features
include multiple file events, one-shot support, and unmount
notification.

For more information, see Documentation/filesystems/inotify.txt

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QUOTA</term>
<nutsynopsis>
	"Quota support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will be able to set per user limits for disk
usage (also called disk quotas). Currently, it works for the
ext2, ext3, and reiserfs file system. ext3 also supports journalled
quotas for which you don't need to run quotacheck(8) after an unclean
shutdown.
For further details, read the Quota mini-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, or the documentation provided
with the quota tools. Probably the quota support is only useful for
multi user systems. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QFMT_V1</term>
<nutsynopsis>
	"Old quota format support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>QUOTA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This quota format was (is) used by kernels earlier than 2.4.22. If
you have quota working and you don't want to convert to new quota
format say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QFMT_V2</term>
<nutsynopsis>
	"Quota format v2 support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>QUOTA</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This quota format allows using quotas with 32-bit UIDs/GIDs. If you
need this functionality say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QUOTACTL</term>
	<para>
	default value
	<literal>y if XFS_QUOTA || QUOTA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DNOTIFY</term>
<nutsynopsis>
	"Dnotify support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Dnotify is a directory-based per-fd file change notification system
that uses signals to communicate events to user-space.  There exist
superior alternatives, but some applications may still rely on
dnotify.

Because of this, if unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AUTOFS_FS</term>
<nutsynopsis>
	"Kernel automounter support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The automounter is a tool to automatically mount remote file systems
on demand. This implementation is partially kernel-based to reduce
overhead in the already-mounted case; this is unlike the BSD
automounter (amd), which is a pure user space daemon.

To use the automounter you need the user-space tools from the autofs
package; you can find the location in <file:Documentation/Changes>.
You also want to answer Y to "NFS file system support", below.

If you want to use the newer version of the automounter with more
features, say N here and say Y to "Kernel automounter v4 support",
below.

To compile this support as a module, choose M here: the module will be
called autofs.

If you are not a part of a fairly large, distributed network, you
probably do not need an automounter, and can say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AUTOFS4_FS</term>
<nutsynopsis>
	"Kernel automounter version 4 support (also supports v3)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The automounter is a tool to automatically mount remote file systems
on demand. This implementation is partially kernel-based to reduce
overhead in the already-mounted case; this is unlike the BSD
automounter (amd), which is a pure user space daemon.

To use the automounter you need the user-space tools from
<ftp://ftp.kernel.org/pub/linux/daemons/autofs/v4/>; you also
want to answer Y to "NFS file system support", below.

To compile this support as a module, choose M here: the module will be
called autofs4.  You will need to add "alias autofs autofs4" to your
modules configuration file.

If you are not a part of a fairly large, distributed network or
don't have a laptop which needs to dynamically reconfigure to the
local network, you probably do not need an automounter, and can say
N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FUSE_FS</term>
<nutsynopsis>
	"Filesystem in Userspace support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
With FUSE it is possible to implement a fully functional filesystem
in a userspace program.

There's also companion library: libfuse.  This library along with
utilities is available from the FUSE homepage:
<http://fuse.sourceforge.net/>

See <file:Documentation/filesystems/fuse.txt> for more information.
See <file:Documentation/Changes> for needed library/utility version.

If you want to develop a userspace FS, or if you want to use
a filesystem based on FUSE, answer Y or M.
	</para>

</nutentrybody>
</nutentry>

menu "CD-ROM/DVD Filesystems"

<nutentry>
	<term>ISO9660_FS</term>
<nutsynopsis>
	"ISO 9660 CDROM file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the standard file system used on CD-ROMs.  It was previously
known as "High Sierra File System" and is called "hsfs" on other
Unix systems.  The so-called Rock-Ridge extensions which allow for
long Unix filenames and symbolic links are also supported by this
driver.  If you have a CD-ROM drive and want to do more with it than
just listen to audio CDs and watch its LEDs, say Y (and read
<file:Documentation/filesystems/isofs.txt> and the CD-ROM-HOWTO,
available from <http://www.tldp.org/docs.html#howto>), thereby
enlarging your kernel by about 27 KB; otherwise say N.

To compile this file system support as a module, choose M here: the
module will be called isofs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JOLIET</term>
<nutsynopsis>
	"Microsoft Joliet CDROM extensions"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISO9660_FS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Joliet is a Microsoft extension for the ISO 9660 CD-ROM file system
which allows for long filenames in unicode format (unicode is the
new 16 bit character code, successor to ASCII, which encodes the
characters of almost all languages of the world; see
<http://www.unicode.org/> for more information).  Say Y here if you
want to be able to read Joliet CD-ROMs under Linux.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZISOFS</term>
<nutsynopsis>
	"Transparent decompression extension"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ISO9660_FS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a Linux-specific extension to RockRidge which lets you store
data in compressed form on a CD-ROM and have it transparently
decompressed when the CD-ROM is accessed.  See
<http://www.kernel.org/pub/linux/utils/fs/zisofs/> for the tools
necessary to create such a filesystem.  Say Y here if you want to be
able to read such compressed CD-ROMs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZISOFS_FS</term>
	<para>
	default value
	<literal>ISO9660_FS if ZISOFS</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UDF_FS</term>
<nutsynopsis>
	"UDF file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the new file system used on some CD-ROMs and DVDs. Say Y if
you intend to mount DVD discs or CDRW's written in packet mode, or
if written to by other UDF utilities, such as DirectCD.
Please read <file:Documentation/filesystems/udf.txt>.

To compile this file system support as a module, choose M here: the
module will be called udf.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UDF_NLS</term>
	<para>
	default value
	<literal>y if UDF_FS=m && NLS || UDF_FS=y && NLS=y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "DOS/FAT/NT Filesystems"

<nutentry>
	<term>FAT_FS</term>
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to use one of the FAT-based file systems (the MS-DOS and
VFAT (Windows 95) file systems), then you must say Y or M here
to include FAT support. You will then be able to mount partitions or
diskettes with FAT-based file systems and transparently access the
files on them, i.e. MSDOS files will look and behave just like all
other Unix files.

This FAT support is not a file system in itself, it only provides
the foundation for the other file systems. You will have to say Y or
M to at least one of "MSDOS fs support" or "VFAT fs support" in
order to make use of it.

Another way to read and write MSDOS floppies and hard drive
partitions from within Linux (but not transparently) is with the
mtools ("man mtools") program suite. You don't need to say Y here in
order to do that.

If you need to move large files on floppies between a DOS and a
Linux box, say Y here, mount the floppy under Linux with an MSDOS
file system and use GNU tar's M option. GNU tar is a program
available for Unix and DOS ("man tar" or "info tar").

It is now also becoming possible to read and write compressed FAT
file systems; read <file:Documentation/filesystems/fat_cvf.txt> for
details.

The FAT support will enlarge your kernel by about 37 KB. If unsure,
say Y.

To compile this as a module, choose M here: the module will be called
fat.  Note that if you compile the FAT support as a module, you
cannot compile any of the FAT-based file systems into the kernel
-- they will have to be modules as well.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSDOS_FS</term>
<nutsynopsis>
	"MSDOS fs support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This allows you to mount MSDOS partitions of your hard drive (unless
they are compressed; to access compressed MSDOS partitions under
Linux, you can either use the DOS emulator DOSEMU, described in the
DOSEMU-HOWTO, available from
<http://www.tldp.org/docs.html#howto>, or try dmsdosfs in
<ftp://ibiblio.org/pub/Linux/system/filesystems/dosfs/>. If you
intend to use dosemu with a non-compressed MSDOS partition, say Y
here) and MSDOS floppies. This means that file access becomes
transparent, i.e. the MSDOS files look and behave just like all
other Unix files.

If you have Windows 95 or Windows NT installed on your MSDOS
partitions, you should use the VFAT file system (say Y to "VFAT fs
support" below), or you will not be able to see the long filenames
generated by Windows 95 / Windows NT.

This option will enlarge your kernel by about 7 KB. If unsure,
answer Y. This will only work if you said Y to "DOS FAT fs support"
as well. To compile this as a module, choose M here: the module will
be called msdos.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VFAT_FS</term>
<nutsynopsis>
	"VFAT (Windows-95) fs support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option provides support for normal Windows file systems with
long filenames.  That includes non-compressed FAT-based file systems
used by Windows 95, Windows 98, Windows NT 4.0, and the Unix
programs from the mtools package.

The VFAT support enlarges your kernel by about 10 KB and it only
works if you said Y to the "DOS FAT fs support" above.  Please read
the file <file:Documentation/filesystems/vfat.txt> for details.  If
unsure, say Y.

To compile this as a module, choose M here: the module will be called
vfat.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FAT_DEFAULT_CODEPAGE</term>
<nutsynopsis>
	"Default codepage for FAT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MSDOS_FS || VFAT_FS</literal>
	</para>

	<para>
	default value
	<literal>437 if MSDOS_FS || VFAT_FS</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option should be set to the codepage of your FAT filesystems.
It can be overridden with the "codepage" mount option.
See <file:Documentation/filesystems/vfat.txt> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FAT_DEFAULT_IOCHARSET</term>
<nutsynopsis>
	"Default iocharset for FAT"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>VFAT_FS</literal>
	</para>

	<para>
	default value
	<literal>iso8859-1 if VFAT_FS</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
Set this to the default input/output character set you'd
like FAT to use. It should probably match the character set
that most of your FAT filesystems use, and can be overridden
with the "iocharset" mount option for FAT filesystems.
Note that "utf8" is not recommended for FAT filesystems.
If unsure, you shouldn't set "utf8" here.
See <file:Documentation/filesystems/vfat.txt> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NTFS_FS</term>
<nutsynopsis>
	"NTFS file system support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
NTFS is the file system of Microsoft Windows NT, 2000, XP and 2003.

Saying Y or M here enables read support.  There is partial, but
safe, write support available.  For write support you must also
say Y to "NTFS write support" below.

There are also a number of user-space tools available, called
ntfsprogs.  These include ntfsundelete and ntfsresize, that work
without NTFS support enabled in the kernel.

This is a rewrite from scratch of Linux NTFS support and replaced
the old NTFS code starting with Linux 2.5.11.  A backport to
the Linux 2.4 kernel series is separately available as a patch
from the project web site.

For more information see <file:Documentation/filesystems/ntfs.txt>
and <http://linux-ntfs.sourceforge.net/>.

To compile this file system support as a module, choose M here: the
module will be called ntfs.

If you are not using Windows NT, 2000, XP or 2003 in addition to
Linux on your computer it is safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NTFS_DEBUG</term>
<nutsynopsis>
	"NTFS debugging support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NTFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you are experiencing any problems with the NTFS file system, say
Y here.  This will result in additional consistency checks to be
performed by the driver as well as additional debugging messages to
be written to the system log.  Note that debugging messages are
disabled by default.  To enable them, supply the option debug_msgs=1
at the kernel command line when booting the kernel or as an option
to insmod when loading the ntfs module.  Once the driver is active,
you can enable debugging messages by doing (as root):
echo 1 > /proc/sys/fs/ntfs-debug
Replacing the "1" with "0" would disable debug messages.

If you leave debugging messages disabled, this results in little
overhead, but enabling debug messages results in very significant
slowdown of the system.

When reporting bugs, please try to have available a full dump of
debugging messages while the misbehaviour was occurring.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NTFS_RW</term>
<nutsynopsis>
	"NTFS write support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NTFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the partial, but safe, write support in the NTFS driver.

The only supported operation is overwriting existing files, without
changing the file length.  No file or directory creation, deletion or
renaming is possible.  Note only non-resident files can be written to
so you may find that some very small files (<500 bytes or so) cannot
be written to.

While we cannot guarantee that it will not damage any data, we have
so far not received a single report where the driver would have
damaged someones data so we assume it is perfectly safe to use.

Note:  While write support is safe in this version (a rewrite from
scratch of the NTFS support), it should be noted that the old NTFS
write support, included in Linux 2.5.10 and before (since 1997),
is not safe.

This is currently useful with TopologiLinux.  TopologiLinux is run
on top of any DOS/Microsoft Windows system without partitioning your
hard disk.  Unlike other Linux distributions TopologiLinux does not
need its own partition.  For more information see
<http://topologi-linux.sourceforge.net/>

It is perfectly safe to say N here.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Pseudo filesystems"

<nutentry>
	<term>PROC_FS</term>
<nutsynopsis>
	"/proc file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This is a virtual file system providing information about the status
of the system. "Virtual" means that it doesn't take up any space on
your hard disk: the files are created on the fly by the kernel when
you try to access them. Also, you cannot read the files with older
version of the program less: you need to use more or cat.

It's totally cool; for example, "cat /proc/interrupts" gives
information about what the different IRQs are used for at the moment
(there is a small number of Interrupt ReQuest lines in your computer
that are used by the attached devices to gain the CPU's attention --
often a source of trouble if two devices are mistakenly configured
to use the same IRQ). The program procinfo to display some
information about your system gathered from the /proc file system.

Before you can use the /proc file system, it has to be mounted,
meaning it has to be given a location in the directory hierarchy.
That location should be /proc. A command such as "mount -t proc proc
/proc" or the equivalent line in /etc/fstab does the job.

The /proc file system is explained in the file
<file:Documentation/filesystems/proc.txt> and on the proc(5) manpage
("man 5 proc").

This option will enlarge your kernel by about 67 KB. Several
programs depend on this, so everyone should say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PROC_KCORE</term>
<nutsynopsis>
	"/proc/kcore support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PROC_FS && MMU && !ARM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PROC_VMCORE</term>
<nutsynopsis>
	"/proc/vmcore support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PROC_FS && EMBEDDED && EXPERIMENTAL && CRASH_DUMP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Exports the dump image of crashed kernel in ELF format.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYSFS</term>
<nutsynopsis>
	"sysfs file system support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The sysfs filesystem is a virtual filesystem that the kernel uses to
export internal kernel objects, their attributes, and their
relationships to one another.

Users can use sysfs to ascertain useful information about the running
kernel, such as the devices the kernel has discovered on each bus and
which driver each is bound to. sysfs can also be used to tune devices
and other kernel subsystems.

Some system agents rely on the information in sysfs to operate.
/sbin/hotplug uses device and object attributes in sysfs to assist in
delegating policy decisions, like persistantly naming devices.

sysfs is currently used by the block subsystem to mount the root
partition.  If sysfs is disabled you must specify the boot device on
the kernel boot command line via its major and minor numbers.  For
example, "root=03:01" for /dev/hda1.

Designers of embedded systems may wish to say N here to conserve space.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TMPFS</term>
<nutsynopsis>
	"Virtual memory file system support (former shm fs)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Tmpfs is a file system which keeps all files in virtual memory.

Everything in tmpfs is temporary in the sense that no files will be
created on your hard drive. The files live in memory and swap
space. If you unmount a tmpfs instance, everything stored therein is
lost.

See <file:Documentation/filesystems/tmpfs.txt> for details.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HUGETLBFS</term>
<nutsynopsis>
	"HugeTLB file system support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>X86 || IA64 || PPC64 || SPARC64 || SUPERH || X86_64 || BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HUGETLB_PAGE</term>
	<para>
	default value
	<literal>HUGETLBFS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RAMFS</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Ramfs is a file system which keeps all files in RAM. It allows
read and write access.

It is more of an programming example than a useable file system.  If
you need a file system which lives in RAM with limit checking use
tmpfs.

To compile this as a module, choose M here: the module will be called
ramfs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RELAYFS_FS</term>
<nutsynopsis>
	"Relayfs file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Relayfs is a high-speed data relay filesystem designed to provide
an efficient mechanism for tools and facilities to relay large
amounts of data from kernel space to user space.

To compile this code as a module, choose M here: the module will be
called relayfs.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Miscellaneous filesystems"

<nutentry>
	<term>ADFS_FS</term>
<nutsynopsis>
	"ADFS file system support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Acorn Disc Filing System is the standard file system of the
RiscOS operating system which runs on Acorn's ARM-based Risc PC
systems and the Acorn Archimedes range of machines. If you say Y
here, Linux will be able to read from ADFS partitions on hard drives
and from ADFS-formatted floppy discs. If you also want to be able to
write to those devices, say Y to "ADFS write support" below.

The ADFS partition should be the first partition (i.e.,
/dev/[hs]d?1) on each of your drives. Please read the file
<file:Documentation/filesystems/adfs.txt> for further details.

To compile this code as a module, choose M here: the module will be
called adfs.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ADFS_FS_RW</term>
<nutsynopsis>
	"ADFS write support (DANGEROUS)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>ADFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will be able to write to ADFS partitions on
hard drives and ADFS-formatted floppy disks. This is experimental
codes, so if you're unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AFFS_FS</term>
<nutsynopsis>
	"Amiga FFS file system support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Fast File System (FFS) is the common file system used on hard
disks by Amiga(tm) systems since AmigaOS Version 1.3 (34.20).  Say Y
if you want to be able to read and write files from and to an Amiga
FFS partition on your hard drive.  Amiga floppies however cannot be
read with this driver due to an incompatibility of the floppy
controller used in an Amiga and the standard floppy controller in
PCs and workstations. Read <file:Documentation/filesystems/affs.txt>
and <file:fs/affs/Changes>.

With this driver you can also mount disk files used by Bernd
Schmidt's Un*X Amiga Emulator
(<http://www.freiburg.linux.de/~uae/>).
If you want to do this, you will also need to say Y or M to "Loop
device support", above.

To compile this file system support as a module, choose M here: the
module will be called affs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HFS_FS</term>
<nutsynopsis>
	"Apple Macintosh file system support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to mount Macintosh-formatted
floppy disks and hard drive partitions with full read-write access.
Please read <file:fs/hfs/HFS.txt> to learn about the available mount
options.

To compile this file system support as a module, choose M here: the
module will be called hfs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HFSPLUS_FS</term>
<nutsynopsis>
	"Apple Extended HFS file system support"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will be able to mount extended format
Macintosh-formatted hard drive partitions with full read-write access.

This file system is often called HFS+ and was introduced with
MacOS 8. It includes all Mac specific filesystem data such as
data forks and creator codes, but it also has several UNIX
style features such as file ownership and permissions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BEFS_FS</term>
<nutsynopsis>
	"BeOS file system (BeFS) support (read only) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The BeOS File System (BeFS) is the native file system of Be, Inc's
BeOS. Notable features include support for arbitrary attributes
on files and directories, and database-like indeces on selected
attributes. (Also note that this driver doesn't make those features
available at this time). It is a 64 bit filesystem, so it supports
extremly large volumes and files.

If you use this filesystem, you should also say Y to at least one
of the NLS (native language support) options below.

If you don't know what this is about, say N.

To compile this as a module, choose M here: the module will be
called befs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BEFS_DEBUG</term>
<nutsynopsis>
	"Debug BeFS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BEFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you can use the 'debug' mount option to enable
debugging output from the driver. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BFS_FS</term>
<nutsynopsis>
	"BFS file system support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Boot File System (BFS) is a file system used under SCO UnixWare to
allow the bootloader access to the kernel image and other important
files during the boot process.  It is usually mounted under /stand
and corresponds to the slice marked as "STAND" in the UnixWare
partition.  You should say Y if you want to read or write the files
on your /stand slice from within Linux.  You then also need to say Y
to "UnixWare slices support", below.  More information about the BFS
file system is contained in the file
<file:Documentation/filesystems/bfs.txt>.

If you don't know what this is about, say N.

To compile this as a module, choose M here: the module will be called
bfs.  Note that the file system of your root partition (the one
containing the directory /) cannot be compiled as a module.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EFS_FS</term>
<nutsynopsis>
	"EFS file system support (read only) (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
EFS is an older file system used for non-ISO9660 CD-ROMs and hard
disk partitions by SGI's IRIX operating system (IRIX 6.0 and newer
uses the XFS file system for hard disk partitions however).

This implementation only offers read-only access. If you don't know
what all this is about, it's safe to say N. For more information
about EFS see its home page at <http://aeschi.ch.eu.org/efs/>.

To compile the EFS file system support as a module, choose M here: the
module will be called efs.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS_FS</term>
<nutsynopsis>
	"Journalling Flash File System (JFFS) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
JFFS is the Journaling Flash File System developed by Axis
Communications in Sweden, aimed at providing a crash/powerdown-safe
file system for disk-less embedded devices. Further information is
available at (<http://developer.axis.com/software/jffs/>).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS_FS_VERBOSE</term>
<nutsynopsis>
	"JFFS debugging verbosity (0 = quiet, 3 = noisy)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS_FS</literal>
	</para>

	<para>
	default value
	<literal>0 if JFFS_FS</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Determines the verbosity level of the JFFS debugging messages.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS_PROC_FS</term>
<nutsynopsis>
	"JFFS stats available in /proc filesystem"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS_FS && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will cause statistics from mounted JFFS file systems
to be made available to the user in the /proc/fs/jffs/ directory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_FS</term>
<nutsynopsis>
	"Journalling Flash File System v2 (JFFS2) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>MTD</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
JFFS2 is the second generation of the Journalling Flash File System
for use on diskless embedded devices. It provides improved wear
levelling, compression and support for hard links. You cannot use
this on normal block devices, only on 'MTD' devices.

Further information on the design and implementation of JFFS2 is
available at <http://sources.redhat.com/jffs2/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_FS_DEBUG</term>
<nutsynopsis>
	"JFFS2 debugging verbosity (0 = quiet, 2 = noisy)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS</literal>
	</para>

	<para>
	default value
	<literal>0 if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This controls the amount of debugging messages produced by the JFFS2
code. Set it to zero for use in production systems. For evaluation,
testing and debugging, it's advisable to set it to one. This will
enable a few assertions and will print debugging messages at the
KERN_DEBUG loglevel, where they won't normally be visible. Level 2
is unlikely to be useful - it enables extra debugging in certain
areas which at one point needed debugging, but when the bugs were
located and fixed, the detailed messages were relegated to level 2.

If reporting bugs, please try to have available a full dump of the
messages at debug level 1 while the misbehaviour was occurring.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_FS_WRITEBUFFER</term>
<nutsynopsis>
	"JFFS2 write-buffering support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS</literal>
	</para>

	<para>
	default value
	<literal>y if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the write-buffering support in JFFS2.

This functionality is required to support JFFS2 on the following
types of flash devices:
  - NAND flash
  - NOR flash with transparent ECC
  - DataFlash
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_COMPRESSION_OPTIONS</term>
<nutsynopsis>
	"Advanced compression options for JFFS2"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS</literal>
	</para>

	<para>
	default value
	<literal>n if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option allows you to explicitly choose which
compression modules, if any, are enabled in JFFS2. Removing
compressors and mean you cannot read existing file systems,
and enabling experimental compressors can mean that you
write a file system which cannot be read by a standard kernel.

If unsure, you should _definitely_ say 'N'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_ZLIB</term>
<nutsynopsis>
	"JFFS2 ZLIB compression support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS && JFFS2_COMPRESSION_OPTIONS</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	default value
	<literal>y if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Zlib is designed to be a free, general-purpose, legally unencumbered,
lossless data-compression library for use on virtually any computer 
hardware and operating system. See <http://www.gzip.org/zlib/> for
further information.

Say 'Y' if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_RTIME</term>
<nutsynopsis>
	"JFFS2 RTIME compression support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS && JFFS2_COMPRESSION_OPTIONS</literal>
	</para>

	<para>
	default value
	<literal>y if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Rtime does manage to recompress already-compressed data. Say 'Y' if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_RUBIN</term>
<nutsynopsis>
	"JFFS2 RUBIN compression support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS && JFFS2_COMPRESSION_OPTIONS</literal>
	</para>

	<para>
	default value
	<literal>n if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
RUBINMIPS and DYNRUBIN compressors. Say 'N' if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
choice
  #choice value
<nutsynopsis>
	"JFFS2 default compression mode"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>JFFS2_FS && JFFS2_COMPRESSION_OPTIONS</literal>
	</para>

	<para>
	default value
	<literal>JFFS2_CMODE_PRIORITY if JFFS2_FS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
You can set here the default compression mode of JFFS2 from 
the available compression modes. Don't touch if unsure.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_CMODE_NONE</term>
<nutsynopsis>
	"no compression"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Uses no compression.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_CMODE_PRIORITY</term>
<nutsynopsis>
	"priority"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Tries the compressors in a predefinied order and chooses the first 
successful one.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>JFFS2_CMODE_SIZE</term>
<nutsynopsis>
	"size (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal><choice></literal>
	</para>

  #choice value
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Tries all compressors and chooses the one which has the smallest 
result.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRAMFS</term>
<nutsynopsis>
	"Compressed ROM file system support (cramfs)"
</nutsynopsis>
<nutentrybody>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Saying Y here includes support for CramFs (Compressed ROM File
System).  CramFs is designed to be a simple, small, and compressed
file system for ROM based embedded systems.  CramFs is read-only,
limited to 256MB file systems (with 16MB files), and doesn't support
16/32 bits uid/gid, hard links and timestamps.

See <file:Documentation/filesystems/cramfs.txt> and
<file:fs/cramfs/README> for further information.

To compile this as a module, choose M here: the module will be called
cramfs.  Note that the root file system (the one containing the
directory /) cannot be compiled as a module.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>VXFS_FS</term>
<nutsynopsis>
	"FreeVxFS file system support (VERITAS VxFS(TM) compatible)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
FreeVxFS is a file system driver that support the VERITAS VxFS(TM)
file system format.  VERITAS VxFS(TM) is the standard file system
of SCO UnixWare (and possibly others) and optionally available
for Sunsoft Solaris, HP-UX and many other operating systems.
Currently only readonly access is supported.

NOTE: the file system type as used by mount(1), mount(2) and
fstab(5) is 'vxfs' as it describes the file system format, not
the actual driver.

To compile this as a module, choose M here: the module will be
called freevxfs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>HPFS_FS</term>
<nutsynopsis>
	"OS/2 HPFS file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
OS/2 is IBM's operating system for PC's, the same as Warp, and HPFS
is the file system used for organizing files on OS/2 hard disk
partitions. Say Y if you want to be able to read files from and
write files to an OS/2 HPFS partition on your hard drive. OS/2
floppies however are in regular MSDOS format, so you don't need this
option in order to be able to read them. Read
<file:Documentation/filesystems/hpfs.txt>.

To compile this file system support as a module, choose M here: the
module will be called hpfs.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QNX4FS_FS</term>
<nutsynopsis>
	"QNX4 file system support (read only)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the file system used by the real-time operating systems
QNX 4 and QNX 6 (the latter is also called QNX RTP).
Further information is available at <http://www.qnx.com/>.
Say Y if you intend to mount QNX hard disks or floppies.
Unless you say Y to "QNX4FS read-write support" below, you will
only be able to read these file systems.

To compile this file system support as a module, choose M here: the
module will be called qnx4.

If you don't know whether you need it, then you don't need it:
answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>QNX4FS_RW</term>
<nutsynopsis>
	"QNX4FS write support (DANGEROUS)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>QNX4FS_FS && EXPERIMENTAL && BROKEN</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y if you want to test write support for QNX4 file systems.

It's currently broken, so for now:
answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SYSV_FS</term>
<nutsynopsis>
	"System V/Xenix/V7/Coherent file system support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SCO, Xenix and Coherent are commercial Unix systems for Intel
machines, and Version 7 was used on the DEC PDP-11. Saying Y
here would allow you to read from their floppies and hard disk
partitions.

If you have floppies or hard disk partitions like that, it is likely
that they contain binaries from those other Unix systems; in order
to run these binaries, you will want to install linux-abi which is a
a set of kernel modules that lets you run SCO, Xenix, Wyse,
UnixWare, Dell Unix and System V programs under Linux.  It is
available via FTP (user: ftp) from
<ftp://ftp.openlinux.org/pub/people/hch/linux-abi/>).
NOTE: that will work only for binaries from Intel-based systems;
PDP ones will have to wait until somebody ports Linux to -11 ;-)

If you only intend to mount files from some other Unix over the
network using NFS, you don't need the System V file system support
(but you need NFS file system support obviously).

Note that this option is generally not needed for floppies, since a
good portable way to transport files and directories between unixes
(and even other operating systems) is given by the tar program ("man
tar" or preferably "info tar").  Note also that this option has
nothing whatsoever to do with the option "System V IPC". Read about
the System V file system in
<file:Documentation/filesystems/sysv-fs.txt>.
Saying Y here will enlarge your kernel by about 27 KB.

To compile this as a module, choose M here: the module will be called
sysv.

If you haven't heard about all of this before, it's safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UFS_FS</term>
<nutsynopsis>
	"UFS file system support (read only)"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
BSD and derivate versions of Unix (such as SunOS, FreeBSD, NetBSD,
OpenBSD and NeXTstep) use a file system called UFS. Some System V
Unixes can create and mount hard disk partitions and diskettes using
this file system as well. Saying Y here will allow you to read from
these partitions; if you also want to write to them, say Y to the
experimental "UFS file system write support", below. Please read the
file <file:Documentation/filesystems/ufs.txt> for more information.

The recently released UFS2 variant (used in FreeBSD 5.x) is
READ-ONLY supported.

If you only intend to mount files from some other Unix over the
network using NFS, you don't need the UFS file system support (but
you need NFS file system support obviously).

Note that this option is generally not needed for floppies, since a
good portable way to transport files and directories between unixes
(and even other operating systems) is given by the tar program ("man
tar" or preferably "info tar").

When accessing NeXTstep files, you may need to convert them from the
NeXT character set to the Latin1 character set; use the program
recode ("info recode") for this purpose.

To compile the UFS file system support as a module, choose M here: the
module will be called ufs.

If you haven't heard about all of this before, it's safe to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UFS_FS_WRITE</term>
<nutsynopsis>
	"UFS file system write support (DANGEROUS)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>UFS_FS && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want to try writing to UFS partitions. This is
experimental, so you should back up your UFS partitions beforehand.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Network File Systems"
<para>
	depends on
	<literal>NET</literal>
	</para>


<nutentry>
	<term>NFS_FS</term>
<nutsynopsis>
	"NFS file system support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you are connected to some other (usually local) Unix computer
(using SLIP, PLIP, PPP or Ethernet) and want to mount files residing
on that computer (the NFS server) using the Network File Sharing
protocol, say Y. "Mounting files" means that the client can access
the files with usual UNIX commands as if they were sitting on the
client's hard disk. For this to work, the server must run the
programs nfsd and mountd (but does not need to have NFS file system
support enabled in its kernel). NFS is explained in the Network
Administrator's Guide, available from
<http://www.tldp.org/docs.html#guide>, on its man page: "man
nfs", and in the NFS-HOWTO.

A superior but less widely used alternative to NFS is provided by
the Coda file system; see "Coda file system support" below.

If you say Y here, you should have said Y to TCP/IP networking also.
This option would enlarge your kernel by about 27 KB.

To compile this file system support as a module, choose M here: the
module will be called nfs.

If you are configuring a diskless machine which will mount its root
file system over NFS at boot time, say Y here and to "Kernel
level IP autoconfiguration" above and to "Root file system on NFS"
below. You cannot compile this driver as a module in this case.
There are two packages designed for booting diskless machines over
the net: netboot, available from
<http://ftp1.sourceforge.net/netboot/>, and Etherboot,
available from <http://ftp1.sourceforge.net/etherboot/>.

If you don't know what all this is about, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFS_V3</term>
<nutsynopsis>
	"Provide NFSv3 client support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFS_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want your NFS client to be able to speak version
3 of the NFS protocol.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFS_V3_ACL</term>
<nutsynopsis>
	"Provide client support for the NFSv3 ACL protocol extension"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFS_V3</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Implement the NFSv3 ACL protocol extension for manipulating POSIX
Access Control Lists.  The server should also be compiled with
the NFSv3 ACL protocol extension; see the CONFIG_NFSD_V3_ACL option.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFS_V4</term>
<nutsynopsis>
	"Provide NFSv4 client support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFS_FS && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you want your NFS client to be able to speak the newer
version 4 of the NFS protocol.

Note: Requires auxiliary userspace daemons which may be found on
      http://www.citi.umich.edu/projects/nfsv4/

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFS_DIRECTIO</term>
<nutsynopsis>
	"Allow direct I/O on NFS files (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFS_FS && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables applications to perform uncached I/O on files
in NFS file systems using the O_DIRECT open() flag.  When O_DIRECT
is set for a file, its data is not cached in the system's page
cache.  Data is moved to and from user-level application buffers
directly.  Unlike local disk-based file systems, NFS O_DIRECT has
no alignment restrictions.

Unless your program is designed to use O_DIRECT properly, you are
much better off allowing the NFS client to manage data caching for
you.  Misusing O_DIRECT can cause poor server performance or network
storms.  This kernel build option defaults OFF to avoid exposing
system administrators unwittingly to a potentially hazardous
feature.

For more details on NFS O_DIRECT, see fs/nfs/direct.c.

If unsure, say N.  This reduces the size of the NFS client, and
causes open() to return EINVAL if a file residing in NFS is
opened with the O_DIRECT flag.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFSD</term>
<nutsynopsis>
	"NFS server support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want your Linux box to act as an NFS *server*, so that other
computers on your local network which support NFS can access certain
directories on your box transparently, you have two options: you can
use the self-contained user space program nfsd, in which case you
should say N here, or you can say Y and use the kernel based NFS
server. The advantage of the kernel based solution is that it is
faster.

In either case, you will need support software; the respective
locations are given in the file <file:Documentation/Changes> in the
NFS section.

If you say Y here, you will get support for version 2 of the NFS
protocol (NFSv2). If you also want NFSv3, say Y to the next question
as well.

Please read the NFS-HOWTO, available from
<http://www.tldp.org/docs.html#howto>.

To compile the NFS server support as a module, choose M here: the
module will be called nfsd.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFSD_V2_ACL</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFSD_V3</term>
<nutsynopsis>
	"Provide NFSv3 server support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFSD</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you would like to include the NFSv3 server as well as the NFSv2
server, say Y here.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFSD_V3_ACL</term>
<nutsynopsis>
	"Provide server support for the NFSv3 ACL protocol extension"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFSD_V3</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Implement the NFSv3 ACL protocol extension for manipulating POSIX
Access Control Lists on exported file systems. NFS clients should
be compiled with the NFSv3 ACL protocol extension; see the
CONFIG_NFS_V3_ACL option.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFSD_V4</term>
<nutsynopsis>
	"Provide NFSv4 server support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFSD_V3 && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you would like to include the NFSv4 server as well as the NFSv2
and NFSv3 servers, say Y here.  This feature is experimental, and
should only be used if you are interested in helping to test NFSv4.
If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFSD_TCP</term>
<nutsynopsis>
	"Provide NFS server over TCP support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFSD</literal>
	</para>

	<para>
	default value
	<literal>y if NET && NFSD</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want your NFS server to support TCP connections, say Y here.
TCP connections usually perform better than the default UDP when
the network is lossy or congested.  If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ROOT_NFS</term>
<nutsynopsis>
	"Root file system on NFS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NFS_FS=y && IP_PNP</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you want your Linux box to mount its whole root file system (the
one containing the directory /) from some other computer over the
net via NFS (presumably because your box doesn't have a hard disk),
say Y. Read <file:Documentation/nfsroot.txt> for details. It is
likely that in this case, you also want to say Y to "Kernel level IP
autoconfiguration" so that your box can discover its network address
at boot time.

Most people say N here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOCKD</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOCKD_V4</term>
	<para>
	default value
	<literal>y if NET && (NFSD_V3 || NFS_V3)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EXPORTFS</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFS_ACL_SUPPORT</term>
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NFS_COMMON</term>
	<para>
	default value
	<literal>y if NET && (NFSD || NFS_FS)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNRPC</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUNRPC_GSS</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RPCSEC_GSS_KRB5</term>
<nutsynopsis>
	"Secure RPC: Kerberos V mechanism (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && SUNRPC && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Provides for secure RPC calls by means of a gss-api
mechanism based on Kerberos V5. This is required for
NFSv4.

Note: Requires an auxiliary userspace daemon which may be found on
      http://www.citi.umich.edu/projects/nfsv4/

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RPCSEC_GSS_SPKM3</term>
<nutsynopsis>
	"Secure RPC: SPKM3 mechanism (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && SUNRPC && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Provides for secure RPC calls by means of a gss-api
mechanism based on the SPKM3 public-key mechanism.

Note: Requires an auxiliary userspace daemon which may be found on
      http://www.citi.umich.edu/projects/nfsv4/

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMB_FS</term>
<nutsynopsis>
	"SMB file system support (to mount Windows shares etc.)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SMB (Server Message Block) is the protocol Windows for Workgroups
(WfW), Windows 95/98, Windows NT and OS/2 Lan Manager use to share
files and printers over local networks.  Saying Y here allows you to
mount their file systems (often called "shares" in this context) and
access them just like any other Unix directory.  Currently, this
works only if the Windows machines use TCP/IP as the underlying
transport protocol, and not NetBEUI.  For details, read
<file:Documentation/filesystems/smbfs.txt> and the SMB-HOWTO,
available from <http://www.tldp.org/docs.html#howto>.

Note: if you just want your box to act as an SMB *server* and make
files and printing services available to Windows clients (which need
to have a TCP/IP stack), you don't need to say Y here; you can use
the program SAMBA (available from <ftp://ftp.samba.org/pub/samba/>)
for that.

General information about how to connect Linux, Windows machines and
Macs is on the WWW at <http://www.eats.com/linux_mac_win.html>.

To compile the SMB support as a module, choose M here: the module will
be called smbfs.  Most people say N, however.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMB_NLS_DEFAULT</term>
<nutsynopsis>
	"Use a default NLS"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && SMB_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this will make smbfs use nls translations by default. You
need to specify the local charset (CONFIG_NLS_DEFAULT) in the nls
settings and you need to give the default nls for the SMB server as
CONFIG_SMB_NLS_REMOTE.

The nls settings can be changed at mount time, if your smbmount
supports that, using the codepage and iocharset parameters.

smbmount from samba 2.2.0 or later supports this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SMB_NLS_REMOTE</term>
<nutsynopsis>
	"Default Remote NLS Option"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && SMB_NLS_DEFAULT</literal>
	</para>

	<para>
	default value
	<literal>cp437 if NET && SMB_NLS_DEFAULT</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
This setting allows you to specify a default value for which
codepage the server uses. If this field is left blank no
translations will be done by default. The local codepage/charset
default to CONFIG_NLS_DEFAULT.

The nls settings can be changed at mount time, if your smbmount
supports that, using the codepage and iocharset parameters.

smbmount from samba 2.2.0 or later supports this.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CIFS</term>
<nutsynopsis>
	"CIFS support (advanced network filesystem for Samba, Window and other CIFS compliant servers)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the client VFS module for the Common Internet File System
(CIFS) protocol which is the successor to the Server Message Block 
(SMB) protocol, the native file sharing mechanism for most early
PC operating systems.  The CIFS protocol is fully supported by 
file servers such as Windows 2000 (including Windows 2003, NT 4  
and Windows XP) as well by Samba (which provides excellent CIFS
server support for Linux and many other operating systems). Currently
you must use the smbfs client filesystem to access older SMB servers
such as Windows 9x and OS/2.

The intent of the cifs module is to provide an advanced
network file system client for mounting to CIFS compliant servers, 
including support for dfs (hierarchical name space), secure per-user
session establishment, safe distributed caching (oplock), optional
packet signing, Unicode and other internationalization improvements, 
and optional Winbind (nsswitch) integration. You do not need to enable
cifs if running only a (Samba) server. It is possible to enable both
smbfs and cifs (e.g. if you are using CIFS for accessing Windows 2003
and Samba 3 servers, and smbfs for accessing old servers). If you need 
to mount to Samba or Windows 2003 servers from this machine, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CIFS_STATS</term>
<nutsynopsis>
	"CIFS statistics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && CIFS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will cause statistics for each server share
mounted by the cifs client to be displayed in /proc/fs/cifs/Stats
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CIFS_XATTR</term>
<nutsynopsis>
	"CIFS extended attributes (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && CIFS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Extended attributes are name:value pairs associated with inodes by
the kernel or by users (see the attr(5) manual page, or visit
<http://acl.bestbits.at/> for details).  CIFS maps the name of
extended attributes beginning with the user namespace prefix
to SMB/CIFS EAs. EAs are stored on Windows servers without the
user namespace prefix, but their names are seen by Linux cifs clients
prefaced by the user namespace prefix. The system namespace
(used by some filesystems to store ACLs) is not supported at
this time.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CIFS_POSIX</term>
<nutsynopsis>
	"CIFS POSIX Extensions (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && CIFS_XATTR</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will cause the cifs client to attempt to
negotiate a newer dialect with servers, such as Samba 3.0.5
or later, that optionally can handle more POSIX like (rather
than Windows like) file behavior.  It also enables
support for POSIX ACLs (getfacl and setfacl) to servers
(such as Samba 3.10 and later) which can negotiate
CIFS POSIX ACL support.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CIFS_EXPERIMENTAL</term>
<nutsynopsis>
	"CIFS Experimental Features (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && CIFS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enables cifs features under testing. These features
are highly experimental.  If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCP_FS</term>
<nutsynopsis>
	"NCP file system support (to mount NetWare volumes)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && (IPX!=n || INET)</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
NCP (NetWare Core Protocol) is a protocol that runs over IPX and is
used by Novell NetWare clients to talk to file servers.  It is to
IPX what NFS is to TCP/IP, if that helps.  Saying Y here allows you
to mount NetWare file server volumes and to access them just like
any other Unix directory.  For details, please read the file
<file:Documentation/filesystems/ncpfs.txt> in the kernel source and
the IPX-HOWTO from <http://www.tldp.org/docs.html#howto>.

You do not have to say Y here if you want your Linux box to act as a
file *server* for Novell NetWare clients.

General information about how to connect Linux, Windows machines and
Macs is on the WWW at <http://www.eats.com/linux_mac_win.html>.

To compile this as a module, choose M here: the module will be called
ncpfs.  Say N unless you are connected to a Novell network.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_PACKET_SIGNING</term>
<nutsynopsis>
	"Packet signatures"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
NCP allows packets to be signed for stronger security. If you want
security, say Y.  Normal users can leave it off.  To be able to use
packet signing you must use ncpfs > 2.0.12.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_IOCTL_LOCKING</term>
<nutsynopsis>
	"Proprietary file locking"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows locking of records on remote volumes.  Say N unless you have
special applications which are able to utilize this locking scheme.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_STRONG</term>
<nutsynopsis>
	"Clear remove/delete inhibit when needed"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows manipulation of files flagged as Delete or Rename Inhibit.
To use this feature you must mount volumes with the ncpmount
parameter "-s" (ncpfs-2.0.12 and newer).  Say Y unless you are not
mounting volumes with -f 444.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_NFS_NS</term>
<nutsynopsis>
	"Use NFS namespace if available"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows you to utilize NFS namespace on NetWare servers.  It brings
you case sensitive filenames.  Say Y.  You can disable it at
mount-time with the `-N nfs' parameter of ncpmount.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_OS2_NS</term>
<nutsynopsis>
	"Use LONG (OS/2) namespace if available"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows you to utilize OS2/LONG namespace on NetWare servers.
Filenames in this namespace are limited to 255 characters, they are
case insensitive, and case in names is preserved.  Say Y.  You can
disable it at mount time with the -N os2 parameter of ncpmount.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_SMALLDOS</term>
<nutsynopsis>
	"Lowercase DOS filenames"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, every filename on a NetWare server volume using
the OS2/LONG namespace and created under DOS or on a volume using
DOS namespace will be converted to lowercase characters.
Saying N here will give you these filenames in uppercase.

This is only a cosmetic option since the OS2/LONG namespace is case
insensitive. The only major reason for this option is backward
compatibility when moving from DOS to OS2/LONG namespace support.
Long filenames (created by Win95) will not be affected.

This option does not solve the problem that filenames appear
differently under Linux and under Windows, since Windows does an
additional conversions on the client side. You can achieve similar
effects by saying Y to "Allow using of Native Language Support"
below.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_NLS</term>
<nutsynopsis>
	"Use Native Language Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Allows you to use codepages and I/O charsets for file name
translation between the server file system and input/output. This
may be useful, if you want to access the server with other operating
systems, e.g. Windows 95. See also NLS for more Information.

To select codepages and I/O charsets use ncpfs-2.2.0.13 or newer.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NCPFS_EXTRAS</term>
<nutsynopsis>
	"Enable symbolic links and execute flags"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && NCP_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the use of symbolic links and an execute permission
bit on NCPFS. The file server need not have long name space or NFS
name space loaded for these to work.

To use the new attributes, it is recommended to use the flags
'-f 600 -d 755' on the ncpmount command line.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CODA_FS</term>
<nutsynopsis>
	"Coda file system support (advanced network fs)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Coda is an advanced network file system, similar to NFS in that it
enables you to mount file systems of a remote server and access them
with regular Unix commands as if they were sitting on your hard
disk.  Coda has several advantages over NFS: support for
disconnected operation (e.g. for laptops), read/write server
replication, security model for authentication and encryption,
persistent client caches and write back caching.

If you say Y here, your Linux box will be able to act as a Coda
*client*.  You will need user level code as well, both for the
client and server.  Servers are currently user level, i.e. they need
no kernel support.  Please read
<file:Documentation/filesystems/coda.txt> and check out the Coda
home page <http://www.coda.cs.cmu.edu/>.

To compile the coda client support as a module, choose M here: the
module will be called coda.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CODA_FS_OLD_API</term>
<nutsynopsis>
	"Use 96-bit Coda file identifiers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && CODA_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
A new kernel-userspace API had to be introduced for Coda v6.0
to support larger 128-bit file identifiers as needed by the
new realms implementation.

However this new API is not backward compatible with older
clients. If you really need to run the old Coda userspace
cache manager then say Y.

For most cases you probably want to say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AFS_FS</term>
<nutsynopsis>
	"Andrew File System support (AFS) (Experimental)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will get an experimental Andrew File System
driver. It currently only supports unsecured read-only AFS access.

See <file:Documentation/filesystems/afs.txt> for more intormation.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>RXRPC</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>9P_FS</term>
<nutsynopsis>
	"Plan 9 Resource Sharing Support (9P2000) (Experimental)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NET && INET && EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you say Y here, you will get experimental support for
Plan 9 resource sharing via the 9P2000 protocol.

See <http://v9fs.sf.net> for more information.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Partition Types"

<nutentry>
	<term>PARTITION_ADVANCED</term>
<nutsynopsis>
	"Advanced partition selection"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned under an operating system running on a different
architecture than your Linux system.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about foreign partitioning schemes.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION</term>
<nutsynopsis>
	"Acorn partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support hard disks partitioned under Acorn operating systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION_CUMANA</term>
<nutsynopsis>
	"Cumana partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ACORN_PARTITION</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned using the Cumana interface on Acorn machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION_EESOX</term>
<nutsynopsis>
	"EESOX partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ACORN_PARTITION</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION_ICS</term>
<nutsynopsis>
	"ICS partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ACORN_PARTITION</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned using the ICS interface on Acorn machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION_ADFS</term>
<nutsynopsis>
	"Native filecore partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ACORN_PARTITION</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
The Acorn Disc Filing System is the standard file system of the
RiscOS operating system which runs on Acorn's ARM-based Risc PC
systems and the Acorn Archimedes range of machines.  If you say
`Y' here, Linux will support disk partitions created under ADFS.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION_POWERTEC</term>
<nutsynopsis>
	"PowerTec partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ACORN_PARTITION</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Support reading partition tables created on Acorn machines using
the PowerTec SCSI drive.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ACORN_PARTITION_RISCIX</term>
<nutsynopsis>
	"RISCiX partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ACORN_PARTITION</literal>
	</para>

	<para>
	default value
	<literal>y if ARCH_ACORN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Once upon a time, there was a native Unix port for the Acorn series
of machines called RISCiX.  If you say 'Y' here, Linux will be able
to read disks partitioned under RISCiX.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OSF_PARTITION</term>
<nutsynopsis>
	"Alpha OSF partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if ALPHA</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned on an Alpha machine.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>AMIGA_PARTITION</term>
<nutsynopsis>
	"Amiga partition table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if AMIGA || AFFS_FS=y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned under AmigaOS.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ATARI_PARTITION</term>
<nutsynopsis>
	"Atari partition table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if ATARI</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned under the Atari OS.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>IBM_PARTITION</term>
<nutsynopsis>
	"IBM disk label and partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to be able to read the hard disk
partition table format used by IBM DASD disks operating under CMS.
Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAC_PARTITION</term>
<nutsynopsis>
	"Macintosh partition map support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if MAC</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned on a Macintosh.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MSDOS_PARTITION</term>
<nutsynopsis>
	"PC BIOS (MSDOS partition tables) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>BSD_DISKLABEL</term>
<nutsynopsis>
	"BSD disklabel (FreeBSD partition tables) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && MSDOS_PARTITION</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
FreeBSD uses its own hard disk partition scheme on your PC. It
requires only one entry in the primary partition table of your disk
and manages it similarly to DOS extended partitions, putting in its
first sector a new partition table in BSD disklabel format. Saying Y
here allows you to read these disklabels and further mount FreeBSD
partitions from within Linux if you have also said Y to "UFS
file system support", above. If you don't know what all this is
about, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MINIX_SUBPARTITION</term>
<nutsynopsis>
	"Minix subpartition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && MSDOS_PARTITION</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Minix 2.0.0/2.0.2 subpartition table support for Linux.
Say Y here if you want to mount and use Minix 2.0.0/2.0.2
subpartitions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SOLARIS_X86_PARTITION</term>
<nutsynopsis>
	"Solaris (x86) partition table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && MSDOS_PARTITION</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Like most systems, Solaris x86 uses its own hard disk partition
table format, incompatible with all others. Saying Y here allows you
to read these partition tables and further mount Solaris x86
partitions from within Linux if you have also said Y to "UFS
file system support", above.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>UNIXWARE_DISKLABEL</term>
<nutsynopsis>
	"Unixware slices support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED && MSDOS_PARTITION</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Like some systems, UnixWare uses its own slice table inside a
partition (VTOC - Virtual Table of Contents). Its format is
incompatible with all other OSes. Saying Y here allows you to read
VTOC and further mount UnixWare partitions read-only from within
Linux if you have also said Y to "UFS file system support" or
"System V and Coherent file system support", above.

This is mainly used to carry data from a UnixWare box to your
Linux box via a removable medium like magneto-optical, ZIP or
removable IDE drives. Note, however, that a good portable way to
transport files and directories between unixes (and even other
operating systems) is given by the tar program ("man tar" or
preferably "info tar").

If you don't know what all this is about, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LDM_PARTITION</term>
<nutsynopsis>
	"Windows Logical Disk Manager (Dynamic Disk) support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned using Windows 2000's or XP's Logical Disk Manager.
They are also known as "Dynamic Disks".

Windows 2000 introduced the concept of Dynamic Disks to get around
the limitations of the PC's partitioning scheme.  The Logical Disk
Manager allows the user to repartition a disk and create spanned,
mirrored, striped or RAID volumes, all without the need for
rebooting.

Normal partitions are now called Basic Disks under Windows 2000 and
XP.

For a fuller description read <file:Documentation/ldm.txt>.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LDM_DEBUG</term>
<nutsynopsis>
	"Windows LDM extra logging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>LDM_PARTITION</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like LDM to log verbosely.  This could be
helpful if the driver doesn't work as expected and you'd like to
report a bug.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SGI_PARTITION</term>
<nutsynopsis>
	"SGI partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if SGI_IP22 || SGI_IP27 || (MACH_JAZZ || SNI_RM200_PCI) && !CPU_LITTLE_ENDIAN</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to be able to read the hard disk
partition table format used by SGI machines.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ULTRIX_PARTITION</term>
<nutsynopsis>
	"Ultrix partition table support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if MACH_DECSTATION</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to be able to read the hard disk
partition table format used by DEC (now Compaq) Ultrix machines.
Otherwise, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SUN_PARTITION</term>
<nutsynopsis>
	"Sun partition tables support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

	<para>
	default value
	<literal>y if SPARC32 || SPARC64 || SUN3 || SUN3X</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Like most systems, SunOS uses its own hard disk partition table
format, incompatible with all others. Saying Y here allows you to
read these partition tables and further mount SunOS partitions from
within Linux if you have also said Y to "UFS file system support",
above. This is mainly used to carry data from a SPARC under SunOS to
your Linux box via a removable medium like magneto-optical or ZIP
drives; note however that a good portable way to transport files and
directories between unixes (and even other operating systems) is
given by the tar program ("man tar" or preferably "info tar"). If
you don't know what all this is about, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EFI_PARTITION</term>
<nutsynopsis>
	"EFI GUID Partition support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>PARTITION_ADVANCED</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you would like to use hard disks under Linux which
were partitioned using EFI GPT.  Presently only useful on the
IA-64 platform.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Native Language Support"

<nutentry>
	<term>NLS</term>
<nutsynopsis>
	"Base native language support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The base Native Language Support. A number of filesystems
depend on it (e.g. FAT, JOLIET, NT, BEOS filesystems), as well
as the ability of some filesystems to use native languages
(NCP, SMB).

If unsure, say Y.

To compile this code as a module, choose M here: the module
will be called nls_base.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_DEFAULT</term>
<nutsynopsis>
	"Default NLS Option"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	default value
	<literal>iso8859-1 if NLS</literal>
	</para>


	<para>
	type
	<literal>string</literal>
	</para>

	<para>
The default NLS used when mounting file system. Note, that this is
the NLS used by your console, not the NLS used by a specific file
system (if different) to store data (filenames) on a disk.
Currently, the valid values are:
big5, cp437, cp737, cp775, cp850, cp852, cp855, cp857, cp860, cp861,
cp862, cp863, cp864, cp865, cp866, cp869, cp874, cp932, cp936,
cp949, cp950, cp1251, cp1255, euc-jp, euc-kr, gb2312, iso8859-1,
iso8859-2, iso8859-3, iso8859-4, iso8859-5, iso8859-6, iso8859-7,
iso8859-8, iso8859-9, iso8859-13, iso8859-14, iso8859-15,
koi8-r, koi8-ru, koi8-u, sjis, tis-620, utf8.
If you specify a wrong value, it will use the built-in NLS;
compatible with iso8859-1.

If unsure, specify it as "iso8859-1".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_437</term>
<nutsynopsis>
	"Codepage 437 (United States, Canada)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored
in so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage that is used in
the United States and parts of Canada. This is recommended.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_737</term>
<nutsynopsis>
	"Codepage 737 (Greek)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored
in so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage that is used for
Greek. If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_775</term>
<nutsynopsis>
	"Codepage 775 (Baltic Rim)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored
in so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage that is used
for the Baltic Rim Languages (Latvian and Lithuanian). If unsure,
say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_850</term>
<nutsynopsis>
	"Codepage 850 (Europe)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage that is used for
much of Europe -- United Kingdom, Germany, Spain, Italy, and [add
more countries here]. It has some characters useful to many European
languages that are not part of the US codepage 437.

If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_852</term>
<nutsynopsis>
	"Codepage 852 (Central/Eastern Europe)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the Latin 2 codepage used by DOS
for much of Central and Eastern Europe. It has all the required
characters for these languages: Albanian, Croatian, Czech, English,
Finnish, Hungarian, Irish, German, Polish, Romanian, Serbian (Latin
transcription), Slovak, Slovenian, and Sorbian.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_855</term>
<nutsynopsis>
	"Codepage 855 (Cyrillic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Cyrillic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_857</term>
<nutsynopsis>
	"Codepage 857 (Turkish)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Turkish.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_860</term>
<nutsynopsis>
	"Codepage 860 (Portuguese)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Portuguese.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_861</term>
<nutsynopsis>
	"Codepage 861 (Icelandic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Icelandic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_862</term>
<nutsynopsis>
	"Codepage 862 (Hebrew)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Hebrew.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_863</term>
<nutsynopsis>
	"Codepage 863 (Canadian French)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Canadian
French.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_864</term>
<nutsynopsis>
	"Codepage 864 (Arabic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Arabic.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_865</term>
<nutsynopsis>
	"Codepage 865 (Norwegian, Danish)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for the Nordic
European countries.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_866</term>
<nutsynopsis>
	"Codepage 866 (Cyrillic/Russian)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for
Cyrillic/Russian.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_869</term>
<nutsynopsis>
	"Codepage 869 (Greek)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Greek.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_936</term>
<nutsynopsis>
	"Simplified Chinese charset (CP936, GB2312)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Simplified
Chinese(GBK).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_950</term>
<nutsynopsis>
	"Traditional Chinese charset (Big5)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Traditional
Chinese(Big5).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_932</term>
<nutsynopsis>
	"Japanese charsets (Shift-JIS, EUC-JP)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Shift-JIS
or EUC-JP. To use EUC-JP, you can use 'euc-jp' as mount option or
NLS Default value during kernel configuration, instead of 'cp932'.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_949</term>
<nutsynopsis>
	"Korean charset (CP949, EUC-KR)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for UHC.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_874</term>
<nutsynopsis>
	"Thai charset (CP874, TIS-620)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Thai.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_8</term>
<nutsynopsis>
	"Hebrew charsets (ISO-8859-8, CP1255)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for ISO8859-8, the Hebrew
character set.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_1250</term>
<nutsynopsis>
	"Windows CP1250 (Slavic/Central European Languages)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CDROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Windows CP-1250
character set, which works for most Latin-written Slavic and Central
European languages: Czech, German, Hungarian, Polish, Rumanian, Croatian,
Slovak, Slovene.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_CODEPAGE_1251</term>
<nutsynopsis>
	"Windows CP1251 (Bulgarian, Belarusian)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The Microsoft FAT file system family can deal with filenames in
native language character sets. These character sets are stored in
so-called DOS codepages. You need to include the appropriate
codepage if you want to be able to read/write these filenames on
DOS/Windows partitions correctly. This does apply to the filenames
only, not to the file contents. You can include several codepages;
say Y here if you want to include the DOS codepage for Russian and
Bulgarian and Belarusian.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ASCII</term>
<nutsynopsis>
	"ASCII (United States)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
An ASCII NLS module is needed if you want to override the
DEFAULT NLS with this very basic charset and don't want any
non-ASCII characters to be translated.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_1</term>
<nutsynopsis>
	"NLS ISO 8859-1  (Latin 1; Western European Languages)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 1 character
set, which covers most West European languages such as Albanian,
Catalan, Danish, Dutch, English, Faeroese, Finnish, French, German,
Galician, Irish, Icelandic, Italian, Norwegian, Portuguese, Spanish,
and Swedish. It is also the default for the US. If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_2</term>
<nutsynopsis>
	"NLS ISO 8859-2  (Latin 2; Slavic/Central European Languages)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 2 character
set, which works for most Latin-written Slavic and Central European
languages: Czech, German, Hungarian, Polish, Rumanian, Croatian,
Slovak, Slovene.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_3</term>
<nutsynopsis>
	"NLS ISO 8859-3  (Latin 3; Esperanto, Galician, Maltese, Turkish)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 3 character
set, which is popular with authors of Esperanto, Galician, Maltese,
and Turkish.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_4</term>
<nutsynopsis>
	"NLS ISO 8859-4  (Latin 4; old Baltic charset)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 4 character
set which introduces letters for Estonian, Latvian, and
Lithuanian. It is an incomplete predecessor of Latin 7.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_5</term>
<nutsynopsis>
	"NLS ISO 8859-5  (Cyrillic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for ISO8859-5, a Cyrillic
character set with which you can type Bulgarian, Belarusian,
Macedonian, Russian, Serbian, and Ukrainian. Note that the charset
KOI8-R is preferred in Russia.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_6</term>
<nutsynopsis>
	"NLS ISO 8859-6  (Arabic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for ISO8859-6, the Arabic
character set.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_7</term>
<nutsynopsis>
	"NLS ISO 8859-7  (Modern Greek)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for ISO8859-7, the Modern
Greek character set.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_9</term>
<nutsynopsis>
	"NLS ISO 8859-9  (Latin 5; Turkish)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 5 character
set, and it replaces the rarely needed Icelandic letters in Latin 1
with the Turkish ones. Useful in Turkey.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_13</term>
<nutsynopsis>
	"NLS ISO 8859-13 (Latin 7; Baltic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 7 character
set, which supports modern Baltic languages including Latvian
and Lithuanian.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_14</term>
<nutsynopsis>
	"NLS ISO 8859-14 (Latin 8; Celtic)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 8 character
set, which adds the last accented vowels for Welsh (aka Cymraeg)
(and Manx Gaelic) that were missing in Latin 1.
<http://linux.speech.cymru.org/> has further information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_ISO8859_15</term>
<nutsynopsis>
	"NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the Latin 9 character
set, which covers most West European languages such as Albanian,
Catalan, Danish, Dutch, English, Estonian, Faeroese, Finnish,
French, German, Galician, Irish, Icelandic, Italian, Norwegian,
Portuguese, Spanish, and Swedish. Latin 9 is an update to
Latin 1 (ISO 8859-1) that removes a handful of rarely used
characters and instead adds support for Estonian, corrects the
support for French and Finnish, and adds the new Euro character.
If unsure, say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_KOI8_R</term>
<nutsynopsis>
	"NLS KOI8-R (Russian)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the preferred Russian
character set.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_KOI8_U</term>
<nutsynopsis>
	"NLS KOI8-U/RU (Ukrainian, Belarusian)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the preferred Ukrainian
(koi8-u) and Belarusian (koi8-ru) character sets.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>NLS_UTF8</term>
<nutsynopsis>
	"NLS UTF8"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>NLS</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
If you want to display filenames with native language characters
from the Microsoft FAT file system family or from JOLIET CD-ROMs
correctly on the screen, you need to include the appropriate
input/output character sets. Say Y here for the UTF-8 encoding of
the Unicode/ISO9646 universal character set.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Profiling support"
<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>


<nutentry>
	<term>PROFILING</term>
<nutsynopsis>
	"Profiling support (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable the extended profiling support mechanisms used
by profilers such as OProfile.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>OPROFILE</term>
<nutsynopsis>
	"OProfile system profiling (EXPERIMENTAL)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EXPERIMENTAL && PROFILING</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
OProfile is a profiling system capable of profiling the
whole system, include the kernel, kernel modules, libraries,
and applications.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Kernel hacking"

<nutentry>
	<term>PRINTK_TIME</term>
<nutsynopsis>
	"Show timing information on printks"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Selecting this option causes timing information to be
included in printk output.  This allows you to measure
the interval between kernel operations, including bootup
operations.  This is useful for identifying long delays
in kernel startup.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_KERNEL</term>
<nutsynopsis>
	"Kernel debugging"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here if you are developing drivers or trying to debug and
identify kernel problems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>MAGIC_SYSRQ</term>
<nutsynopsis>
	"Magic SysRq key"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && !UML</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, you will have some control over the system even
if the system crashes for example during kernel debugging (e.g., you
will be able to flush the buffer cache to disk, reboot the system
immediately or dump some status information). This is accomplished
by pressing various keys while holding SysRq (Alt+PrintScreen). It
also works on a serial console (on PC hardware at least), if you
send a BREAK and then within 5 seconds a command keypress. The
keys are documented in <file:Documentation/sysrq.txt>. Don't say Y
unless you really know what this hack does.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LOG_BUF_SHIFT</term>
<nutsynopsis>
	"Kernel log buffer size (16 => 64KB, 17 => 128KB)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

  unknown prop 7!
	<para>
	default value
	<literal>17 if ARCH_S390</literal>
	</para>


	<para>
	default value
	<literal>16 if X86_NUMAQ || IA64</literal>
	</para>


	<para>
	default value
	<literal>15 if SMP</literal>
	</para>


	<para>
	default value
	<literal>14</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
Select kernel log buffer size as a power of 2.
Defaults and Examples:
           17 => 128 KB for S/390
           16 => 64 KB for x86 NUMAQ or IA-64
           15 => 32 KB for SMP
           14 => 16 KB for uniprocessor
           13 =>  8 KB
           12 =>  4 KB
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DETECT_SOFTLOCKUP</term>
<nutsynopsis>
	"Detect Soft Lockups"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	default value
	<literal>y if DEBUG_KERNEL</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to enable the kernel to detect "soft lockups",
which are bugs that cause the kernel to loop in kernel
mode for more than 10 seconds, without giving other tasks a
chance to run.

When a soft-lockup is detected, the kernel will print the
current stack trace (which you should report), but the
system will stay locked up. This feature has negligible
overhead.

(Note that "hard lockups" are separate type of bugs that
 can be detected via the NMI-watchdog, on platforms that
 support it.)
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SCHEDSTATS</term>
<nutsynopsis>
	"Collect scheduler statistics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && PROC_FS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, additional code will be inserted into the
scheduler and related routines to collect statistics about
scheduler behavior and provide them in /proc/schedstat.  These
stats may be useful for both tuning and debugging the scheduler
If you aren't debugging the scheduler or trying to tune a specific
application, you can say N to avoid the very slight overhead
this adds.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_SLAB</term>
<nutsynopsis>
	"Debug memory allocations"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to have the kernel do limited verification on memory
allocation as well as poisoning memory on free to catch use of freed
memory. This can make kmalloc/kfree-intensive workloads much slower.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_PREEMPT</term>
<nutsynopsis>
	"Debug preemptible kernel"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && PREEMPT</literal>
	</para>

	<para>
	default value
	<literal>y if DEBUG_KERNEL && PREEMPT</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here then the kernel will use a debug variant of the
commonly used smp_processor_id() function and will print warnings
if kernel code uses it in a preemption-unsafe way. Also, the kernel
will detect preemption count underflows.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_SPINLOCK</term>
<nutsynopsis>
	"Spinlock debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here and build SMP to catch missing spinlock initialization
and certain other kinds of spinlock errors commonly made.  This is
best used in conjunction with the NMI watchdog so that spinlock
deadlocks are also debuggable.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_SPINLOCK_SLEEP</term>
<nutsynopsis>
	"Sleep-inside-spinlock checking"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, various routines which may sleep will become very
noisy if they are called with a spinlock held.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_KOBJECT</term>
<nutsynopsis>
	"kobject debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here, some extra kobject debugging messages will be sent
to the syslog. 
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_HIGHMEM</term>
<nutsynopsis>
	"Highmem debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && HIGHMEM</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This options enables addition error checking for high memory systems.
Disable for production systems.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_BUGVERBOSE</term>
<nutsynopsis>
	"Verbose BUG() reporting (adds 70K)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>BUG && (ARM || ARM26 || M32R || M68K || SPARC32 || SPARC64 || X86 && !X86_64 || FRV) && DEBUG_KERNEL && EMBEDDED</literal>
	</para>

	<para>
	default value
	<literal>!EMBEDDED if BUG && (ARM || ARM26 || M32R || M68K || SPARC32 || SPARC64 || X86 && !X86_64 || FRV)</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Say Y here to make BUG() panics output the file name and line number
of the BUG call as well as the EIP and oops trace.  This aids
debugging but costs about 70-100K of memory.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_INFO</term>
<nutsynopsis>
	"Compile the kernel with debug info"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here the resulting kernel image will include
debugging info resulting in a larger kernel image.
Say Y here only if you plan to debug the kernel.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_IOREMAP</term>
<nutsynopsis>
	"Enable ioremap() debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && PARISC</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enabling this option will cause the kernel to distinguish between
ioremapped and physical addresses.  It will print a backtrace (at
most one every 10 seconds), hopefully allowing you to see which
drivers need work.  Fixing all these problems is a prerequisite
for turning on USE_HPPA_IOREMAP.  The warnings are harmless;
the kernel has enough information to fix the broken drivers
automatically, but we'd like to make it more efficient by not
having to do that.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_FS</term>
<nutsynopsis>
	"Debug Filesystem"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && SYSFS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
debugfs is a virtual file system that kernel developers use to put
debugging files into.  Enable this option to be able to read and
write to these files.

If unsure, say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>FRAME_POINTER</term>
<nutsynopsis>
	"Compile the kernel with frame pointers"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML)</literal>
	</para>

	<para>
	default value
	<literal>y if DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML) && DEBUG_INFO && UML</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here the resulting kernel image will be slightly larger
and slower, but it might give very useful debugging information
on some architectures or you use external debuggers.
If you don't debug the kernel, you can say N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>EARLY_PRINTK</term>
<nutsynopsis>
	"Early printk"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>EMBEDDED && DEBUG_KERNEL</literal>
	</para>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Write kernel log output directly into the VGA buffer or to a serial
port.

This is useful for kernel debugging when your machine crashes very
early before the console code is initialized. For normal operation
it is not recommended because it looks ugly and doesn't cooperate
with klogd/syslogd or the X server. You should normally N here,
unless you want to debug such a crash.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_STACKOVERFLOW</term>
<nutsynopsis>
	"Check for stack overflows"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option will cause messages to be printed if free stack space
drops below a certain limit.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KPROBES</term>
<nutsynopsis>
	"Kprobes"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Kprobes allows you to trap at almost any kernel address and
execute a callback function.  register_kprobe() establishes
a probepoint and specifies the callback.  Kprobes is useful
for kernel debugging, non-intrusive instrumentation and testing.
If in doubt, say "N".
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>DEBUG_STACK_USAGE</term>
<nutsynopsis>
	"Stack utilization instrumentation"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Enables the display of the minimum amount of free stack which each
task has ever had available in the sysrq-T and sysrq-P debug output.

This option will slow down process creation somewhat.
	</para>

</nutentrybody>
</nutentry>

comment "Page alloc debug is incompatible with Software Suspend on i386"
<para>
	depends on
	<literal>DEBUG_KERNEL && SOFTWARE_SUSPEND</literal>
	</para>


<nutentry>
	<term>DEBUG_PAGEALLOC</term>
<nutsynopsis>
	"Page alloc debugging"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL && !SOFTWARE_SUSPEND</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Unmap pages from the kernel linear mapping after free_pages().
This results in a large slowdown, but helps to find certain types
of memory corruptions.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>4KSTACKS</term>
<nutsynopsis>
	"Use 4Kb for kernel stacks instead of 8Kb"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>DEBUG_KERNEL</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
If you say Y here the kernel will use a 4Kb stacksize for the
kernel stack attached to each process/thread. This facilitates
running more threads on a system and also reduces the pressure
on the VM subsystem for higher order allocations. This option
will also use IRQ stacks to compensate for the reduced stackspace.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_FIND_SMP_CONFIG</term>
	<para>
	default value
	<literal>y if X86_LOCAL_APIC || X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_MPPARSE</term>
	<para>
	default value
	<literal>y if X86_LOCAL_APIC && !X86_VISWS</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Security options"

<nutentry>
	<term>KEYS</term>
<nutsynopsis>
	"Enable access key retention support"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option provides support for retaining authentication tokens and
access keys in the kernel.

It also includes provision of methods by which such keys might be
associated with a process so that network filesystems, encryption
support and the like can find them.

Furthermore, a special type of key is available that acts as keyring:
a searchable sequence of keys. Each process is equipped with access
to five standard keyrings: UID-specific, GID-specific, session,
process and thread.

If you are unsure as to whether this is required, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>KEYS_DEBUG_PROC_KEYS</term>
<nutsynopsis>
	"Enable the /proc/keys file by which all keys may be viewed"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>KEYS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option turns on support for the /proc/keys file through which
all the keys on the system can be listed.

This option is a slight security risk in that it makes it possible
for anyone to see all the keys on the system. Normally the manager
pretends keys that are inaccessible to a process don't exist as far
as that process is concerned.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY</term>
<nutsynopsis>
	"Enable different security models"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SYSFS</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This allows you to choose different security modules to be
configured into your kernel.

If this option is not selected, the default Linux security
model will be used.

If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_NETWORK</term>
<nutsynopsis>
	"Socket and Networking Security Hooks"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the socket and networking security hooks.
If enabled, a security module can use these hooks to
implement socket and networking access controls.
If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_CAPABILITIES</term>
<nutsynopsis>
	"Default Linux Capabilities"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This enables the "default" Linux capabilities functionality.
If you are unsure how to answer this question, answer Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_ROOTPLUG</term>
<nutsynopsis>
	"Root Plug Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>USB && SECURITY</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is a sample LSM module that should only be used as such.
It prevents any programs running with egid == 0 if a specific
USB device is not present in the system.

See <http://www.linuxjournal.com/article.php?sid=6279> for
more information about this module.

If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SECLVL</term>
<nutsynopsis>
	"BSD Secure Levels"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Implements BSD Secure Levels as an LSM.  See
<file:Documentation/seclvl.txt> for instructions on how to use this
module.

If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX</term>
<nutsynopsis>
	"NSA SELinux Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY && NET && INET</literal>
	</para>

	<para>
	default value
	<literal>n if SECURITY && NET && INET</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This selects NSA Security-Enhanced Linux (SELinux).
You will also need a policy configuration and a labeled filesystem.
You can obtain the policy compiler (checkpolicy), the utility for
labeling filesystems (setfiles), and an example policy configuration
from <http://www.nsa.gov/selinux/>.
If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX_BOOTPARAM</term>
<nutsynopsis>
	"NSA SELinux boot parameter"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY_SELINUX</literal>
	</para>

	<para>
	default value
	<literal>n if SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option adds a kernel parameter 'selinux', which allows SELinux
to be disabled at boot.  If this option is selected, SELinux
functionality can be disabled with selinux=0 on the kernel
command line.  The purpose of this option is to allow a single
kernel image to be distributed with SELinux built in, but not
necessarily enabled.

If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX_BOOTPARAM_VALUE</term>
<nutsynopsis>
	"NSA SELinux boot parameter default value"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY_SELINUX_BOOTPARAM</literal>
	</para>

  unknown prop 7!
	<para>
	default value
	<literal>1 if SECURITY_SELINUX_BOOTPARAM</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option sets the default value for the kernel parameter
'selinux', which allows SELinux to be disabled at boot.  If this
option is set to 0 (zero), the SELinux kernel parameter will
default to 0, disabling SELinux at bootup.  If this option is
set to 1 (one), the SELinux kernel parameter will default to 1,
enabling SELinux at bootup.

If you are unsure how to answer this question, answer 1.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX_DISABLE</term>
<nutsynopsis>
	"NSA SELinux runtime disable"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY_SELINUX</literal>
	</para>

	<para>
	default value
	<literal>n if SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option enables writing to a selinuxfs node 'disable', which
allows SELinux to be disabled at runtime prior to the policy load.
SELinux will then remain disabled until the next boot.
This option is similar to the selinux=0 boot parameter, but is to
support runtime disabling of SELinux, e.g. from /sbin/init, for
portability across platforms where boot parameters are difficult
to employ.

If you are unsure how to answer this question, answer N.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX_DEVELOP</term>
<nutsynopsis>
	"NSA SELinux Development Support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY_SELINUX</literal>
	</para>

	<para>
	default value
	<literal>y if SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This enables the development support option of NSA SELinux,
which is useful for experimenting with SELinux and developing
policies.  If unsure, say Y.  With this option enabled, the
kernel will start in permissive mode (log everything, deny nothing)
unless you specify enforcing=1 on the kernel command line.  You
can interactively toggle the kernel between enforcing mode and
permissive mode (if permitted by the policy) via /selinux/enforce.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX_AVC_STATS</term>
<nutsynopsis>
	"NSA SELinux AVC Statistics"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY_SELINUX</literal>
	</para>

	<para>
	default value
	<literal>y if SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option collects access vector cache statistics to
/selinux/avc/cache_stats, which may be monitored via
tools such as avcstat.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>SECURITY_SELINUX_CHECKREQPROT_VALUE</term>
<nutsynopsis>
	"NSA SELinux checkreqprot default value"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>SECURITY_SELINUX</literal>
	</para>

  unknown prop 7!
	<para>
	default value
	<literal>1 if SECURITY_SELINUX</literal>
	</para>


	<para>
	type
	<literal>integer</literal>
	</para>

	<para>
This option sets the default value for the 'checkreqprot' flag
that determines whether SELinux checks the protection requested
by the application or the protection that will be applied by the
kernel (including any implied execute for read-implies-exec) for
mmap and mprotect calls.  If this option is set to 0 (zero),
SELinux will default to checking the protection that will be applied
by the kernel.  If this option is set to 1 (one), SELinux will
default to checking the protection requested by the application.
The checkreqprot flag may be changed from the default via the
'checkreqprot=' boot parameter.  It may also be changed at runtime
via /selinux/checkreqprot if authorized by policy.

If you are unsure how to answer this question, answer 1.
	</para>

</nutentrybody>
</nutentry>

endmenu

menu "Cryptographic options"

<nutentry>
	<term>CRYPTO</term>
<nutsynopsis>
	"Cryptographic API"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
This option provides the core Cryptographic API.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_HMAC</term>
<nutsynopsis>
	"HMAC support"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
HMAC: Keyed-Hashing for Message Authentication (RFC2104).
This is required for IPSec.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_NULL</term>
<nutsynopsis>
	"Null algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
These are 'Null' algorithms, used by IPsec, which do nothing.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_MD4</term>
<nutsynopsis>
	"MD4 digest algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
MD4 message digest algorithm (RFC1320).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_MD5</term>
<nutsynopsis>
	"MD5 digest algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
MD5 message digest algorithm (RFC1321).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_SHA1</term>
<nutsynopsis>
	"SHA1 digest algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_SHA1_Z990</term>
<nutsynopsis>
	"SHA1 digest algorithm for IBM zSeries z990"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO && ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_SHA256</term>
<nutsynopsis>
	"SHA256 digest algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SHA256 secure hash standard (DFIPS 180-2).

This version of SHA implements a 256 bit hash with 128 bits of
security against collision attacks.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_SHA512</term>
<nutsynopsis>
	"SHA384 and SHA512 digest algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
SHA512 secure hash standard (DFIPS 180-2).

This version of SHA implements a 512 bit hash with 256 bits of
security against collision attacks.

This code also includes SHA-384, a 384 bit hash with 192 bits
of security against collision attacks.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_WP512</term>
<nutsynopsis>
	"Whirlpool digest algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Whirlpool hash algorithm 512, 384 and 256-bit hashes

Whirlpool-512 is part of the NESSIE cryptographic primitives.
Whirlpool will be part of the ISO/IEC 10118-3:2003(E) standard

See also:
<http://planeta.terra.com.br/informatica/paulobarreto/WhirlpoolPage.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_TGR192</term>
<nutsynopsis>
	"Tiger digest algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Tiger hash algorithm 192, 160 and 128-bit hashes

Tiger is a hash function optimized for 64-bit processors while
still having decent performance on 32-bit processors.
Tiger was developed by Ross Anderson and Eli Biham.

See also:
<http://www.cs.technion.ac.il/~biham/Reports/Tiger/>.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_DES</term>
<nutsynopsis>
	"DES and Triple DES EDE cipher algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
DES cipher algorithm (FIPS 46-2), and Triple DES EDE (FIPS 46-3).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_DES_Z990</term>
<nutsynopsis>
	"DES and Triple DES cipher algorithms for IBM zSeries z990"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO && ARCH_S390</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
DES cipher algorithm (FIPS 46-2), and Triple DES EDE (FIPS 46-3).
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_BLOWFISH</term>
<nutsynopsis>
	"Blowfish cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Blowfish cipher algorithm, by Bruce Schneier.

This is a variable key length cipher which can use keys from 32
bits to 448 bits in length.  It's fast, simple and specifically
designed for use on "large microprocessors".

See also:
<http://www.schneier.com/blowfish.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_TWOFISH</term>
<nutsynopsis>
	"Twofish cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Twofish cipher algorithm.

Twofish was submitted as an AES (Advanced Encryption Standard)
candidate cipher by researchers at CounterPane Systems.  It is a
16 round block cipher supporting key sizes of 128, 192, and 256
bits.

See also:
<http://www.schneier.com/twofish.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_SERPENT</term>
<nutsynopsis>
	"Serpent cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Serpent cipher algorithm, by Anderson, Biham & Knudsen.

Keys are allowed to be from 0 to 256 bits in length, in steps
of 8 bits.  Also includes the 'Tnepres' algorithm, a reversed
variant of Serpent for compatibility with old kerneli code.

See also:
<http://www.cl.cam.ac.uk/~rja14/serpent.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_AES</term>
<nutsynopsis>
	"AES cipher algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO && !X86 && !UML_X86</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
AES cipher algorithms (FIPS-197). AES uses the Rijndael 
algorithm.

Rijndael appears to be consistently a very good performer in
both hardware and software across a wide range of computing 
environments regardless of its use in feedback or non-feedback 
modes. Its key setup time is excellent, and its key agility is 
good. Rijndael's very low memory requirements make it very well 
suited for restricted-space environments, in which it also 
demonstrates excellent performance. Rijndael's operations are 
among the easiest to defend against power and timing attacks.	

The AES specifies three key sizes: 128, 192 and 256 bits	  

See <http://csrc.nist.gov/CryptoToolkit/aes/> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_AES_586</term>
<nutsynopsis>
	"AES cipher algorithms (i586)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO && (X86 || UML_X86) && !64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
AES cipher algorithms (FIPS-197). AES uses the Rijndael 
algorithm.

Rijndael appears to be consistently a very good performer in
both hardware and software across a wide range of computing 
environments regardless of its use in feedback or non-feedback 
modes. Its key setup time is excellent, and its key agility is 
good. Rijndael's very low memory requirements make it very well 
suited for restricted-space environments, in which it also 
demonstrates excellent performance. Rijndael's operations are 
among the easiest to defend against power and timing attacks.	

The AES specifies three key sizes: 128, 192 and 256 bits	  

See <http://csrc.nist.gov/encryption/aes/> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_AES_X86_64</term>
<nutsynopsis>
	"AES cipher algorithms (x86_64)"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO && (X86 || UML_X86) && 64BIT</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
AES cipher algorithms (FIPS-197). AES uses the Rijndael 
algorithm.

Rijndael appears to be consistently a very good performer in
both hardware and software across a wide range of computing 
environments regardless of its use in feedback or non-feedback 
modes. Its key setup time is excellent, and its key agility is 
good. Rijndael's very low memory requirements make it very well 
suited for restricted-space environments, in which it also 
demonstrates excellent performance. Rijndael's operations are 
among the easiest to defend against power and timing attacks.	

The AES specifies three key sizes: 128, 192 and 256 bits	  

See <http://csrc.nist.gov/encryption/aes/> for more information.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_CAST5</term>
<nutsynopsis>
	"CAST5 (CAST-128) cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The CAST5 encryption algorithm (synonymous with CAST-128) is
described in RFC2144.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_CAST6</term>
<nutsynopsis>
	"CAST6 (CAST-256) cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
The CAST6 encryption algorithm (synonymous with CAST-256) is
described in RFC2612.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_TEA</term>
<nutsynopsis>
	"TEA, XTEA and XETA cipher algorithms"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
TEA cipher algorithm.

Tiny Encryption Algorithm is a simple cipher that uses
many rounds for security.  It is very fast and uses
little memory.

Xtendend Tiny Encryption Algorithm is a modification to
the TEA algorithm to address a potential key weakness
in the TEA algorithm.

Xtendend Encryption Tiny Algorithm is a mis-implementation 
of the XTEA algorithm for compatibility purposes.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_ARC4</term>
<nutsynopsis>
	"ARC4 cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
ARC4 cipher algorithm.

ARC4 is a stream cipher using keys ranging from 8 bits to 2048
bits in length.  This algorithm is required for driver-based 
WEP, but it should not be for other purposes because of the
weakness of the algorithm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_KHAZAD</term>
<nutsynopsis>
	"Khazad cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Khazad cipher algorithm.

Khazad was a finalist in the initial NESSIE competition.  It is
an algorithm optimized for 64-bit processors with good performance
on 32-bit processors.  Khazad uses an 128 bit key size.

See also:
<http://planeta.terra.com.br/informatica/paulobarreto/KhazadPage.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_ANUBIS</term>
<nutsynopsis>
	"Anubis cipher algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Anubis cipher algorithm.

Anubis is a variable key length cipher which can use keys from 
128 bits to 320 bits in length.  It was evaluated as a entrant
in the NESSIE competition.

See also:
<https://www.cosic.esat.kuleuven.ac.be/nessie/reports/>
<http://planeta.terra.com.br/informatica/paulobarreto/AnubisPage.html>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_DEFLATE</term>
<nutsynopsis>
	"Deflate compression algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

  unknown prop 6!
  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This is the Deflate algorithm (RFC1951), specified for use in
IPSec with the IPCOMP protocol (RFC3173, RFC2394).

You will most probably want this if using IPSec.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_MICHAEL_MIC</term>
<nutsynopsis>
	"Michael MIC keyed digest algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Michael MIC is used for message integrity protection in TKIP
(IEEE 802.11i). This algorithm is required for TKIP, but it
should not be used for other purposes because of the weakness
of the algorithm.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_CRC32C</term>
<nutsynopsis>
	"CRC32c CRC algorithm"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

  unknown prop 6!
	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Castagnoli, et al Cyclic Redundancy-Check Algorithm.  Used
by iSCSI for header and data digests and by others.
See Castagnoli93.  This implementation uses lib/libcrc32c.
Module will be crc32c.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_TEST</term>
<nutsynopsis>
	"Testing module"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Quick & dirty crypto test module.
	</para>

</nutentrybody>
</nutentry>

menu "Hardware crypto devices"

<nutentry>
	<term>CRYPTO_DEV_PADLOCK</term>
<nutsynopsis>
	"Support for VIA PadLock ACE"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO && X86 && !X86_64</literal>
	</para>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
Some VIA processors come with an integrated crypto engine
(so called VIA PadLock ACE, Advanced Cryptography Engine)
that provides instructions for very fast {en,de}cryption 
with some algorithms.

The instructions are used only when the CPU supports them.
Otherwise software encryption is used. If you are unsure,
say Y.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRYPTO_DEV_PADLOCK_AES</term>
<nutsynopsis>
	"Support for AES in VIA PadLock"
</nutsynopsis>
<nutentrybody>
	<para>
	depends on
	<literal>CRYPTO_DEV_PADLOCK</literal>
	</para>

	<para>
	default value
	<literal>y if CRYPTO_DEV_PADLOCK</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

	<para>
Use VIA PadLock for AES algorithm.
	</para>

</nutentrybody>
</nutentry>

endmenu

endmenu

menu "Library routines"

<nutentry>
	<term>CRC_CCITT</term>
<nutsynopsis>
	"CRC-CCITT functions"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option is provided for the case where no in-kernel-tree
modules require CRC-CCITT functions, but a module built outside
the kernel tree does. Such modules that use library CRC-CCITT
functions require M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRC16</term>
<nutsynopsis>
	"CRC16 functions"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option is provided for the case where no in-kernel-tree
modules require CRC16 functions, but a module built outside
the kernel tree does. Such modules that use library CRC16
functions require M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>CRC32</term>
<nutsynopsis>
	"CRC32 functions"
</nutsynopsis>
<nutentrybody>

	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option is provided for the case where no in-kernel-tree
modules require CRC32 functions, but a module built outside the
kernel tree does. Such modules that use library CRC32 functions
require M here.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>LIBCRC32C</term>
<nutsynopsis>
	"CRC32c (Castagnoli, et al) Cyclic Redundancy-Check"
</nutsynopsis>
<nutentrybody>

	<para>
	type
	<literal>tristate</literal>
	</para>

	<para>
This option is provided for the case where no in-kernel-tree
modules require CRC32c functions, but a module built outside the
kernel tree does. Such modules that use library CRC32c functions
require M here.  See Castagnoli93.
Module will be libcrc32c.
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZLIB_INFLATE</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>ZLIB_DEFLATE</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GENERIC_ALLOCATOR</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REED_SOLOMON</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REED_SOLOMON_ENC8</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REED_SOLOMON_DEC8</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REED_SOLOMON_ENC16</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>REED_SOLOMON_DEC16</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TEXTSEARCH</term>
	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TEXTSEARCH_KMP</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TEXTSEARCH_BM</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>TEXTSEARCH_FSM</term>
	<para>
	type
	<literal>tristate</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu
<nutentry>
	<term>GENERIC_HARDIRQS</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GENERIC_IRQ_PROBE</term>
	<para>
	default value
	<literal>y</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>GENERIC_PENDING_IRQ</term>
	<para>
	default value
	<literal>y if GENERIC_HARDIRQS && SMP</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_SMP</term>
	<para>
	default value
	<literal>y if SMP && !X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_HT</term>
	<para>
	default value
	<literal>y if SMP && !X86_VISWS && !X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_BIOS_REBOOT</term>
	<para>
	default value
	<literal>y if !X86_VISWS && !X86_VOYAGER</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>X86_TRAMPOLINE</term>
	<para>
	default value
	<literal>y if X86_SMP || X86_VOYAGER && SMP</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>
<nutentry>
	<term>PC</term>
	<para>
	default value
	<literal>y if X86 && !EMBEDDED</literal>
	</para>


	<para>
	type
	<literal>boolean</literal>
	</para>

</nutentrybody>
</nutentry>

endmenu
#
# using defaults found in .config
#
