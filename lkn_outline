Proposed Linux Kernel in a Nutshell chapter outline:

 1 - Introduction or Foreword from some other kernel developer
 2 - Kernel History and Background (just a few pages)
 3 - Requirements to build a kernel
 4 - Retrieving the kernel source
 5 - Building a kernel
	- use the the default configuration options
	- basic options to make (full coverage will be in later
	  chapter).
	- building a kernel with the source in one place, and the output
	  in another.
	- building only a portion of the kernel tree
	- building a kernel for a different architecture
 6 - Installing a built kernel and booting with it
	- grub
	- lilo
	- other boot loaders
 7 - Upgrading the kernel to the next version
	- retrieving the patch
	- applying the patch
	- updating the configuration
	- building the updated kernel
 8 - Configuring a kernel
	- text methods
		- make config
		- make oldconfig
		- make menuconfig
	- graphical methods
		- make xconfig
		- make gconfig
 9 - Recipies for creating configurations
	- Disks
		- USB storage
		- SATA
		- cdrom burning
	- Devices
		- USB
		- firewire / ieee1394
		- PCI hotplug
		- PCMCIA
		- Sound (ALSA)
	- CPU
		- processor types
		- suspend
		- cpu frequency scaling
		- ACPI
		- SMP
		- different memory models
		- Preemption
	- Network stuff
		- Netfilter
		- network drivers
		- Irda
		- wireless
	- Filesystems
		- RAID
		- LVM
		- DM
		- Samba
		- Journaling filesystems
		- OCFS2
	- Security
		- SELinux
		- BSD Secure Levels
	- Kernel debugging
10 - Customizing the initramfs / initrd image
11 - Kernel boot command line reference
12 - Kernel build command line reference
13 - Kernel configuration option reference
	- will be only the most "important" ones, and will be the bulk
	  of the book (although the previous chapters will not be
	  "light".)

Appendixes:
 - Becoming a kernel programmer
 	- basics of creating a patch
	- how to submit a valid patch and to whom
 	- kernelnewbies
	- kernel janitor project
- Managing changes made to a kernel source tree
	- based on the ideas presented at
	  http://www.linuxjournal.com/article/6183
- Creating useful bug reports
	- decoding a oops message
	- what a kernel developer wants to see in a bug report.
	- who to send the report to.
		- email
		- bugzilla.kernel.org
