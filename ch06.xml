<chapter id="LKN-installing">

<title>
Installing a kernel and booting with it
</title>

<para>
Now that you have a kernel successfully built, it is time to install it and
attempt to boot your new kernel.  Note, for this chapter, all of the
commands need to be run as the root user, which is different from the other
chapters.  This can either be done by using the <command>sudo</command>
program, or the <command>su</command> command.
</para>

<para>
To see if you have <command>sudo</command> installed and the proper access
set up, do the following:
<screen>
$ <userinput>sudo ls ~/linux/linux-2.6.17.11/Makefile</userinput>
Password:
Makefile
</screen>
Enter either your own password at the password prompt, or the password of
the system administrator (root).  It depends on how the
<command>sudo</command> command is set up as to which is necessary.  If
this is successful, and you see the line containing:
<screen>
Makefile
</screen>
then you can skip to the next section.
</para>

<para>
If <command>sudo</command> is not installed or giving you the proper
rights, then try using the <command>su</command> command:
<screen>
$ <userinput>su</userinput>
Password:
# <userinput>exit</userinput>
exit
$
</screen>
At the password prompt, enter in the password of the system administrator
(root).  When the <command>su</command> program successfully accepts the
password, you are transfered to running everything with full root
privileges.  Be very careful while as root, and only do the minimum needed
and then exit the program to continue back as your normal user account.
</para>

<sect1>
<title>Using the distro install scripts</title>
<para>
Almost all distributions come with a script called
<command>installkernel</command> that can be used by the kernel build
system to automatically install a built kernel into the proper location and
modify the bootloader so that nothing extra needs to be done by the
developer.
<footnote>
<para>
Notable ones to this exception are Gentoo and other "from scratch" type
distributions, which expect the user to know how to install their kernel on
their own.  These types of distributions always include documentation on
how to install a new kernel, so it should be consulted for the exact method
required.
</para>
</footnote>
To use this method of installing a kernel, first do:
<screen>
# <userinput>make modules_install</userinput>
</screen>
This will install all of the modules that you have built and place them in
the proper location in the filesystem for the new kernel to properly find.
Modules are placed in the <filename>/lib/modules/KERNEL_VERSION/</filename>
directory, where <literal>KERNEL_VERSION</literal> is the kernel version of
the new kernel you have just built.
</para>

<para>
After the modules have been successfully installed, the main kernel image
must be installed:
<screen>
# <userinput>make install</userinput>
</screen>
This will cause the following steps to happen:
<itemizedlist>
<listitem>
<para>
The kernel build system will verify that the kernel has been successfully
built properly.
</para>
</listitem>
<listitem>
<para>
The build system will install the static kernel portion into /boot
directory and name it based on the kernel version of the built kernel.
</para>
</listitem>

<listitem>
<para>
Any needed initial ram disk images will be automatically created, using the
modules that have just been installed during the
<literal>modules_install</literal> phase.
</para>
</listitem>

<listitem>
<para>
The bootloader program will be properly notified that a new kernel is
present and it will be added to the approiate menu to be selected from the
next the machine is booted.
</para>
</listitem>

</itemizedlist>
</para>

<para>
After this is finished, the kernel is successfully installed, and you can
safely reboot and try out your new kernel image.  Note that this
installation does not overwrite any older kernel images so if there is a
problem with your new kernel image, the old kernel can be selected at boot
time.
</para>

</sect1>

<sect1>
<title>Installing by hand</title>

<para>
If your distro does not have a <command>installkernel</command> command, or
you wish to just do it all by hand to understand the steps involved, here
are the steps involved in installing a kernel by hand.
</para>

<orderedlist>
<listitem>
<para>
The modules must be installed:
<screen>
# <userinput>make modules_install</userinput>
</screen>
</para>
</listitem>

<listitem>
<para>
The static kernel image must be copied into the <filename>/boot</filename>
directory.  To do this for a <literal>i386</literal> based kernel, do the
following:
<screen>
# <userinput>make kernelversion</userinput>
2.6.17.11
</screen>
Note that the kernel version will probably be different for your kernel.
Use this value in place of the text <literal>KERNEL_VERSION</literal> in
all of the following steps:
<screen>
# <userinput>cp arch/i386/boot/bzImage # /boot/bzImage-KERNEL_VERSION</userinput>
# <userinput>cp System.map /boot/System.map-KERNEL_VERSION</userinput>
</screen>
</para>
</listitem>

<listitem>
<para>
Modify the bootloader to have it know about the new kernel.  See the
different sections below for how to do this.
</para>
</listitem>
</orderedlist>

<para>
If, after booting the new kernel, the boot process does not work properly,
usually a initial ramdisk image is needed.  To create this properly, use
the steps in the beginning of this chapter for installing a kernel
automatically, as the distribution install scripts know how to properly
create the ramdisk using the needed scripts and tools.  As each
distribution does this differently, it is beyond the scope of this book to
cover all of the different methods of building the ramdisk image to work
properly.
</para>

<para>
Here is a handy script that can be used to install the kernel automatically
instead of having to type the above commands all the time:
<programlisting>
#!/bin/sh
#
# installs a kernel
#
make modules_install

# find out what kernel version this is
for TAG in VERSION PATCHLEVEL SUBLEVEL EXTRAVERSION ; do
    eval `sed -ne "/^$TAG/s/ //gp" Makefile`
done
SRC_RELEASE=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION

# figure out the arch
ARCH=`grep "CONFIG_ARCH " include/linux/autoconf.h | cut -f 2 -d "\""`

# copy the kernel image
cp arch/$ARCH/boot/bzImage /boot/bzImage-"$SRC_RELEASE"

# copy the System.map file
cp System.map /boot/System.map-"$SRC_RELEASE"

echo "Installed $SRC_RELEASE for $ARCH"
</programlisting>
</para>

</sect1>

<sect1>
<title>Modifying the bootloader for the new kernel</title>

<para>
There are two common Linux kernel bootloaders, <command>grub</command> and
<command>lilo</command>.  <command>grub</command> is the more commonly used
one in modern distributions, and does some things a little easier than
<command>lilo</command>, but <command>lilo</command> is still used in many
different places.
</para>

<para>
To determine which kind of bootloader you use to boot with, look in the
<filename>/boot/</filename> directory.  If there is a
<filename>grub</filename> subdirectory:
<screen>
$ <userinput>ls -F /boot | grep grub</userinput>
grub/
</screen>
then you are using the <command>grub</command> program to boot with.  If
this directory is not present, then look for the presence of the
<filename>/etc/lilo.conf</filename> file:
<screen>
$ <userinput>ls /etc/lilo.conf</userinput>
/etc/lilo.conf
</screen>
If this is present, then you are using the <command>lilo</command> program
to boot with.
</para>

<para>
The steps involved to add a new kernel to each of these programs are
different, so only follow the section that corrisponds to the program you
are using.
</para>

<sect2>
<title><command>grub</command></title>

<para>
To let <command>grub</command> know that a new kernel is present, all that
is needed is to modify the <filename>/boot/grub/menu.lst</filename> file.
For full details on the structure of this file, and all of the different
options available, please see the <command>grub</command> info pages:
<screen>
$ <userinput>info grub</userinput>
</screen>
</para>

<para>
The easiest way to add a new kernel entry to the
<filename>/boot/grub/menu.lst</filename> file, is to copy an existing
entry.  For example, consider the following <filename>menu.lst</filename>
file from a Gentoo system:
<programlisting>
timeout 300
default 0

splashimage=(hd0,0)/grub/splash.xpm.gz

title 2.6.16.11
	root (hd0,0)
	kernel /bzImage-2.6.16.11 root=/dev/sda2 vga=0x0305

title 2.6.16
	root (hd0,0)
	kernel /bzImage-2.6.16 root=/dev/sda2 vga=0x0305
</programlisting>
The line starting with the word <literal>title</literal> defines a new
kernel entry.  Simply copy the lines from one instance of the
<literal>title</literal> word to the next one:
<programlisting>
title 2.6.16.11
	root (hd0,0)
	kernel /bzImage-2.6.16.11 root=/dev/sda2 vga=0x0305
</programlisting>
to the end of the file, and edit the version number to contain the version
number of the new kernel you just installed.  In our example, we installed
the <literal>2.6.17.11</literal> kernel, so the final copy of the file
would look like:
<programlisting>
timeout 300
default 0

splashimage=(hd0,0)/grub/splash.xpm.gz

title 2.6.16.11
	root (hd0,0)
	kernel /bzImage-2.6.16.11 root=/dev/sda2 vga=0x0305

title 2.6.16
	root (hd0,0)
	kernel /bzImage-2.6.16 root=/dev/sda2 vga=0x0305

title 2.6.17.11
	root (hd0,0)
	kernel /bzImage-2.6.17.11 root=/dev/sda2 vga=0x0305
</programlisting>
</para>

<para>
When finished editing the file, reboot the system and see that the new
kernel image name comes up in the boot menu.  Use the down arrow to
highlight the new kernel version, and press <literal>Enter</literal> to
boot the new kernel image.
</para>

<!--   
	Should I show an example of a SuSE and Fedora grub file here?  They
	are more complex.  If so, can someone send me a Fedora grub file, I
	don't have any around...
-->

</sect2>


<sect2>
<title><command>lilo</command></title>

<para>
To let <command>lilo</command> know that a new kernel is present, the
<filename>/etc/lilo.conf</filename> file must be modified, and the
<command>lilo</command> program must be run to apply the changes made to
the configuration file.  For full details on the structure of the
<command>lilo</command> configuration file, please see the
<command>lilo</command> man page:
<screen>
$ <userinput>man lilo</userinput>
</screen>
</para>

<para>
The easiest way to add a new kernel entry to the
<filename>/etc/lilo.conf</filename> file, is to copy an existing
entry.  For example, consider the following <command>lilo</command>
configuration file from a Gentoo system:
<programlisting>
boot=/dev/hda
prompt
timeout=50
default=2.6.12

image=/boot/bzImage-2.6.15
	label=2.6.15
	read-only
	root=/dev/hda2

image=/boot/bzImage-2.6.12
	label=2.6.12
	read-only
	root=/dev/hda2
</programlisting>
The line starting with the word <literal>image=</literal> defines a new
kernel entry.  Simply copy the lines from one instance of the
<literal>image=</literal> word to the next one:
<programlisting>
image=/boot/bzImage-2.6.15
	label=2.6.15
	read-only
	root=/dev/hda2
</programlisting>
to the end of the file, and edit the version number to contain the version
number of the new kernel you just installed.  In our example, we installed
the <literal>2.6.17.11</literal> kernel, so the final copy of the file
would look like:
<programlisting>
boot=/dev/hda
prompt
timeout=50
default=2.6.12

image=/boot/bzImage-2.6.15
	label=2.6.15
	read-only
	root=/dev/hda2

image=/boot/bzImage-2.6.12
	label=2.6.12
	read-only
	root=/dev/hda2

image=/boot/bzImage-2.6.17
	label=2.6.17
	read-only
	root=/dev/hda2
</programlisting>
</para>

<para>
When finished editing the file, the <filename>/sbin/lilo</filename> program
must be run to write the configuration changes out to the boot section of
the disk:
<screen>
# /sbin/lilo
</screen>
Now the system can be safely rebooted.  The new kernel choice can be seen
in the list of kernels that are available at boot time.  Use the down arrow
to highlight the new kernel version, and press <literal>Enter</literal> to
boot the new kernel image.
</para>

<!--
	Should I show anything else for lilo?  Almost no one uses it
	anymore, and I don't think I would be able to find a SuSE or RedHat
	lilo configuration file anymore.

	I feel this is a bit short, but I can't think of anything else that
	is needed.  It is sufficient?
-->


</sect2>
</sect1>


</chapter>
<!-- vim: set ai tw=72 : -->
