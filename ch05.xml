<chapter id="LKN-chapter-building">

<title>
Configuring and Building
</title>

<para>
Now that you have the source for the latest kernel version successfully
downloaded and installed into a local directory, it is time to build the
code.  But before the kernel can be built, it needs to be configured with
the correct options.
</para>

<sect1>
<title>Creating a configuration</title>

<para>
The kernel configuration is kept in a file called
<filename>.config</filename> in the top directory of the kernel source
tree.  If you have just expanded the kernel source code, there will not be
a <filename>.config</filename> file present in the directory, so it needs
to be created.  This file can be created from scratch, created by basing it
on the "default configuration", taken from a running kernel version, or
from a distribution kernel release.  We will cover the first to methods
here, and the last two methods are covered in <xref linkend="LKN-custom" />.
</para>

<sect2>
<title>Configure from scratch</title>

<para>
The most basic method of configuring a kernel is to use the <literal>make
config</literal> method.:
<screen>
$ <userinput>cd linux-2.6.17.10</userinput>
$ <userinput>make config</userinput>
 make config
scripts/kconfig/conf arch/i386/Kconfig
*
* Linux Kernel Configuration
*
*
* Code maturity level options
*
Prompt for development and/or incomplete code/drivers (EXPERIMENTAL) [Y/n/?] <userinput>Y</userinput>
*
* General setup
*
Local version - append to kernel release (LOCALVERSION) [] <userinput> </userinput>
Automatically append version information to the version string (LOCALVERSION_AUTO) [Y/n/?] <userinput>Y</userinput>
...
</screen>
The kernel configuration program will step through every configuration
option and ask you if you wish to enable this option or not.  Some options
will have a choice of <literal>[Y/m/n/?]</literal>, and if
<literal>m</literal> is selected, the option will be built as a kernel
module, not built directly into the kernel as the <literal>Y</literal>
selection would do.
</para>

<para>
The kernel contains almost two thousand different configuration options, so
being asked for every individual one will take a very long ammount of time.
Luckily, there is an easier way to configure a kernel, base the
configuration on a pre-built configuration.
</para>

</sect2>

<sect2>
<title>Default configuration options</title>

<para>
Every kernel version comes with a "default" kernel configuration.  This
configuration is loosely based on the defaults that the kernel maintainer
of that architecture feels are the best options to be used.  In some cases,
it is merely the configuration that is used by the kernel maintainer
themself for their personal machines.  This is true for the i386
architecture, where the default kernel configuration matches closely what
Linus Torvalds uses for his main development machine.
</para>

<para>
To create this default configuration, do the following:
<screen>
$ <userinput>cd linux-2.6.17.10</userinput>
$ <userinput>make defconfig</userinput>
</screen>
A huge number of configuration options will scroll quickly by the screen,
and a <filename>.config</filename> file will be written out and placed in
the kernel directory.  The kernel is now successfully configured, but it
should be customised to your machine in order to make sure it will operate
correctly.
</para>

</sect2>

</sect1>

<sect1>
<title>Modifying the configuration</title>

<para>
Now that we have a basic configuration file created, it should be modified
to support the hardware you have present in the system.  For details on how
to find out which configuration options you need to select to achieve this,
please see <xref linkend="LKN-custom" />.  Here we will show you how to
select the options you wish to change.
</para>

<para>
There are three different interactive kernel configuration tools, a
terminal based one called <literal>menuconfig</literal>, a GTK+ based
graphical one called <literal>gconfig</literal>, and a QT based graphical
one called <literal>xconfig</literal>.
</para>

<sect2>
<title>Console configuration method</title>

<para>
The <literal>menuconfig</literal> way of configuring a kernel is a console
based program that offers up a way to move around the kernel configuration
using the arrow keys on the keyboard.  To start up this configuration mode,
do:
<screen>
$ <userinput>make menuconfig</userinput>
</screen>
And you will be shown a screen much like this one:
<figure id="menuconfig_1">
<title>Initial menuconfig screen</title>
<graphic fileref="images/menuconfig_1.png" scalefit="1"/>
</figure>
</para>

<para>
The instructions for how to navigate through the program and the
description of what the different characters mean are shown at the top of
the screen, with the rest of the screen containing the different kernel
configuration options.
</para>

<para>
The kernel configuration is divided up into sections.  Each section
contains options that corrispond to a specific topic.  Within those
sections can be sub-sections for various specialized topics.  As an
example, all kernel device drivers can be found under the main menu option
of <literal>Device Drivers</literal>.  To go into that menu, move the arrow
key down nine times until the line
<literal>Device Drivers  ---&gt;</literal> is highlighted:
<figure id="menuconfig_2">
<title>Device Drivers option selected</title>
<graphic fileref="images/menuconfig_2.png" scalefit="1"/>
</figure>
Then press the <literal>Enter</literal> key and you will move into the
<literal>Device Drivers</literal> submenu and see it displayed on the
screen:
<figure id="menuconfig_3">
<title>Device Drivers submenu</title>
<graphic fileref="images/menuconfig_3.png" scalefit="1"/>
</figure>
</para>

<para>
To see the <literal>Generic Driver Options</literal> submenu, press
<literal>Enter</literal> again, and you will see the following three
options:
<figure id="menuconfig_4">
<title>Generic Driver Options submenu</title>
<graphic fileref="images/menuconfig_4.png" scalefit="1"/>
</figure>
</para>

<para>
The first two options have a <literal>[*]</literal> mark by them.  That
means that this option is selected (by virtue of the <literal>*</literal>
being in the middle of the <literal>[ ]</literal> characters), and this
option is a yes or no option.  The third option has a
<literal>&lt; &gt;</literal> marking, showing that this option can be
selected to be either <literal>Y</literal>, <literal>M</literal>, or
<literal>N</literal> meaning that the option would be built into the
kernel, or as a module, or not at all respectively.
</para>

<para>
If the option is selected with a <literal>Y</literal> then a
<literal>*</literal> character will be shown.  If it is selected as a
module with a <literal>M</literal>, it will contain a <literal>M</literal>
character.  If it is disabled with a <literal>N</literal>, then it will
show only a blank inbetween the characters.
</para>

<para>
So, if we wish to change these three options to select only drivers that
do not need external firmare at compile time, disable the option to prevent
firmware from being built, and make the userspace firmware loader be built
as a module, we would press <literal>Y</literal> for the first option,
<literal>N</literal> for the second option, and <literal>M</literal> for
the third, making the screen look like the following:
<figure id="menuconfig_5">
<title>Generic Driver Options submenu changed</title>
<graphic fileref="images/menuconfig_5.png" scalefit="1"/>
</figure>
</para>

<para>
Now that we are done with our changes, press either the
<literal>Esc</literal> key or the right arrow followed by the
<literal>Enter</literal> key to leave this submenu.  All of the different
kernel options can be explored in this manner.
</para>

<para>
When you are finished making all of the changes you wish to make to the
kernel configuration, exit the program by pressing the
<literal>Esc</literal> key on the main menu.  You will be shown the
following screen asking if you wish to save your changed kernel
configuration:
<figure id="menuconfig_6">
<title>Saving kernel options</title>
<graphic fileref="images/menuconfig_6.png" scalefit="1"/>
</figure>
Press <literal>Enter</literal> to save the configuration, or if you wish to
discard any changes made, press the right arrow to move to the
<literal>&lt;No&gt;</literal> selection, and then press
<literal>Enter</literal>.
</para>

</sect2>

<sect2>
<title>Graphical configuration method</title>

<para>
The <literal>gconfig</literal> and <literal>xconfig</literal> methods of
configuring a kernel use a graphical program to allow you to modify the
kernel configuration.  Both of these methods are almost identical, the only
difference being the different graphical toolkit that the two methods are
written in.  <literal>gconfig</literal> is written using the GTK+ toolkit
and has a two paned screen looking like this:
<figure id="gconfig_1">
<title><literal>gconfig</literal> default screen</title>
<graphic fileref="images/gconfig_1.png" scalefit="1"/>
</figure>
While the <literal>xconfig</literal> method is written using the QT toolkit
and has a three paned screen looking like this:
<figure id="xconfig_1">
<title><literal>xconfig</literal> default screen</title>
<graphic fileref="images/xconfig_1.png" scalefit="1"/>
</figure>
</para>

<para>
The mouse is how the different submenues are navagated, and the options
selected.  Use it to select the <literal>Generic Driver Options</literal>
submenu of the <literal>Device Drivers</literal> menu.  This will change
the <literal>gconfig</literal> screen to look like:
<figure id="gconfig_2">
<title><literal>gconfig</literal> Generic Driver Options</title>
<graphic fileref="images/gconfig_2.png" scalefit="1"/>
</figure>

And the <literal>xconfig</literal> screen to look like:
<figure id="xconfig_2">
<title><literal>xconfg</literal> Generic Driver Options</title>
<graphic fileref="images/xconfig_2.png" scalefit="1"/>
</figure>
</para>

<para>
Changing this submenu to disable the second option, and make the third
option be built as a module causes the different screens to look like:
<figure id="gconfig_3">
<title><literal>gconfig</literal> Generic Driver Options changed</title>
<graphic fileref="images/gconfig_3.png" scalefit="1"/>
</figure>
and:
<figure id="xconfig_3">
<title><literal>xconfig</literal> Generic Driver Options changed</title>
<graphic fileref="images/xconfig_3.png" scalefit="1"/>
</figure>
</para>

<para>
Please note that to enable an option as a module using the
<literal>gconfig</literal> method, there will be a line though the box,
instead of it being checked which signifies that the option will be built
into the kernel.  Using the <literal>xconfig</literal> method, a module
will be shown with a dot in the box.
</para>

<para>
Both of these methods will prompt you to save your changed configuration
when exiting the program, and they both have options to write that
configuration out to a different file if you so desire.
</para>

</sect2>

</sect1>

<sect1>
<title>Building the kernel</title>

<para>
Now that you have created a kernel configuration that you wish to use, the
kernel needs to be built.  This is as simple as entering one command:
<screen>
$ <userinput>make</userinput>
  CHK     include/linux/version.h
  UPD     include/linux/version.h
  SYMLINK include/asm -> include/asm-i386
  SPLIT   include/linux/autoconf.h -> include/config/*
  CC      arch/i386/kernel/asm-offsets.s
  GEN     include/asm-i386/asm-offsets.h
  CC      scripts/mod/empty.o
  HOSTCC  scripts/mod/mk_elfconfig
  MKELF   scripts/mod/elfconfig.h
  HOSTCC  scripts/mod/file2alias.o
  HOSTCC  scripts/mod/modpost.o
  HOSTCC  scripts/mod/sumversion.o
  HOSTLD  scripts/mod/modpost
  HOSTCC  scripts/kallsyms
  HOSTCC  scripts/conmakehash
  HOSTCC  scripts/bin2c
  CC      init/main.o
  CHK     include/linux/compile.h
  UPD     include/linux/compile.h
  CC      init/version.o
  CC      init/do_mounts.o
...
</screen>
Running <literal>make</literal> will cause the kernel build system to use
the configuration that you have selected to build a kernel and all modules
that are needed to support that configuration.
<footnote>
Older kernel versions prior to the 2.6 release required the additional step
of <literal>make modules</literal> to build all needed kernel modules.
That is no longer required.
</footnote>
While the kernel is building, it will display the individual file names of
what is currently happening, along with any build warnings or errors.
</para>

<para>
If the kernel build finished without any errors, you have successfully
created a kernel image that needs to be installed properly so that it can
be used.  See <xref linkend="LKN-installing" /> for how to do this.
</para>

<para>
It is very unusual to get any build errors when building a released kernel
version.  If you do, please report them to the Linux kernel developers so
it can be fixed.  See <xref linkend="LKN-appendix-bugreports" /> for how to
do this.
</para>

</sect1>

<sect1>
<title>Advanced building options</title>

<para>
The kernel build system allows you to do many more things than just build
the full kernel and modules.  <xref linkend="LKN-build-command-line" />
gives the full list of options that the kernel build system provides.  In
this section, we will discuss some of these advanced build options.
</para>

<sect2>
<title>Build faster on multiprocessor machines</title>
<para>
The kernel build system works very well as a task that can be split up into
little pieces and given to different processors.  By doing this, you can
use the full power of a multiprocessor machine and speed up the kernel
build time immensely.
</para>

<para>
To build the kernel in a multithreaded way, use the <literal>-j</literal>
option to the <literal>make</literal> program.  It is best to give a number
to the <literal>-j</literal> option that corresponds to twice the number of
processors in the system.  So, for a machine with 2 processors present,
use:
<screen>
$ <userinput>make -j4</userinput>
</screen>
and for a machine with four processors, use:
<screen>
$ <userinput>make -j8</userinput>
</screen>
If you do not pass an option to the <literal>-j</literal> option, the build
system will create a new thread for every subdirectory in the kernel tree:
<screen>
$ <userinput>make -j</userinput>
</screen>
which can easily cause your machine to become unresponsive and take a much
longer time to complete the build.  Because of this, it is always
recommended that you pass a number to the <literal>-j</literal> option.
</para>
</sect2>


<sect2>
<title>Build only a portion of the kernel</title>

<para>
</para>
</sect2>

<sect2>
<title>Source in one place, output in another</title>
<para></para>
</sect2>

<sect2>
<title>Different architectures</title>
<para></para>
</sect2>

</sect1>

</chapter>

<!-- vim: set ai tw=72 : -->
