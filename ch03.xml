<chapter id="LKN-chapter-requirements">

<title>Requirements for building a kernel</title>

<simplesect>

<para>
This chapter will describe all of the different programs that are necessary
for you to be able to configure a kernel, build it, and then successfully
boot it.
</para>

<para>
First off, the file, <filename>Documenation/Changes</filename> should be
consulted to verify the specific version number of all of the different
tools described in this chapter.  All version numbers described below were
taken from the 2.6.18 kernel release, so they should be valid for that
kernel.  However, if you are using a newer kernel, please verify that you
have the required versions as specified in this file, otherwise things
might not work properly, and can be very hard to determine what went wrong.
</para>

<!--

Taken from 2.6.18 Documenation/Changes:

o  Gnu C                  3.2                     # gcc - -version
o  Gnu make               3.79.1                  # make - -version
o  binutils               2.12                    # ld -v
o  util-linux             2.10o                   # fdformat - -version
o  module-init-tools      0.9.10                  # depmod -V
o  e2fsprogs              1.29                    # tune2fs
o  jfsutils               1.1.3                   # fsck.jfs -V
o  reiserfsprogs          3.6.3                   # reiserfsck -V 2>&1|grep reiserfsprogs
o  xfsprogs               2.6.0                   # xfs_db -V
o  pcmciautils            004
o  pcmcia-cs              3.1.21                  # cardmgr -V
o  quota-tools            3.09                    # quota -V
o  PPP                    2.4.0                   # pppd - -version
o  isdn4k-utils           3.1pre1                 # isdnctrl 2>&1|grep version
o  nfs-utils              1.0.5                   # showmount - -version
o  procps                 3.2.0                   # ps - -version
o  oprofile               0.9                     # oprofiled - -version
o  udev                   081                     # udevinfo -V

-->

</simplesect>

<sect1>
<title>Tools to build the kernel</title>

<para>
For most Linux distributions, there is an installation option to install a
range of <literal>Kernel Hacking</literal> packages.  If your distribution
offers this option, it is the easiest to merely install this instead of
trying to track down all of the individual programs that are needed for
this task.
</para>

<para>
There are only three different packages that are needed in order to
successfully build a kernel, a compiler, a linker and a make utility.  Here
are the ones that the kernel requires.
</para>

<sect2>
<title>Compiler</title>

<para>
The Linux kernel is written in the C programming language with a very
little assembly in some places.  To build this, the GCC C compiler must be
used.  Most Linux distributions have a package entitiled
<literal>gcc</literal> that should be installed.  If you wish to download
the compiler and build it yourself, it is availble at
<systemitem role="url">http://gcc.gnu.org/</systemitem>
</para>

<para>
As of the 2.6.18 kernel release, the oldest version of GCC that can
successfully build the kernel is the 3.2 version.  Some of the newest GCC
releases will also not properly build the kernel, so unless you wish to
help debug compiler bugs, it is not recommended that you try them out.
</para>

<para>
To determine what version of <literal>gcc</literal> you have installed on
your system, run the following command:
<screen>
$ <userinput>gcc --version</userinput>
</screen>
</para>

</sect2>

<sect2>
<title>Linker</title>

<para>
The C compiler, <literal>gcc</literal> does not do all of the compiling on
its own.  It needs an additional set of tools known as
<literal>binutils</literal> to do the linking and assembling of source
files.  The <literal>binutils</literal> package also contains useful
utilities that can manipulate object files in all sorts of different ways.
</para>

<literal>binutils</literal> can usually be found in a distribution package
called (obviously) <literal>binutils</literal>.  If you wish to download
and install the package yourself, it can be found at
<systemitem role="url">http://www.gnu.org/software/binutils/</systemitem>

<para>
As of the 2.6.18 kernel release, the oldest version of binutils that will
successfully link the kernel is the 2.12 release.
</para>

<para>
To determine what version of <literal>binutils</literal> you have installed
on your system, run the following command:
<screen>
$ <userinput>ld -v</userinput>
</screen>
</para>

</sect2>

<sect2>
<title>Make</title>

<para>
<literal>make</literal> is a tool that walks the kernel source tree and
determines what files need to be compiled, and then calls the compiler and
other build tools to do the work in building the kernel.  The kernel
requires the GNU version of make, which can usually be found in a package
called <literal>make</literal> for your distribution.
</para>

<para>
If you wish to download and install <literal>make</literal> youself, it can
be found at
<systemitem role="url">http://www.gnu.org/software/make/</systemitem>
</para>

<para>
As of the 2.6.18 kernel release, the oldest version of make that will
properly build the kernel is the 3.79.1 release.  It is recommended that
the latest stable version of make be installed, as newer versions are known
to work faster at processing the build files.
</para>

<para>
To determine what version of <literal>make</literal> you have installed on
your system, run the following command:
<screen>
$ <userinput>make --version</userinput>
</screen>
</para>

</sect2>

</sect1>

<sect1>
<title>Tools to use the kernel</title>

<para>
There are a wide range of tools that are used on a Linux machine that are
indirectly tied to the version of the kernel that is running on it.  For
the most part, the kernel version does not affect any user program that is
being used, but for a small group of programs, this is not the case.
</para>

<para>
This section will describe a number of different tools that are probably
already installed on your Linux system.  However if you upgrade your kernel
to a newer version than what originally came with your distribution, some
of these packages may also need to be upgraded in order for the system to
work together properly.
</para>

<sect2>
<title><literal>util-linux</literal></title>
<para>
The <literal>util-linux</literal> package is a collection of small
utilities that do a wide range of different tasks.  Most of these utilities
handle mounting and creating disk partitions, as well as handling the
hardware clock in the system.  For a full list of the utilities that this
package provides, look in the <literal>util-linux</literal> package
provided by your distribution.
</para>

<para>
If you wish to download and install the <literal>util-linux</literal>
package yourself, it can be found at
<systemitem role="url">http://www.kernel.org/pub/linux/utils/util-linux/</systemitem>
</para>

<para>
As of the 2.6.18 kernel release, the oldest version of the
<literal>util-linux</literal> package that will work properly is the 2.10o
release.  It is recommended that the latest version of this package be
installed, as new features that are added to the kernel are able to be used
by newer versions of this package.  Bind mounts are one such example of an
option that newer kernels can provide, and a newer version of
<literal>util-linux</literal> is needed in order to have them work
properly.
</para>

<para>
To determine what version of the <literal>util-linux</literal> package you
have installed on your system, run the following command:
<screen>
$ <userinput>fdformat --version</userinput>
</screen>
</para>
</sect2>

<sect2>
<title><literal>module-init-tools</literal></title>

<para>
The <literal>module-init-tools</literal> package is needed if you wish to
use Linux kernel modules.  A kernel module is a loadable chunk of code that
can be added to or removed from the kernel while it is running.  It is
useful to compile device drivers as modules and then only load the needed
ones when the hardware is present in the system.  All Linux distributions
use modules in order to only load the needed drivers and options for the
system based on the hardware present, instead of being forced to build all
possible drivers and options in the the kernel in one large chunk.  By
using modules, memory is saved by only having the code that is needed to
control the machine properly be used up.
</para>

<para>
The kernel module loading process underwent a radical change for the 2.6
kernel releases from the older kernel release.  The linker for the module
(the code that resolves all symbols and figures out how to put the pieces
together in memory) is now built into the kernel, which makes the userspace
tools quite small.  Older distribuitions will have a packge called
<literal>modutils</literal> which will not work properly with the 2.6
kernel.  The <literal>module-init-tools</literal> package is what you want
to use in order for the 2.6 kernel to work properly with modules.
</para>

<para>
If you wish to download and install the <literal>module-init-tools</literal>
package yourself, it can be found at
<systemitem role="url">http://www.kernel.org/pub/linux/utils/kernel/module-init-tools/</systemitem>
</para>

<para>
As of the 2.6.18 kernel release, the oldest version of the
<literal>module-init-tools</literal> package that will work properly is the 0.9.10
release.  It is recommended that the latest version of this package be
installed, as new features that are added to the kernel are able to be used
by newer versions of this package.  Blacklisting of modules to prevent them
from being automatically loaded by the <literal>udev</literal> package is
one such option that the newer version of
<literal>module-init-tools</literal> provides that older ones do not.
</para>

<para>
To determine what version of the <literal>module-init-tools</literal>
package you have installed on your system, run the following command:
<screen>
$ <userinput>depmod -V</userinput>
</screen>
</para>
</sect2>

<sect2>
<title>Filesystem specific tools</title>

<para>
There are a wide range of filesystem specific tools that are necessary to
create, format, configure, and fix disk partitions.  The different
filesystem types all have different utilities to do these tasks.  The
<literal>util-linux</literal> package has a few of these utilities, but
some more populare filesystems have separate packages that contain the
programs needed.
</para>

<sect3>
<title>ext2/ext3/ext4</title>
<para>
To work with ext2, ext3, or ext4 filesystems, the
<literal>e2fsprogs</literal> package must be installed.
If you wish to download and install the this package yourself, it can be
found at
<systemitem role="url">http://e2fsprogs.sourceforge.net/</systemitem>
</para>

<para>
As of the 2.6.18 kernel release, the oldest version of
<literal>e2fsprogs</literal> that will work properly with the kernel is the
1.29 release.
</para>

<para>
To determine what version of <literal>e2fsprogs</literal> you have
installed on your system, run the following command:
<screen>
$ <userinput>tune2fs</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>jfs</title>
<para></para>
</sect3>

<sect3>
<title>reiserfs</title>
<para></para>
</sect3>

<sect3>
<title>xfs</title>
<para></para>
</sect3>

<sect3>
<title>quotas</title>
<para></para>
</sect3>

</sect2>

<sect2>
<title>Other tools</title>

<para>
<screen>
pcmciautils
pcmcia-cs
quota-tools
PPP
isdn4k-utils
nfs-utils
procps
oprofile
udev
</screen>
</para>
</sect2>

</sect1>



</chapter>

<!-- vim: set ai tw=80 : -->
