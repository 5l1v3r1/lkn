<chapter id="LKN-build-command-line">

<title>
Kernel build command line reference
</title>

<para>
As discussed in <xref linkend="LKN-chapter-building" />, the tool that
ties together kernel builds is the <command>make</command> program, to
which you pass a target that specifies what you want to build.  <xref
linkend="LKN-chapter-building" /> went over the basic options needed
to build the kernel properly, but the kernel build system also has a
wide range of other options.  This chapter details these options, and
what they can be used for.
</para>

<para>
All of these options are passed to the <literal>make</literal> program on
the command line, and a number of them can be grouped together if
desired. For example:
<screen>
$ <userinput>make mrproper xconfig</userinput>
</screen>

The options are broken down into different types in the following
sections.
</para>

<para>
Most of these options can be reported by the kernel itself by runing
<screen>
$ <userinput>make help</userinput>
</screen>
This option will print out a lot of the common <command>make</command>
targets that are described in the rest of this chapter.
</para>

<sect1>
<title>Informational options</title>
<para>
These options print out the kernel version based on a number of different
options to the screen.  They are commonly used by scripts to determine the
version of the kernel being built.
</para>

<table id="lkn-ch12-table-informational">
  <title>Informational options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>kernelrelease</literal></para></entry>
	<entry><para>The current kernel version, as determined by the build
	system, will be printed.</para></entry>
      </row>
      <row>
	<entry><para><literal>kernelversion</literal></para></entry>
	<entry><para>The current kernel version, as told by the main Makefile
	will be printed.  This differs from the
	<literal>kernelrelease</literal> option in that any additional version
	information based on configuration options or localversion files will
	not be used.</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Cleaning options</title>

<para>
These options simply remove files from previous builds. Their use is
highly recommended to make sure you don't contaminate new builds with
files left over that may have been built with different options. They
differ in how much they remove; sometimes you want to keep around
files you've changed.
</para>

<table id="lkn-ch12-table-cleaning">
  <title>Cleaning options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>clean</literal></para></entry>
	<entry><para>Remove most of the generated files by the kernel build
	system, but keep the kernel configuration.</para></entry>
      </row>
      <row>
	<entry><para><literal>mrproper</literal></para></entry>
	<entry><para>Remove all of the generated files by the kernel build
	system including the configuration and some
	various backup files.</para></entry>
      </row>
      <row>
	<entry><para><literal>distclean</literal></para></entry>
	<entry><para>Everything <literal>mrproper</literal> does and removes some
	editor backup and patch leftover files.</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Configuring options</title>

<para>
These options allow the kernel to be configured in a wide range of different ways.
</para>

<table id="lkn-ch12-table-configuring">
  <title> Configuring options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>config</literal></para></entry>
	<entry><para>Update the current kernel configuration by using a
	line-oriented program.</para></entry>
      </row>
      <row>
	<entry><para><literal>menuconfig</literal></para></entry>
	<entry><para>Update the current kernel configuration by using a text
	based menu program.</para></entry>
      </row>
      <row>
	<entry><para><literal>xconfig</literal></para></entry>
	<entry><para>Update the current kernel configuration by using a QT
	based graphical program.</para></entry>
      </row>
      <row>
	<entry><para><literal>gconfig</literal></para></entry>
	<entry><para>Update the current kernel configuration by using a GTK
	based graphical program.</para></entry>
      </row>
      <row>
	<entry><para><literal>oldconfig</literal></para></entry>
	<entry><para>Update the current kernel configuration by using the
	current .config file and prompting for any new options that have been
	added to the kernel.</para></entry>
      </row>
      <row>
	<entry><para><literal>silentoldconfig</literal></para></entry>
	<entry><para>Just like <literal>oldconfig</literal>, but nothing is
	printed to the screen, except when a question needs to be
	answered.</para></entry>
      </row>
      <row>
	<entry><para><literal>randconfig</literal></para></entry>
	<entry><para>Generates a new kernel configuration with random answers
	to all of the different options.</para></entry>
      </row>
      <row>
	<entry><para><literal>defconfig</literal></para></entry>
	<entry><para>Generates a new kernel configuration with the default
	answer being used for all of the different options.  The default
	values are taken from a file located in the
	<filename>arch/$ARCH/defconfig</filename> file, where
	<literal>$ARCH</literal> refers to the specific architecture that
	the kernel is being built for.</para></entry>
      </row>
      <row>
	<entry><para><literal>allmodconfig</literal></para></entry>
	<entry><para>Generates a new kernel configuration in which modules
	are enabled whenever possible.</para></entry>
      </row>
      <row>
	<entry><para><literal>allyesconfig</literal></para></entry>
	<entry><para>Generates a new kernel configuration with all options
	set to <literal>yes</literal>.</para></entry>
      </row>
      <row>
	<entry><para><literal>allnoconfig</literal></para></entry>
	<entry><para>Generates a new kernel configuration with all options
	set to <literal>no</literal>.</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>

<para>
Note that the <literal>allyesconfig</literal>,
<literal>allmodconfig</literal>,
<literal>allnoconfig</literal>, and
<literal>randconfig</literal> targets also take advantage of the
environment variable <literal>KCONFIG_ALLCONFIG</literal>.  If that
variable is set to point to a file, that file will be used as a list of
configuration values that you require to be set to a specific value.
</para>

<para>
For example, if the file <filename>~/linux/must_be_set</filename> contains
the following variables:
<screen>
$ <userinput>cat ~/linux/must_be_set</userinput>
CONFIG_SWAP=y
CONFIG_DEBUG_FS=y
</screen>
And you tell make to <literal>allnoconfig</literal> and set this
environment variable:
<screen>
$ <userinput>KCONFIG_ALLCONFIG=../must_be_set make allnoconfig</userinput>
$ <userinput>grep CONFIG_SWAP .config</userinput>
CONFIG_SWAP=y
$ <userinput>grep CONFIG_DEBUG_FS .config</userinput>
CONFIG_DEBUG_FS=y
</screen>
Those variables would not have normally been set to <literal>y</literal>
otherwise.
</para>

<para>
If the <literal>KCONFIG_ALLCONFIG</literal> variable is not set, the build
system checks for a file named
<literal>all</literal>[<replaceable>yes</replaceable>|<replaceable>mod</replaceable>|<replaceable>no</replaceable>|<replaceable>random</replaceable>]<literal>.config</literal>.
If that file is present, it uses it as a list of config values that must be
forced to the specified values.  If that file is not found, the build
system then looks for a file called <literal>all.config</literal> for a
list of forced configuration values.
</para>

<para>
By using these different files, it is easier to set up a known good base
configuration, that will always work.  Then the other configuration options
can be used to generate different testing configurations for the needed
situation.
</para>


</sect1>

<sect1>
<title>Build options</title>
<para>
These options build the kernel itself in a variety of different ways.
</para>

<table id="lkn-ch12-table-build">
  <title>Build options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>all</literal></para></entry>
	<entry><para>This option builds all of the different targets needed for
	this kernel to be able to be used.  This includes both the modules and
	the static portion of the kernel.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>vmlinux</literal></para></entry>
	<entry><para>This option builds just the static portion of the kernel
	that does not include any loadable modules.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>modules</literal></para></entry>
	<entry><para>This option builds all of the loadable kernel modules for
	this configuration.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>modules_install</literal></para></entry>
	<entry><para>This option installs all of the modules into the specified
	location.  If no location is specified with the
	<literal>INSTALL_MODULE_PATH</literal> environment variable, they are
	installed in the default root directory of the machine.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>dir/</literal></para></entry>
	<entry><para>This option builds all of the files in the specified
	directory and in all subdirectories below it.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>dir/file.</literal>[<replaceable>o</replaceable>|<replaceable>i</replaceable>|<replaceable>s</replaceable>]</para></entry>
	<entry><para>This option will build only the specified file.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>dir/file.ko</literal></para></entry>
	<entry><para>This option will build all of the needed files and link
	them together to form the specified module.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>tags</literal></para></entry>
	<entry><para>This option builds all of the needed tags that most common
	editors can use while editing the source code.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>TAGS</literal></para></entry>
	<entry><para>This option builds all of the needed tags that most common
	editors can use while editing the source code.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>cscope</literal></para></entry>
	<entry><para>This option builds a cscope image of the source tree for
	the architecture that is specified fby the configuration file (not all
	of the kernel source files.)
	</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>

<para>
There are also a number of environment variables that you can pass to the make
system that will change the way the build happens.  These can be specified for
almost any different target option.
</para>

<table id="lkn-ch12-table-environment">
  <title>Environment variables</title>
  <tgroup cols="3">
    <thead>
      <row>
	<entry><para>Variable</para></entry>
	<entry><para>Value</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>V</literal></para></entry>
	<entry><para><literal>0</literal></para></entry>
	<entry><para>This tells the build system to run in a quiet manner, only
	showing the file that is currently being built, and not the entire
	command that is running in order to build that file.  This is the
	default option for the build system
	</para></entry>
      </row>
      <row>
	<entry><para><literal>V</literal></para></entry>
	<entry><para><literal>1</literal></para></entry>
	<entry><para>This tells the build system to operate in a verbose way,
	showing the full command that is being used to generate each of the
	specific files.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>O</literal></para></entry>
	<entry><para><literal>dir</literal></para></entry>
	<entry><para>This tells the build system to locate all output files in
	the <literal>dir</literal> directory, including the kernel
	configuration files.  This allows the kernel to be built from a
	read-only filesystem and have the output placed in another location
	away from the source files.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>C</literal></para></entry>
	<entry><para><literal>1</literal></para></entry>
	<entry><para>This checks all c files that are about to be built with
	the <literal>sparse</literal> tool.  This tool is used to detect common
	programming errors in the kernel source files at build time.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>C</literal></para></entry>
	<entry><para><literal>2</literal></para></entry>
	<entry><para>This forces all c files to be checked with the
	<literal>sparse</literal> tool, even if they did not need to be build.
	</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Packaging options</title>
<para>
These options package up a built kernel into a stand-alone package that can be
installed to a wide range of different machines.
</para>

<table id="lkn-ch12-table-packaging">
  <title>Packaging options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>rpm</literal></para></entry>
	<entry><para>This option builds the kernel first and then packages
	it up as a RPM package that can be installed.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>rpm-pkg</literal></para></entry>
	<entry><para>Build a source RPM package containing the kernel.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>binrpm-pkg</literal></para></entry>
	<entry><para>Build a RPM package that contains a compiled kernel and modules.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>deb-pkg</literal></para></entry>
	<entry><para>Build a Debian package that contains the compiled kernel and modules.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>tar-pkg</literal></para></entry>
	<entry><para>Build a tarball that contains the compiled kernel and modules.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>targz-pkg</literal></para></entry>
	<entry><para>Build a gzip compressed tarball that contains the compiled kernel and modules.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>tarbz2-pkg</literal></para></entry>
	<entry><para>Build a bzip2 compressed tarball that contains the compiled kernel and modules.
	</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Documentation options</title>
<para>
These options build the internal kernel documentation in a variety of
different formats.
</para>

<table id="lkn-ch12-table-documentation">
  <title>Informational options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>xmldocs</literal></para></entry>
	<entry><para>The kernel documentation will be build as XML DocBook files.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>psdocs</literal></para></entry>
	<entry><para>The kernel documentation will be build as Postscript files.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>pdfdocs</literal></para></entry>
	<entry><para>The kernel documentation will be build as PDF files.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>htmldocs</literal></para></entry>
	<entry><para>The kernel documentation will be build as HTML files.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>mandocs</literal></para></entry>
	<entry><para>The kernel documentation will be build as a set of man pages.  They can then be installed with the <literal>installmandocs</literal> option.
	</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Architecture specific options</title>
<para>
Each kernel architecture has a set of specific options unique to it.  The
32bit Intel architecture has these options available.
</para>
<table id="lkn-ch12-table-arch">
  <title>Architecture specific options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>bzImage</literal></para></entry>
	<entry><para>A compressed kernel image will be created and placed in
	the <filename>arch/i386/boot/bzImage</filename> file. This is the
	default target for the i386 kernel build.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>install</literal></para></entry>
	<entry><para>This installs the kernel image using the distribution
	specific <filename>/sbin/installkernel</filename> program.  Note that
	this does not install the kernel modules, that must be done with the
	<literal>modules_install</literal> option.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>bzdisk</literal></para></entry>
	<entry><para>This will create a boot floppy and write it out to the
	<literal>/dev/fd0</literal> device.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>fdimage</literal></para></entry>
	<entry><para>This will create a boot floppy image and place it in the
	file <filename>arch/i386/boot/fdimage</filename>.  The
	<literal>mtools</literal> package must be present on your system in
	order for this to work properly.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>isoimage</literal></para></entry>
	<entry><para>This will create a CDROM boot image and place it in the
	file <filename>arch/i396/boot/image.iso</filename>.  The
	<literal>syslinux</literal> package must be present on your system in
	order for this to work properly.
	</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Analyser options</title>
<para>
These options are good for trying to find problem code in the kernel.  The
stack space list is good to run when creating new code to determine that your
changes are not taking up too much kernel stack space.  The
<literal>namespacecheck</literal> option is good to use to determine if your
changes should really be adding symbols to the kernel's global namespace or
not.
</para>

<table id="lkn-ch12-table-analyser">
  <title>Informational options</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>checkstack</literal></para></entry>
	<entry><para>A list of the functions that use the most of the kernel stack space will be generated.
	</para></entry>
      </row>
      <row>
	<entry><para><literal>namespacecheck</literal></para></entry>
	<entry><para>A large list of all of the kernel symbols, and their namespace will be generated.
	</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

</chapter>

<!-- vim: set ai tw=72 : -->
