<chapter id="LKN-build-command-line">

<title>
Kernel build command line reference
</title>

<simplesect>

<para>
As discussed in <xref linkend="LKN-chapter-building" />, the tool that
ties together kernel builds is the <command>make</command> program, to
which you pass a target that specifies what you want to build.  <xref
linkend="LKN-chapter-building" /> went over the basic options needed
to build the kernel properly, but the kernel build system also has a
wide range of other options.  This chapter details these options, and
what they can be used for.
</para>

<para>
All of these options are passed to the <literal>make</literal> program on
the command line, and a number of them can be grouped together if
desired. For example:
<screen>
make mrproper xconfig
</screen>

The options are broken down into different types in the following
sections.

</para>

</simplesect>

<sect1>
<title>Cleaning options</title>

<para>

These options simply remove files from previous builds. Their use is
highly recommended to make sure you don't contaminate new builds with
files left over that may have been built with different options. They
differ in how much they remove; sometimes you want to keep around
files you've changed.

</para>

<table id="lkn-ch12-table-cleaning">
  <title>Cleaning options</title>
  <tgroup>
    <thead>
      <row>
	<entry><para>Option</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><literal>clean</literal></para></entry>
	<entry><para>Remove most generated files but keep configuration.</para></entry>
      </row>
      <row>
	<entry><para><literal>mrproper</literal></para></entry>
	<entry><para>Remove all generated files + configuration + various backup files.</para></entry>
      </row>
      <row>
	<entry><para><literal>distclean</literal></para></entry>
	<entry><para>Everything <literal>mrproper</literal> does +
	editor backup and patch leftover files.</para></entry>
      </row>
    </tbody>
  </tgroup>
</table>
</sect1>

<sect1>
<title>Configuring options</title>
<para>
<screen>
  config	  - Update current config utilising a line-oriented program
  menuconfig	  - Update current config utilising a menu based program
  xconfig	  - Update current config utilising a QT based front-end
  gconfig	  - Update current config utilising a GTK based front-end
  oldconfig	  - Update current config utilising a provided .config as base
  silentoldconfig - Like oldconfig, but nothing is printed to the screen,
  		    except where a question needs to be answered.
  randconfig	  - New config with random answer to all options
  defconfig	  - New config with default answer to all options
  allmodconfig	  - New config selecting modules when possible
  allyesconfig	  - New config where all options are accepted with yes
  allnoconfig	  - New config where all options are answered with no
</screen>
</para>
</sect1>

<sect1>
<title>Build options</title>
<para>
<screen>
  all		  - Build all targets marked with [*]
* vmlinux	  - Build the bare kernel
* modules	  - Build all modules
  modules_install - Install all modules to INSTALL_MOD_PATH (default: /)
  dir/            - Build all files in dir and below
  dir/file.[ois]  - Build specified target only
  dir/file.ko     - Build module including final link
  rpm		  - Build a kernel as an RPM package
  tags/TAGS	  - Generate tags file for editors
  cscope	  - Generate cscope index

  make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build
  make O=dir [targets] Locate all output files in "dir", including .config
  make C=1   [targets] Check all c source with $CHECK (sparse)
  make C=2   [targets] Force check of all c source with $CHECK (sparse)

</screen>
</para>
</sect1>

<sect1>
<title>Informational options</title>
<para>
<screen>
  kernelrelease	  - Output the release version string
  kernelversion	  - Output the version stored in Makefile
</screen>
</para>
</sect1>

<sect1>
<title>Analyser options</title>
<para>
<screen>
  checkstack      - Generate a list of stack hogs
  namespacecheck  - Name space analysis on compiled kernel
</screen>
</para>
</sect1>

<sect1>
<title>Packaging options</title>
<para>
<screen>
  rpm-pkg         - Build the kernel as an RPM package
  binrpm-pkg      - Build an rpm package containing the compiled kernel
                    and modules
  deb-pkg         - Build the kernel as an deb package
  tar-pkg         - Build the kernel as an uncompressed tarball
  targz-pkg       - Build the kernel as a gzip compressed tarball
  tarbz2-pkg      - Build the kernel as a bzip2 compressed tarball
</screen>
</para>
</sect1>

<sect1>
<title>Documentation options</title>
<para>
These options build the internal kernel documentation in a variety of
different formats:
<screen>
  xmldocs (XML DocBook)
  psdocs (Postscript)
  pdfdocs (PDF)
  htmldocs (HTML)
  mandocs (man pages, use installmandocs to install)
</screen>
</para>
</sect1>

<sect1>
<title>Architecture specific options</title>
<para>
Each kernel architecture has a set of specific options unique to it.  The
32bit Intel architecture has these options availble:
<screen>
* bzImage	- Compressed kernel image (arch/i386/boot/bzImage)
  install	- Install kernel using
		   (your) ~/bin/installkernel or
		   (distribution) /sbin/installkernel or
		   install to $(INSTALL_PATH) and run lilo
  bzdisk       - Create a boot floppy in /dev/fd0
  fdimage      - Create a boot floppy image
  isoimage     - Create a boot CD-ROM image
</screen>
</para>
</sect1>

</chapter>

<!-- vim: set ai tw=72 : -->
