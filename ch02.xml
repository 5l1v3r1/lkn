<chapter id="LKN-chapter-requirements">

<title>Requirements for building and using the kernel</title>

<para>
This chapter describes the programs you need
to configure a kernel, build it, and successfully
boot it. It's a smart idea to consult the file
<filename>Documentation/Changes</filename>  to verify the specific
version number you should have of each
tool described in this chapter. This chapter was based on the 2.6.18
kernel, and describes the versions of tools that work with that
kernel.
If you are using a different kernel, please verify that you
have the required versions as specified in this file, or things
might not work properly and it can be very hard to determine what went
wrong.
</para>

<!--

Taken from 2.6.18 Documenation/Changes:

o  Gnu C                  3.2                     # gcc - -version
o  Gnu make               3.79.1                  # make - -version
o  binutils               2.12                    # ld -v
o  util-linux             2.10o                   # fdformat - -version
o  module-init-tools      0.9.10                  # depmod -V
o  e2fsprogs              1.29                    # tune2fs
o  jfsutils               1.1.3                   # fsck.jfs -V
o  reiserfsprogs          3.6.3                   # reiserfsck -V 2>&1|grep reiserfsprogs
o  xfsprogs               2.6.0                   # xfs_db -V
o  pcmciautils            004
o  pcmcia-cs              3.1.21                  # cardmgr -V
o  quota-tools            3.09                    # quota -V
o  PPP                    2.4.0                   # pppd - -version
o  isdn4k-utils           3.1pre1                 # isdnctrl 2>&1|grep version
o  nfs-utils              1.0.5                   # showmount - -version
o  procps                 3.2.0                   # ps - -version
o  oprofile               0.9                     # oprofiled - -version
o  udev                   081                     # udevinfo -V

-->

<sect1>
<title>Tools to build the kernel</title>

<para>
Most Linux distributions offer an installation option to install a
range of <literal>Kernel Hacking</literal> packages.  If your distribution
offers this option, it is easiest to install this instead of
trying to track down all of the individual programs that are needed for
this task.
</para>

<para>
Only three packages that are needed in order to
successfully build a kernel: a compiler, a linker, and a make
utility. This section describes the contents of each package.
</para>

<sect2>
<title>Compiler</title>

<para>
The Linux kernel is written in the C programming language, with a small
amount of assembly language in some places.  To build the kernel, the GCC C compiler must be
used.  Most Linux distributions have a package entitiled
<literal>gcc</literal> that should be installed.  If you wish to download
the compiler and build it yourself, you can find it at
<systemitem role="url">http://gcc.gnu.org</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 3.2 version of GCC is the oldest that can
properly build a working kernel. Be warned that getting
the most recent GCC version is not always a good idea. Some of the newest GCC
releases don't build the kernel properly, so unless you wish to
help debug compiler bugs, it is not recommended that you try them out.
</para>

<para>
To determine which version of <literal>gcc</literal> you have on your system, run the following command:
<screen>
$ <userinput>gcc --version</userinput>
</screen>
</para>

</sect2>

<sect2>
<title>Linker</title>

<para>
The C compiler, <literal>gcc</literal>, does not do all of the compiling on
its own.  It needs an additional set of tools known as
<literal>binutils</literal> to do the linking and assembling of source
files.  The <literal>binutils</literal> package also contains useful
utilities that can manipulate object files in lots of useful ways,
such as to view the contents of a library.
</para>

<para>
<literal>binutils</literal> can usually be found in a distribution package
called (not surprisingly) <literal>binutils</literal>.  If you wish to download
and install the package yourself, you can find it at
<systemitem role="url">http://www.gnu.org/software/binutils</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 2.12 release of
<literal>binutils</literal> is the oldest that can
successfully link the kernel.
To determine which version of <literal>binutils</literal> you have on your system, run the following command:
<screen>
$ <userinput>ld -v</userinput>
</screen>
</para>

</sect2>

<sect2>
<title>Make</title>

<para>
<literal>make</literal> is a tool that walks the kernel source tree to
determine which files need to be compiled, and then calls the compiler and
other build tools to do the work in building the kernel.  The kernel
requires the GNU version of <literal>make</literal>, which can usually be found in a package
called <literal>make</literal> for your distribution.
</para>

<para>
If you wish to download and install <literal>make</literal> youself,
you can find it at
<systemitem role="url">http://www.gnu.org/software/make</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 3.79.1 release of <literal>make</literal> is the oldest that can
properly build the kernel.  It is recommended that you install
the latest stable version of <literal>make</literal>, because newer versions are known
to work faster at processing the build files.
</para>

<para>
To determine which version of <literal>make</literal> you have on your system, run the following command:
<screen>
$ <userinput>make --version</userinput>
</screen>
</para>

</sect2>

</sect1>

<sect1>
<title>Tools to use the kernel</title>

<para>
While the version of the kernel that is  running does not usually affect any user
application, there are a small number of program for which the kernel
version is important.
This section describes a number of tools that are probably
already installed on your Linux system.  If you upgrade your
kernel to a version different from the one that came with your distribution, some
of these packages may also need to be upgraded in order for the system to
work properly.
</para>

<sect2>
<title>util-linux</title>
<para>
The <literal>util-linux</literal> package is a collection of small
utilities that do a wide range of different tasks.  Most of these utilities
handle the mounting and creation of disk partitions and manipulation of the
hardware clock in the system.
<!--

  AO: No need to tell them to look in the package to find out what's
  in the package.

-->

</para>

<para>
If you wish to download and install the <literal>util-linux</literal>
package yourself, you can find it at
<systemitem role="url">http://www.kernel.org/pub/linux/utils/util-linux</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 2.10o release of
<literal>util-linux</literal> is the oldest that works properly .
It is recommended that you install the latest version of this package,
because new version support new features added to the kernel.
Bind mounts are one example of an
option in newer kernels, and a newer version of
<literal>util-linux</literal> is needed in order to have them work
properly.
</para>

<para>
To determine which version of the <literal>util-linux</literal> package you
have on your system, run the following command:
<screen>
$ <userinput>fdformat --version</userinput>
</screen>
</para>
</sect2>

<sect2>
<title><literal>module-init-tools</literal></title>

<para>
The <literal>module-init-tools</literal> package is needed if you wish to
use Linux kernel modules.  A kernel module is a loadable chunk of code that
can be added to or removed from the kernel while the kernel is running.  It
is useful to compile device drivers as modules and then load only the
ones that correspond to the hardware present in the system.  All Linux distributions
use modules in order to load only the needed drivers and options for the
system based on the hardware present, instead of being forced to build all
possible drivers and options in the kernel in one large chunk.  By
using modules, memory is saved by loading just the code that is needed to
control the machine properly.
</para>

<para>
The kernel module loading process underwent a radical change in the 2.6
kernel release.  The linker for the module
(the code that resolves all symbols and figures out how to put the pieces
together in memory) is now built into the kernel, which makes the userspace
tools quite small.  Older distributions have a package called
<literal>modutils</literal> that does not work properly with the 2.6
kernel.  The <literal>module-init-tools</literal> package is what you need
to get the 2.6 kernel to work properly with modules.
</para>

<para>
If you wish to download and install the <literal>module-init-tools</literal>
package yourself, you can find it at
<systemitem role="url">http://www.kernel.org/pub/linux/utils/kernel/module-init-tools</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 0.9.10
release of
<literal>module-init-tools</literal> is the oldest version that works properly .  It is recommended that the latest version of this package be
installed, as new features added to the kernel can be used
by newer versions of this package.  Blacklisting modules to prevent them
from being automatically loaded by the <literal>udev</literal> package is
one such option that is present in newer versions of
<literal>module-init-tools</literal>, but not older ones.
</para>

<para>
To determine which version of the <literal>module-init-tools</literal>
package you have on your system, run the following command:
<screen>
$ <userinput>depmod -V</userinput>
</screen>
</para>
</sect2>

<sect2>
<title>Filesystem-specific tools</title>

<para>
A wide range of tools specific to particular  filesystems are necessary to
create, format, configure, and fix disk partitions. The
<literal>util-linux</literal> package has a few of these utilities, but
some of the more popular filesystems have separate packages that contain the
necessary programs.
</para>

<sect3>
<title>ext2/ext3/ext4</title>

<para>
The <literal>ext3</literal> and experimental <literal>ext4</literal>
filesystems are upgrades of <literal>ext2</literal> and can be
managed with the same tools; any recent version of an
<literal>ext2</literal>-based tool can work with the other two
filesystems as well.
</para>

<para>
To work with any of these filesystems, you must have the
<literal>e2fsprogs</literal> package.
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://e2fsprogs.sourceforge.net</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the
1.29 release of
<literal>e2fsprogs</literal> is the oldest that works properly with the kernel. It is highly recommended that you use the newest version
in order to take advantage of newer features in the <literal>ext3</literal> and <literal>ext4</literal>
filesystems.
</para>

<para>
To determine which version of <literal>e2fsprogs</literal> you have
on your system, run the following command:
<screen>
$ <userinput>tune2fs</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>JFS</title>
<para>
To use the JFS filesystem from IBM, you must have the <literal>jfsutils</literal> pacakge.
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://jfs.sourceforge.net</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 1.1.3 release of
<literal>jfsutils</literal> is the oldest that works properly with the kernel.
To determine which version of <literal>jfsutils</literal> you have
on your system, run the following command:
<screen>
$ <userinput>fsck.jfs -V</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>ReiserFS</title>
<para>
To use the ReiserFS filesystem, you must have the <literal>reiserfsprogs</literal> package.
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://www.namesys.com/download.html</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 3.6.3 release of
<literal>reiserfsprogs</literal> is the oldest that works properly with the kernel.
To determine which version of <literal>reiserfsprogs</literal> you have
on your system, run the following command:
<screen>
$ <userinput>reiserfsck -V</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>XFS</title>

<para>
To use the XFS filesystem from SGI, you must have the
<literal>xfsprogs</literal> package.
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://oss.sgi.com/projects/xfs</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 2.6.0 release of
<literal>xfsprogs</literal> is the oldest that works properly with the kernel.
To determine which version of <literal>xfsprogs</literal> you have
on your system, run the following command:
<screen>
$ <userinput>xfs_db -V</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>Quotas</title>
<para>
To use the quota functionality of the kernel, you must have the
<literal>quota-tools</literal> package.
<footnote>
<para>
Some distributions, notably Debian, call this package <literal>quota</literal>
instead of <literal>quota-tools</literal>.
</para>
</footnote>
This package includes programs that let you set quotas on users, provide
statistics on the amount of quota being used by different users, and issue
warnings when people get too close to using up their available filesystem
quota.
</para>

<para>
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://sourceforge.net/projects/linuxquota</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 3.09 release of
<literal>quota-tools</literal> is the oldest that works properly with the kernel.
To determine which version of <literal>quota-tools</literal> you have
on your system, run the following command:
<screen>
$ <userinput>quota -V</userinput>
</screen>
</para>

</sect3>

<sect3>
<title>NFS</title>
<para>
To use the NFS filesystem properly, you must have the
<literal>nfs-utils</literal> package.
<footnote>
<para>
Some distributions, notably  Debian, call this package
<literal>nfs-common</literal> instead of <literal>nfs-utils</literal>.
</para>
</footnote>
This package includes programs that let you mount NFS partitions as a
client, and run an NFS server.
</para>

<para>
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://nfs.sf.net</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 1.0.5 release of
<literal>nfs-utils</literal> is the oldest that works properly with the kernel
To determine which version of <literal>nfs-utils</literal> you have
on your system, run the following command:
<screen>
$ <userinput>showmount --version</userinput>
</screen>
</para>
</sect3>

</sect2>

<sect2>
<title>Other tools</title>

<para>
There are a few other important programs that are closely tied to the
kernel version.  These programs are not usually required in order for the
kernel to work properly, but they enable access to different types of
hardware and functions.
</para>

<sect3>
<title><literal>udev</literal></title>

<para>
<literal>udev</literal> is a program that enables Linux to provide a
persistent device naming system in the <filename>/dev</filename> directory.
It also provides a dynamic <filename>/dev</filename>, much like the
one provided by the older
(and now removed) <literal>devfs</literal> filesystem.
Almost all Linux distributions use <literal>udev</literal> to manage the
<filename>/dev</filename> directory, so it is required in order to properly
boot the machine.
</para>

<para>
Unfortunately, <literal>udev</literal> relies on the structure of
<filename>/sys</filename>, which has been known to change from time to time
with kernel releases.  Some of these changes in the past have been known to
break <literal>udev</literal>, so that your machine will not boot properly.
If you have the latest version of <literal>udev</literal> recommended
by your kernel kernel, and have problems with it working properly, please
contact the <literal>udev</literal> developers on the mailing list
available at
<!--

  AO: I think role="email" works, but I'm not sure.

-->
<systemitem role="email">linux-hotplug-devel@lists.sourceforge.net</systemitem>.
</para>

<para>
It is highly recommended that you use the version of
<literal>udev</literal> that comes with your Linux distribution, as it is
tied into the distribution specific boot process very tightly.  But if you
wish to upgrade <literal>udev</literal> on your own, you can find it at
<systemitem role="url">http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 081 release of
<literal>udev</literal> is the oldest that works properly with the kernel.
It is recommended that you use the latest version of
<literal>udev</literal>, because
it will work better with newer kernels, due to changes
in how <literal>udev</literal> and the kernel communicate.
</para>

<para>
To determine which version of <literal>udev</literal> you have
on your system, run the following command:
<screen>
$ <userinput>udevinfo -V</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>Process tools</title>

<para>
The package <literal>procps</literal> includes the commonly used tools
<literal>ps</literal> and <literal>top</literal>, as well as many other
handy tools for managing and monitoring processes running on the system.
</para>

<para>
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">http://procps.sourceforge.net</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 3.2.0 release of
<literal>procps</literal> is the oldest that works properly with the kernel.
To determine which version of <literal>procps</literal> you have
on your system, run the following command:
<screen>
$ <userinput>ps --version</userinput>
</screen>
</para>
</sect3>

<sect3>
<title>PCMCIA tools</title>

<para>
In order to properly use PCMCIA devices with Linux, a userspace helper
program must be used to set up the devices.  For older kernel versions,
this program was called <literal>pcmcia-cs</literal>, but that has been
replaced with a much simpler system called <literal>pcmciautils</literal>.
If you wish to use PCMCIA devices, you must have this package installed for
them to work properly.
</para>

<para>
If you wish to download and install this package yourself, you can find it at
<systemitem role="url">ftp://ftp.kernel.org/pub/linux/utils/kernel/pcmcia</systemitem>.
</para>

<para>
As of the 2.6.18 kernel release, the 004 release of
<literal>pcmciautils</literal> is the oldest that works properly with the kernel.  But the latest version is recommended in
order to take advantage of newer features in the PCMCIA subsystem, such as
automatic driver loading when new devices are found.
</para>

<para>
To determine which version of <literal>pcmciautils</literal> you have
on your system, run the following command:
<screen>
$ <userinput>pccardctl -V</userinput>
</screen>
</para>
</sect3>

<!-- gkh: Include the other tools not mentioned:
		PPP
		isdn4k-utils
		oprofile
	  ???
	  Personally, I think we have enough, and have hit the common
	  things that most people would need to care about.

  AO: The only tool I've heard of in the list above is PPP. It is
  certainly still useful, but it could be considered a separate
  application.

-->
</sect2>

</sect1>



</chapter>

<!-- vim: set ai tw=80 : -->
